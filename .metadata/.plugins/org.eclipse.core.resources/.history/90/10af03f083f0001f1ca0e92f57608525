
App_025_Example_8.1_Rewrite_UART2_Print_Text_Use_Semaphore_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008828  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080089b8  080089b8  000099b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf8  08008bf8  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf8  08008bf8  00009bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c00  08008c00  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c00  08008c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c04  08008c04  00009c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008c08  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          00019a20  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019a90  20019a90  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019183  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003666  00000000  00000000  00023223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  00026890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a5  00000000  00000000  00027f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260aa  00000000  00000000  00029105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b177  00000000  00000000  0004f1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edccf  00000000  00000000  0006a326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157ff5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006880  00000000  00000000  00158038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000dc  00000000  00000000  0015e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089a0 	.word	0x080089a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080089a0 	.word	0x080089a0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ecc 	.word	0x20012ecc
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fbd5 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f841 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8d3 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8a7 	bl	8000764 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <main+0x74>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <main+0x74>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000622:	f005 fbab 	bl	8005d7c <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 8000626:	f006 fa3f 	bl	8006aa8 <SEGGER_SYSVIEW_Start>

  /* Before a mutex (semaphore) is used, it must be explicitly created.
     In this example a mutex type semaphore is created */
  xMutex = xSemaphoreCreateMutex();
 800062a:	2001      	movs	r0, #1
 800062c:	f002 fbff 	bl	8002e2e <xQueueCreateMutex>
 8000630:	4603      	mov	r3, r0
 8000632:	4a11      	ldr	r2, [pc, #68]	@ (8000678 <main+0x78>)
 8000634:	6013      	str	r3, [r2, #0]

  /* check the semaphore was created successfully before creating the tasks */
  if ( xMutex != NULL )
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <main+0x78>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d018      	beq.n	8000670 <main+0x70>
  {
    /* Create two instances of the tasks that write from UART2.
       The string they write to is passed into the task as the task's parameter.
       The tasks are created at different priorities so some pre-emption will occur */
    xTaskCreate( prvPrintTask, "Print1", 1000, "Task 1 *************************\n\r", 1, NULL );
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <main+0x7c>)
 8000648:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800064c:	490c      	ldr	r1, [pc, #48]	@ (8000680 <main+0x80>)
 800064e:	480d      	ldr	r0, [pc, #52]	@ (8000684 <main+0x84>)
 8000650:	f003 f901 	bl	8003856 <xTaskCreate>
    xTaskCreate( prvPrintTask, "Print2", 1000, "Task 2 -------------------------\n\r", 2, NULL );
 8000654:	2300      	movs	r3, #0
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2302      	movs	r3, #2
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <main+0x88>)
 800065e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000662:	490a      	ldr	r1, [pc, #40]	@ (800068c <main+0x8c>)
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <main+0x84>)
 8000666:	f003 f8f6 	bl	8003856 <xTaskCreate>

    /* start the scheduler so the created tasks start executing */
    vTaskStartScheduler();
 800066a:	f003 fae5 	bl	8003c38 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0x70>
 8000674:	e0001000 	.word	0xe0001000
 8000678:	200000d4 	.word	0x200000d4
 800067c:	080089b8 	.word	0x080089b8
 8000680:	080089dc 	.word	0x080089dc
 8000684:	08000945 	.word	0x08000945
 8000688:	080089e4 	.word	0x080089e4
 800068c:	08008a08 	.word	0x08008a08

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	@ 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 fae7 	bl	8007c72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	@ (800075c <SystemClock_Config+0xcc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <SystemClock_Config+0xd0>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000704:	2332      	movs	r3, #50	@ 0x32
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000708:	2304      	movs	r3, #4
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800070c:	2307      	movs	r3, #7
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fe4b 	bl	80013b0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 f940 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f8ac 	bl	80018a0 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074e:	f000 f929 	bl	80009a4 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f001 fd74 	bl	8002288 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f8fd 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b40      	ldr	r3, [pc, #256]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a3f      	ldr	r2, [pc, #252]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b39      	ldr	r3, [pc, #228]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a38      	ldr	r2, [pc, #224]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b36      	ldr	r3, [pc, #216]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b32      	ldr	r3, [pc, #200]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a31      	ldr	r2, [pc, #196]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a2a      	ldr	r2, [pc, #168]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b28      	ldr	r3, [pc, #160]	@ (80008d4 <MX_GPIO_Init+0x11c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000844:	4824      	ldr	r0, [pc, #144]	@ (80008d8 <MX_GPIO_Init+0x120>)
 8000846:	f000 fd75 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	481f      	ldr	r0, [pc, #124]	@ (80008dc <MX_GPIO_Init+0x124>)
 8000860:	f000 fbcc 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000864:	2304      	movs	r3, #4
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	481a      	ldr	r0, [pc, #104]	@ (80008e0 <MX_GPIO_Init+0x128>)
 8000878:	f000 fbc0 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800087c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <MX_GPIO_Init+0x120>)
 8000896:	f000 fbb1 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008aa:	2306      	movs	r3, #6
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <MX_GPIO_Init+0x12c>)
 80008b6:	f000 fba1 	bl	8000ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2106      	movs	r1, #6
 80008be:	2006      	movs	r0, #6
 80008c0:	f000 fb72 	bl	8000fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008c4:	2006      	movs	r0, #6
 80008c6:	f000 fb8b 	bl	8000fe0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	@ 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40020800 	.word	0x40020800

080008e8 <New_UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void New_UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
     If any other delay period was used then the code must check that xSemaphoreTake()
     returns pdTRUE before accessing the shared resource (which in this case is UART2).
     
     As noted earlier in the book, indefinite timeouts are not recommended for
     production code */
  xSemaphoreTake( xMutex, portMAX_DELAY );
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <New_UART2_Print_Text+0x58>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f04f 31ff 	mov.w	r1, #4294967295
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fcb4 	bl	8003268 <xQueueSemaphoreTake>
  {
    /* The following lines will only execute once the mutex has been successfully obtained.
       UART2 can be accessed freely now as only one task can have the mutex at any time. */

    /* loop through the string until null character found */
    for ( character = 0; text[ character ] != '\0'; character++ )
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e00b      	b.n	800091e <New_UART2_Print_Text+0x36>
    {
      /* transmit current character over UART */
      HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	18d1      	adds	r1, r2, r3
 800090c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000910:	2201      	movs	r2, #1
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f001 fd08 	bl	8002328 <HAL_UART_Transmit>
    for ( character = 0; text[ character ] != '\0'; character++ )
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	3301      	adds	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1ed      	bne.n	8000906 <New_UART2_Print_Text+0x1e>
    }

    /* the mutex MUST be given back! */
  }
  xSemaphoreGive( xMutex );
 800092a:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <New_UART2_Print_Text+0x58>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	f002 fa9c 	bl	8002e70 <xQueueGenericSend>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000d4 	.word	0x200000d4

08000944 <prvPrintTask>:

static void prvPrintTask( void *pvParameters )
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  char *pcStringToPrint;
  const TickType_t xMaxBlockTimeTicks = 0x20;
 800094c:	2320      	movs	r3, #32
 800094e:	60fb      	str	r3, [r7, #12]

  /* Two instances of this task are created.
     The string printed by the task is passed into the task using the task's parameter.
     The parameter is cast to the required type */
  pcStringToPrint = ( char * ) pvParameters;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	60bb      	str	r3, [r7, #8]

  for ( ;; )
  {
    /* print out the string using the newly defined function */
    New_UART2_Print_Text( &huart2, pcStringToPrint );
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	4809      	ldr	r0, [pc, #36]	@ (800097c <prvPrintTask+0x38>)
 8000958:	f7ff ffc6 	bl	80008e8 <New_UART2_Print_Text>
    /* Wait a pseudo random time (0 to 0x1F ticks).
       Note that rand() is not necessarily reentrant, but in this case it does not really
       matter as the code does not care what value is returned.
       In a more secure application, a version of rand() that is known to be reentrant
       should be used - or calls to rand() should be protected using a critical section */
    vTaskDelay( rand() % xMaxBlockTimeTicks );
 800095c:	f007 f836 	bl	80079cc <rand>
 8000960:	4603      	mov	r3, r0
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	fbb3 f2f2 	udiv	r2, r3, r2
 8000968:	68f9      	ldr	r1, [r7, #12]
 800096a:	fb01 f202 	mul.w	r2, r1, r2
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f003 f8df 	bl	8003b34 <vTaskDelay>
    New_UART2_Print_Text( &huart2, pcStringToPrint );
 8000976:	bf00      	nop
 8000978:	e7ec      	b.n	8000954 <prvPrintTask+0x10>
 800097a:	bf00      	nop
 800097c:	2000008c 	.word	0x2000008c

08000980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000992:	f000 fa31 	bl	8000df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40001000 	.word	0x40001000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 facf 	bl	8000f92 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <HAL_UART_MspInit+0x84>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12b      	bne.n	8000a7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <HAL_UART_MspInit+0x8c>)
 8000a76:	f000 fac1 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	4a32      	ldr	r2, [pc, #200]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000abc:	f107 0210 	add.w	r2, r7, #16
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f90a 	bl	8001ce0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d103      	bne.n	8000ade <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad6:	f001 f8db 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8000ada:	6378      	str	r0, [r7, #52]	@ 0x34
 8000adc:	e004      	b.n	8000ae8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ade:	f001 f8d7 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aea:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <HAL_InitTick+0xe8>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	0c9b      	lsrs	r3, r3, #18
 8000af2:	3b01      	subs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <HAL_InitTick+0xec>)
 8000af8:	4a21      	ldr	r2, [pc, #132]	@ (8000b80 <HAL_InitTick+0xf0>)
 8000afa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_InitTick+0xec>)
 8000afe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b04:	4a1d      	ldr	r2, [pc, #116]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b1c:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b1e:	f001 f911 	bl	8001d44 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d11b      	bne.n	8000b68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b30:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b32:	f001 f961 	bl	8001df8 <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d111      	bne.n	8000b68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b44:	2036      	movs	r0, #54	@ 0x36
 8000b46:	f000 fa4b 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d808      	bhi.n	8000b62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2036      	movs	r0, #54	@ 0x36
 8000b56:	f000 fa27 	bl	8000fa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_InitTick+0xf4>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e002      	b.n	8000b68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3738      	adds	r7, #56	@ 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	200000d8 	.word	0x200000d8
 8000b80:	40001000 	.word	0x40001000
 8000b84:	20000004 	.word	0x20000004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 fbd0 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* callback added manually here since the EXTI0
     interrupt is generated by SW. Otherwise the
     callback won't be called because the GPIO_PIN_0's
     state evaluates to RESET */
  HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 fbe5 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <TIM6_DAC_IRQHandler+0x10>)
 8000bda:	f001 f97d 	bl	8001ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000d8 	.word	0x200000d8

08000be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return 1;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_kill>:

int _kill(int pid, int sig)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c02:	f007 f873 	bl	8007cec <__errno>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2216      	movs	r2, #22
 8000c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_exit>:

void _exit (int status)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffe7 	bl	8000bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c2a:	bf00      	nop
 8000c2c:	e7fd      	b.n	8000c2a <_exit+0x12>

08000c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e00a      	b.n	8000c56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c40:	f3af 8000 	nop.w
 8000c44:	4601      	mov	r1, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	60ba      	str	r2, [r7, #8]
 8000c4c:	b2ca      	uxtb	r2, r1
 8000c4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	dbf0      	blt.n	8000c40 <_read+0x12>
  }

  return len;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c90:	605a      	str	r2, [r3, #4]
  return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_isatty>:

int _isatty(int file)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca8:	2301      	movs	r3, #1
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f006 fff4 	bl	8007cec <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20020000 	.word	0x20020000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000120 	.word	0x20000120
 8000d38:	20019a90 	.word	0x20019a90

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f006 ffb3 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fc35 	bl	8000600 <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da4:	08008c08 	.word	0x08008c08
  ldr r2, =_sbss
 8000da8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dac:	20019a90 	.word	0x20019a90

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f8d8 	bl	8000f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fe54 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fde2 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000124 	.word	0x20000124

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000124 	.word	0x20000124

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	@ (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff4c 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fba:	f7ff ff61 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	6978      	ldr	r0, [r7, #20]
 8000fc6:	f7ff ffb1 	bl	8000f2c <NVIC_EncodePriority>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff80 	bl	8000ed8 <__NVIC_SetPriority>
}
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff54 	bl	8000e9c <__NVIC_EnableIRQ>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b60      	ldr	r3, [pc, #384]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a5f      	ldr	r2, [pc, #380]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b5d      	ldr	r3, [pc, #372]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5b      	ldr	r2, [pc, #364]	@ (800130c <HAL_GPIO_Init+0x310>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	@ (8001310 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	@ (8001314 <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	@ (8001318 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_GPIO_Init+0x324>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x328>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x32c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <HAL_GPIO_Init+0x330>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4935      	ldr	r1, [pc, #212]	@ (800130c <HAL_GPIO_Init+0x310>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001266:	4a32      	ldr	r2, [pc, #200]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126c:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <HAL_GPIO_Init+0x334>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001290:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e4:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f806 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e267      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d075      	beq.n	80014ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	4b88      	ldr	r3, [pc, #544]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d00c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b85      	ldr	r3, [pc, #532]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d112      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4b82      	ldr	r3, [pc, #520]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f2:	d10b      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	4b7e      	ldr	r3, [pc, #504]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05b      	beq.n	80014b8 <HAL_RCC_OscConfig+0x108>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d157      	bne.n	80014b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e242      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x74>
 8001416:	4b76      	ldr	r3, [pc, #472]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a75      	ldr	r2, [pc, #468]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b70      	ldr	r3, [pc, #448]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6f      	ldr	r2, [pc, #444]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b6d      	ldr	r3, [pc, #436]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6c      	ldr	r2, [pc, #432]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001448:	4b69      	ldr	r3, [pc, #420]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a68      	ldr	r2, [pc, #416]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b66      	ldr	r3, [pc, #408]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a65      	ldr	r2, [pc, #404]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fcda 	bl	8000e20 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fcd6 	bl	8000e20 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e207      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b5b      	ldr	r3, [pc, #364]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xc0>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fcc6 	bl	8000e20 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcc2 	bl	8000e20 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	@ 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1f3      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b51      	ldr	r3, [pc, #324]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0xe8>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d063      	beq.n	800158e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	4b4a      	ldr	r3, [pc, #296]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b47      	ldr	r3, [pc, #284]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1c7      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4937      	ldr	r1, [pc, #220]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e03a      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fc7b 	bl	8000e20 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fc77 	bl	8000e20 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1a8      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4925      	ldr	r1, [pc, #148]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fc5a 	bl	8000e20 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fc56 	bl	8000e20 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e187      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d036      	beq.n	8001608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d016      	beq.n	80015d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fc3a 	bl	8000e20 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc36 	bl	8000e20 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e167      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x200>
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fc23 	bl	8000e20 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	e00e      	b.n	80015fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fc1f 	bl	8000e20 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d907      	bls.n	80015fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e150      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	42470000 	.word	0x42470000
 80015f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b88      	ldr	r3, [pc, #544]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ea      	bne.n	80015de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8097 	beq.w	8001744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b81      	ldr	r3, [pc, #516]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b7d      	ldr	r3, [pc, #500]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	4a7c      	ldr	r2, [pc, #496]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	@ 0x40
 8001636:	4b7a      	ldr	r3, [pc, #488]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b77      	ldr	r3, [pc, #476]	@ (8001824 <HAL_RCC_OscConfig+0x474>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b74      	ldr	r3, [pc, #464]	@ (8001824 <HAL_RCC_OscConfig+0x474>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a73      	ldr	r2, [pc, #460]	@ (8001824 <HAL_RCC_OscConfig+0x474>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fbdf 	bl	8000e20 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fbdb 	bl	8000e20 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e10c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b6a      	ldr	r3, [pc, #424]	@ (8001824 <HAL_RCC_OscConfig+0x474>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x2ea>
 800168c:	4b64      	ldr	r3, [pc, #400]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001690:	4a63      	ldr	r2, [pc, #396]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	@ 0x70
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x30c>
 80016a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 80016bc:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c0:	4a57      	ldr	r2, [pc, #348]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c8:	4b55      	ldr	r3, [pc, #340]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016cc:	4a54      	ldr	r2, [pc, #336]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d015      	beq.n	8001708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fba0 	bl	8000e20 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb9c 	bl	8000e20 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0cb      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	4b49      	ldr	r3, [pc, #292]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0ee      	beq.n	80016e4 <HAL_RCC_OscConfig+0x334>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff fb8a 	bl	8000e20 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fb86 	bl	8000e20 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0b5      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001726:	4b3e      	ldr	r3, [pc, #248]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ee      	bne.n	8001710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	4a38      	ldr	r2, [pc, #224]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a1 	beq.w	8001890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	d05c      	beq.n	8001814 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d141      	bne.n	80017e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <HAL_RCC_OscConfig+0x478>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fb5a 	bl	8000e20 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fb56 	bl	8000e20 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e087      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	491b      	ldr	r1, [pc, #108]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_RCC_OscConfig+0x478>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fb2f 	bl	8000e20 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fb2b 	bl	8000e20 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e05c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x416>
 80017e4:	e054      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb18 	bl	8000e20 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb14 	bl	8000e20 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e038      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000
 8001828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x4ec>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d028      	beq.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d121      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11a      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800185c:	4013      	ands	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001864:	4293      	cmp	r3, r2
 8001866:	d111      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	3b01      	subs	r3, #1
 8001876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0cc      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b68      	ldr	r3, [pc, #416]	@ (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d90c      	bls.n	80018dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b65      	ldr	r3, [pc, #404]	@ (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b59      	ldr	r3, [pc, #356]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4b53      	ldr	r3, [pc, #332]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a52      	ldr	r2, [pc, #328]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b50      	ldr	r3, [pc, #320]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	494d      	ldr	r1, [pc, #308]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d044      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d119      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	2b03      	cmp	r3, #3
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e067      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4934      	ldr	r1, [pc, #208]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff fa46 	bl	8000e20 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff fa42 	bl	8000e20 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e04f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d20c      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4916      	ldr	r1, [pc, #88]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490e      	ldr	r1, [pc, #56]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	490a      	ldr	r1, [pc, #40]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f822 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08008ad8 	.word	0x08008ad8
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a70:	b094      	sub	sp, #80	@ 0x50
 8001a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a84:	4b79      	ldr	r3, [pc, #484]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d00d      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	f200 80e1 	bhi.w	8001c58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9e:	e0db      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b73      	ldr	r3, [pc, #460]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001aa4:	e0db      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa6:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aaa:	e0d8      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aac:	4b6f      	ldr	r3, [pc, #444]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001acc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ada:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ade:	4622      	mov	r2, r4
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0159      	lsls	r1, r3, #5
 8001aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af0:	0150      	lsls	r0, r2, #5
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4621      	mov	r1, r4
 8001af8:	1a51      	subs	r1, r2, r1
 8001afa:	6139      	str	r1, [r7, #16]
 8001afc:	4629      	mov	r1, r5
 8001afe:	eb63 0301 	sbc.w	r3, r3, r1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b10:	4659      	mov	r1, fp
 8001b12:	018b      	lsls	r3, r1, #6
 8001b14:	4651      	mov	r1, sl
 8001b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	018a      	lsls	r2, r1, #6
 8001b1e:	4651      	mov	r1, sl
 8001b20:	ebb2 0801 	subs.w	r8, r2, r1
 8001b24:	4659      	mov	r1, fp
 8001b26:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3e:	4690      	mov	r8, r2
 8001b40:	4699      	mov	r9, r3
 8001b42:	4623      	mov	r3, r4
 8001b44:	eb18 0303 	adds.w	r3, r8, r3
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	eb49 0303 	adc.w	r3, r9, r3
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	024b      	lsls	r3, r1, #9
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b68:	4621      	mov	r1, r4
 8001b6a:	024a      	lsls	r2, r1, #9
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b72:	2200      	movs	r2, #0
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b7c:	f7fe fbc8 	bl	8000310 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b88:	e058      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b38      	ldr	r3, [pc, #224]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	4611      	mov	r1, r2
 8001b96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba4:	4642      	mov	r2, r8
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	0159      	lsls	r1, r3, #5
 8001bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb6:	0150      	lsls	r0, r2, #5
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bdc:	ebb2 040a 	subs.w	r4, r2, sl
 8001be0:	eb63 050b 	sbc.w	r5, r3, fp
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	00eb      	lsls	r3, r5, #3
 8001bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf2:	00e2      	lsls	r2, r4, #3
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	18e3      	adds	r3, r4, r3
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	464b      	mov	r3, r9
 8001c00:	eb45 0303 	adc.w	r3, r5, r3
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c12:	4629      	mov	r1, r5
 8001c14:	028b      	lsls	r3, r1, #10
 8001c16:	4621      	mov	r1, r4
 8001c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	028a      	lsls	r2, r1, #10
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c26:	2200      	movs	r2, #0
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	61fa      	str	r2, [r7, #28]
 8001c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c30:	f7fe fb6e 	bl	8000310 <__aeabi_uldivmod>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3750      	adds	r7, #80	@ 0x50
 8001c64:	46bd      	mov	sp, r7
 8001c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	007a1200 	.word	0x007a1200

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	@ (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08008ae8 	.word	0x08008ae8

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	f7ff ffdc 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	@ (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	08008ae8 	.word	0x08008ae8

08001ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	220f      	movs	r2, #15
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <HAL_RCC_GetClockConfig+0x60>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0207 	and.w	r2, r3, #7
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e041      	b.n	8001dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f839 	bl	8001de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 f9c0 	bl	8002108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e04e      	b.n	8001eae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d022      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3a:	d01d      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d111      	bne.n	8001e9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d010      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9a:	e007      	b.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000800 	.word	0x40000800
 8001ec8:	40000c00 	.word	0x40000c00
 8001ecc:	40010400 	.word	0x40010400
 8001ed0:	40014000 	.word	0x40014000
 8001ed4:	40001800 	.word	0x40001800

08001ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0202 	mvn.w	r2, #2
 8001f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8d2 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8c4 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8d5 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0204 	mvn.w	r2, #4
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8ac 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f89e 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8af 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0208 	mvn.w	r2, #8
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f886 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f878 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f889 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0210 	mvn.w	r2, #16
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f860 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f852 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f863 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0201 	mvn.w	r2, #1
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fc9e 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f906 	bl	8002274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f834 	bl	80020f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0220 	mvn.w	r2, #32
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8d8 	bl	8002260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <TIM_Base_SetConfig+0x12c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d013      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002126:	d00f      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a43      	ldr	r2, [pc, #268]	@ (8002238 <TIM_Base_SetConfig+0x130>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00b      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a42      	ldr	r2, [pc, #264]	@ (800223c <TIM_Base_SetConfig+0x134>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a41      	ldr	r2, [pc, #260]	@ (8002240 <TIM_Base_SetConfig+0x138>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <TIM_Base_SetConfig+0x13c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d108      	bne.n	800215a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800214e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a35      	ldr	r2, [pc, #212]	@ (8002234 <TIM_Base_SetConfig+0x12c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002168:	d027      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a32      	ldr	r2, [pc, #200]	@ (8002238 <TIM_Base_SetConfig+0x130>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d023      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a31      	ldr	r2, [pc, #196]	@ (800223c <TIM_Base_SetConfig+0x134>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a30      	ldr	r2, [pc, #192]	@ (8002240 <TIM_Base_SetConfig+0x138>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2f      	ldr	r2, [pc, #188]	@ (8002244 <TIM_Base_SetConfig+0x13c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d017      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <TIM_Base_SetConfig+0x140>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2d      	ldr	r2, [pc, #180]	@ (800224c <TIM_Base_SetConfig+0x144>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00f      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2c      	ldr	r2, [pc, #176]	@ (8002250 <TIM_Base_SetConfig+0x148>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002254 <TIM_Base_SetConfig+0x14c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002258 <TIM_Base_SetConfig+0x150>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d003      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a29      	ldr	r2, [pc, #164]	@ (800225c <TIM_Base_SetConfig+0x154>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a10      	ldr	r2, [pc, #64]	@ (8002234 <TIM_Base_SetConfig+0x12c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0xf8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a12      	ldr	r2, [pc, #72]	@ (8002244 <TIM_Base_SetConfig+0x13c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d103      	bne.n	8002208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f023 0201 	bic.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	611a      	str	r2, [r3, #16]
  }
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40010000 	.word	0x40010000
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
 8002244:	40010400 	.word	0x40010400
 8002248:	40014000 	.word	0x40014000
 800224c:	40014400 	.word	0x40014400
 8002250:	40014800 	.word	0x40014800
 8002254:	40001800 	.word	0x40001800
 8002258:	40001c00 	.word	0x40001c00
 800225c:	40002000 	.word	0x40002000

08002260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e042      	b.n	8002320 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fba6 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	@ 0x24
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f973 	bl	80025b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b20      	cmp	r3, #32
 8002346:	d175      	bne.n	8002434 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_UART_Transmit+0x2c>
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e06e      	b.n	8002436 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2221      	movs	r2, #33	@ 0x21
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002366:	f7fe fd5b 	bl	8000e20 <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002380:	d108      	bne.n	8002394 <HAL_UART_Transmit+0x6c>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e003      	b.n	800239c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800239c:	e02e      	b.n	80023fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2180      	movs	r1, #128	@ 0x80
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f848 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e03a      	b.n	8002436 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3302      	adds	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e007      	b.n	80023ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1cb      	bne.n	800239e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2200      	movs	r2, #0
 800240e:	2140      	movs	r1, #64	@ 0x40
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f814 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e006      	b.n	8002436 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244e:	e03b      	b.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d037      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe fce2 	bl	8000e20 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	6a3a      	ldr	r2, [r7, #32]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <UART_WaitOnFlagUntilTimeout+0x30>
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e03a      	b.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d023      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b80      	cmp	r3, #128	@ 0x80
 8002484:	d020      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b40      	cmp	r3, #64	@ 0x40
 800248a:	d01d      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b08      	cmp	r3, #8
 8002498:	d116      	bne.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f81d 	bl	80024f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2208      	movs	r2, #8
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e00f      	b.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d0b4      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b095      	sub	sp, #84	@ 0x54
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	330c      	adds	r3, #12
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002502:	e853 3f00 	ldrex	r3, [r3]
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800250e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002518:	643a      	str	r2, [r7, #64]	@ 0x40
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800251e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002520:	e841 2300 	strex	r3, r2, [r1]
 8002524:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e5      	bne.n	80024f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3314      	adds	r3, #20
 8002532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	e853 3f00 	ldrex	r3, [r3]
 800253a:	61fb      	str	r3, [r7, #28]
   return(result);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3314      	adds	r3, #20
 800254a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800254c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002554:	e841 2300 	strex	r3, r2, [r1]
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e5      	bne.n	800252c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	2b01      	cmp	r3, #1
 8002566:	d119      	bne.n	800259c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	60bb      	str	r3, [r7, #8]
   return(result);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002588:	61ba      	str	r2, [r7, #24]
 800258a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	6979      	ldr	r1, [r7, #20]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	e841 2300 	strex	r3, r2, [r1]
 8002594:	613b      	str	r3, [r7, #16]
   return(result);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e5      	bne.n	8002568 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025aa:	bf00      	nop
 80025ac:	3754      	adds	r7, #84	@ 0x54
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b0c0      	sub	sp, #256	@ 0x100
 80025be:	af00      	add	r7, sp, #0
 80025c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d4:	68d9      	ldr	r1, [r3, #12]
 80025d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	ea40 0301 	orr.w	r3, r0, r1
 80025e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002610:	f021 010c 	bic.w	r1, r1, #12
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002632:	6999      	ldr	r1, [r3, #24]
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	ea40 0301 	orr.w	r3, r0, r1
 800263e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b8f      	ldr	r3, [pc, #572]	@ (8002884 <UART_SetConfig+0x2cc>)
 8002648:	429a      	cmp	r2, r3
 800264a:	d005      	beq.n	8002658 <UART_SetConfig+0xa0>
 800264c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b8d      	ldr	r3, [pc, #564]	@ (8002888 <UART_SetConfig+0x2d0>)
 8002654:	429a      	cmp	r2, r3
 8002656:	d104      	bne.n	8002662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002658:	f7ff fb2e 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 800265c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002660:	e003      	b.n	800266a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002662:	f7ff fb15 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8002666:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002674:	f040 810c 	bne.w	8002890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002682:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800268a:	4622      	mov	r2, r4
 800268c:	462b      	mov	r3, r5
 800268e:	1891      	adds	r1, r2, r2
 8002690:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002692:	415b      	adcs	r3, r3
 8002694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800269a:	4621      	mov	r1, r4
 800269c:	eb12 0801 	adds.w	r8, r2, r1
 80026a0:	4629      	mov	r1, r5
 80026a2:	eb43 0901 	adc.w	r9, r3, r1
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ba:	4690      	mov	r8, r2
 80026bc:	4699      	mov	r9, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	eb18 0303 	adds.w	r3, r8, r3
 80026c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026c8:	462b      	mov	r3, r5
 80026ca:	eb49 0303 	adc.w	r3, r9, r3
 80026ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026e6:	460b      	mov	r3, r1
 80026e8:	18db      	adds	r3, r3, r3
 80026ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ec:	4613      	mov	r3, r2
 80026ee:	eb42 0303 	adc.w	r3, r2, r3
 80026f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026fc:	f7fd fe08 	bl	8000310 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4b61      	ldr	r3, [pc, #388]	@ (800288c <UART_SetConfig+0x2d4>)
 8002706:	fba3 2302 	umull	r2, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	011c      	lsls	r4, r3, #4
 800270e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002718:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800271c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	1891      	adds	r1, r2, r2
 8002726:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002728:	415b      	adcs	r3, r3
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800272c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002730:	4641      	mov	r1, r8
 8002732:	eb12 0a01 	adds.w	sl, r2, r1
 8002736:	4649      	mov	r1, r9
 8002738:	eb43 0b01 	adc.w	fp, r3, r1
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800274c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002750:	4692      	mov	sl, r2
 8002752:	469b      	mov	fp, r3
 8002754:	4643      	mov	r3, r8
 8002756:	eb1a 0303 	adds.w	r3, sl, r3
 800275a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800275e:	464b      	mov	r3, r9
 8002760:	eb4b 0303 	adc.w	r3, fp, r3
 8002764:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002774:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800277c:	460b      	mov	r3, r1
 800277e:	18db      	adds	r3, r3, r3
 8002780:	643b      	str	r3, [r7, #64]	@ 0x40
 8002782:	4613      	mov	r3, r2
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	647b      	str	r3, [r7, #68]	@ 0x44
 800278a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800278e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002792:	f7fd fdbd 	bl	8000310 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4611      	mov	r1, r2
 800279c:	4b3b      	ldr	r3, [pc, #236]	@ (800288c <UART_SetConfig+0x2d4>)
 800279e:	fba3 2301 	umull	r2, r3, r3, r1
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2264      	movs	r2, #100	@ 0x64
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	1acb      	subs	r3, r1, r3
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <UART_SetConfig+0x2d4>)
 80027b4:	fba3 2302 	umull	r2, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027c0:	441c      	add	r4, r3
 80027c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027d4:	4642      	mov	r2, r8
 80027d6:	464b      	mov	r3, r9
 80027d8:	1891      	adds	r1, r2, r2
 80027da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027dc:	415b      	adcs	r3, r3
 80027de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027e4:	4641      	mov	r1, r8
 80027e6:	1851      	adds	r1, r2, r1
 80027e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80027ea:	4649      	mov	r1, r9
 80027ec:	414b      	adcs	r3, r1
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027fc:	4659      	mov	r1, fp
 80027fe:	00cb      	lsls	r3, r1, #3
 8002800:	4651      	mov	r1, sl
 8002802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002806:	4651      	mov	r1, sl
 8002808:	00ca      	lsls	r2, r1, #3
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	4603      	mov	r3, r0
 8002810:	4642      	mov	r2, r8
 8002812:	189b      	adds	r3, r3, r2
 8002814:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002818:	464b      	mov	r3, r9
 800281a:	460a      	mov	r2, r1
 800281c:	eb42 0303 	adc.w	r3, r2, r3
 8002820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002830:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002838:	460b      	mov	r3, r1
 800283a:	18db      	adds	r3, r3, r3
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800283e:	4613      	mov	r3, r2
 8002840:	eb42 0303 	adc.w	r3, r2, r3
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800284a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800284e:	f7fd fd5f 	bl	8000310 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <UART_SetConfig+0x2d4>)
 8002858:	fba3 1302 	umull	r1, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2164      	movs	r1, #100	@ 0x64
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	3332      	adds	r3, #50	@ 0x32
 800286a:	4a08      	ldr	r2, [pc, #32]	@ (800288c <UART_SetConfig+0x2d4>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	f003 0207 	and.w	r2, r3, #7
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4422      	add	r2, r4
 800287e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002880:	e106      	b.n	8002a90 <UART_SetConfig+0x4d8>
 8002882:	bf00      	nop
 8002884:	40011000 	.word	0x40011000
 8002888:	40011400 	.word	0x40011400
 800288c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002894:	2200      	movs	r2, #0
 8002896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800289a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800289e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028a2:	4642      	mov	r2, r8
 80028a4:	464b      	mov	r3, r9
 80028a6:	1891      	adds	r1, r2, r2
 80028a8:	6239      	str	r1, [r7, #32]
 80028aa:	415b      	adcs	r3, r3
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028b2:	4641      	mov	r1, r8
 80028b4:	1854      	adds	r4, r2, r1
 80028b6:	4649      	mov	r1, r9
 80028b8:	eb43 0501 	adc.w	r5, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	00eb      	lsls	r3, r5, #3
 80028c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	18e3      	adds	r3, r4, r3
 80028d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028d8:	464b      	mov	r3, r9
 80028da:	eb45 0303 	adc.w	r3, r5, r3
 80028de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028fe:	4629      	mov	r1, r5
 8002900:	008b      	lsls	r3, r1, #2
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002908:	4621      	mov	r1, r4
 800290a:	008a      	lsls	r2, r1, #2
 800290c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002910:	f7fd fcfe 	bl	8000310 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4b60      	ldr	r3, [pc, #384]	@ (8002a9c <UART_SetConfig+0x4e4>)
 800291a:	fba3 2302 	umull	r2, r3, r3, r2
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	011c      	lsls	r4, r3, #4
 8002922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800292c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002934:	4642      	mov	r2, r8
 8002936:	464b      	mov	r3, r9
 8002938:	1891      	adds	r1, r2, r2
 800293a:	61b9      	str	r1, [r7, #24]
 800293c:	415b      	adcs	r3, r3
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002944:	4641      	mov	r1, r8
 8002946:	1851      	adds	r1, r2, r1
 8002948:	6139      	str	r1, [r7, #16]
 800294a:	4649      	mov	r1, r9
 800294c:	414b      	adcs	r3, r1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800295c:	4659      	mov	r1, fp
 800295e:	00cb      	lsls	r3, r1, #3
 8002960:	4651      	mov	r1, sl
 8002962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002966:	4651      	mov	r1, sl
 8002968:	00ca      	lsls	r2, r1, #3
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	4603      	mov	r3, r0
 8002970:	4642      	mov	r2, r8
 8002972:	189b      	adds	r3, r3, r2
 8002974:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002978:	464b      	mov	r3, r9
 800297a:	460a      	mov	r2, r1
 800297c:	eb42 0303 	adc.w	r3, r2, r3
 8002980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800298e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800299c:	4649      	mov	r1, r9
 800299e:	008b      	lsls	r3, r1, #2
 80029a0:	4641      	mov	r1, r8
 80029a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029a6:	4641      	mov	r1, r8
 80029a8:	008a      	lsls	r2, r1, #2
 80029aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029ae:	f7fd fcaf 	bl	8000310 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	4b38      	ldr	r3, [pc, #224]	@ (8002a9c <UART_SetConfig+0x4e4>)
 80029ba:	fba3 2301 	umull	r2, r3, r3, r1
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2264      	movs	r2, #100	@ 0x64
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	1acb      	subs	r3, r1, r3
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	3332      	adds	r3, #50	@ 0x32
 80029cc:	4a33      	ldr	r2, [pc, #204]	@ (8002a9c <UART_SetConfig+0x4e4>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029d8:	441c      	add	r4, r3
 80029da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029de:	2200      	movs	r2, #0
 80029e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80029e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029e8:	4642      	mov	r2, r8
 80029ea:	464b      	mov	r3, r9
 80029ec:	1891      	adds	r1, r2, r2
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	415b      	adcs	r3, r3
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f8:	4641      	mov	r1, r8
 80029fa:	1851      	adds	r1, r2, r1
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	4649      	mov	r1, r9
 8002a00:	414b      	adcs	r3, r1
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a10:	4659      	mov	r1, fp
 8002a12:	00cb      	lsls	r3, r1, #3
 8002a14:	4651      	mov	r1, sl
 8002a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a1a:	4651      	mov	r1, sl
 8002a1c:	00ca      	lsls	r2, r1, #3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	4642      	mov	r2, r8
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	eb42 0303 	adc.w	r3, r2, r3
 8002a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	008b      	lsls	r3, r1, #2
 8002a50:	4641      	mov	r1, r8
 8002a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a56:	4641      	mov	r1, r8
 8002a58:	008a      	lsls	r2, r1, #2
 8002a5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a5e:	f7fd fc57 	bl	8000310 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <UART_SetConfig+0x4e4>)
 8002a68:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	2164      	movs	r1, #100	@ 0x64
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	3332      	adds	r3, #50	@ 0x32
 8002a7a:	4a08      	ldr	r2, [pc, #32]	@ (8002a9c <UART_SetConfig+0x4e4>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4422      	add	r2, r4
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a96:	46bd      	mov	sp, r7
 8002a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9c:	51eb851f 	.word	0x51eb851f

08002aa0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f103 0208 	add.w	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f103 0208 	add.w	r2, r3, #8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f103 0208 	add.w	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002ad4:	f240 1019 	movw	r0, #281	@ 0x119
 8002ad8:	f004 fb28 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002af2:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002af6:	f004 fb19 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d103      	bne.n	8002b22 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e00c      	b.n	8002b3c <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3308      	adds	r3, #8
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e002      	b.n	8002b30 <vListInsert+0x2e>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d2f6      	bcs.n	8002b2a <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002b68:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002b6c:	f004 fade 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6852      	ldr	r2, [r2, #4]
 8002b98:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d103      	bne.n	8002bac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1e5a      	subs	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f240 101d 	movw	r0, #285	@ 0x11d
 8002bc6:	f004 faed 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002be2:	2301      	movs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d05d      	beq.n	8002cca <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d059      	beq.n	8002cca <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	2100      	movs	r1, #0
 8002c20:	fba3 2302 	umull	r2, r3, r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d000      	beq.n	8002c2a <xQueueGenericReset+0x52>
 8002c28:	2101      	movs	r1, #1
 8002c2a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d14c      	bne.n	8002cca <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002c30:	f002 fce8 	bl	8005604 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3c:	6939      	ldr	r1, [r7, #16]
 8002c3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	441a      	add	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	3b01      	subs	r3, #1
 8002c62:	6939      	ldr	r1, [r7, #16]
 8002c64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	441a      	add	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	22ff      	movs	r2, #255	@ 0xff
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d114      	bne.n	8002cb0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01a      	beq.n	8002cc4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	3310      	adds	r3, #16
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fb72 	bl	800437c <xTaskRemoveFromEventList>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d012      	beq.n	8002cc4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c9e:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <xQueueGenericReset+0x128>)
 8002ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	e009      	b.n	8002cc4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	3310      	adds	r3, #16
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fef3 	bl	8002aa0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	3324      	adds	r3, #36	@ 0x24
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff feee 	bl	8002aa0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002cc4:	f002 fcd0 	bl	8005668 <vPortExitCritical>
 8002cc8:	e001      	b.n	8002cce <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <xQueueGenericReset+0x114>
    __asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	60bb      	str	r3, [r7, #8]
}
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2096      	movs	r0, #150	@ 0x96
 8002cf2:	f004 fa57 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002cf6:	697b      	ldr	r3, [r7, #20]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02e      	beq.n	8002d7a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	fba3 2302 	umull	r2, r3, r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d000      	beq.n	8002d2c <xQueueGenericCreate+0x28>
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d123      	bne.n	8002d7a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d3a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002d3e:	d81c      	bhi.n	8002d7a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	3350      	adds	r3, #80	@ 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fd86 	bl	8005860 <pvPortMalloc>
 8002d54:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01d      	beq.n	8002d98 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3350      	adds	r3, #80	@ 0x50
 8002d64:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d66:	79fa      	ldrb	r2, [r7, #7]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f81e 	bl	8002db4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002d78:	e00e      	b.n	8002d98 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <xQueueGenericCreate+0x94>
    __asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	613b      	str	r3, [r7, #16]
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fb9c 	bl	80074d8 <SEGGER_SYSVIEW_ShrinkId>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4619      	mov	r1, r3
 8002da4:	2098      	movs	r0, #152	@ 0x98
 8002da6:	f004 f9fd 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002daa:	69fb      	ldr	r3, [r7, #28]
    }
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e002      	b.n	8002dd6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002de2:	2101      	movs	r1, #1
 8002de4:	69b8      	ldr	r0, [r7, #24]
 8002de6:	f7ff fef7 	bl	8002bd8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00e      	beq.n	8002e26 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f825 	bl	8002e70 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	461a      	mov	r2, r3
 8002e44:	6939      	ldr	r1, [r7, #16]
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f7ff ff5c 	bl	8002d04 <xQueueGenericCreate>
 8002e4c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ffd3 	bl	8002dfa <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 fb3e 	bl	80074d8 <SEGGER_SYSVIEW_ShrinkId>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4619      	mov	r1, r3
 8002e60:	2099      	movs	r0, #153	@ 0x99
 8002e62:	f004 f99f 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xNewQueue;
 8002e66:	68fb      	ldr	r3, [r7, #12]
    }
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	@ 0x38
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <xQueueGenericSend+0x34>
    __asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSend+0x42>
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <xQueueGenericSend+0x46>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <xQueueGenericSend+0x48>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <xQueueGenericSend+0x64>
    __asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSend+0x72>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <xQueueGenericSend+0x76>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueGenericSend+0x78>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <xQueueGenericSend+0x94>
    __asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	623b      	str	r3, [r7, #32]
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f04:	f001 fc5c 	bl	80047c0 <xTaskGetSchedulerState>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <xQueueGenericSend+0xa4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <xQueueGenericSend+0xa8>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <xQueueGenericSend+0xaa>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <xQueueGenericSend+0xc6>
    __asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	61fb      	str	r3, [r7, #28]
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	e7fd      	b.n	8002f32 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f36:	f002 fb65 	bl	8005604 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <xQueueGenericSend+0xdc>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d12d      	bne.n	8002fa8 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f52:	f000 faad 	bl	80034b0 <prvCopyDataToQueue>
 8002f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	3324      	adds	r3, #36	@ 0x24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 fa09 	bl	800437c <xTaskRemoveFromEventList>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002f70:	4b45      	ldr	r3, [pc, #276]	@ (8003088 <xQueueGenericSend+0x218>)
 8002f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	e00a      	b.n	8002f98 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002f88:	4b3f      	ldr	r3, [pc, #252]	@ (8003088 <xQueueGenericSend+0x218>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002f98:	f002 fb66 	bl	8005668 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	20a1      	movs	r0, #161	@ 0xa1
 8002fa0:	f004 f900 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e06b      	b.n	8003080 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d107      	bne.n	8002fbe <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002fae:	f002 fb5b 	bl	8005668 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	20a1      	movs	r0, #161	@ 0xa1
 8002fb6:	f004 f8f5 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e060      	b.n	8003080 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fab7 	bl	800453c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002fd2:	f002 fb49 	bl	8005668 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002fd6:	f000 fe89 	bl	8003cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002fda:	f002 fb13 	bl	8005604 <vPortEnterCritical>
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fe4:	b25b      	sxtb	r3, r3
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d103      	bne.n	8002ff4 <xQueueGenericSend+0x184>
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ffa:	b25b      	sxtb	r3, r3
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d103      	bne.n	800300a <xQueueGenericSend+0x19a>
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800300a:	f002 fb2d 	bl	8005668 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800300e:	1d3a      	adds	r2, r7, #4
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f001 faa8 	bl	800456c <xTaskCheckForTimeOut>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d124      	bne.n	800306c <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003022:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003024:	f000 fb3c 	bl	80036a0 <prvIsQueueFull>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d018      	beq.n	8003060 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	3310      	adds	r3, #16
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f001 f92e 	bl	8004298 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800303c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800303e:	f000 fac7 	bl	80035d0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003042:	f000 fe61 	bl	8003d08 <xTaskResumeAll>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f af74 	bne.w	8002f36 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 800304e:	4b0e      	ldr	r3, [pc, #56]	@ (8003088 <xQueueGenericSend+0x218>)
 8003050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	e76a      	b.n	8002f36 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003062:	f000 fab5 	bl	80035d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003066:	f000 fe4f 	bl	8003d08 <xTaskResumeAll>
 800306a:	e764      	b.n	8002f36 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800306c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800306e:	f000 faaf 	bl	80035d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003072:	f000 fe49 	bl	8003d08 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8003076:	2100      	movs	r1, #0
 8003078:	20a1      	movs	r0, #161	@ 0xa1
 800307a:	f004 f893 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 800307e:	2300      	movs	r3, #0
        }
    }
}
 8003080:	4618      	mov	r0, r3
 8003082:	3738      	adds	r7, #56	@ 0x38
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08c      	sub	sp, #48	@ 0x30
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <xQueueReceive+0x32>
    __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	623b      	str	r3, [r7, #32]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <xQueueReceive+0x40>
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <xQueueReceive+0x44>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <xQueueReceive+0x46>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <xQueueReceive+0x62>
    __asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	61fb      	str	r3, [r7, #28]
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	e7fd      	b.n	80030ea <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ee:	f001 fb67 	bl	80047c0 <xTaskGetSchedulerState>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <xQueueReceive+0x72>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <xQueueReceive+0x76>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueReceive+0x78>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <xQueueReceive+0x94>
    __asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003120:	f002 fa70 	bl	8005604 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d023      	beq.n	8003178 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003134:	f000 fa26 	bl	8003584 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00f      	beq.n	8003168 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	3310      	adds	r3, #16
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f915 	bl	800437c <xTaskRemoveFromEventList>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003158:	4b42      	ldr	r3, [pc, #264]	@ (8003264 <xQueueReceive+0x1d8>)
 800315a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003168:	f002 fa7e 	bl	8005668 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800316c:	2101      	movs	r1, #1
 800316e:	20a4      	movs	r0, #164	@ 0xa4
 8003170:	f004 f818 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8003174:	2301      	movs	r3, #1
 8003176:	e071      	b.n	800325c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800317e:	f002 fa73 	bl	8005668 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003182:	2100      	movs	r1, #0
 8003184:	20a4      	movs	r0, #164	@ 0xa4
 8003186:	f004 f80d 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800318a:	2300      	movs	r3, #0
 800318c:	e066      	b.n	800325c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	4618      	mov	r0, r3
 800319a:	f001 f9cf 	bl	800453c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031a2:	f002 fa61 	bl	8005668 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031a6:	f000 fda1 	bl	8003cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031aa:	f002 fa2b 	bl	8005604 <vPortEnterCritical>
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d103      	bne.n	80031c4 <xQueueReceive+0x138>
 80031bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031ca:	b25b      	sxtb	r3, r3
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d103      	bne.n	80031da <xQueueReceive+0x14e>
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031da:	f002 fa45 	bl	8005668 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 f9c0 	bl	800456c <xTaskCheckForTimeOut>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d123      	bne.n	800323a <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f4:	f000 fa3e 	bl	8003674 <prvIsQueueEmpty>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d017      	beq.n	800322e <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	3324      	adds	r3, #36	@ 0x24
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f846 	bl	8004298 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800320c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800320e:	f000 f9df 	bl	80035d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003212:	f000 fd79 	bl	8003d08 <xTaskResumeAll>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d181      	bne.n	8003120 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <xQueueReceive+0x1d8>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	e778      	b.n	8003120 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800322e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003230:	f000 f9ce 	bl	80035d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003234:	f000 fd68 	bl	8003d08 <xTaskResumeAll>
 8003238:	e772      	b.n	8003120 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800323a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800323c:	f000 f9c8 	bl	80035d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003240:	f000 fd62 	bl	8003d08 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003246:	f000 fa15 	bl	8003674 <prvIsQueueEmpty>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f43f af67 	beq.w	8003120 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003252:	2100      	movs	r1, #0
 8003254:	20a4      	movs	r0, #164	@ 0xa4
 8003256:	f003 ffa5 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800325a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800325c:	4618      	mov	r0, r3
 800325e:	3730      	adds	r7, #48	@ 0x30
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	e000ed04 	.word	0xe000ed04

08003268 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	@ 0x30
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003272:	2300      	movs	r3, #0
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800327a:	2300      	movs	r3, #0
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <xQueueSemaphoreTake+0x34>
    __asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	61bb      	str	r3, [r7, #24]
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <xQueueSemaphoreTake+0x54>
    __asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	617b      	str	r3, [r7, #20]
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032bc:	f001 fa80 	bl	80047c0 <xTaskGetSchedulerState>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <xQueueSemaphoreTake+0x64>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <xQueueSemaphoreTake+0x68>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <xQueueSemaphoreTake+0x6a>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <xQueueSemaphoreTake+0x86>
    __asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	613b      	str	r3, [r7, #16]
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	e7fd      	b.n	80032ea <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80032ee:	f002 f989 	bl	8005604 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d028      	beq.n	8003350 <xQueueSemaphoreTake+0xe8>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	1e5a      	subs	r2, r3, #1
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d104      	bne.n	8003318 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800330e:	f001 fc97 	bl	8004c40 <pvTaskIncrementMutexHeldCount>
 8003312:	4602      	mov	r2, r0
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00f      	beq.n	8003340 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	3310      	adds	r3, #16
 8003324:	4618      	mov	r0, r3
 8003326:	f001 f829 	bl	800437c <xTaskRemoveFromEventList>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003330:	4b52      	ldr	r3, [pc, #328]	@ (800347c <xQueueSemaphoreTake+0x214>)
 8003332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003340:	f002 f992 	bl	8005668 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );
 8003344:	2101      	movs	r1, #1
 8003346:	20a5      	movs	r0, #165	@ 0xa5
 8003348:	f003 ff2c 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800334c:	2301      	movs	r3, #1
 800334e:	e091      	b.n	8003474 <xQueueSemaphoreTake+0x20c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <xQueueSemaphoreTake+0xfe>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003356:	f002 f987 	bl	8005668 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 800335a:	2100      	movs	r1, #0
 800335c:	20a5      	movs	r0, #165	@ 0xa5
 800335e:	f003 ff21 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8003362:	2300      	movs	r3, #0
 8003364:	e086      	b.n	8003474 <xQueueSemaphoreTake+0x20c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <xQueueSemaphoreTake+0x112>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800336c:	f107 0308 	add.w	r3, r7, #8
 8003370:	4618      	mov	r0, r3
 8003372:	f001 f8e3 	bl	800453c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800337a:	f002 f975 	bl	8005668 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800337e:	f000 fcb5 	bl	8003cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003382:	f002 f93f 	bl	8005604 <vPortEnterCritical>
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800338c:	b25b      	sxtb	r3, r3
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d103      	bne.n	800339c <xQueueSemaphoreTake+0x134>
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d103      	bne.n	80033b2 <xQueueSemaphoreTake+0x14a>
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033b2:	f002 f959 	bl	8005668 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033b6:	463a      	mov	r2, r7
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 f8d4 	bl	800456c <xTaskCheckForTimeOut>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d132      	bne.n	8003430 <xQueueSemaphoreTake+0x1c8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033cc:	f000 f952 	bl	8003674 <prvIsQueueEmpty>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d026      	beq.n	8003424 <xQueueSemaphoreTake+0x1bc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <xQueueSemaphoreTake+0x18a>
                    {
                        taskENTER_CRITICAL();
 80033de:	f002 f911 	bl	8005604 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 fa0c 	bl	8004804 <xTaskPriorityInherit>
 80033ec:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 80033ee:	f002 f93b 	bl	8005668 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	3324      	adds	r3, #36	@ 0x24
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 ff4c 	bl	8004298 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003400:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003402:	f000 f8e5 	bl	80035d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003406:	f000 fc7f 	bl	8003d08 <xTaskResumeAll>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f af6e 	bne.w	80032ee <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 8003412:	4b1a      	ldr	r3, [pc, #104]	@ (800347c <xQueueSemaphoreTake+0x214>)
 8003414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	e764      	b.n	80032ee <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003426:	f000 f8d3 	bl	80035d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800342a:	f000 fc6d 	bl	8003d08 <xTaskResumeAll>
 800342e:	e75e      	b.n	80032ee <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003430:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003432:	f000 f8cd 	bl	80035d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003436:	f000 fc67 	bl	8003d08 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800343a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800343c:	f000 f91a 	bl	8003674 <prvIsQueueEmpty>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	f43f af53 	beq.w	80032ee <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <xQueueSemaphoreTake+0x202>
                    {
                        taskENTER_CRITICAL();
 800344e:	f002 f8d9 	bl	8005604 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003452:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003454:	f000 f814 	bl	8003480 <prvGetDisinheritPriorityAfterTimeout>
 8003458:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	69f9      	ldr	r1, [r7, #28]
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fb29 	bl	8004ab8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003466:	f002 f8ff 	bl	8005668 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 800346a:	2100      	movs	r1, #0
 800346c:	20a5      	movs	r0, #165	@ 0xa5
 800346e:	f003 fe99 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8003472:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3730      	adds	r7, #48	@ 0x30
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	e000ed04 	.word	0xe000ed04

08003480 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1c3 0305 	rsb	r3, r3, #5
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e001      	b.n	80034a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80034a2:	68fb      	ldr	r3, [r7, #12]
    }
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d14d      	bne.n	8003572 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fa3c 	bl	8004958 <xTaskPriorityDisinherit>
 80034e0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	e043      	b.n	8003572 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d119      	bne.n	8003524 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6858      	ldr	r0, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	461a      	mov	r2, r3
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	f004 fc23 	bl	8007d46 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	441a      	add	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d32b      	bcc.n	8003572 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e026      	b.n	8003572 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68d8      	ldr	r0, [r3, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	461a      	mov	r2, r3
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	f004 fc09 	bl	8007d46 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	425b      	negs	r3, r3
 800353e:	441a      	add	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d207      	bcs.n	8003560 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	425b      	negs	r3, r3
 800355a:	441a      	add	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d105      	bne.n	8003572 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	3b01      	subs	r3, #1
 8003570:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800357a:	697b      	ldr	r3, [r7, #20]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	441a      	add	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d303      	bcc.n	80035b8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68d9      	ldr	r1, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	461a      	mov	r2, r3
 80035c2:	6838      	ldr	r0, [r7, #0]
 80035c4:	f004 fbbf 	bl	8007d46 <memcpy>
    }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80035d8:	f002 f814 	bl	8005604 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035e4:	e011      	b.n	800360a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3324      	adds	r3, #36	@ 0x24
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fec2 	bl	800437c <xTaskRemoveFromEventList>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80035fe:	f001 f821 	bl	8004644 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800360a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	dce9      	bgt.n	80035e6 <prvUnlockQueue+0x16>
 8003612:	e000      	b.n	8003616 <prvUnlockQueue+0x46>
                    break;
 8003614:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	22ff      	movs	r2, #255	@ 0xff
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800361e:	f002 f823 	bl	8005668 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003622:	f001 ffef 	bl	8005604 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800362c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800362e:	e011      	b.n	8003654 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3310      	adds	r3, #16
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fe9d 	bl	800437c <xTaskRemoveFromEventList>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003648:	f000 fffc 	bl	8004644 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800364c:	7bbb      	ldrb	r3, [r7, #14]
 800364e:	3b01      	subs	r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003658:	2b00      	cmp	r3, #0
 800365a:	dce9      	bgt.n	8003630 <prvUnlockQueue+0x60>
 800365c:	e000      	b.n	8003660 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800365e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	22ff      	movs	r2, #255	@ 0xff
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003668:	f001 fffe 	bl	8005668 <vPortExitCritical>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800367c:	f001 ffc2 	bl	8005604 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003688:	2301      	movs	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e001      	b.n	8003692 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003692:	f001 ffe9 	bl	8005668 <vPortExitCritical>

    return xReturn;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80036a8:	f001 ffac 	bl	8005604 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d102      	bne.n	80036be <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	e001      	b.n	80036c2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80036c2:	f001 ffd1 	bl	8005668 <vPortExitCritical>

    return xReturn;
 80036c6:	68fb      	ldr	r3, [r7, #12]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <vQueueAddToRegistry+0x2c>
    __asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60fb      	str	r3, [r7, #12]
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d024      	beq.n	800374c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e01e      	b.n	8003746 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003708:	4a18      	ldr	r2, [pc, #96]	@ (800376c <vQueueAddToRegistry+0x9c>)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d105      	bne.n	8003724 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4a13      	ldr	r2, [pc, #76]	@ (800376c <vQueueAddToRegistry+0x9c>)
 800371e:	4413      	add	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
                    break;
 8003722:	e013      	b.n	800374c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <vQueueAddToRegistry+0x70>
 800372a:	4a10      	ldr	r2, [pc, #64]	@ (800376c <vQueueAddToRegistry+0x9c>)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4a0c      	ldr	r2, [pc, #48]	@ (800376c <vQueueAddToRegistry+0x9c>)
 800373c:	4413      	add	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b07      	cmp	r3, #7
 800374a:	d9dd      	bls.n	8003708 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800375e:	20b6      	movs	r0, #182	@ 0xb6
 8003760:	f003 fce4 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003764:	bf00      	nop
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000128 	.word	0x20000128

08003770 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003780:	f001 ff40 	bl	8005604 <vPortEnterCritical>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800378a:	b25b      	sxtb	r3, r3
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d103      	bne.n	800379a <vQueueWaitForMessageRestricted+0x2a>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037a0:	b25b      	sxtb	r3, r3
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a6:	d103      	bne.n	80037b0 <vQueueWaitForMessageRestricted+0x40>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037b0:	f001 ff5a 	bl	8005668 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3324      	adds	r3, #36	@ 0x24
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fd8f 	bl	80042e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff00 	bl	80035d0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80037d0:	20b9      	movs	r0, #185	@ 0xb9
 80037d2:	f003 fcab 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
    }
 80037d6:	bf00      	nop
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08a      	sub	sp, #40	@ 0x28
 80037e2:	af04      	add	r7, sp, #16
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f002 f835 	bl	8005860 <pvPortMalloc>
 80037f6:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d013      	beq.n	8003826 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80037fe:	205c      	movs	r0, #92	@ 0x5c
 8003800:	f002 f82e 	bl	8005860 <pvPortMalloc>
 8003804:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800380c:	225c      	movs	r2, #92	@ 0x5c
 800380e:	2100      	movs	r1, #0
 8003810:	6978      	ldr	r0, [r7, #20]
 8003812:	f004 fa2e 	bl	8007c72 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	631a      	str	r2, [r3, #48]	@ 0x30
 800381c:	e005      	b.n	800382a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800381e:	6938      	ldr	r0, [r7, #16]
 8003820:	f002 f950 	bl	8005ac4 <vPortFree>
 8003824:	e001      	b.n	800382a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003830:	2300      	movs	r3, #0
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	9302      	str	r3, [sp, #8]
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f82d 	bl	80038a6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800384c:	697b      	ldr	r3, [r7, #20]
    }
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003856:	b580      	push	{r7, lr}
 8003858:	b088      	sub	sp, #32
 800385a:	af02      	add	r7, sp, #8
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff ffb3 	bl	80037de <prvCreateTask>
 8003878:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003880:	6938      	ldr	r0, [r7, #16]
 8003882:	f000 f8a1 	bl	80039c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003886:	2301      	movs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e002      	b.n	8003892 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295
 8003890:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	4619      	mov	r1, r3
 8003896:	20c2      	movs	r0, #194	@ 0xc2
 8003898:	f003 fc84 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800389c:	697b      	ldr	r3, [r7, #20]
    }
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	461a      	mov	r2, r3
 80038be:	21a5      	movs	r1, #165	@ 0xa5
 80038c0:	f004 f9d7 	bl	8007c72 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038ce:	3b01      	subs	r3, #1
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f023 0307 	bic.w	r3, r3, #7
 80038dc:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	617b      	str	r3, [r7, #20]
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01e      	beq.n	8003944 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	e012      	b.n	8003932 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	7819      	ldrb	r1, [r3, #0]
 8003914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	3334      	adds	r3, #52	@ 0x34
 800391c:	460a      	mov	r2, r1
 800391e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d006      	beq.n	800393a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	3301      	adds	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b0e      	cmp	r3, #14
 8003936:	d9e9      	bls.n	800390c <prvInitialiseNewTask+0x66>
 8003938:	e000      	b.n	800393c <prvInitialiseNewTask+0x96>
            {
                break;
 800393a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003946:	2b04      	cmp	r3, #4
 8003948:	d90b      	bls.n	8003962 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	613b      	str	r3, [r7, #16]
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	2b04      	cmp	r3, #4
 8003966:	d901      	bls.n	800396c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003968:	2304      	movs	r3, #4
 800396a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003970:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003976:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	3304      	adds	r3, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f8b1 	bl	8002ae4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003984:	3318      	adds	r3, #24
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f8ac 	bl	8002ae4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003990:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	f1c3 0205 	rsb	r2, r3, #5
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	69b8      	ldr	r0, [r7, #24]
 80039a8:	f001 fcaa 	bl	8005300 <pxPortInitialiseStack>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80039b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039be:	bf00      	nop
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80039c8:	b5b0      	push	{r4, r5, r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80039d0:	f001 fe18 	bl	8005604 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80039d4:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <prvAddNewTaskToReadyList+0x150>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	4a4f      	ldr	r2, [pc, #316]	@ (8003b18 <prvAddNewTaskToReadyList+0x150>)
 80039dc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80039de:	4b4f      	ldr	r3, [pc, #316]	@ (8003b1c <prvAddNewTaskToReadyList+0x154>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80039e6:	4a4d      	ldr	r2, [pc, #308]	@ (8003b1c <prvAddNewTaskToReadyList+0x154>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003b18 <prvAddNewTaskToReadyList+0x150>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d110      	bne.n	8003a16 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80039f4:	f000 fe4a 	bl	800468c <prvInitialiseTaskLists>
 80039f8:	e00d      	b.n	8003a16 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80039fa:	4b49      	ldr	r3, [pc, #292]	@ (8003b20 <prvAddNewTaskToReadyList+0x158>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a02:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <prvAddNewTaskToReadyList+0x154>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d802      	bhi.n	8003a16 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003a10:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <prvAddNewTaskToReadyList+0x154>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003a16:	4b43      	ldr	r3, [pc, #268]	@ (8003b24 <prvAddNewTaskToReadyList+0x15c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	4a41      	ldr	r2, [pc, #260]	@ (8003b24 <prvAddNewTaskToReadyList+0x15c>)
 8003a1e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a20:	4b40      	ldr	r3, [pc, #256]	@ (8003b24 <prvAddNewTaskToReadyList+0x15c>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <prvAddNewTaskToReadyList+0x94>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 fc2b 	bl	800728c <SEGGER_SYSVIEW_OnTaskCreate>
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	461d      	mov	r5, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461c      	mov	r4, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	1ae3      	subs	r3, r4, r3
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	462b      	mov	r3, r5
 8003a58:	f003 ff2e 	bl	80078b8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 fc98 	bl	8007394 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <prvAddNewTaskToReadyList+0x160>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	4a2d      	ldr	r2, [pc, #180]	@ (8003b28 <prvAddNewTaskToReadyList+0x160>)
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7a:	492c      	ldr	r1, [pc, #176]	@ (8003b2c <prvAddNewTaskToReadyList+0x164>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3304      	adds	r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	609a      	str	r2, [r3, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	3204      	adds	r2, #4
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	1d1a      	adds	r2, r3, #4
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <prvAddNewTaskToReadyList+0x164>)
 8003aba:	441a      	add	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	615a      	str	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac4:	4919      	ldr	r1, [pc, #100]	@ (8003b2c <prvAddNewTaskToReadyList+0x164>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ad6:	1c59      	adds	r1, r3, #1
 8003ad8:	4814      	ldr	r0, [pc, #80]	@ (8003b2c <prvAddNewTaskToReadyList+0x164>)
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4403      	add	r3, r0
 8003ae4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003ae6:	f001 fdbf 	bl	8005668 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003aea:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <prvAddNewTaskToReadyList+0x158>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00e      	beq.n	8003b10 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <prvAddNewTaskToReadyList+0x154>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d207      	bcs.n	8003b10 <prvAddNewTaskToReadyList+0x148>
 8003b00:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <prvAddNewTaskToReadyList+0x168>)
 8003b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdb0      	pop	{r4, r5, r7, pc}
 8003b18:	20000240 	.word	0x20000240
 8003b1c:	20000168 	.word	0x20000168
 8003b20:	2000024c 	.word	0x2000024c
 8003b24:	2000025c 	.word	0x2000025c
 8003b28:	20000248 	.word	0x20000248
 8003b2c:	2000016c 	.word	0x2000016c
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d018      	beq.n	8003b78 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8003b46:	f000 f8d1 	bl	8003cec <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003b4a:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <vTaskDelay+0x68>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d00b      	beq.n	8003b6a <vTaskDelay+0x36>
    __asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60bb      	str	r3, [r7, #8]
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	e7fd      	b.n	8003b66 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f001 f885 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003b72:	f000 f8c9 	bl	8003d08 <xTaskResumeAll>
 8003b76:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8003b7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ba0 <vTaskDelay+0x6c>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003b8e:	20c5      	movs	r0, #197	@ 0xc5
 8003b90:	f003 facc 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000268 	.word	0x20000268
 8003ba0:	e000ed04 	.word	0xe000ed04

08003ba4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	@ 0x28
 8003ba8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e011      	b.n	8003bdc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c2c <prvCreateIdleTasks+0x88>)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	7819      	ldrb	r1, [r3, #0]
 8003bc0:	463a      	mov	r2, r7
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	460a      	mov	r2, r1
 8003bc8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003bca:	463a      	mov	r2, r7
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4413      	add	r3, r2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b0e      	cmp	r3, #14
 8003be0:	ddea      	ble.n	8003bb8 <prvCreateIdleTasks+0x14>
 8003be2:	e000      	b.n	8003be6 <prvCreateIdleTasks+0x42>
        {
            break;
 8003be4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e015      	b.n	8003c18 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003bec:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <prvCreateIdleTasks+0x8c>)
 8003bee:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c34 <prvCreateIdleTasks+0x90>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	2282      	movs	r2, #130	@ 0x82
 8003c04:	6938      	ldr	r0, [r7, #16]
 8003c06:	f7ff fe26 	bl	8003856 <xTaskCreate>
 8003c0a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	3301      	adds	r3, #1
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dde6      	ble.n	8003bec <prvCreateIdleTasks+0x48>
 8003c1e:	e000      	b.n	8003c22 <prvCreateIdleTasks+0x7e>
        {
            break;
 8003c20:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003c22:	69fb      	ldr	r3, [r7, #28]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	08008a10 	.word	0x08008a10
 8003c30:	0800465d 	.word	0x0800465d
 8003c34:	20000264 	.word	0x20000264

08003c38 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003c3e:	f7ff ffb1 	bl	8003ba4 <prvCreateIdleTasks>
 8003c42:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003c4a:	f001 f8a5 	bl	8004d98 <xTimerCreateTimerTask>
 8003c4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d124      	bne.n	8003ca0 <vTaskStartScheduler+0x68>
    __asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
}
 8003c68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <vTaskStartScheduler+0x9c>)
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c72:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <vTaskStartScheduler+0xa0>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c78:	4b18      	ldr	r3, [pc, #96]	@ (8003cdc <vTaskStartScheduler+0xa4>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003c7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <vTaskStartScheduler+0xa8>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <vTaskStartScheduler+0xac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d102      	bne.n	8003c90 <vTaskStartScheduler+0x58>
 8003c8a:	f003 fae3 	bl	8007254 <SEGGER_SYSVIEW_OnIdle>
 8003c8e:	e004      	b.n	8003c9a <vTaskStartScheduler+0x62>
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <vTaskStartScheduler+0xac>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 fb3b 	bl	8007310 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003c9a:	f001 fbc3 	bl	8005424 <xPortStartScheduler>
 8003c9e:	e00f      	b.n	8003cc0 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d10b      	bne.n	8003cc0 <vTaskStartScheduler+0x88>
    __asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	607b      	str	r3, [r7, #4]
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003cc0:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <vTaskStartScheduler+0xb0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003cc4:	20cd      	movs	r0, #205	@ 0xcd
 8003cc6:	f003 fa31 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000260 	.word	0x20000260
 8003cd8:	2000024c 	.word	0x2000024c
 8003cdc:	20000244 	.word	0x20000244
 8003ce0:	20000264 	.word	0x20000264
 8003ce4:	20000168 	.word	0x20000168
 8003ce8:	2000000c 	.word	0x2000000c

08003cec <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <vTaskSuspendAll+0x18>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	4a03      	ldr	r2, [pc, #12]	@ (8003d04 <vTaskSuspendAll+0x18>)
 8003cf8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003cfa:	20cf      	movs	r0, #207	@ 0xcf
 8003cfc:	f003 fa16 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000268 	.word	0x20000268

08003d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003d16:	f001 fc75 	bl	8005604 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f08 <xTaskResumeAll+0x200>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <xTaskResumeAll+0x36>
    __asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	603b      	str	r3, [r7, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	e7fd      	b.n	8003d3a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003d3e:	4b72      	ldr	r3, [pc, #456]	@ (8003f08 <xTaskResumeAll+0x200>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	4a70      	ldr	r2, [pc, #448]	@ (8003f08 <xTaskResumeAll+0x200>)
 8003d46:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d48:	4b6f      	ldr	r3, [pc, #444]	@ (8003f08 <xTaskResumeAll+0x200>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f040 80ce 	bne.w	8003eee <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d52:	4b6e      	ldr	r3, [pc, #440]	@ (8003f0c <xTaskResumeAll+0x204>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80c9 	beq.w	8003eee <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d5c:	e092      	b.n	8003e84 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8003f10 <xTaskResumeAll+0x208>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	6a12      	ldr	r2, [r2, #32]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	69d2      	ldr	r2, [r2, #28]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3318      	adds	r3, #24
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d103      	bne.n	8003d94 <xTaskResumeAll+0x8c>
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	605a      	str	r2, [r3, #4]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2200      	movs	r2, #0
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	6892      	ldr	r2, [r2, #8]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d103      	bne.n	8003dd2 <xTaskResumeAll+0xca>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1e5a      	subs	r2, r3, #1
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fad5 	bl	8007394 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	2201      	movs	r2, #1
 8003df0:	409a      	lsls	r2, r3
 8003df2:	4b48      	ldr	r3, [pc, #288]	@ (8003f14 <xTaskResumeAll+0x20c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	4a46      	ldr	r2, [pc, #280]	@ (8003f14 <xTaskResumeAll+0x20c>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e00:	4945      	ldr	r1, [pc, #276]	@ (8003f18 <xTaskResumeAll+0x210>)
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	3204      	adds	r2, #4
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	1d1a      	adds	r2, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4a36      	ldr	r2, [pc, #216]	@ (8003f18 <xTaskResumeAll+0x210>)
 8003e40:	441a      	add	r2, r3
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	615a      	str	r2, [r3, #20]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4a:	4933      	ldr	r1, [pc, #204]	@ (8003f18 <xTaskResumeAll+0x210>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e5c:	1c59      	adds	r1, r3, #1
 8003e5e:	482e      	ldr	r0, [pc, #184]	@ (8003f18 <xTaskResumeAll+0x210>)
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4403      	add	r3, r0
 8003e6a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e70:	4b2a      	ldr	r3, [pc, #168]	@ (8003f1c <xTaskResumeAll+0x214>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d904      	bls.n	8003e84 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003e7a:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <xTaskResumeAll+0x218>)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2101      	movs	r1, #1
 8003e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e84:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <xTaskResumeAll+0x208>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f47f af68 	bne.w	8003d5e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003e94:	f000 fc78 	bl	8004788 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e98:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <xTaskResumeAll+0x21c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003ea4:	f000 f86a 	bl	8003f7c <xTaskIncrementTick>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003eae:	4a1c      	ldr	r2, [pc, #112]	@ (8003f20 <xTaskResumeAll+0x218>)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ef      	bne.n	8003ea4 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003ec4:	4b17      	ldr	r3, [pc, #92]	@ (8003f24 <xTaskResumeAll+0x21c>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003eca:	4a15      	ldr	r2, [pc, #84]	@ (8003f20 <xTaskResumeAll+0x218>)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <xTaskResumeAll+0x214>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <xTaskResumeAll+0x220>)
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003eee:	f001 fbbb 	bl	8005668 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	20d0      	movs	r0, #208	@ 0xd0
 8003ef8:	f003 f954 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000268 	.word	0x20000268
 8003f0c:	20000240 	.word	0x20000240
 8003f10:	20000200 	.word	0x20000200
 8003f14:	20000248 	.word	0x20000248
 8003f18:	2000016c 	.word	0x2000016c
 8003f1c:	20000168 	.word	0x20000168
 8003f20:	20000254 	.word	0x20000254
 8003f24:	20000250 	.word	0x20000250
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <xTaskGetTickCount+0x20>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	20d1      	movs	r0, #209	@ 0xd1
 8003f3c:	f003 f932 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003f40:	687b      	ldr	r3, [r7, #4]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000244 	.word	0x20000244

08003f50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f56:	f001 fc41 	bl	80057dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003f5e:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <xTaskGetTickCountFromISR+0x28>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003f64:	6839      	ldr	r1, [r7, #0]
 8003f66:	20d2      	movs	r0, #210	@ 0xd2
 8003f68:	f003 f91c 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003f6c:	683b      	ldr	r3, [r7, #0]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000244 	.word	0x20000244

08003f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003f86:	4b83      	ldr	r3, [pc, #524]	@ (8004194 <xTaskIncrementTick+0x218>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 80f3 	bne.w	8004176 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f90:	4b81      	ldr	r3, [pc, #516]	@ (8004198 <xTaskIncrementTick+0x21c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003f98:	4a7f      	ldr	r2, [pc, #508]	@ (8004198 <xTaskIncrementTick+0x21c>)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003fa4:	4b7d      	ldr	r3, [pc, #500]	@ (800419c <xTaskIncrementTick+0x220>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <xTaskIncrementTick+0x4a>
    __asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	607b      	str	r3, [r7, #4]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xTaskIncrementTick+0x46>
 8003fc6:	4b75      	ldr	r3, [pc, #468]	@ (800419c <xTaskIncrementTick+0x220>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	4b74      	ldr	r3, [pc, #464]	@ (80041a0 <xTaskIncrementTick+0x224>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a72      	ldr	r2, [pc, #456]	@ (800419c <xTaskIncrementTick+0x220>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4a72      	ldr	r2, [pc, #456]	@ (80041a0 <xTaskIncrementTick+0x224>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b72      	ldr	r3, [pc, #456]	@ (80041a4 <xTaskIncrementTick+0x228>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	4a70      	ldr	r2, [pc, #448]	@ (80041a4 <xTaskIncrementTick+0x228>)
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	f000 fbd0 	bl	8004788 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80041a8 <xTaskIncrementTick+0x22c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f0c0 80ac 	bcc.w	800414c <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ff4:	4b69      	ldr	r3, [pc, #420]	@ (800419c <xTaskIncrementTick+0x220>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <xTaskIncrementTick+0x22c>)
 8004000:	f04f 32ff 	mov.w	r2, #4294967295
 8004004:	601a      	str	r2, [r3, #0]
                    break;
 8004006:	e0a1      	b.n	800414c <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004008:	4b64      	ldr	r3, [pc, #400]	@ (800419c <xTaskIncrementTick+0x220>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004018:	6a3a      	ldr	r2, [r7, #32]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	429a      	cmp	r2, r3
 800401e:	d203      	bcs.n	8004028 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004020:	4a61      	ldr	r2, [pc, #388]	@ (80041a8 <xTaskIncrementTick+0x22c>)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6013      	str	r3, [r2, #0]
                        break;
 8004026:	e091      	b.n	800414c <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	6892      	ldr	r2, [r2, #8]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3304      	adds	r3, #4
 800404a:	429a      	cmp	r2, r3
 800404c:	d103      	bne.n	8004056 <xTaskIncrementTick+0xda>
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2200      	movs	r2, #0
 800405a:	615a      	str	r2, [r3, #20]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01e      	beq.n	80040ac <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	6a12      	ldr	r2, [r2, #32]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	69d2      	ldr	r2, [r2, #28]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	3318      	adds	r3, #24
 8004090:	429a      	cmp	r2, r3
 8004092:	d103      	bne.n	800409c <xTaskIncrementTick+0x120>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2200      	movs	r2, #0
 80040a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1e5a      	subs	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f003 f970 	bl	8007394 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	4b3b      	ldr	r3, [pc, #236]	@ (80041ac <xTaskIncrementTick+0x230>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	4a3a      	ldr	r2, [pc, #232]	@ (80041ac <xTaskIncrementTick+0x230>)
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ca:	4939      	ldr	r1, [pc, #228]	@ (80041b0 <xTaskIncrementTick+0x234>)
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	3304      	adds	r3, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	3204      	adds	r2, #4
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4a29      	ldr	r2, [pc, #164]	@ (80041b0 <xTaskIncrementTick+0x234>)
 800410a:	441a      	add	r2, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	615a      	str	r2, [r3, #20]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004114:	4926      	ldr	r1, [pc, #152]	@ (80041b0 <xTaskIncrementTick+0x234>)
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	4821      	ldr	r0, [pc, #132]	@ (80041b0 <xTaskIncrementTick+0x234>)
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4403      	add	r3, r0
 8004134:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413a:	4b1e      	ldr	r3, [pc, #120]	@ (80041b4 <xTaskIncrementTick+0x238>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	429a      	cmp	r2, r3
 8004142:	f67f af57 	bls.w	8003ff4 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8004146:	2301      	movs	r3, #1
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414a:	e753      	b.n	8003ff4 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800414c:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <xTaskIncrementTick+0x238>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004152:	4917      	ldr	r1, [pc, #92]	@ (80041b0 <xTaskIncrementTick+0x234>)
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d901      	bls.n	8004168 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004168:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <xTaskIncrementTick+0x23c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
 8004174:	e004      	b.n	8004180 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004176:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <xTaskIncrementTick+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a0f      	ldr	r2, [pc, #60]	@ (80041bc <xTaskIncrementTick+0x240>)
 800417e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	4619      	mov	r1, r3
 8004184:	20db      	movs	r0, #219	@ 0xdb
 8004186:	f003 f80d 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	@ 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000268 	.word	0x20000268
 8004198:	20000244 	.word	0x20000244
 800419c:	200001f8 	.word	0x200001f8
 80041a0:	200001fc 	.word	0x200001fc
 80041a4:	20000258 	.word	0x20000258
 80041a8:	20000260 	.word	0x20000260
 80041ac:	20000248 	.word	0x20000248
 80041b0:	2000016c 	.word	0x2000016c
 80041b4:	20000168 	.word	0x20000168
 80041b8:	20000254 	.word	0x20000254
 80041bc:	20000250 	.word	0x20000250

080041c0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80041c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004280 <vTaskSwitchContext+0xc0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80041ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004284 <vTaskSwitchContext+0xc4>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80041d4:	e04f      	b.n	8004276 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 80041d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004284 <vTaskSwitchContext+0xc4>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80041dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004288 <vTaskSwitchContext+0xc8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80041ea:	7afb      	ldrb	r3, [r7, #11]
 80041ec:	f1c3 031f 	rsb	r3, r3, #31
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	4926      	ldr	r1, [pc, #152]	@ (800428c <vTaskSwitchContext+0xcc>)
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <vTaskSwitchContext+0x5e>
    __asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	607b      	str	r3, [r7, #4]
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	e7fd      	b.n	800421a <vTaskSwitchContext+0x5a>
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4a18      	ldr	r2, [pc, #96]	@ (800428c <vTaskSwitchContext+0xcc>)
 800422a:	4413      	add	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3308      	adds	r3, #8
 8004240:	429a      	cmp	r2, r3
 8004242:	d103      	bne.n	800424c <vTaskSwitchContext+0x8c>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a0f      	ldr	r2, [pc, #60]	@ (8004290 <vTaskSwitchContext+0xd0>)
 8004254:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8004256:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <vTaskSwitchContext+0xd4>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <vTaskSwitchContext+0xd0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d102      	bne.n	8004268 <vTaskSwitchContext+0xa8>
 8004262:	f002 fff7 	bl	8007254 <SEGGER_SYSVIEW_OnIdle>
 8004266:	e004      	b.n	8004272 <vTaskSwitchContext+0xb2>
 8004268:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <vTaskSwitchContext+0xd0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f003 f84f 	bl	8007310 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004272:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <vTaskSwitchContext+0xd0>)
 8004274:	681b      	ldr	r3, [r3, #0]
    }
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000268 	.word	0x20000268
 8004284:	20000254 	.word	0x20000254
 8004288:	20000248 	.word	0x20000248
 800428c:	2000016c 	.word	0x2000016c
 8004290:	20000168 	.word	0x20000168
 8004294:	20000264 	.word	0x20000264

08004298 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042c0:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <vTaskPlaceOnEventList+0x4c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3318      	adds	r3, #24
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fe fc1a 	bl	8002b02 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ce:	2101      	movs	r1, #1
 80042d0:	6838      	ldr	r0, [r7, #0]
 80042d2:	f000 fcd3 	bl	8004c7c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80042d6:	20e1      	movs	r0, #225	@ 0xe1
 80042d8:	f002 ff28 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000168 	.word	0x20000168

080042e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	613b      	str	r3, [r7, #16]
}
 800430c:	bf00      	nop
 800430e:	bf00      	nop
 8004310:	e7fd      	b.n	800430e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	4b17      	ldr	r3, [pc, #92]	@ (8004378 <vTaskPlaceOnEventListRestricted+0x90>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	61da      	str	r2, [r3, #28]
 8004320:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <vTaskPlaceOnEventListRestricted+0x90>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	621a      	str	r2, [r3, #32]
 800432a:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <vTaskPlaceOnEventListRestricted+0x90>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	3218      	adds	r2, #24
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <vTaskPlaceOnEventListRestricted+0x90>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f103 0218 	add.w	r2, r3, #24
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <vTaskPlaceOnEventListRestricted+0x90>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	629a      	str	r2, [r3, #40]	@ 0x28
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	68b8      	ldr	r0, [r7, #8]
 8004364:	f000 fc8a 	bl	8004c7c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8004368:	20e3      	movs	r0, #227	@ 0xe3
 800436a:	f002 fedf 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000168 	.word	0x20000168

0800437c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	@ 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	60fb      	str	r3, [r7, #12]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	6a12      	ldr	r2, [r2, #32]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	69d2      	ldr	r2, [r2, #28]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	3318      	adds	r3, #24
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d103      	bne.n	80043d8 <xTaskRemoveFromEventList+0x5c>
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2200      	movs	r2, #0
 80043dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80043e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004524 <xTaskRemoveFromEventList+0x1a8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d164      	bne.n	80044ba <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	6892      	ldr	r2, [r2, #8]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	3304      	adds	r3, #4
 8004412:	429a      	cmp	r2, r3
 8004414:	d103      	bne.n	800441e <xTaskRemoveFromEventList+0xa2>
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2200      	movs	r2, #0
 8004422:	615a      	str	r2, [r3, #20]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	4618      	mov	r0, r3
 8004432:	f002 ffaf 	bl	8007394 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	2201      	movs	r2, #1
 800443c:	409a      	lsls	r2, r3
 800443e:	4b3a      	ldr	r3, [pc, #232]	@ (8004528 <xTaskRemoveFromEventList+0x1ac>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	4a38      	ldr	r2, [pc, #224]	@ (8004528 <xTaskRemoveFromEventList+0x1ac>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444c:	4937      	ldr	r1, [pc, #220]	@ (800452c <xTaskRemoveFromEventList+0x1b0>)
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3304      	adds	r3, #4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	3204      	adds	r2, #4
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	1d1a      	adds	r2, r3, #4
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4a28      	ldr	r2, [pc, #160]	@ (800452c <xTaskRemoveFromEventList+0x1b0>)
 800448c:	441a      	add	r2, r3
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	615a      	str	r2, [r3, #20]
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004496:	4925      	ldr	r1, [pc, #148]	@ (800452c <xTaskRemoveFromEventList+0x1b0>)
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044a8:	1c59      	adds	r1, r3, #1
 80044aa:	4820      	ldr	r0, [pc, #128]	@ (800452c <xTaskRemoveFromEventList+0x1b0>)
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4403      	add	r3, r0
 80044b6:	6019      	str	r1, [r3, #0]
 80044b8:	e01b      	b.n	80044f2 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004530 <xTaskRemoveFromEventList+0x1b4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	61da      	str	r2, [r3, #28]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	621a      	str	r2, [r3, #32]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	3218      	adds	r2, #24
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f103 0218 	add.w	r2, r3, #24
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	4a12      	ldr	r2, [pc, #72]	@ (8004530 <xTaskRemoveFromEventList+0x1b4>)
 80044e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <xTaskRemoveFromEventList+0x1b4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a10      	ldr	r2, [pc, #64]	@ (8004530 <xTaskRemoveFromEventList+0x1b4>)
 80044f0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <xTaskRemoveFromEventList+0x1b8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d905      	bls.n	800450c <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004504:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <xTaskRemoveFromEventList+0x1bc>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e001      	b.n	8004510 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	4619      	mov	r1, r3
 8004514:	20e4      	movs	r0, #228	@ 0xe4
 8004516:	f002 fe45 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800451c:	4618      	mov	r0, r3
 800451e:	3728      	adds	r7, #40	@ 0x28
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000268 	.word	0x20000268
 8004528:	20000248 	.word	0x20000248
 800452c:	2000016c 	.word	0x2000016c
 8004530:	20000200 	.word	0x20000200
 8004534:	20000168 	.word	0x20000168
 8004538:	20000254 	.word	0x20000254

0800453c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004544:	4b07      	ldr	r3, [pc, #28]	@ (8004564 <vTaskInternalSetTimeOutState+0x28>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <vTaskInternalSetTimeOutState+0x2c>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8004554:	20e7      	movs	r0, #231	@ 0xe7
 8004556:	f002 fde9 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000258 	.word	0x20000258
 8004568:	20000244 	.word	0x20000244

0800456c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	613b      	str	r3, [r7, #16]
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	60fb      	str	r3, [r7, #12]
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	e7fd      	b.n	80045ae <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80045b2:	f001 f827 	bl	8005604 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80045b6:	4b21      	ldr	r3, [pc, #132]	@ (800463c <xTaskCheckForTimeOut+0xd0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d102      	bne.n	80045d6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e026      	b.n	8004624 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b19      	ldr	r3, [pc, #100]	@ (8004640 <xTaskCheckForTimeOut+0xd4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d00a      	beq.n	80045f8 <xTaskCheckForTimeOut+0x8c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d305      	bcc.n	80045f8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e015      	b.n	8004624 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d20b      	bcs.n	800461a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad2      	subs	r2, r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ff94 	bl	800453c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e004      	b.n	8004624 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004624:	f001 f820 	bl	8005668 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4619      	mov	r1, r3
 800462c:	20e8      	movs	r0, #232	@ 0xe8
 800462e:	f002 fdb9 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004632:	69fb      	ldr	r3, [r7, #28]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20000244 	.word	0x20000244
 8004640:	20000258 	.word	0x20000258

08004644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004648:	4b03      	ldr	r3, [pc, #12]	@ (8004658 <vTaskMissedYield+0x14>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800464e:	20e9      	movs	r0, #233	@ 0xe9
 8004650:	f002 fd6c 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
}
 8004654:	bf00      	nop
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000254 	.word	0x20000254

0800465c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004664:	f000 f852 	bl	800470c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <prvIdleTask+0x28>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d9f9      	bls.n	8004664 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <prvIdleTask+0x2c>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004680:	e7f0      	b.n	8004664 <prvIdleTask+0x8>
 8004682:	bf00      	nop
 8004684:	2000016c 	.word	0x2000016c
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	e00c      	b.n	80046b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a12      	ldr	r2, [pc, #72]	@ (80046ec <prvInitialiseTaskLists+0x60>)
 80046a4:	4413      	add	r3, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe f9fa 	bl	8002aa0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3301      	adds	r3, #1
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d9ef      	bls.n	8004698 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80046b8:	480d      	ldr	r0, [pc, #52]	@ (80046f0 <prvInitialiseTaskLists+0x64>)
 80046ba:	f7fe f9f1 	bl	8002aa0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80046be:	480d      	ldr	r0, [pc, #52]	@ (80046f4 <prvInitialiseTaskLists+0x68>)
 80046c0:	f7fe f9ee 	bl	8002aa0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80046c4:	480c      	ldr	r0, [pc, #48]	@ (80046f8 <prvInitialiseTaskLists+0x6c>)
 80046c6:	f7fe f9eb 	bl	8002aa0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80046ca:	480c      	ldr	r0, [pc, #48]	@ (80046fc <prvInitialiseTaskLists+0x70>)
 80046cc:	f7fe f9e8 	bl	8002aa0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80046d0:	480b      	ldr	r0, [pc, #44]	@ (8004700 <prvInitialiseTaskLists+0x74>)
 80046d2:	f7fe f9e5 	bl	8002aa0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <prvInitialiseTaskLists+0x78>)
 80046d8:	4a05      	ldr	r2, [pc, #20]	@ (80046f0 <prvInitialiseTaskLists+0x64>)
 80046da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <prvInitialiseTaskLists+0x7c>)
 80046de:	4a05      	ldr	r2, [pc, #20]	@ (80046f4 <prvInitialiseTaskLists+0x68>)
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	2000016c 	.word	0x2000016c
 80046f0:	200001d0 	.word	0x200001d0
 80046f4:	200001e4 	.word	0x200001e4
 80046f8:	20000200 	.word	0x20000200
 80046fc:	20000214 	.word	0x20000214
 8004700:	2000022c 	.word	0x2000022c
 8004704:	200001f8 	.word	0x200001f8
 8004708:	200001fc 	.word	0x200001fc

0800470c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004712:	e019      	b.n	8004748 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004714:	f000 ff76 	bl	8005604 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004718:	4b10      	ldr	r3, [pc, #64]	@ (800475c <prvCheckTasksWaitingTermination+0x50>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe fa27 	bl	8002b78 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800472a:	4b0d      	ldr	r3, [pc, #52]	@ (8004760 <prvCheckTasksWaitingTermination+0x54>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3b01      	subs	r3, #1
 8004730:	4a0b      	ldr	r2, [pc, #44]	@ (8004760 <prvCheckTasksWaitingTermination+0x54>)
 8004732:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <prvCheckTasksWaitingTermination+0x58>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3b01      	subs	r3, #1
 800473a:	4a0a      	ldr	r2, [pc, #40]	@ (8004764 <prvCheckTasksWaitingTermination+0x58>)
 800473c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800473e:	f000 ff93 	bl	8005668 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f810 	bl	8004768 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004748:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <prvCheckTasksWaitingTermination+0x58>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e1      	bne.n	8004714 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000214 	.word	0x20000214
 8004760:	20000240 	.word	0x20000240
 8004764:	20000228 	.word	0x20000228

08004768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	4618      	mov	r0, r3
 8004776:	f001 f9a5 	bl	8005ac4 <vPortFree>
            vPortFree( pxTCB );
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 f9a2 	bl	8005ac4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <prvResetNextTaskUnblockTime+0x30>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004796:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <prvResetNextTaskUnblockTime+0x34>)
 8004798:	f04f 32ff 	mov.w	r2, #4294967295
 800479c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800479e:	e005      	b.n	80047ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <prvResetNextTaskUnblockTime+0x30>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a04      	ldr	r2, [pc, #16]	@ (80047bc <prvResetNextTaskUnblockTime+0x34>)
 80047aa:	6013      	str	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	200001f8 	.word	0x200001f8
 80047bc:	20000260 	.word	0x20000260

080047c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <xTaskGetSchedulerState+0x3c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80047ce:	2301      	movs	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	e008      	b.n	80047e6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80047d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <xTaskGetSchedulerState+0x40>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80047dc:	2302      	movs	r3, #2
 80047de:	607b      	str	r3, [r7, #4]
 80047e0:	e001      	b.n	80047e6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4619      	mov	r1, r3
 80047ea:	20f5      	movs	r0, #245	@ 0xf5
 80047ec:	f002 fcda 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80047f0:	687b      	ldr	r3, [r7, #4]
    }
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	2000024c 	.word	0x2000024c
 8004800:	20000268 	.word	0x20000268

08004804 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 808d 	beq.w	8004936 <xTaskPriorityInherit+0x132>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004820:	4b4a      	ldr	r3, [pc, #296]	@ (800494c <xTaskPriorityInherit+0x148>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	429a      	cmp	r2, r3
 8004828:	d27c      	bcs.n	8004924 <xTaskPriorityInherit+0x120>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	db06      	blt.n	8004840 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8004832:	4b46      	ldr	r3, [pc, #280]	@ (800494c <xTaskPriorityInherit+0x148>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	f1c3 0205 	rsb	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6959      	ldr	r1, [r3, #20]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a3f      	ldr	r2, [pc, #252]	@ (8004950 <xTaskPriorityInherit+0x14c>)
 8004852:	4413      	add	r3, r2
 8004854:	4299      	cmp	r1, r3
 8004856:	d15d      	bne.n	8004914 <xTaskPriorityInherit+0x110>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	3304      	adds	r3, #4
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe f98b 	bl	8002b78 <uxListRemove>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	2201      	movs	r2, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43da      	mvns	r2, r3
 8004874:	4b37      	ldr	r3, [pc, #220]	@ (8004954 <xTaskPriorityInherit+0x150>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4013      	ands	r3, r2
 800487a:	4a36      	ldr	r2, [pc, #216]	@ (8004954 <xTaskPriorityInherit+0x150>)
 800487c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800487e:	4b33      	ldr	r3, [pc, #204]	@ (800494c <xTaskPriorityInherit+0x148>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4618      	mov	r0, r3
 800488c:	f002 fd82 	bl	8007394 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	4b2e      	ldr	r3, [pc, #184]	@ (8004954 <xTaskPriorityInherit+0x150>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4313      	orrs	r3, r2
 800489e:	4a2d      	ldr	r2, [pc, #180]	@ (8004954 <xTaskPriorityInherit+0x150>)
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a6:	492a      	ldr	r1, [pc, #168]	@ (8004950 <xTaskPriorityInherit+0x14c>)
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	3304      	adds	r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	609a      	str	r2, [r3, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	3204      	adds	r2, #4
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004950 <xTaskPriorityInherit+0x14c>)
 80048e6:	441a      	add	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	615a      	str	r2, [r3, #20]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f0:	4917      	ldr	r1, [pc, #92]	@ (8004950 <xTaskPriorityInherit+0x14c>)
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	4812      	ldr	r0, [pc, #72]	@ (8004950 <xTaskPriorityInherit+0x14c>)
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4403      	add	r3, r0
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e004      	b.n	800491e <xTaskPriorityInherit+0x11a>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004914:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <xTaskPriorityInherit+0x148>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800491e:	2301      	movs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e008      	b.n	8004936 <xTaskPriorityInherit+0x132>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004928:	4b08      	ldr	r3, [pc, #32]	@ (800494c <xTaskPriorityInherit+0x148>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	429a      	cmp	r2, r3
 8004930:	d201      	bcs.n	8004936 <xTaskPriorityInherit+0x132>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4619      	mov	r1, r3
 800493a:	20f6      	movs	r0, #246	@ 0xf6
 800493c:	f002 fc32 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004940:	697b      	ldr	r3, [r7, #20]
    }
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000168 	.word	0x20000168
 8004950:	2000016c 	.word	0x2000016c
 8004954:	20000248 	.word	0x20000248

08004958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8094 	beq.w	8004a98 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004970:	4b4e      	ldr	r3, [pc, #312]	@ (8004aac <xTaskPriorityDisinherit+0x154>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	429a      	cmp	r2, r3
 8004978:	d00b      	beq.n	8004992 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	613b      	str	r3, [r7, #16]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	60fb      	str	r3, [r7, #12]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b6:	1e5a      	subs	r2, r3, #1
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d067      	beq.n	8004a98 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d163      	bne.n	8004a98 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe f8cf 	bl	8002b78 <uxListRemove>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	2201      	movs	r2, #1
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	4b30      	ldr	r3, [pc, #192]	@ (8004ab0 <xTaskPriorityDisinherit+0x158>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4013      	ands	r3, r2
 80049f2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <xTaskPriorityDisinherit+0x158>)
 80049f4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	f1c3 0205 	rsb	r2, r3, #5
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f002 fcc1 	bl	8007394 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	2201      	movs	r2, #1
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <xTaskPriorityDisinherit+0x158>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	4a23      	ldr	r2, [pc, #140]	@ (8004ab0 <xTaskPriorityDisinherit+0x158>)
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a28:	4922      	ldr	r1, [pc, #136]	@ (8004ab4 <xTaskPriorityDisinherit+0x15c>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	3204      	adds	r2, #4
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	1d1a      	adds	r2, r3, #4
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <xTaskPriorityDisinherit+0x15c>)
 8004a68:	441a      	add	r2, r3
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	615a      	str	r2, [r3, #20]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a72:	4910      	ldr	r1, [pc, #64]	@ (8004ab4 <xTaskPriorityDisinherit+0x15c>)
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a84:	1c59      	adds	r1, r3, #1
 8004a86:	480b      	ldr	r0, [pc, #44]	@ (8004ab4 <xTaskPriorityDisinherit+0x15c>)
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4403      	add	r3, r0
 8004a92:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	20f7      	movs	r0, #247	@ 0xf7
 8004a9e:	f002 fb81 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
    }
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3720      	adds	r7, #32
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000168 	.word	0x20000168
 8004ab0:	20000248 	.word	0x20000248
 8004ab4:	2000016c 	.word	0x2000016c

08004ab8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	@ 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80aa 	beq.w	8004c26 <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	613b      	str	r3, [r7, #16]
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	e7fd      	b.n	8004aee <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d902      	bls.n	8004b02 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b00:	e002      	b.n	8004b08 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	f000 8089 	beq.w	8004c26 <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	f040 8083 	bne.w	8004c26 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004b20:	4b44      	ldr	r3, [pc, #272]	@ (8004c34 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d10b      	bne.n	8004b42 <vTaskPriorityDisinheritAfterTimeout+0x8a>
    __asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	60fb      	str	r3, [r7, #12]
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	db04      	blt.n	8004b60 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	f1c3 0205 	rsb	r2, r3, #5
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	6959      	ldr	r1, [r3, #20]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a32      	ldr	r2, [pc, #200]	@ (8004c38 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004b70:	4413      	add	r3, r2
 8004b72:	4299      	cmp	r1, r3
 8004b74:	d157      	bne.n	8004c26 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fd fffc 	bl	8002b78 <uxListRemove>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <vTaskPriorityDisinheritAfterTimeout+0xe4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43da      	mvns	r2, r3
 8004b92:	4b2a      	ldr	r3, [pc, #168]	@ (8004c3c <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4013      	ands	r3, r2
 8004b98:	4a28      	ldr	r2, [pc, #160]	@ (8004c3c <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004b9a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 fbf8 	bl	8007394 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	4b23      	ldr	r3, [pc, #140]	@ (8004c3c <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	4a22      	ldr	r2, [pc, #136]	@ (8004c3c <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bba:	491f      	ldr	r1, [pc, #124]	@ (8004c38 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	609a      	str	r2, [r3, #8]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	6a3a      	ldr	r2, [r7, #32]
 8004be0:	3204      	adds	r2, #4
 8004be2:	605a      	str	r2, [r3, #4]
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8004c38 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004bfa:	441a      	add	r2, r3
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	615a      	str	r2, [r3, #20]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c04:	490c      	ldr	r1, [pc, #48]	@ (8004c38 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	4807      	ldr	r0, [pc, #28]	@ (8004c38 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4403      	add	r3, r0
 8004c24:	6019      	str	r1, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
 8004c26:	20f8      	movs	r0, #248	@ 0xf8
 8004c28:	f002 fa80 	bl	800712c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8004c2c:	bf00      	nop
 8004c2e:	3728      	adds	r7, #40	@ 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000168 	.word	0x20000168
 8004c38:	2000016c 	.word	0x2000016c
 8004c3c:	20000248 	.word	0x20000248

08004c40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8004c46:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <pvTaskIncrementMutexHeldCount+0x38>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 fc3a 	bl	80074d8 <SEGGER_SYSVIEW_ShrinkId>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4619      	mov	r1, r3
 8004c68:	20fe      	movs	r0, #254	@ 0xfe
 8004c6a:	f002 fa9b 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxTCB;
 8004c6e:	687b      	ldr	r3, [r7, #4]
    }
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000168 	.word	0x20000168

08004c7c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004c86:	4b3d      	ldr	r3, [pc, #244]	@ (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d80 <prvAddCurrentTaskToDelayedList+0x104>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004c92:	4b3c      	ldr	r3, [pc, #240]	@ (8004d84 <prvAddCurrentTaskToDelayedList+0x108>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c98:	4b3b      	ldr	r3, [pc, #236]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd ff6a 	bl	8002b78 <uxListRemove>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004caa:	4b37      	ldr	r3, [pc, #220]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	4b34      	ldr	r3, [pc, #208]	@ (8004d8c <prvAddCurrentTaskToDelayedList+0x110>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	4a33      	ldr	r2, [pc, #204]	@ (8004d8c <prvAddCurrentTaskToDelayedList+0x110>)
 8004cc0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d124      	bne.n	8004d14 <prvAddCurrentTaskToDelayedList+0x98>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d021      	beq.n	8004d14 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x114>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	4b2a      	ldr	r3, [pc, #168]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	6892      	ldr	r2, [r2, #8]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	3204      	adds	r2, #4
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	609a      	str	r2, [r3, #8]
 8004cfe:	4b22      	ldr	r3, [pc, #136]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a23      	ldr	r2, [pc, #140]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d04:	615a      	str	r2, [r3, #20]
 8004d06:	4b22      	ldr	r3, [pc, #136]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a20      	ldr	r2, [pc, #128]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d12:	e02e      	b.n	8004d72 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d20d      	bcs.n	8004d48 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004d2c:	4b16      	ldr	r3, [pc, #88]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2104      	movs	r1, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f002 fb70 	bl	8007418 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004d38:	4b13      	ldr	r3, [pc, #76]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6978      	ldr	r0, [r7, #20]
 8004d42:	f7fd fede 	bl	8002b02 <vListInsert>
}
 8004d46:	e014      	b.n	8004d72 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004d48:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f002 fb62 	bl	8007418 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004d54:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	69b8      	ldr	r0, [r7, #24]
 8004d5e:	f7fd fed0 	bl	8002b02 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004d62:	4b0c      	ldr	r3, [pc, #48]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0x118>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d202      	bcs.n	8004d72 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004d6c:	4a09      	ldr	r2, [pc, #36]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0x118>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6013      	str	r3, [r2, #0]
}
 8004d72:	bf00      	nop
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000244 	.word	0x20000244
 8004d80:	200001f8 	.word	0x200001f8
 8004d84:	200001fc 	.word	0x200001fc
 8004d88:	20000168 	.word	0x20000168
 8004d8c:	20000248 	.word	0x20000248
 8004d90:	2000022c 	.word	0x2000022c
 8004d94:	20000260 	.word	0x20000260

08004d98 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004da2:	f000 fa77 	bl	8005294 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <xTimerCreateTimerTask+0x64>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004dae:	4b14      	ldr	r3, [pc, #80]	@ (8004e00 <xTimerCreateTimerTask+0x68>)
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	2302      	movs	r3, #2
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004dbc:	4911      	ldr	r1, [pc, #68]	@ (8004e04 <xTimerCreateTimerTask+0x6c>)
 8004dbe:	4812      	ldr	r0, [pc, #72]	@ (8004e08 <xTimerCreateTimerTask+0x70>)
 8004dc0:	f7fe fd49 	bl	8003856 <xTaskCreate>
 8004dc4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	603b      	str	r3, [r7, #0]
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004dec:	f002 f9da 	bl	80071a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004df0:	687b      	ldr	r3, [r7, #4]
    }
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	2000029c 	.word	0x2000029c
 8004e00:	200002a0 	.word	0x200002a0
 8004e04:	08008a18 	.word	0x08008a18
 8004e08:	08004eb1 	.word	0x08004eb1

08004e0c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e18:	e008      	b.n	8004e2c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4413      	add	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	18d1      	adds	r1, r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f8df 	bl	8004ffc <prvInsertTimerInActiveList>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ea      	bne.n	8004e1a <prvReloadTimer+0xe>
        }
    }
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <prvProcessExpiredTimer+0x5c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fd fe85 	bl	8002b78 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff ffc3 	bl	8004e0c <prvReloadTimer>
 8004e86:	e008      	b.n	8004e9a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	4798      	blx	r3
    }
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000294 	.word	0x20000294

08004eb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004eb8:	f107 0308 	add.w	r3, r7, #8
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f859 	bl	8004f74 <prvGetNextExpireTime>
 8004ec2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f805 	bl	8004ed8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004ece:	f000 f8d7 	bl	8005080 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ed2:	bf00      	nop
 8004ed4:	e7f0      	b.n	8004eb8 <prvTimerTask+0x8>
	...

08004ed8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004ee2:	f7fe ff03 	bl	8003cec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f866 	bl	8004fbc <prvSampleTimeNow>
 8004ef0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d130      	bne.n	8004f5a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <prvProcessTimerOrBlockTask+0x3c>
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d806      	bhi.n	8004f14 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004f06:	f7fe feff 	bl	8003d08 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ff9f 	bl	8004e50 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004f12:	e024      	b.n	8004f5e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f1a:	4b13      	ldr	r3, [pc, #76]	@ (8004f68 <prvProcessTimerOrBlockTask+0x90>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <prvProcessTimerOrBlockTask+0x50>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <prvProcessTimerOrBlockTask+0x52>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f6c <prvProcessTimerOrBlockTask+0x94>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f7fe fc19 	bl	8003770 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004f3e:	f7fe fee3 	bl	8003d08 <xTaskResumeAll>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004f48:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <prvProcessTimerOrBlockTask+0x98>)
 8004f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	f3bf 8f6f 	isb	sy
    }
 8004f58:	e001      	b.n	8004f5e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004f5a:	f7fe fed5 	bl	8003d08 <xTaskResumeAll>
    }
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000298 	.word	0x20000298
 8004f6c:	2000029c 	.word	0x2000029c
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb8 <prvGetNextExpireTime+0x44>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <prvGetNextExpireTime+0x16>
 8004f86:	2201      	movs	r2, #1
 8004f88:	e000      	b.n	8004f8c <prvGetNextExpireTime+0x18>
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f98:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <prvGetNextExpireTime+0x44>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e001      	b.n	8004fa8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
    }
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000294 	.word	0x20000294

08004fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004fc4:	f7fe ffb2 	bl	8003f2c <xTaskGetTickCount>
 8004fc8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004fca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <prvSampleTimeNow+0x3c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d205      	bcs.n	8004fe0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004fd4:	f000 f938 	bl	8005248 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004fe6:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <prvSampleTimeNow+0x3c>)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004fec:	68fb      	ldr	r3, [r7, #12]
    }
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200002a4 	.word	0x200002a4

08004ffc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d812      	bhi.n	8005048 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	429a      	cmp	r2, r3
 800502e:	d302      	bcc.n	8005036 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	e01b      	b.n	800506e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005036:	4b10      	ldr	r3, [pc, #64]	@ (8005078 <prvInsertTimerInActiveList+0x7c>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3304      	adds	r3, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fd fd5e 	bl	8002b02 <vListInsert>
 8005046:	e012      	b.n	800506e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d206      	bcs.n	800505e <prvInsertTimerInActiveList+0x62>
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e007      	b.n	800506e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800505e:	4b07      	ldr	r3, [pc, #28]	@ (800507c <prvInsertTimerInActiveList+0x80>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fd fd4a 	bl	8002b02 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800506e:	697b      	ldr	r3, [r7, #20]
    }
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000298 	.word	0x20000298
 800507c:	20000294 	.word	0x20000294

08005080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	@ 0x28
 8005084:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005092:	e0c7      	b.n	8005224 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	da19      	bge.n	80050ce <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	3304      	adds	r3, #4
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10b      	bne.n	80050be <prvProcessReceivedCommands+0x3e>
    __asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	61bb      	str	r3, [r7, #24]
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	e7fd      	b.n	80050ba <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	6850      	ldr	r0, [r2, #4]
 80050c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c8:	6892      	ldr	r2, [r2, #8]
 80050ca:	4611      	mov	r1, r2
 80050cc:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f2c0 80a7 	blt.w	8005224 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fd46 	bl	8002b78 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ec:	463b      	mov	r3, r7
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ff64 	bl	8004fbc <prvSampleTimeNow>
 80050f4:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	f200 808f 	bhi.w	800521e <prvProcessReceivedCommands+0x19e>
 8005100:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <prvProcessReceivedCommands+0x88>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800512d 	.word	0x0800512d
 800510c:	0800512d 	.word	0x0800512d
 8005110:	08005195 	.word	0x08005195
 8005114:	080051a9 	.word	0x080051a9
 8005118:	080051f5 	.word	0x080051f5
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800512d 	.word	0x0800512d
 8005124:	08005195 	.word	0x08005195
 8005128:	080051a9 	.word	0x080051a9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	b2da      	uxtb	r2, r3
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	18d1      	adds	r1, r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	6a38      	ldr	r0, [r7, #32]
 800514c:	f7ff ff56 	bl	8004ffc <prvInsertTimerInActiveList>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d065      	beq.n	8005222 <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	4413      	add	r3, r2
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	4619      	mov	r1, r3
 8005170:	6a38      	ldr	r0, [r7, #32]
 8005172:	f7ff fe4b 	bl	8004e0c <prvReloadTimer>
 8005176:	e008      	b.n	800518a <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	b2da      	uxtb	r2, r3
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	6a38      	ldr	r0, [r7, #32]
 8005190:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005192:	e046      	b.n	8005222 <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80051a6:	e03d      	b.n	8005224 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <prvProcessReceivedCommands+0x160>
    __asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	617b      	str	r3, [r7, #20]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	18d1      	adds	r1, r2, r3
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	6a38      	ldr	r0, [r7, #32]
 80051ee:	f7ff ff05 	bl	8004ffc <prvInsertTimerInActiveList>
                        break;
 80051f2:	e017      	b.n	8005224 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8005202:	6a38      	ldr	r0, [r7, #32]
 8005204:	f000 fc5e 	bl	8005ac4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005208:	e00c      	b.n	8005224 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800521c:	e002      	b.n	8005224 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <prvProcessReceivedCommands+0x1a4>
                        break;
 8005222:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005224:	4b07      	ldr	r3, [pc, #28]	@ (8005244 <prvProcessReceivedCommands+0x1c4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	1d39      	adds	r1, r7, #4
 800522a:	2200      	movs	r2, #0
 800522c:	4618      	mov	r0, r3
 800522e:	f7fd ff2d 	bl	800308c <xQueueReceive>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f47f af2d 	bne.w	8005094 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	3728      	adds	r7, #40	@ 0x28
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	2000029c 	.word	0x2000029c

08005248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800524e:	e009      	b.n	8005264 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005250:	4b0e      	ldr	r3, [pc, #56]	@ (800528c <prvSwitchTimerLists+0x44>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800525a:	f04f 31ff 	mov.w	r1, #4294967295
 800525e:	6838      	ldr	r0, [r7, #0]
 8005260:	f7ff fdf6 	bl	8004e50 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005264:	4b09      	ldr	r3, [pc, #36]	@ (800528c <prvSwitchTimerLists+0x44>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800526e:	4b07      	ldr	r3, [pc, #28]	@ (800528c <prvSwitchTimerLists+0x44>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005274:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <prvSwitchTimerLists+0x48>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a04      	ldr	r2, [pc, #16]	@ (800528c <prvSwitchTimerLists+0x44>)
 800527a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800527c:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <prvSwitchTimerLists+0x48>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
    }
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000294 	.word	0x20000294
 8005290:	20000298 	.word	0x20000298

08005294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005298:	f000 f9b4 	bl	8005604 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800529c:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <prvCheckForValidListAndQueue+0x54>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11d      	bne.n	80052e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80052a4:	4811      	ldr	r0, [pc, #68]	@ (80052ec <prvCheckForValidListAndQueue+0x58>)
 80052a6:	f7fd fbfb 	bl	8002aa0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80052aa:	4811      	ldr	r0, [pc, #68]	@ (80052f0 <prvCheckForValidListAndQueue+0x5c>)
 80052ac:	f7fd fbf8 	bl	8002aa0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <prvCheckForValidListAndQueue+0x60>)
 80052b2:	4a0e      	ldr	r2, [pc, #56]	@ (80052ec <prvCheckForValidListAndQueue+0x58>)
 80052b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80052b6:	4b10      	ldr	r3, [pc, #64]	@ (80052f8 <prvCheckForValidListAndQueue+0x64>)
 80052b8:	4a0d      	ldr	r2, [pc, #52]	@ (80052f0 <prvCheckForValidListAndQueue+0x5c>)
 80052ba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80052bc:	2200      	movs	r2, #0
 80052be:	2110      	movs	r1, #16
 80052c0:	200a      	movs	r0, #10
 80052c2:	f7fd fd1f 	bl	8002d04 <xQueueGenericCreate>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4a07      	ldr	r2, [pc, #28]	@ (80052e8 <prvCheckForValidListAndQueue+0x54>)
 80052ca:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <prvCheckForValidListAndQueue+0x54>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <prvCheckForValidListAndQueue+0x54>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4908      	ldr	r1, [pc, #32]	@ (80052fc <prvCheckForValidListAndQueue+0x68>)
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe f9f8 	bl	80036d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052e0:	f000 f9c2 	bl	8005668 <vPortExitCritical>
    }
 80052e4:	bf00      	nop
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	2000029c 	.word	0x2000029c
 80052ec:	2000026c 	.word	0x2000026c
 80052f0:	20000280 	.word	0x20000280
 80052f4:	20000294 	.word	0x20000294
 80052f8:	20000298 	.word	0x20000298
 80052fc:	08008a20 	.word	0x08008a20

08005300 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3b04      	subs	r3, #4
 8005310:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005318:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3b04      	subs	r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f023 0201 	bic.w	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b04      	subs	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005330:	4a0c      	ldr	r2, [pc, #48]	@ (8005364 <pxPortInitialiseStack+0x64>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b14      	subs	r3, #20
 800533a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b04      	subs	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f06f 0202 	mvn.w	r2, #2
 800534e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3b20      	subs	r3, #32
 8005354:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005356:	68fb      	ldr	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	08005369 	.word	0x08005369

08005368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005372:	4b13      	ldr	r3, [pc, #76]	@ (80053c0 <prvTaskExitError+0x58>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d00b      	beq.n	8005394 <prvTaskExitError+0x2c>
    __asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60fb      	str	r3, [r7, #12]
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	e7fd      	b.n	8005390 <prvTaskExitError+0x28>
    __asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60bb      	str	r3, [r7, #8]
}
 80053a6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80053a8:	bf00      	nop
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0fc      	beq.n	80053aa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000010 	.word	0x20000010
	...

080053d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80053d0:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <pxCurrentTCBConst2>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f380 8809 	msr	PSP, r0
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	4770      	bx	lr
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst2>:
 80053f0:	20000168 	.word	0x20000168
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80053f8:	4808      	ldr	r0, [pc, #32]	@ (800541c <prvPortStartFirstTask+0x24>)
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f380 8808 	msr	MSP, r0
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8814 	msr	CONTROL, r0
 800540a:	b662      	cpsie	i
 800540c:	b661      	cpsie	f
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	df00      	svc	0
 8005418:	bf00      	nop
 800541a:	0000      	.short	0x0000
 800541c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop

08005424 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	@ 0x30
 8005428:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800542a:	4b69      	ldr	r3, [pc, #420]	@ (80055d0 <xPortStartScheduler+0x1ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a69      	ldr	r2, [pc, #420]	@ (80055d4 <xPortStartScheduler+0x1b0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d10b      	bne.n	800544c <xPortStartScheduler+0x28>
    __asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800544c:	4b60      	ldr	r3, [pc, #384]	@ (80055d0 <xPortStartScheduler+0x1ac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a61      	ldr	r2, [pc, #388]	@ (80055d8 <xPortStartScheduler+0x1b4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10b      	bne.n	800546e <xPortStartScheduler+0x4a>
    __asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	623b      	str	r3, [r7, #32]
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	e7fd      	b.n	800546a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800546e:	4b5b      	ldr	r3, [pc, #364]	@ (80055dc <xPortStartScheduler+0x1b8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	332c      	adds	r3, #44	@ 0x2c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a59      	ldr	r2, [pc, #356]	@ (80055e0 <xPortStartScheduler+0x1bc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00b      	beq.n	8005498 <xPortStartScheduler+0x74>
    __asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	61fb      	str	r3, [r7, #28]
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	3338      	adds	r3, #56	@ 0x38
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a51      	ldr	r2, [pc, #324]	@ (80055e4 <xPortStartScheduler+0x1c0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <xPortStartScheduler+0x98>
    __asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61bb      	str	r3, [r7, #24]
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054c0:	4b49      	ldr	r3, [pc, #292]	@ (80055e8 <xPortStartScheduler+0x1c4>)
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	22ff      	movs	r2, #255	@ 0xff
 80054d0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	4b41      	ldr	r3, [pc, #260]	@ (80055ec <xPortStartScheduler+0x1c8>)
 80054e6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80054e8:	4b40      	ldr	r3, [pc, #256]	@ (80055ec <xPortStartScheduler+0x1c8>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <xPortStartScheduler+0xe4>
    __asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	617b      	str	r3, [r7, #20]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005512:	2b00      	cmp	r3, #0
 8005514:	d013      	beq.n	800553e <xPortStartScheduler+0x11a>
    __asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	613b      	str	r3, [r7, #16]
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	e7fd      	b.n	800552a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	3301      	adds	r3, #1
 8005532:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005546:	2b80      	cmp	r3, #128	@ 0x80
 8005548:	d0f1      	beq.n	800552e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d103      	bne.n	8005558 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005550:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <xPortStartScheduler+0x1cc>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e004      	b.n	8005562 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f1c3 0307 	rsb	r3, r3, #7
 800555e:	4a24      	ldr	r2, [pc, #144]	@ (80055f0 <xPortStartScheduler+0x1cc>)
 8005560:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005562:	4b23      	ldr	r3, [pc, #140]	@ (80055f0 <xPortStartScheduler+0x1cc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	4a21      	ldr	r2, [pc, #132]	@ (80055f0 <xPortStartScheduler+0x1cc>)
 800556a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800556c:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <xPortStartScheduler+0x1cc>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005574:	4a1e      	ldr	r2, [pc, #120]	@ (80055f0 <xPortStartScheduler+0x1cc>)
 8005576:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	b2da      	uxtb	r2, r3
 800557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005580:	4b1c      	ldr	r3, [pc, #112]	@ (80055f4 <xPortStartScheduler+0x1d0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <xPortStartScheduler+0x1d0>)
 8005586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800558a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800558c:	4b19      	ldr	r3, [pc, #100]	@ (80055f4 <xPortStartScheduler+0x1d0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <xPortStartScheduler+0x1d0>)
 8005592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005596:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005598:	4b17      	ldr	r3, [pc, #92]	@ (80055f8 <xPortStartScheduler+0x1d4>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800559e:	f000 f8ed 	bl	800577c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80055a2:	4b16      	ldr	r3, [pc, #88]	@ (80055fc <xPortStartScheduler+0x1d8>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80055a8:	f000 f90c 	bl	80057c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055ac:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <xPortStartScheduler+0x1dc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a13      	ldr	r2, [pc, #76]	@ (8005600 <xPortStartScheduler+0x1dc>)
 80055b2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055b6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80055b8:	f7ff ff1e 	bl	80053f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80055bc:	f7fe fe00 	bl	80041c0 <vTaskSwitchContext>
    prvTaskExitError();
 80055c0:	f7ff fed2 	bl	8005368 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3730      	adds	r7, #48	@ 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000ed00 	.word	0xe000ed00
 80055d4:	410fc271 	.word	0x410fc271
 80055d8:	410fc270 	.word	0x410fc270
 80055dc:	e000ed08 	.word	0xe000ed08
 80055e0:	080053d1 	.word	0x080053d1
 80055e4:	080056c1 	.word	0x080056c1
 80055e8:	e000e400 	.word	0xe000e400
 80055ec:	200002a8 	.word	0x200002a8
 80055f0:	200002ac 	.word	0x200002ac
 80055f4:	e000ed20 	.word	0xe000ed20
 80055f8:	e000ed1c 	.word	0xe000ed1c
 80055fc:	20000010 	.word	0x20000010
 8005600:	e000ef34 	.word	0xe000ef34

08005604 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
    __asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	607b      	str	r3, [r7, #4]
}
 800561c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800561e:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <vPortEnterCritical+0x5c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	4a0e      	ldr	r2, [pc, #56]	@ (8005660 <vPortEnterCritical+0x5c>)
 8005626:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005628:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <vPortEnterCritical+0x5c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d110      	bne.n	8005652 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005630:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <vPortEnterCritical+0x60>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <vPortEnterCritical+0x4e>
    __asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	603b      	str	r3, [r7, #0]
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	e7fd      	b.n	800564e <vPortEnterCritical+0x4a>
    }
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000010 	.word	0x20000010
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800566e:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <vPortExitCritical+0x50>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <vPortExitCritical+0x26>
    __asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	607b      	str	r3, [r7, #4]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <vPortExitCritical+0x50>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3b01      	subs	r3, #1
 8005694:	4a08      	ldr	r2, [pc, #32]	@ (80056b8 <vPortExitCritical+0x50>)
 8005696:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005698:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <vPortExitCritical+0x50>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <vPortExitCritical+0x44>
 80056a0:	2300      	movs	r3, #0
 80056a2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80056aa:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	20000010 	.word	0x20000010
 80056bc:	00000000 	.word	0x00000000

080056c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80056c0:	f3ef 8009 	mrs	r0, PSP
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <pxCurrentTCBConst>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	f01e 0f10 	tst.w	lr, #16
 80056d0:	bf08      	it	eq
 80056d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	6010      	str	r0, [r2, #0]
 80056dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056e4:	f380 8811 	msr	BASEPRI, r0
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f7fe fd66 	bl	80041c0 <vTaskSwitchContext>
 80056f4:	f04f 0000 	mov.w	r0, #0
 80056f8:	f380 8811 	msr	BASEPRI, r0
 80056fc:	bc09      	pop	{r0, r3}
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005706:	f01e 0f10 	tst.w	lr, #16
 800570a:	bf08      	it	eq
 800570c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005710:	f380 8809 	msr	PSP, r0
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	f3af 8000 	nop.w

08005720 <pxCurrentTCBConst>:
 8005720:	20000168 	.word	0x20000168
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
    __asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005742:	f001 fc79 	bl	8007038 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005746:	f7fe fc19 	bl	8003f7c <xTaskIncrementTick>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005750:	f001 fcd0 	bl	80070f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005754:	4b08      	ldr	r3, [pc, #32]	@ (8005778 <SysTick_Handler+0x50>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e001      	b.n	8005762 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800575e:	f001 fcad 	bl	80070bc <SEGGER_SYSVIEW_RecordExitISR>
 8005762:	2300      	movs	r3, #0
 8005764:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f383 8811 	msr	BASEPRI, r3
}
 800576c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005780:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <vPortSetupTimerInterrupt+0x34>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005786:	4b0b      	ldr	r3, [pc, #44]	@ (80057b4 <vPortSetupTimerInterrupt+0x38>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <vPortSetupTimerInterrupt+0x3c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0a      	ldr	r2, [pc, #40]	@ (80057bc <vPortSetupTimerInterrupt+0x40>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	4a09      	ldr	r2, [pc, #36]	@ (80057c0 <vPortSetupTimerInterrupt+0x44>)
 800579a:	3b01      	subs	r3, #1
 800579c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800579e:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <vPortSetupTimerInterrupt+0x34>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000e010 	.word	0xe000e010
 80057b4:	e000e018 	.word	0xe000e018
 80057b8:	20000000 	.word	0x20000000
 80057bc:	10624dd3 	.word	0x10624dd3
 80057c0:	e000e014 	.word	0xe000e014

080057c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80057c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057d4 <vPortEnableVFP+0x10>
 80057c8:	6801      	ldr	r1, [r0, #0]
 80057ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80057ce:	6001      	str	r1, [r0, #0]
 80057d0:	4770      	bx	lr
 80057d2:	0000      	.short	0x0000
 80057d4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop

080057dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80057e2:	f3ef 8305 	mrs	r3, IPSR
 80057e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b0f      	cmp	r3, #15
 80057ec:	d915      	bls.n	800581a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ee:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <vPortValidateInterruptPriority+0x74>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057f8:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <vPortValidateInterruptPriority+0x78>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	7afa      	ldrb	r2, [r7, #11]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d20b      	bcs.n	800581a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	607b      	str	r3, [r7, #4]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800581a:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <vPortValidateInterruptPriority+0x7c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005822:	4b0e      	ldr	r3, [pc, #56]	@ (800585c <vPortValidateInterruptPriority+0x80>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d90b      	bls.n	8005842 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <vPortValidateInterruptPriority+0x62>
    }
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	e000e3f0 	.word	0xe000e3f0
 8005854:	200002a8 	.word	0x200002a8
 8005858:	e000ed0c 	.word	0xe000ed0c
 800585c:	200002ac 	.word	0x200002ac

08005860 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08e      	sub	sp, #56	@ 0x38
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d022      	beq.n	80058b8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005872:	2308      	movs	r3, #8
 8005874:	43db      	mvns	r3, r3
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d81b      	bhi.n	80058b4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800587c:	2208      	movs	r2, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4413      	add	r3, r2
 8005882:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d014      	beq.n	80058b8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	f1c3 0308 	rsb	r3, r3, #8
 8005898:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	43db      	mvns	r3, r3
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d804      	bhi.n	80058ae <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	4413      	add	r3, r2
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	e004      	b.n	80058b8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	e001      	b.n	80058b8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80058b8:	f7fe fa18 	bl	8003cec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80058bc:	4b7a      	ldr	r3, [pc, #488]	@ (8005aa8 <pvPortMalloc+0x248>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80058c4:	f000 f978 	bl	8005bb8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f2c0 80d3 	blt.w	8005a76 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80cf 	beq.w	8005a76 <pvPortMalloc+0x216>
 80058d8:	4b74      	ldr	r3, [pc, #464]	@ (8005aac <pvPortMalloc+0x24c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	f200 80c9 	bhi.w	8005a76 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80058e4:	4b72      	ldr	r3, [pc, #456]	@ (8005ab0 <pvPortMalloc+0x250>)
 80058e6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80058e8:	4b71      	ldr	r3, [pc, #452]	@ (8005ab0 <pvPortMalloc+0x250>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80058ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f0:	4a70      	ldr	r2, [pc, #448]	@ (8005ab4 <pvPortMalloc+0x254>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d305      	bcc.n	8005902 <pvPortMalloc+0xa2>
 80058f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f8:	4a6f      	ldr	r2, [pc, #444]	@ (8005ab8 <pvPortMalloc+0x258>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d801      	bhi.n	8005902 <pvPortMalloc+0xa2>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <pvPortMalloc+0xa4>
 8005902:	2300      	movs	r3, #0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d129      	bne.n	800595c <pvPortMalloc+0xfc>
    __asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	623b      	str	r3, [r7, #32]
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005922:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800592a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592c:	4a61      	ldr	r2, [pc, #388]	@ (8005ab4 <pvPortMalloc+0x254>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d305      	bcc.n	800593e <pvPortMalloc+0xde>
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	4a60      	ldr	r2, [pc, #384]	@ (8005ab8 <pvPortMalloc+0x258>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d801      	bhi.n	800593e <pvPortMalloc+0xde>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <pvPortMalloc+0xe0>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10b      	bne.n	800595c <pvPortMalloc+0xfc>
    __asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	61fb      	str	r3, [r7, #28]
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d903      	bls.n	800596e <pvPortMalloc+0x10e>
 8005966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1d8      	bne.n	8005920 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800596e:	4b4e      	ldr	r3, [pc, #312]	@ (8005aa8 <pvPortMalloc+0x248>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005974:	429a      	cmp	r2, r3
 8005976:	d07e      	beq.n	8005a76 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2208      	movs	r2, #8
 800597e:	4413      	add	r3, r2
 8005980:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	4a4b      	ldr	r2, [pc, #300]	@ (8005ab4 <pvPortMalloc+0x254>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d305      	bcc.n	8005996 <pvPortMalloc+0x136>
 800598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ab8 <pvPortMalloc+0x258>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d801      	bhi.n	8005996 <pvPortMalloc+0x136>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <pvPortMalloc+0x138>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <pvPortMalloc+0x154>
    __asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	61bb      	str	r3, [r7, #24]
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d90b      	bls.n	80059de <pvPortMalloc+0x17e>
    __asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	617b      	str	r3, [r7, #20]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	1ad2      	subs	r2, r2, r3
 80059e6:	2308      	movs	r3, #8
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d924      	bls.n	8005a38 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <pvPortMalloc+0x1b8>
    __asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a36:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a38:	4b1c      	ldr	r3, [pc, #112]	@ (8005aac <pvPortMalloc+0x24c>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a1a      	ldr	r2, [pc, #104]	@ (8005aac <pvPortMalloc+0x24c>)
 8005a44:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a46:	4b19      	ldr	r3, [pc, #100]	@ (8005aac <pvPortMalloc+0x24c>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <pvPortMalloc+0x25c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d203      	bcs.n	8005a5a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a52:	4b16      	ldr	r3, [pc, #88]	@ (8005aac <pvPortMalloc+0x24c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a19      	ldr	r2, [pc, #100]	@ (8005abc <pvPortMalloc+0x25c>)
 8005a58:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a64:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005a6c:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <pvPortMalloc+0x260>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <pvPortMalloc+0x260>)
 8005a74:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005a76:	f7fe f947 	bl	8003d08 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <pvPortMalloc+0x23c>
    __asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	60fb      	str	r3, [r7, #12]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <pvPortMalloc+0x238>
    return pvReturn;
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3738      	adds	r7, #56	@ 0x38
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20012eb8 	.word	0x20012eb8
 8005aac:	20012ebc 	.word	0x20012ebc
 8005ab0:	20012eb0 	.word	0x20012eb0
 8005ab4:	200002b0 	.word	0x200002b0
 8005ab8:	20012eaf 	.word	0x20012eaf
 8005abc:	20012ec0 	.word	0x20012ec0
 8005ac0:	20012ec4 	.word	0x20012ec4

08005ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d064      	beq.n	8005ba0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	425b      	negs	r3, r3
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	4a30      	ldr	r2, [pc, #192]	@ (8005ba8 <vPortFree+0xe4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d305      	bcc.n	8005af8 <vPortFree+0x34>
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4a2f      	ldr	r2, [pc, #188]	@ (8005bac <vPortFree+0xe8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d801      	bhi.n	8005af8 <vPortFree+0x34>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <vPortFree+0x36>
 8005af8:	2300      	movs	r3, #0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <vPortFree+0x52>
    __asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	617b      	str	r3, [r7, #20]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	db0b      	blt.n	8005b36 <vPortFree+0x72>
    __asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	613b      	str	r3, [r7, #16]
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	e7fd      	b.n	8005b32 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <vPortFree+0x92>
    __asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60fb      	str	r3, [r7, #12]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	0fdb      	lsrs	r3, r3, #31
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01c      	beq.n	8005ba0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d118      	bne.n	8005ba0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005b7a:	f7fe f8b7 	bl	8003cec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <vPortFree+0xec>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4413      	add	r3, r2
 8005b88:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <vPortFree+0xec>)
 8005b8a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b8c:	69b8      	ldr	r0, [r7, #24]
 8005b8e:	f000 f86d 	bl	8005c6c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005b92:	4b08      	ldr	r3, [pc, #32]	@ (8005bb4 <vPortFree+0xf0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	4a06      	ldr	r2, [pc, #24]	@ (8005bb4 <vPortFree+0xf0>)
 8005b9a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005b9c:	f7fe f8b4 	bl	8003d08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005ba0:	bf00      	nop
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	200002b0 	.word	0x200002b0
 8005bac:	20012eaf 	.word	0x20012eaf
 8005bb0:	20012ebc 	.word	0x20012ebc
 8005bb4:	20012ec8 	.word	0x20012ec8

08005bb8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bbe:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005bc2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005bc4:	4b24      	ldr	r3, [pc, #144]	@ (8005c58 <prvHeapInit+0xa0>)
 8005bc6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3307      	adds	r3, #7
 8005bd6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0307 	bic.w	r3, r3, #7
 8005bde:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c58 <prvHeapInit+0xa0>)
 8005be8:	4413      	add	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a1b      	ldr	r2, [pc, #108]	@ (8005c5c <prvHeapInit+0xa4>)
 8005bf0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <prvHeapInit+0xa4>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005c00:	2208      	movs	r2, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f023 0307 	bic.w	r3, r3, #7
 8005c0e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a13      	ldr	r2, [pc, #76]	@ (8005c60 <prvHeapInit+0xa8>)
 8005c14:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005c16:	4b12      	ldr	r3, [pc, #72]	@ (8005c60 <prvHeapInit+0xa8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005c1e:	4b10      	ldr	r3, [pc, #64]	@ (8005c60 <prvHeapInit+0xa8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <prvHeapInit+0xa8>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4a08      	ldr	r2, [pc, #32]	@ (8005c64 <prvHeapInit+0xac>)
 8005c42:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4a07      	ldr	r2, [pc, #28]	@ (8005c68 <prvHeapInit+0xb0>)
 8005c4a:	6013      	str	r3, [r2, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	200002b0 	.word	0x200002b0
 8005c5c:	20012eb0 	.word	0x20012eb0
 8005c60:	20012eb8 	.word	0x20012eb8
 8005c64:	20012ec0 	.word	0x20012ec0
 8005c68:	20012ebc 	.word	0x20012ebc

08005c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005c74:	4b36      	ldr	r3, [pc, #216]	@ (8005d50 <prvInsertBlockIntoFreeList+0xe4>)
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	e002      	b.n	8005c80 <prvInsertBlockIntoFreeList+0x14>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d8f7      	bhi.n	8005c7a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	4a30      	ldr	r2, [pc, #192]	@ (8005d50 <prvInsertBlockIntoFreeList+0xe4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4a2f      	ldr	r2, [pc, #188]	@ (8005d54 <prvInsertBlockIntoFreeList+0xe8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d305      	bcc.n	8005ca6 <prvInsertBlockIntoFreeList+0x3a>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d58 <prvInsertBlockIntoFreeList+0xec>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d801      	bhi.n	8005ca6 <prvInsertBlockIntoFreeList+0x3a>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <prvInsertBlockIntoFreeList+0x3c>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60fb      	str	r3, [r7, #12]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d108      	bne.n	8005ce8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	441a      	add	r2, r3
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	441a      	add	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d118      	bne.n	8005d2e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b16      	ldr	r3, [pc, #88]	@ (8005d5c <prvInsertBlockIntoFreeList+0xf0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d00d      	beq.n	8005d24 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	441a      	add	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e008      	b.n	8005d36 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005d24:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <prvInsertBlockIntoFreeList+0xf0>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e003      	b.n	8005d36 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d002      	beq.n	8005d44 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	20012eb0 	.word	0x20012eb0
 8005d54:	200002b0 	.word	0x200002b0
 8005d58:	20012eaf 	.word	0x20012eaf
 8005d5c:	20012eb8 	.word	0x20012eb8

08005d60 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005d64:	4803      	ldr	r0, [pc, #12]	@ (8005d74 <_cbSendSystemDesc+0x14>)
 8005d66:	f001 f911 	bl	8006f8c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005d6a:	4803      	ldr	r0, [pc, #12]	@ (8005d78 <_cbSendSystemDesc+0x18>)
 8005d6c:	f001 f90e 	bl	8006f8c <SEGGER_SYSVIEW_SendSysDesc>
}
 8005d70:	bf00      	nop
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	08008a28 	.word	0x08008a28
 8005d78:	08008a54 	.word	0x08008a54

08005d7c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005d80:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <SEGGER_SYSVIEW_Conf+0x20>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <SEGGER_SYSVIEW_Conf+0x20>)
 8005d86:	6819      	ldr	r1, [r3, #0]
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <SEGGER_SYSVIEW_Conf+0x24>)
 8005d8a:	4a06      	ldr	r2, [pc, #24]	@ (8005da4 <SEGGER_SYSVIEW_Conf+0x28>)
 8005d8c:	f000 fd84 	bl	8006898 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005d90:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005d94:	f000 fdc4 	bl	8006920 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000000 	.word	0x20000000
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08008b10 	.word	0x08008b10

08005da8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005dae:	4b26      	ldr	r3, [pc, #152]	@ (8005e48 <_DoInit+0xa0>)
 8005db0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005db2:	22a8      	movs	r2, #168	@ 0xa8
 8005db4:	2100      	movs	r1, #0
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f001 ff5b 	bl	8007c72 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4a20      	ldr	r2, [pc, #128]	@ (8005e4c <_DoInit+0xa4>)
 8005dcc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <_DoInit+0xa8>)
 8005dd2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dda:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	4a16      	ldr	r2, [pc, #88]	@ (8005e4c <_DoInit+0xa4>)
 8005df2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4a17      	ldr	r2, [pc, #92]	@ (8005e54 <_DoInit+0xac>)
 8005df8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005e12:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
 8005e1a:	e00c      	b.n	8005e36 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f1c3 030f 	rsb	r3, r3, #15
 8005e22:	4a0d      	ldr	r2, [pc, #52]	@ (8005e58 <_DoInit+0xb0>)
 8005e24:	5cd1      	ldrb	r1, [r2, r3]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	460a      	mov	r2, r1
 8005e2e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3301      	adds	r3, #1
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b0f      	cmp	r3, #15
 8005e3a:	d9ef      	bls.n	8005e1c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005e3c:	f3bf 8f5f 	dmb	sy
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20012ecc 	.word	0x20012ecc
 8005e4c:	08008a64 	.word	0x08008a64
 8005e50:	20012f74 	.word	0x20012f74
 8005e54:	20013374 	.word	0x20013374
 8005e58:	08008af0 	.word	0x08008af0

08005e5c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	@ 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d905      	bls.n	8005e8c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8a:	e007      	b.n	8005e9c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	69b9      	ldr	r1, [r7, #24]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	1acb      	subs	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bf28      	it	cs
 8005eaa:	4613      	movcs	r3, r2
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	bf28      	it	cs
 8005eb6:	4613      	movcs	r3, r2
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f001 ff3c 	bl	8007d46 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	4413      	add	r3, r2
 8005ed4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	4413      	add	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	4413      	add	r3, r2
 8005eec:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d101      	bne.n	8005efc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005efc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1b2      	bne.n	8005e72 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3728      	adds	r7, #40	@ 0x28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b088      	sub	sp, #32
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d911      	bls.n	8005f5e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6938      	ldr	r0, [r7, #16]
 8005f4a:	f001 fefc 	bl	8007d46 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f4e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005f5c:	e01f      	b.n	8005f9e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	6938      	ldr	r0, [r7, #16]
 8005f72:	f001 fee8 	bl	8007d46 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	4413      	add	r3, r2
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6938      	ldr	r0, [r7, #16]
 8005f90:	f001 fed9 	bl	8007d46 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f94:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	60da      	str	r2, [r3, #12]
}
 8005f9e:	bf00      	nop
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d808      	bhi.n	8005fd4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1ad2      	subs	r2, r2, r3
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e004      	b.n	8005fde <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005fde:	697b      	ldr	r3, [r7, #20]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08c      	sub	sp, #48	@ 0x30
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80060f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b53      	cmp	r3, #83	@ 0x53
 8006004:	d001      	beq.n	800600a <SEGGER_RTT_ReadNoLock+0x1e>
 8006006:	f7ff fecf 	bl	8005da8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4613      	mov	r3, r2
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	4413      	add	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	3360      	adds	r3, #96	@ 0x60
 8006016:	4a37      	ldr	r2, [pc, #220]	@ (80060f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8006018:	4413      	add	r3, r2
 800601a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800602c:	2300      	movs	r3, #0
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	429a      	cmp	r2, r3
 8006036:	d92b      	bls.n	8006090 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4293      	cmp	r3, r2
 8006048:	bf28      	it	cs
 800604a:	4613      	movcs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	4413      	add	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	6939      	ldr	r1, [r7, #16]
 800605c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800605e:	f001 fe72 	bl	8007d46 <memcpy>
    NumBytesRead += NumBytesRem;
 8006062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800606a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4413      	add	r3, r2
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800607a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	4413      	add	r3, r2
 8006080:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006088:	429a      	cmp	r2, r3
 800608a:	d101      	bne.n	8006090 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800608c:	2300      	movs	r3, #0
 800608e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4293      	cmp	r3, r2
 800609e:	bf28      	it	cs
 80060a0:	4613      	movcs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d019      	beq.n	80060de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	4413      	add	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	6939      	ldr	r1, [r7, #16]
 80060b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060ba:	f001 fe44 	bl	8007d46 <memcpy>
    NumBytesRead += NumBytesRem;
 80060be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80060c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80060d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80060de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3730      	adds	r7, #48	@ 0x30
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20012ecc 	.word	0x20012ecc

080060f8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	4613      	mov	r3, r2
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4a1f      	ldr	r2, [pc, #124]	@ (8006194 <SEGGER_RTT_WriteNoLock+0x9c>)
 8006116:	4413      	add	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d029      	beq.n	8006176 <SEGGER_RTT_WriteNoLock+0x7e>
 8006122:	2b02      	cmp	r3, #2
 8006124:	d82e      	bhi.n	8006184 <SEGGER_RTT_WriteNoLock+0x8c>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <SEGGER_RTT_WriteNoLock+0x38>
 800612a:	2b01      	cmp	r3, #1
 800612c:	d013      	beq.n	8006156 <SEGGER_RTT_WriteNoLock+0x5e>
 800612e:	e029      	b.n	8006184 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006130:	6978      	ldr	r0, [r7, #20]
 8006132:	f7ff ff38 	bl	8005fa6 <_GetAvailWriteSpace>
 8006136:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d202      	bcs.n	8006146 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006144:	e021      	b.n	800618a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	6978      	ldr	r0, [r7, #20]
 8006150:	f7ff fee1 	bl	8005f16 <_WriteNoCheck>
    break;
 8006154:	e019      	b.n	800618a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006156:	6978      	ldr	r0, [r7, #20]
 8006158:	f7ff ff25 	bl	8005fa6 <_GetAvailWriteSpace>
 800615c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4293      	cmp	r3, r2
 8006164:	bf28      	it	cs
 8006166:	4613      	movcs	r3, r2
 8006168:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	69b9      	ldr	r1, [r7, #24]
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff fed1 	bl	8005f16 <_WriteNoCheck>
    break;
 8006174:	e009      	b.n	800618a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	69b9      	ldr	r1, [r7, #24]
 800617a:	6978      	ldr	r0, [r7, #20]
 800617c:	f7ff fe6e 	bl	8005e5c <_WriteBlocking>
 8006180:	61f8      	str	r0, [r7, #28]
    break;
 8006182:	e002      	b.n	800618a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
    break;
 8006188:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800618a:	69fb      	ldr	r3, [r7, #28]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20012ecc 	.word	0x20012ecc

08006198 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80061a4:	4b0e      	ldr	r3, [pc, #56]	@ (80061e0 <SEGGER_RTT_Write+0x48>)
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b53      	cmp	r3, #83	@ 0x53
 80061b0:	d001      	beq.n	80061b6 <SEGGER_RTT_Write+0x1e>
 80061b2:	f7ff fdf9 	bl	8005da8 <_DoInit>
  SEGGER_RTT_LOCK();
 80061b6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ba:	f04f 0120 	mov.w	r1, #32
 80061be:	f381 8811 	msr	BASEPRI, r1
 80061c2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7ff ff95 	bl	80060f8 <SEGGER_RTT_WriteNoLock>
 80061ce:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80061d6:	697b      	ldr	r3, [r7, #20]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20012ecc 	.word	0x20012ecc

080061e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80061f2:	4b3d      	ldr	r3, [pc, #244]	@ (80062e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b53      	cmp	r3, #83	@ 0x53
 80061fe:	d001      	beq.n	8006204 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006200:	f7ff fdd2 	bl	8005da8 <_DoInit>
  SEGGER_RTT_LOCK();
 8006204:	f3ef 8311 	mrs	r3, BASEPRI
 8006208:	f04f 0120 	mov.w	r1, #32
 800620c:	f381 8811 	msr	BASEPRI, r1
 8006210:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006212:	4b35      	ldr	r3, [pc, #212]	@ (80062e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006214:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800621a:	6939      	ldr	r1, [r7, #16]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	3304      	adds	r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3301      	adds	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	429a      	cmp	r2, r3
 8006240:	dbeb      	blt.n	800621a <SEGGER_RTT_AllocUpBuffer+0x36>
 8006242:	e000      	b.n	8006246 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006244:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	429a      	cmp	r2, r3
 800624e:	da3f      	bge.n	80062d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006250:	6939      	ldr	r1, [r7, #16]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	440b      	add	r3, r1
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006264:	6939      	ldr	r1, [r7, #16]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	4613      	mov	r3, r2
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	4413      	add	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	440b      	add	r3, r1
 8006274:	3304      	adds	r3, #4
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800627a:	6939      	ldr	r1, [r7, #16]
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	4613      	mov	r3, r2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	440b      	add	r3, r1
 8006288:	3320      	adds	r3, #32
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800628e:	6939      	ldr	r1, [r7, #16]
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	440b      	add	r3, r1
 800629c:	3328      	adds	r3, #40	@ 0x28
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80062a2:	6939      	ldr	r1, [r7, #16]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	4613      	mov	r3, r2
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	440b      	add	r3, r1
 80062b0:	3324      	adds	r3, #36	@ 0x24
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80062b6:	6939      	ldr	r1, [r7, #16]
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	440b      	add	r3, r1
 80062c4:	332c      	adds	r3, #44	@ 0x2c
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80062ca:	f3bf 8f5f 	dmb	sy
 80062ce:	e002      	b.n	80062d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80062d0:	f04f 33ff 	mov.w	r3, #4294967295
 80062d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20012ecc 	.word	0x20012ecc

080062ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	@ 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80062fa:	4b21      	ldr	r3, [pc, #132]	@ (8006380 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b53      	cmp	r3, #83	@ 0x53
 8006306:	d001      	beq.n	800630c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006308:	f7ff fd4e 	bl	8005da8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800630c:	4b1c      	ldr	r3, [pc, #112]	@ (8006380 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800630e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d82c      	bhi.n	8006370 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006316:	f3ef 8311 	mrs	r3, BASEPRI
 800631a:	f04f 0120 	mov.w	r1, #32
 800631e:	f381 8811 	msr	BASEPRI, r1
 8006322:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4613      	mov	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	4413      	add	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	3360      	adds	r3, #96	@ 0x60
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00e      	beq.n	800635a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2200      	movs	r2, #0
 8006352:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2200      	movs	r2, #0
 8006358:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006360:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
 800636e:	e002      	b.n	8006376 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006370:	f04f 33ff 	mov.w	r3, #4294967295
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006378:	4618      	mov	r0, r3
 800637a:	3728      	adds	r7, #40	@ 0x28
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20012ecc 	.word	0x20012ecc

08006384 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	60fa      	str	r2, [r7, #12]
 800639a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b80      	cmp	r3, #128	@ 0x80
 80063a0:	d90a      	bls.n	80063b8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80063a2:	2380      	movs	r3, #128	@ 0x80
 80063a4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80063a6:	e007      	b.n	80063b8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	1c53      	adds	r3, r2, #1
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1c59      	adds	r1, r3, #1
 80063b2:	60f9      	str	r1, [r7, #12]
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	1e5a      	subs	r2, r3, #1
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <_EncodeStr+0x46>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ee      	bne.n	80063a8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3307      	adds	r3, #7
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006402:	4b34      	ldr	r3, [pc, #208]	@ (80064d4 <_HandleIncomingPacket+0xd8>)
 8006404:	7e1b      	ldrb	r3, [r3, #24]
 8006406:	4618      	mov	r0, r3
 8006408:	1cfb      	adds	r3, r7, #3
 800640a:	2201      	movs	r2, #1
 800640c:	4619      	mov	r1, r3
 800640e:	f7ff fded 	bl	8005fec <SEGGER_RTT_ReadNoLock>
 8006412:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d057      	beq.n	80064ca <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	2b80      	cmp	r3, #128	@ 0x80
 800641e:	d031      	beq.n	8006484 <_HandleIncomingPacket+0x88>
 8006420:	2b80      	cmp	r3, #128	@ 0x80
 8006422:	dc40      	bgt.n	80064a6 <_HandleIncomingPacket+0xaa>
 8006424:	2b07      	cmp	r3, #7
 8006426:	dc15      	bgt.n	8006454 <_HandleIncomingPacket+0x58>
 8006428:	2b00      	cmp	r3, #0
 800642a:	dd3c      	ble.n	80064a6 <_HandleIncomingPacket+0xaa>
 800642c:	3b01      	subs	r3, #1
 800642e:	2b06      	cmp	r3, #6
 8006430:	d839      	bhi.n	80064a6 <_HandleIncomingPacket+0xaa>
 8006432:	a201      	add	r2, pc, #4	@ (adr r2, 8006438 <_HandleIncomingPacket+0x3c>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	0800645b 	.word	0x0800645b
 800643c:	08006461 	.word	0x08006461
 8006440:	08006467 	.word	0x08006467
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006473 	.word	0x08006473
 800644c:	08006479 	.word	0x08006479
 8006450:	0800647f 	.word	0x0800647f
 8006454:	2b7f      	cmp	r3, #127	@ 0x7f
 8006456:	d033      	beq.n	80064c0 <_HandleIncomingPacket+0xc4>
 8006458:	e025      	b.n	80064a6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800645a:	f000 fb25 	bl	8006aa8 <SEGGER_SYSVIEW_Start>
      break;
 800645e:	e034      	b.n	80064ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006460:	f000 fbdc 	bl	8006c1c <SEGGER_SYSVIEW_Stop>
      break;
 8006464:	e031      	b.n	80064ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006466:	f000 fdb5 	bl	8006fd4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800646a:	e02e      	b.n	80064ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800646c:	f000 fd7a 	bl	8006f64 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006470:	e02b      	b.n	80064ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006472:	f000 fbf9 	bl	8006c68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006476:	e028      	b.n	80064ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006478:	f001 f8e6 	bl	8007648 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800647c:	e025      	b.n	80064ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800647e:	f001 f8c5 	bl	800760c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006482:	e022      	b.n	80064ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006484:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <_HandleIncomingPacket+0xd8>)
 8006486:	7e1b      	ldrb	r3, [r3, #24]
 8006488:	4618      	mov	r0, r3
 800648a:	1cfb      	adds	r3, r7, #3
 800648c:	2201      	movs	r2, #1
 800648e:	4619      	mov	r1, r3
 8006490:	f7ff fdac 	bl	8005fec <SEGGER_RTT_ReadNoLock>
 8006494:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d013      	beq.n	80064c4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 f82a 	bl	80074f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80064a4:	e00e      	b.n	80064c4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	b25b      	sxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da0c      	bge.n	80064c8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80064ae:	4b09      	ldr	r3, [pc, #36]	@ (80064d4 <_HandleIncomingPacket+0xd8>)
 80064b0:	7e1b      	ldrb	r3, [r3, #24]
 80064b2:	4618      	mov	r0, r3
 80064b4:	1cfb      	adds	r3, r7, #3
 80064b6:	2201      	movs	r2, #1
 80064b8:	4619      	mov	r1, r3
 80064ba:	f7ff fd97 	bl	8005fec <SEGGER_RTT_ReadNoLock>
      }
      break;
 80064be:	e003      	b.n	80064c8 <_HandleIncomingPacket+0xcc>
      break;
 80064c0:	bf00      	nop
 80064c2:	e002      	b.n	80064ca <_HandleIncomingPacket+0xce>
      break;
 80064c4:	bf00      	nop
 80064c6:	e000      	b.n	80064ca <_HandleIncomingPacket+0xce>
      break;
 80064c8:	bf00      	nop
    }
  }
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	2001978c 	.word	0x2001978c

080064d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08c      	sub	sp, #48	@ 0x30
 80064dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80064de:	2301      	movs	r3, #1
 80064e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	3301      	adds	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ec:	4b31      	ldr	r3, [pc, #196]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064f2:	e00b      	b.n	800650c <_TrySendOverflowPacket+0x34>
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80064fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	09db      	lsrs	r3, r3, #7
 800650a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006510:	d8f0      	bhi.n	80064f4 <_TrySendOverflowPacket+0x1c>
 8006512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006520:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006522:	4b25      	ldr	r3, [pc, #148]	@ (80065b8 <_TrySendOverflowPacket+0xe0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006528:	4b22      	ldr	r3, [pc, #136]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e00b      	b.n	8006554 <_TrySendOverflowPacket+0x7c>
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	6279      	str	r1, [r7, #36]	@ 0x24
 8006546:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	09db      	lsrs	r3, r3, #7
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2b7f      	cmp	r3, #127	@ 0x7f
 8006558:	d8f0      	bhi.n	800653c <_TrySendOverflowPacket+0x64>
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800656a:	4b12      	ldr	r3, [pc, #72]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	4618      	mov	r0, r3
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	461a      	mov	r2, r3
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	4619      	mov	r1, r3
 800657c:	f7f9 fe28 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006580:	4603      	mov	r3, r0
 8006582:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800658a:	4a0a      	ldr	r2, [pc, #40]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006590:	4b08      	ldr	r3, [pc, #32]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	3b01      	subs	r3, #1
 8006596:	b2da      	uxtb	r2, r3
 8006598:	4b06      	ldr	r3, [pc, #24]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	e004      	b.n	80065a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800659e:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	3301      	adds	r3, #1
 80065a4:	4a03      	ldr	r2, [pc, #12]	@ (80065b4 <_TrySendOverflowPacket+0xdc>)
 80065a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80065a8:	693b      	ldr	r3, [r7, #16]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3730      	adds	r7, #48	@ 0x30
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	2001978c 	.word	0x2001978c
 80065b8:	e0001004 	.word	0xe0001004

080065bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08a      	sub	sp, #40	@ 0x28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80065c8:	4b98      	ldr	r3, [pc, #608]	@ (800682c <_SendPacket+0x270>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d010      	beq.n	80065f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80065d0:	4b96      	ldr	r3, [pc, #600]	@ (800682c <_SendPacket+0x270>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 812d 	beq.w	8006834 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80065da:	4b94      	ldr	r3, [pc, #592]	@ (800682c <_SendPacket+0x270>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d109      	bne.n	80065f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80065e2:	f7ff ff79 	bl	80064d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80065e6:	4b91      	ldr	r3, [pc, #580]	@ (800682c <_SendPacket+0x270>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	f040 8124 	bne.w	8006838 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80065f0:	e001      	b.n	80065f6 <_SendPacket+0x3a>
    goto Send;
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <_SendPacket+0x3c>
Send:
 80065f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b1f      	cmp	r3, #31
 80065fc:	d809      	bhi.n	8006612 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80065fe:	4b8b      	ldr	r3, [pc, #556]	@ (800682c <_SendPacket+0x270>)
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	f040 8115 	bne.w	800683c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b17      	cmp	r3, #23
 8006616:	d807      	bhi.n	8006628 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b01      	subs	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	e0c4      	b.n	80067b2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	2b7f      	cmp	r3, #127	@ 0x7f
 8006634:	d912      	bls.n	800665c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	09da      	lsrs	r2, r3, #7
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3b01      	subs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	3a01      	subs	r2, #1
 800664e:	60fa      	str	r2, [r7, #12]
 8006650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e006      	b.n	800666a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b01      	subs	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b7e      	cmp	r3, #126	@ 0x7e
 800666e:	d807      	bhi.n	8006680 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3b01      	subs	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	b2da      	uxtb	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e098      	b.n	80067b2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006686:	d212      	bcs.n	80066ae <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	09da      	lsrs	r2, r3, #7
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3b01      	subs	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	3a01      	subs	r2, #1
 80066a0:	60fa      	str	r2, [r7, #12]
 80066a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	e081      	b.n	80067b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066b4:	d21d      	bcs.n	80066f2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0b9a      	lsrs	r2, r3, #14
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b01      	subs	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	09db      	lsrs	r3, r3, #7
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	3a01      	subs	r2, #1
 80066d0:	60fa      	str	r2, [r7, #12]
 80066d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	3a01      	subs	r2, #1
 80066e4:	60fa      	str	r2, [r7, #12]
 80066e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e05f      	b.n	80067b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066f8:	d228      	bcs.n	800674c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	0d5a      	lsrs	r2, r3, #21
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3b01      	subs	r3, #1
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0b9b      	lsrs	r3, r3, #14
 800670e:	b2db      	uxtb	r3, r3
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	3a01      	subs	r2, #1
 8006714:	60fa      	str	r2, [r7, #12]
 8006716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	b2db      	uxtb	r3, r3
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	3a01      	subs	r2, #1
 800672a:	60fa      	str	r2, [r7, #12]
 800672c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006730:	b2da      	uxtb	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	3a01      	subs	r2, #1
 800673e:	60fa      	str	r2, [r7, #12]
 8006740:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006744:	b2da      	uxtb	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e032      	b.n	80067b2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	0f1a      	lsrs	r2, r3, #28
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3b01      	subs	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	0d5b      	lsrs	r3, r3, #21
 8006760:	b2db      	uxtb	r3, r3
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	3a01      	subs	r2, #1
 8006766:	60fa      	str	r2, [r7, #12]
 8006768:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800676c:	b2da      	uxtb	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	0b9b      	lsrs	r3, r3, #14
 8006776:	b2db      	uxtb	r3, r3
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	3a01      	subs	r2, #1
 800677c:	60fa      	str	r2, [r7, #12]
 800677e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006782:	b2da      	uxtb	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	09db      	lsrs	r3, r3, #7
 800678c:	b2db      	uxtb	r3, r3
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	3a01      	subs	r2, #1
 8006792:	60fa      	str	r2, [r7, #12]
 8006794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	3a01      	subs	r2, #1
 80067a6:	60fa      	str	r2, [r7, #12]
 80067a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006830 <_SendPacket+0x274>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80067b8:	4b1c      	ldr	r3, [pc, #112]	@ (800682c <_SendPacket+0x270>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	e00b      	b.n	80067e4 <_SendPacket+0x228>
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80067d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	09db      	lsrs	r3, r3, #7
 80067e2:	623b      	str	r3, [r7, #32]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80067e8:	d8f0      	bhi.n	80067cc <_SendPacket+0x210>
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80067f0:	6a3a      	ldr	r2, [r7, #32]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80067fa:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <_SendPacket+0x270>)
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	4618      	mov	r0, r3
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	461a      	mov	r2, r3
 8006808:	68f9      	ldr	r1, [r7, #12]
 800680a:	f7f9 fce1 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800680e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006816:	4a05      	ldr	r2, [pc, #20]	@ (800682c <_SendPacket+0x270>)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	60d3      	str	r3, [r2, #12]
 800681c:	e00f      	b.n	800683e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800681e:	4b03      	ldr	r3, [pc, #12]	@ (800682c <_SendPacket+0x270>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	b2da      	uxtb	r2, r3
 8006826:	4b01      	ldr	r3, [pc, #4]	@ (800682c <_SendPacket+0x270>)
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e008      	b.n	800683e <_SendPacket+0x282>
 800682c:	2001978c 	.word	0x2001978c
 8006830:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006834:	bf00      	nop
 8006836:	e002      	b.n	800683e <_SendPacket+0x282>
      goto SendDone;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <_SendPacket+0x282>
      goto SendDone;
 800683c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800683e:	4b14      	ldr	r3, [pc, #80]	@ (8006890 <_SendPacket+0x2d4>)
 8006840:	7e1b      	ldrb	r3, [r3, #24]
 8006842:	4619      	mov	r1, r3
 8006844:	4a13      	ldr	r2, [pc, #76]	@ (8006894 <_SendPacket+0x2d8>)
 8006846:	460b      	mov	r3, r1
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	440b      	add	r3, r1
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	4413      	add	r3, r2
 8006850:	336c      	adds	r3, #108	@ 0x6c
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	4b0e      	ldr	r3, [pc, #56]	@ (8006890 <_SendPacket+0x2d4>)
 8006856:	7e1b      	ldrb	r3, [r3, #24]
 8006858:	4618      	mov	r0, r3
 800685a:	490e      	ldr	r1, [pc, #56]	@ (8006894 <_SendPacket+0x2d8>)
 800685c:	4603      	mov	r3, r0
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4403      	add	r3, r0
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	440b      	add	r3, r1
 8006866:	3370      	adds	r3, #112	@ 0x70
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d00b      	beq.n	8006886 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800686e:	4b08      	ldr	r3, [pc, #32]	@ (8006890 <_SendPacket+0x2d4>)
 8006870:	789b      	ldrb	r3, [r3, #2]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006876:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <_SendPacket+0x2d4>)
 8006878:	2201      	movs	r2, #1
 800687a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800687c:	f7ff fdbe 	bl	80063fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006880:	4b03      	ldr	r3, [pc, #12]	@ (8006890 <_SendPacket+0x2d4>)
 8006882:	2200      	movs	r2, #0
 8006884:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006886:	bf00      	nop
 8006888:	3728      	adds	r7, #40	@ 0x28
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	2001978c 	.word	0x2001978c
 8006894:	20012ecc 	.word	0x20012ecc

08006898 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80068a6:	2300      	movs	r3, #0
 80068a8:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80068ac:	4917      	ldr	r1, [pc, #92]	@ (800690c <SEGGER_SYSVIEW_Init+0x74>)
 80068ae:	4818      	ldr	r0, [pc, #96]	@ (8006910 <SEGGER_SYSVIEW_Init+0x78>)
 80068b0:	f7ff fc98 	bl	80061e4 <SEGGER_RTT_AllocUpBuffer>
 80068b4:	4603      	mov	r3, r0
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b16      	ldr	r3, [pc, #88]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80068bc:	4b15      	ldr	r3, [pc, #84]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068be:	785a      	ldrb	r2, [r3, #1]
 80068c0:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068c2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80068c4:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068c6:	7e1b      	ldrb	r3, [r3, #24]
 80068c8:	4618      	mov	r0, r3
 80068ca:	2300      	movs	r3, #0
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	2308      	movs	r3, #8
 80068d0:	4a11      	ldr	r2, [pc, #68]	@ (8006918 <SEGGER_SYSVIEW_Init+0x80>)
 80068d2:	490f      	ldr	r1, [pc, #60]	@ (8006910 <SEGGER_SYSVIEW_Init+0x78>)
 80068d4:	f7ff fd0a 	bl	80062ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80068d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068da:	2200      	movs	r2, #0
 80068dc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80068de:	4b0f      	ldr	r3, [pc, #60]	@ (800691c <SEGGER_SYSVIEW_Init+0x84>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068e4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80068e6:	4a0b      	ldr	r2, [pc, #44]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80068ec:	4a09      	ldr	r2, [pc, #36]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80068f2:	4a08      	ldr	r2, [pc, #32]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80068f8:	4a06      	ldr	r2, [pc, #24]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80068fe:	4b05      	ldr	r3, [pc, #20]	@ (8006914 <SEGGER_SYSVIEW_Init+0x7c>)
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20013384 	.word	0x20013384
 8006910:	08008a78 	.word	0x08008a78
 8006914:	2001978c 	.word	0x2001978c
 8006918:	20019784 	.word	0x20019784
 800691c:	e0001004 	.word	0xe0001004

08006920 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006928:	4a04      	ldr	r2, [pc, #16]	@ (800693c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6113      	str	r3, [r2, #16]
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	2001978c 	.word	0x2001978c

08006940 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006948:	f3ef 8311 	mrs	r3, BASEPRI
 800694c:	f04f 0120 	mov.w	r1, #32
 8006950:	f381 8811 	msr	BASEPRI, r1
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	4808      	ldr	r0, [pc, #32]	@ (8006978 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006958:	f7ff fd44 	bl	80063e4 <_PreparePacket>
 800695c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f7ff fe2a 	bl	80065bc <_SendPacket>
  RECORD_END();
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200197bc 	.word	0x200197bc

0800697c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006986:	f3ef 8311 	mrs	r3, BASEPRI
 800698a:	f04f 0120 	mov.w	r1, #32
 800698e:	f381 8811 	msr	BASEPRI, r1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	4816      	ldr	r0, [pc, #88]	@ (80069f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006996:	f7ff fd25 	bl	80063e4 <_PreparePacket>
 800699a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e00b      	b.n	80069c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	61f9      	str	r1, [r7, #28]
 80069b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	09db      	lsrs	r3, r3, #7
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069c6:	d8f0      	bhi.n	80069aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6938      	ldr	r0, [r7, #16]
 80069de:	f7ff fded 	bl	80065bc <_SendPacket>
  RECORD_END();
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f383 8811 	msr	BASEPRI, r3
}
 80069e8:	bf00      	nop
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200197bc 	.word	0x200197bc

080069f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08c      	sub	sp, #48	@ 0x30
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a00:	f3ef 8311 	mrs	r3, BASEPRI
 8006a04:	f04f 0120 	mov.w	r1, #32
 8006a08:	f381 8811 	msr	BASEPRI, r1
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	4825      	ldr	r0, [pc, #148]	@ (8006aa4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006a10:	f7ff fce8 	bl	80063e4 <_PreparePacket>
 8006a14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a22:	e00b      	b.n	8006a3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2a:	1c59      	adds	r1, r3, #1
 8006a2c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	09db      	lsrs	r3, r3, #7
 8006a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a40:	d8f0      	bhi.n	8006a24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	e00b      	b.n	8006a74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	09db      	lsrs	r3, r3, #7
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a78:	d8f0      	bhi.n	8006a5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	6979      	ldr	r1, [r7, #20]
 8006a8e:	69b8      	ldr	r0, [r7, #24]
 8006a90:	f7ff fd94 	bl	80065bc <_SendPacket>
  RECORD_END();
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f383 8811 	msr	BASEPRI, r3
}
 8006a9a:	bf00      	nop
 8006a9c:	3730      	adds	r7, #48	@ 0x30
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	200197bc 	.word	0x200197bc

08006aa8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08c      	sub	sp, #48	@ 0x30
 8006aac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006aae:	4b58      	ldr	r3, [pc, #352]	@ (8006c10 <SEGGER_SYSVIEW_Start+0x168>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab8:	f04f 0120 	mov.w	r1, #32
 8006abc:	f381 8811 	msr	BASEPRI, r1
 8006ac0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006ac2:	4b53      	ldr	r3, [pc, #332]	@ (8006c10 <SEGGER_SYSVIEW_Start+0x168>)
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	220a      	movs	r2, #10
 8006ac8:	4952      	ldr	r1, [pc, #328]	@ (8006c14 <SEGGER_SYSVIEW_Start+0x16c>)
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7f9 fb80 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006ad6:	200a      	movs	r0, #10
 8006ad8:	f7ff ff32 	bl	8006940 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006adc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae0:	f04f 0120 	mov.w	r1, #32
 8006ae4:	f381 8811 	msr	BASEPRI, r1
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	484b      	ldr	r0, [pc, #300]	@ (8006c18 <SEGGER_SYSVIEW_Start+0x170>)
 8006aec:	f7ff fc7a 	bl	80063e4 <_PreparePacket>
 8006af0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006afa:	4b45      	ldr	r3, [pc, #276]	@ (8006c10 <SEGGER_SYSVIEW_Start+0x168>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b00:	e00b      	b.n	8006b1a <SEGGER_SYSVIEW_Start+0x72>
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	1c59      	adds	r1, r3, #1
 8006b0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	09db      	lsrs	r3, r3, #7
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b1e:	d8f0      	bhi.n	8006b02 <SEGGER_SYSVIEW_Start+0x5a>
 8006b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b34:	4b36      	ldr	r3, [pc, #216]	@ (8006c10 <SEGGER_SYSVIEW_Start+0x168>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	623b      	str	r3, [r7, #32]
 8006b3a:	e00b      	b.n	8006b54 <SEGGER_SYSVIEW_Start+0xac>
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	1c59      	adds	r1, r3, #1
 8006b44:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	09db      	lsrs	r3, r3, #7
 8006b52:	623b      	str	r3, [r7, #32]
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b58:	d8f0      	bhi.n	8006b3c <SEGGER_SYSVIEW_Start+0x94>
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b60:	6a3a      	ldr	r2, [r7, #32]
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	4b28      	ldr	r3, [pc, #160]	@ (8006c10 <SEGGER_SYSVIEW_Start+0x168>)
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e00b      	b.n	8006b8e <SEGGER_SYSVIEW_Start+0xe6>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	61f9      	str	r1, [r7, #28]
 8006b80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	09db      	lsrs	r3, r3, #7
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b92:	d8f0      	bhi.n	8006b76 <SEGGER_SYSVIEW_Start+0xce>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	61fa      	str	r2, [r7, #28]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	e00b      	b.n	8006bc6 <SEGGER_SYSVIEW_Start+0x11e>
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	6179      	str	r1, [r7, #20]
 8006bb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	09db      	lsrs	r3, r3, #7
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bca:	d8f0      	bhi.n	8006bae <SEGGER_SYSVIEW_Start+0x106>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	617a      	str	r2, [r7, #20]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006bdc:	2218      	movs	r2, #24
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fceb 	bl	80065bc <_SendPacket>
      RECORD_END();
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bec:	4b08      	ldr	r3, [pc, #32]	@ (8006c10 <SEGGER_SYSVIEW_Start+0x168>)
 8006bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006bf4:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <SEGGER_SYSVIEW_Start+0x168>)
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006bfa:	f000 f9eb 	bl	8006fd4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006bfe:	f000 f9b1 	bl	8006f64 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006c02:	f000 fd21 	bl	8007648 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006c06:	bf00      	nop
 8006c08:	3730      	adds	r7, #48	@ 0x30
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	2001978c 	.word	0x2001978c
 8006c14:	08008b04 	.word	0x08008b04
 8006c18:	200197bc 	.word	0x200197bc

08006c1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c22:	f3ef 8311 	mrs	r3, BASEPRI
 8006c26:	f04f 0120 	mov.w	r1, #32
 8006c2a:	f381 8811 	msr	BASEPRI, r1
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	480b      	ldr	r0, [pc, #44]	@ (8006c60 <SEGGER_SYSVIEW_Stop+0x44>)
 8006c32:	f7ff fbd7 	bl	80063e4 <_PreparePacket>
 8006c36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c38:	4b0a      	ldr	r3, [pc, #40]	@ (8006c64 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c40:	220b      	movs	r2, #11
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6838      	ldr	r0, [r7, #0]
 8006c46:	f7ff fcb9 	bl	80065bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c4a:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f383 8811 	msr	BASEPRI, r3
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	200197bc 	.word	0x200197bc
 8006c64:	2001978c 	.word	0x2001978c

08006c68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	@ 0x30
 8006c6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c72:	f04f 0120 	mov.w	r1, #32
 8006c76:	f381 8811 	msr	BASEPRI, r1
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	4845      	ldr	r0, [pc, #276]	@ (8006d94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006c7e:	f7ff fbb1 	bl	80063e4 <_PreparePacket>
 8006c82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c8c:	4b42      	ldr	r3, [pc, #264]	@ (8006d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c92:	e00b      	b.n	8006cac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9a:	1c59      	adds	r1, r3, #1
 8006c9c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006c9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	09db      	lsrs	r3, r3, #7
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cb0:	d8f0      	bhi.n	8006c94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc6:	4b34      	ldr	r3, [pc, #208]	@ (8006d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	623b      	str	r3, [r7, #32]
 8006ccc:	e00b      	b.n	8006ce6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	1c59      	adds	r1, r3, #1
 8006cd6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	09db      	lsrs	r3, r3, #7
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cea:	d8f0      	bhi.n	8006cce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	4b25      	ldr	r3, [pc, #148]	@ (8006d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e00b      	b.n	8006d20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	1c59      	adds	r1, r3, #1
 8006d10:	61f9      	str	r1, [r7, #28]
 8006d12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	09db      	lsrs	r3, r3, #7
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d24:	d8f0      	bhi.n	8006d08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	e00b      	b.n	8006d58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	1c59      	adds	r1, r3, #1
 8006d48:	6179      	str	r1, [r7, #20]
 8006d4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	09db      	lsrs	r3, r3, #7
 8006d56:	613b      	str	r3, [r7, #16]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d5c:	d8f0      	bhi.n	8006d40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	617a      	str	r2, [r7, #20]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d6e:	2218      	movs	r2, #24
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	68b8      	ldr	r0, [r7, #8]
 8006d74:	f7ff fc22 	bl	80065bc <_SendPacket>
  RECORD_END();
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006d7e:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006d86:	4b04      	ldr	r3, [pc, #16]	@ (8006d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8a:	4798      	blx	r3
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	3730      	adds	r7, #48	@ 0x30
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200197bc 	.word	0x200197bc
 8006d98:	2001978c 	.word	0x2001978c

08006d9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b092      	sub	sp, #72	@ 0x48
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006da4:	f3ef 8311 	mrs	r3, BASEPRI
 8006da8:	f04f 0120 	mov.w	r1, #32
 8006dac:	f381 8811 	msr	BASEPRI, r1
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	486a      	ldr	r0, [pc, #424]	@ (8006f5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006db4:	f7ff fb16 	bl	80063e4 <_PreparePacket>
 8006db8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4b66      	ldr	r3, [pc, #408]	@ (8006f60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dce:	e00b      	b.n	8006de8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd6:	1c59      	adds	r1, r3, #1
 8006dd8:	6479      	str	r1, [r7, #68]	@ 0x44
 8006dda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de4:	09db      	lsrs	r3, r3, #7
 8006de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dec:	d8f0      	bhi.n	8006dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006df4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e08:	e00b      	b.n	8006e22 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e10:	1c59      	adds	r1, r3, #1
 8006e12:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	09db      	lsrs	r3, r3, #7
 8006e20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e26:	d8f0      	bhi.n	8006e0a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e36:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	4619      	mov	r1, r3
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f7ff fa9f 	bl	8006384 <_EncodeStr>
 8006e46:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e48:	2209      	movs	r2, #9
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	6938      	ldr	r0, [r7, #16]
 8006e4e:	f7ff fbb5 	bl	80065bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4b40      	ldr	r3, [pc, #256]	@ (8006f60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e66:	e00b      	b.n	8006e80 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6e:	1c59      	adds	r1, r3, #1
 8006e70:	6379      	str	r1, [r7, #52]	@ 0x34
 8006e72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	09db      	lsrs	r3, r3, #7
 8006e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e84:	d8f0      	bhi.n	8006e68 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ea0:	e00b      	b.n	8006eba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006eac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	09db      	lsrs	r3, r3, #7
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ebe:	d8f0      	bhi.n	8006ea2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ece:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	623b      	str	r3, [r7, #32]
 8006eda:	e00b      	b.n	8006ef4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ee6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	09db      	lsrs	r3, r3, #7
 8006ef2:	623b      	str	r3, [r7, #32]
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ef8:	d8f0      	bhi.n	8006edc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	e00b      	b.n	8006f2c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	1c59      	adds	r1, r3, #1
 8006f1c:	61f9      	str	r1, [r7, #28]
 8006f1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	09db      	lsrs	r3, r3, #7
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f30:	d8f0      	bhi.n	8006f14 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	61fa      	str	r2, [r7, #28]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f42:	2215      	movs	r2, #21
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	6938      	ldr	r0, [r7, #16]
 8006f48:	f7ff fb38 	bl	80065bc <_SendPacket>
  RECORD_END();
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f383 8811 	msr	BASEPRI, r3
}
 8006f52:	bf00      	nop
 8006f54:	3748      	adds	r7, #72	@ 0x48
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	200197bc 	.word	0x200197bc
 8006f60:	2001978c 	.word	0x2001978c

08006f64 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006f68:	4b07      	ldr	r3, [pc, #28]	@ (8006f88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d008      	beq.n	8006f82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006f70:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006f7a:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4798      	blx	r3
  }
}
 8006f82:	bf00      	nop
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	2001978c 	.word	0x2001978c

08006f8c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f94:	f3ef 8311 	mrs	r3, BASEPRI
 8006f98:	f04f 0120 	mov.w	r1, #32
 8006f9c:	f381 8811 	msr	BASEPRI, r1
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	480b      	ldr	r0, [pc, #44]	@ (8006fd0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006fa4:	f7ff fa1e 	bl	80063e4 <_PreparePacket>
 8006fa8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006faa:	2280      	movs	r2, #128	@ 0x80
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	6938      	ldr	r0, [r7, #16]
 8006fb0:	f7ff f9e8 	bl	8006384 <_EncodeStr>
 8006fb4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006fb6:	220e      	movs	r2, #14
 8006fb8:	68f9      	ldr	r1, [r7, #12]
 8006fba:	6938      	ldr	r0, [r7, #16]
 8006fbc:	f7ff fafe 	bl	80065bc <_SendPacket>
  RECORD_END();
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f383 8811 	msr	BASEPRI, r3
}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200197bc 	.word	0x200197bc

08006fd4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006fd4:	b590      	push	{r4, r7, lr}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006fda:	4b15      	ldr	r3, [pc, #84]	@ (8007030 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01a      	beq.n	8007018 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006fe2:	4b13      	ldr	r3, [pc, #76]	@ (8007030 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d015      	beq.n	8007018 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006fec:	4b10      	ldr	r3, [pc, #64]	@ (8007030 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4798      	blx	r3
 8006ff4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006ff8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	000a      	movs	r2, r1
 8007008:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800700a:	4613      	mov	r3, r2
 800700c:	461a      	mov	r2, r3
 800700e:	4621      	mov	r1, r4
 8007010:	200d      	movs	r0, #13
 8007012:	f7ff fcef 	bl	80069f4 <SEGGER_SYSVIEW_RecordU32x2>
 8007016:	e006      	b.n	8007026 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007018:	4b06      	ldr	r3, [pc, #24]	@ (8007034 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4619      	mov	r1, r3
 800701e:	200c      	movs	r0, #12
 8007020:	f7ff fcac 	bl	800697c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	bd90      	pop	{r4, r7, pc}
 800702e:	bf00      	nop
 8007030:	2001978c 	.word	0x2001978c
 8007034:	e0001004 	.word	0xe0001004

08007038 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800703e:	f3ef 8311 	mrs	r3, BASEPRI
 8007042:	f04f 0120 	mov.w	r1, #32
 8007046:	f381 8811 	msr	BASEPRI, r1
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	4819      	ldr	r0, [pc, #100]	@ (80070b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800704e:	f7ff f9c9 	bl	80063e4 <_PreparePacket>
 8007052:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007058:	4b17      	ldr	r3, [pc, #92]	@ (80070b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007060:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	e00b      	b.n	8007084 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	6179      	str	r1, [r7, #20]
 8007076:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	09db      	lsrs	r3, r3, #7
 8007082:	613b      	str	r3, [r7, #16]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b7f      	cmp	r3, #127	@ 0x7f
 8007088:	d8f0      	bhi.n	800706c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	617a      	str	r2, [r7, #20]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800709a:	2202      	movs	r2, #2
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	68b8      	ldr	r0, [r7, #8]
 80070a0:	f7ff fa8c 	bl	80065bc <_SendPacket>
  RECORD_END();
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f383 8811 	msr	BASEPRI, r3
}
 80070aa:	bf00      	nop
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	200197bc 	.word	0x200197bc
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070c2:	f3ef 8311 	mrs	r3, BASEPRI
 80070c6:	f04f 0120 	mov.w	r1, #32
 80070ca:	f381 8811 	msr	BASEPRI, r1
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	4807      	ldr	r0, [pc, #28]	@ (80070f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80070d2:	f7ff f987 	bl	80063e4 <_PreparePacket>
 80070d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80070d8:	2203      	movs	r2, #3
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6838      	ldr	r0, [r7, #0]
 80070de:	f7ff fa6d 	bl	80065bc <_SendPacket>
  RECORD_END();
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f383 8811 	msr	BASEPRI, r3
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200197bc 	.word	0x200197bc

080070f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070fa:	f3ef 8311 	mrs	r3, BASEPRI
 80070fe:	f04f 0120 	mov.w	r1, #32
 8007102:	f381 8811 	msr	BASEPRI, r1
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	4807      	ldr	r0, [pc, #28]	@ (8007128 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800710a:	f7ff f96b 	bl	80063e4 <_PreparePacket>
 800710e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007110:	2212      	movs	r2, #18
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6838      	ldr	r0, [r7, #0]
 8007116:	f7ff fa51 	bl	80065bc <_SendPacket>
  RECORD_END();
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f383 8811 	msr	BASEPRI, r3
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	200197bc 	.word	0x200197bc

0800712c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007134:	f3ef 8311 	mrs	r3, BASEPRI
 8007138:	f04f 0120 	mov.w	r1, #32
 800713c:	f381 8811 	msr	BASEPRI, r1
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	4817      	ldr	r0, [pc, #92]	@ (80071a0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8007144:	f7ff f94e 	bl	80063e4 <_PreparePacket>
 8007148:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	e00b      	b.n	8007170 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	61f9      	str	r1, [r7, #28]
 8007162:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	09db      	lsrs	r3, r3, #7
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b7f      	cmp	r3, #127	@ 0x7f
 8007174:	d8f0      	bhi.n	8007158 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	61fa      	str	r2, [r7, #28]
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8007186:	221c      	movs	r2, #28
 8007188:	68f9      	ldr	r1, [r7, #12]
 800718a:	6938      	ldr	r0, [r7, #16]
 800718c:	f7ff fa16 	bl	80065bc <_SendPacket>
  RECORD_END();
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f383 8811 	msr	BASEPRI, r3
}
 8007196:	bf00      	nop
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	200197bc 	.word	0x200197bc

080071a4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	@ 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80071ae:	f3ef 8311 	mrs	r3, BASEPRI
 80071b2:	f04f 0120 	mov.w	r1, #32
 80071b6:	f381 8811 	msr	BASEPRI, r1
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	4824      	ldr	r0, [pc, #144]	@ (8007250 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80071be:	f7ff f911 	bl	80063e4 <_PreparePacket>
 80071c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	623b      	str	r3, [r7, #32]
 80071d0:	e00b      	b.n	80071ea <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	1c59      	adds	r1, r3, #1
 80071da:	6279      	str	r1, [r7, #36]	@ 0x24
 80071dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	09db      	lsrs	r3, r3, #7
 80071e8:	623b      	str	r3, [r7, #32]
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ee:	d8f0      	bhi.n	80071d2 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80071f6:	6a3a      	ldr	r2, [r7, #32]
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	e00b      	b.n	8007222 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	1c59      	adds	r1, r3, #1
 8007212:	61f9      	str	r1, [r7, #28]
 8007214:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b7f      	cmp	r3, #127	@ 0x7f
 8007226:	d8f0      	bhi.n	800720a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	61fa      	str	r2, [r7, #28]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8007238:	221c      	movs	r2, #28
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	6938      	ldr	r0, [r7, #16]
 800723e:	f7ff f9bd 	bl	80065bc <_SendPacket>
  RECORD_END();
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f383 8811 	msr	BASEPRI, r3
}
 8007248:	bf00      	nop
 800724a:	3728      	adds	r7, #40	@ 0x28
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	200197bc 	.word	0x200197bc

08007254 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800725a:	f3ef 8311 	mrs	r3, BASEPRI
 800725e:	f04f 0120 	mov.w	r1, #32
 8007262:	f381 8811 	msr	BASEPRI, r1
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	4807      	ldr	r0, [pc, #28]	@ (8007288 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800726a:	f7ff f8bb 	bl	80063e4 <_PreparePacket>
 800726e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007270:	2211      	movs	r2, #17
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6838      	ldr	r0, [r7, #0]
 8007276:	f7ff f9a1 	bl	80065bc <_SendPacket>
  RECORD_END();
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f383 8811 	msr	BASEPRI, r3
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	200197bc 	.word	0x200197bc

0800728c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007294:	f3ef 8311 	mrs	r3, BASEPRI
 8007298:	f04f 0120 	mov.w	r1, #32
 800729c:	f381 8811 	msr	BASEPRI, r1
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	4819      	ldr	r0, [pc, #100]	@ (8007308 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80072a4:	f7ff f89e 	bl	80063e4 <_PreparePacket>
 80072a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072ae:	4b17      	ldr	r3, [pc, #92]	@ (800730c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	61fb      	str	r3, [r7, #28]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e00b      	b.n	80072da <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	1c59      	adds	r1, r3, #1
 80072ca:	61f9      	str	r1, [r7, #28]
 80072cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072d0:	b2d2      	uxtb	r2, r2
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	09db      	lsrs	r3, r3, #7
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80072de:	d8f0      	bhi.n	80072c2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	61fa      	str	r2, [r7, #28]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80072f0:	2208      	movs	r2, #8
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	6938      	ldr	r0, [r7, #16]
 80072f6:	f7ff f961 	bl	80065bc <_SendPacket>
  RECORD_END();
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f383 8811 	msr	BASEPRI, r3
}
 8007300:	bf00      	nop
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	200197bc 	.word	0x200197bc
 800730c:	2001978c 	.word	0x2001978c

08007310 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007318:	f3ef 8311 	mrs	r3, BASEPRI
 800731c:	f04f 0120 	mov.w	r1, #32
 8007320:	f381 8811 	msr	BASEPRI, r1
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	4819      	ldr	r0, [pc, #100]	@ (800738c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007328:	f7ff f85c 	bl	80063e4 <_PreparePacket>
 800732c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007332:	4b17      	ldr	r3, [pc, #92]	@ (8007390 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	e00b      	b.n	800735e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	61f9      	str	r1, [r7, #28]
 8007350:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	09db      	lsrs	r3, r3, #7
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b7f      	cmp	r3, #127	@ 0x7f
 8007362:	d8f0      	bhi.n	8007346 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	61fa      	str	r2, [r7, #28]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007374:	2204      	movs	r2, #4
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	6938      	ldr	r0, [r7, #16]
 800737a:	f7ff f91f 	bl	80065bc <_SendPacket>
  RECORD_END();
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f383 8811 	msr	BASEPRI, r3
}
 8007384:	bf00      	nop
 8007386:	3720      	adds	r7, #32
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	200197bc 	.word	0x200197bc
 8007390:	2001978c 	.word	0x2001978c

08007394 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800739c:	f3ef 8311 	mrs	r3, BASEPRI
 80073a0:	f04f 0120 	mov.w	r1, #32
 80073a4:	f381 8811 	msr	BASEPRI, r1
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	4819      	ldr	r0, [pc, #100]	@ (8007410 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80073ac:	f7ff f81a 	bl	80063e4 <_PreparePacket>
 80073b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80073b6:	4b17      	ldr	r3, [pc, #92]	@ (8007414 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	e00b      	b.n	80073e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	1c59      	adds	r1, r3, #1
 80073d2:	61f9      	str	r1, [r7, #28]
 80073d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	09db      	lsrs	r3, r3, #7
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80073e6:	d8f0      	bhi.n	80073ca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	61fa      	str	r2, [r7, #28]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80073f8:	2206      	movs	r2, #6
 80073fa:	68f9      	ldr	r1, [r7, #12]
 80073fc:	6938      	ldr	r0, [r7, #16]
 80073fe:	f7ff f8dd 	bl	80065bc <_SendPacket>
  RECORD_END();
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f383 8811 	msr	BASEPRI, r3
}
 8007408:	bf00      	nop
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	200197bc 	.word	0x200197bc
 8007414:	2001978c 	.word	0x2001978c

08007418 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	@ 0x28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007422:	f3ef 8311 	mrs	r3, BASEPRI
 8007426:	f04f 0120 	mov.w	r1, #32
 800742a:	f381 8811 	msr	BASEPRI, r1
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	4827      	ldr	r0, [pc, #156]	@ (80074d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007432:	f7fe ffd7 	bl	80063e4 <_PreparePacket>
 8007436:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800743c:	4b25      	ldr	r3, [pc, #148]	@ (80074d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	623b      	str	r3, [r7, #32]
 800744e:	e00b      	b.n	8007468 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	b2da      	uxtb	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	1c59      	adds	r1, r3, #1
 8007458:	6279      	str	r1, [r7, #36]	@ 0x24
 800745a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	09db      	lsrs	r3, r3, #7
 8007466:	623b      	str	r3, [r7, #32]
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	2b7f      	cmp	r3, #127	@ 0x7f
 800746c:	d8f0      	bhi.n	8007450 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	627a      	str	r2, [r7, #36]	@ 0x24
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	e00b      	b.n	80074a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	b2da      	uxtb	r2, r3
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	1c59      	adds	r1, r3, #1
 8007490:	61f9      	str	r1, [r7, #28]
 8007492:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	09db      	lsrs	r3, r3, #7
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a4:	d8f0      	bhi.n	8007488 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	61fa      	str	r2, [r7, #28]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80074b6:	2207      	movs	r2, #7
 80074b8:	68f9      	ldr	r1, [r7, #12]
 80074ba:	6938      	ldr	r0, [r7, #16]
 80074bc:	f7ff f87e 	bl	80065bc <_SendPacket>
  RECORD_END();
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f383 8811 	msr	BASEPRI, r3
}
 80074c6:	bf00      	nop
 80074c8:	3728      	adds	r7, #40	@ 0x28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	200197bc 	.word	0x200197bc
 80074d4:	2001978c 	.word	0x2001978c

080074d8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80074e0:	4b04      	ldr	r3, [pc, #16]	@ (80074f4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	1ad3      	subs	r3, r2, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	2001978c 	.word	0x2001978c

080074f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08c      	sub	sp, #48	@ 0x30
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007502:	4b40      	ldr	r3, [pc, #256]	@ (8007604 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d077      	beq.n	80075fa <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800750a:	4b3e      	ldr	r3, [pc, #248]	@ (8007604 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007510:	2300      	movs	r3, #0
 8007512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007514:	e008      	b.n	8007528 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	3301      	adds	r3, #1
 8007526:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800752c:	429a      	cmp	r2, r3
 800752e:	d3f2      	bcc.n	8007516 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007530:	e000      	b.n	8007534 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007532:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d055      	beq.n	80075e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800753a:	f3ef 8311 	mrs	r3, BASEPRI
 800753e:	f04f 0120 	mov.w	r1, #32
 8007542:	f381 8811 	msr	BASEPRI, r1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	482f      	ldr	r0, [pc, #188]	@ (8007608 <SEGGER_SYSVIEW_SendModule+0x110>)
 800754a:	f7fe ff4b 	bl	80063e4 <_PreparePacket>
 800754e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	e00b      	b.n	8007576 <SEGGER_SYSVIEW_SendModule+0x7e>
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	b2da      	uxtb	r2, r3
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	6279      	str	r1, [r7, #36]	@ 0x24
 8007568:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	09db      	lsrs	r3, r3, #7
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	2b7f      	cmp	r3, #127	@ 0x7f
 800757a:	d8f0      	bhi.n	800755e <SEGGER_SYSVIEW_SendModule+0x66>
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	627a      	str	r2, [r7, #36]	@ 0x24
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e00b      	b.n	80075b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	b2da      	uxtb	r2, r3
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1c59      	adds	r1, r3, #1
 80075a0:	61f9      	str	r1, [r7, #28]
 80075a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	09db      	lsrs	r3, r3, #7
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80075b4:	d8f0      	bhi.n	8007598 <SEGGER_SYSVIEW_SendModule+0xa0>
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	61fa      	str	r2, [r7, #28]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2280      	movs	r2, #128	@ 0x80
 80075cc:	4619      	mov	r1, r3
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7fe fed8 	bl	8006384 <_EncodeStr>
 80075d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80075d6:	2216      	movs	r2, #22
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	6938      	ldr	r0, [r7, #16]
 80075dc:	f7fe ffee 	bl	80065bc <_SendPacket>
      RECORD_END();
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d006      	beq.n	80075fa <SEGGER_SYSVIEW_SendModule+0x102>
 80075ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4798      	blx	r3
    }
  }
}
 80075fa:	bf00      	nop
 80075fc:	3730      	adds	r7, #48	@ 0x30
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	200197b4 	.word	0x200197b4
 8007608:	200197bc 	.word	0x200197bc

0800760c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007612:	4b0c      	ldr	r3, [pc, #48]	@ (8007644 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00f      	beq.n	800763a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800761a:	4b0a      	ldr	r3, [pc, #40]	@ (8007644 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f2      	bne.n	8007620 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	200197b4 	.word	0x200197b4

08007648 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800764e:	f3ef 8311 	mrs	r3, BASEPRI
 8007652:	f04f 0120 	mov.w	r1, #32
 8007656:	f381 8811 	msr	BASEPRI, r1
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	4817      	ldr	r0, [pc, #92]	@ (80076bc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800765e:	f7fe fec1 	bl	80063e4 <_PreparePacket>
 8007662:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	4b14      	ldr	r3, [pc, #80]	@ (80076c0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	e00b      	b.n	800768c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	b2da      	uxtb	r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	1c59      	adds	r1, r3, #1
 800767c:	6179      	str	r1, [r7, #20]
 800767e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	09db      	lsrs	r3, r3, #7
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007690:	d8f0      	bhi.n	8007674 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	617a      	str	r2, [r7, #20]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80076a2:	221b      	movs	r2, #27
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	68b8      	ldr	r0, [r7, #8]
 80076a8:	f7fe ff88 	bl	80065bc <_SendPacket>
  RECORD_END();
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f383 8811 	msr	BASEPRI, r3
}
 80076b2:	bf00      	nop
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200197bc 	.word	0x200197bc
 80076c0:	200197b8 	.word	0x200197b8

080076c4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	@ 0x28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80076cc:	f3ef 8311 	mrs	r3, BASEPRI
 80076d0:	f04f 0120 	mov.w	r1, #32
 80076d4:	f381 8811 	msr	BASEPRI, r1
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	4827      	ldr	r0, [pc, #156]	@ (8007778 <SEGGER_SYSVIEW_Warn+0xb4>)
 80076dc:	f7fe fe82 	bl	80063e4 <_PreparePacket>
 80076e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80076e2:	2280      	movs	r2, #128	@ 0x80
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	6938      	ldr	r0, [r7, #16]
 80076e8:	f7fe fe4c 	bl	8006384 <_EncodeStr>
 80076ec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f2:	2301      	movs	r3, #1
 80076f4:	623b      	str	r3, [r7, #32]
 80076f6:	e00b      	b.n	8007710 <SEGGER_SYSVIEW_Warn+0x4c>
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	6279      	str	r1, [r7, #36]	@ 0x24
 8007702:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	09db      	lsrs	r3, r3, #7
 800770e:	623b      	str	r3, [r7, #32]
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	2b7f      	cmp	r3, #127	@ 0x7f
 8007714:	d8f0      	bhi.n	80076f8 <SEGGER_SYSVIEW_Warn+0x34>
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	627a      	str	r2, [r7, #36]	@ 0x24
 800771c:	6a3a      	ldr	r2, [r7, #32]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	2300      	movs	r3, #0
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e00b      	b.n	8007748 <SEGGER_SYSVIEW_Warn+0x84>
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	1c59      	adds	r1, r3, #1
 8007738:	61f9      	str	r1, [r7, #28]
 800773a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	09db      	lsrs	r3, r3, #7
 8007746:	61bb      	str	r3, [r7, #24]
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	2b7f      	cmp	r3, #127	@ 0x7f
 800774c:	d8f0      	bhi.n	8007730 <SEGGER_SYSVIEW_Warn+0x6c>
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	61fa      	str	r2, [r7, #28]
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800775e:	221a      	movs	r2, #26
 8007760:	68f9      	ldr	r1, [r7, #12]
 8007762:	6938      	ldr	r0, [r7, #16]
 8007764:	f7fe ff2a 	bl	80065bc <_SendPacket>
  RECORD_END();
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f383 8811 	msr	BASEPRI, r3
}
 800776e:	bf00      	nop
 8007770:	3728      	adds	r7, #40	@ 0x28
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	200197bc 	.word	0x200197bc

0800777c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	2000      	movs	r0, #0
 8007790:	f7fe fd02 	bl	8006198 <SEGGER_RTT_Write>
  return len;
 8007794:	683b      	ldr	r3, [r7, #0]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80077a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80077a6:	2300      	movs	r3, #0
 80077a8:	607b      	str	r3, [r7, #4]
 80077aa:	e033      	b.n	8007814 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80077ac:	491e      	ldr	r1, [pc, #120]	@ (8007828 <_cbSendTaskList+0x88>)
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	491a      	ldr	r1, [pc, #104]	@ (8007828 <_cbSendTaskList+0x88>)
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	3304      	adds	r3, #4
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	4c16      	ldr	r4, [pc, #88]	@ (8007828 <_cbSendTaskList+0x88>)
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4423      	add	r3, r4
 80077dc:	3308      	adds	r3, #8
 80077de:	681c      	ldr	r4, [r3, #0]
 80077e0:	4d11      	ldr	r5, [pc, #68]	@ (8007828 <_cbSendTaskList+0x88>)
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	442b      	add	r3, r5
 80077ee:	330c      	adds	r3, #12
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	4e0d      	ldr	r6, [pc, #52]	@ (8007828 <_cbSendTaskList+0x88>)
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4433      	add	r3, r6
 8007800:	3310      	adds	r3, #16
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	462b      	mov	r3, r5
 8007808:	4622      	mov	r2, r4
 800780a:	f000 f8bd 	bl	8007988 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3301      	adds	r3, #1
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	4b05      	ldr	r3, [pc, #20]	@ (800782c <_cbSendTaskList+0x8c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	d3c6      	bcc.n	80077ac <_cbSendTaskList+0xc>
  }
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007828:	200198a0 	.word	0x200198a0
 800782c:	20019940 	.word	0x20019940

08007830 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007838:	f7fc fb8a 	bl	8003f50 <xTaskGetTickCountFromISR>
 800783c:	4603      	mov	r3, r0
 800783e:	2200      	movs	r2, #0
 8007840:	469a      	mov	sl, r3
 8007842:	4693      	mov	fp, r2
 8007844:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	f04f 0a00 	mov.w	sl, #0
 8007854:	f04f 0b00 	mov.w	fp, #0
 8007858:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800785c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007860:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007864:	4652      	mov	r2, sl
 8007866:	465b      	mov	r3, fp
 8007868:	1a14      	subs	r4, r2, r0
 800786a:	eb63 0501 	sbc.w	r5, r3, r1
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	00ab      	lsls	r3, r5, #2
 8007878:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800787c:	00a2      	lsls	r2, r4, #2
 800787e:	4614      	mov	r4, r2
 8007880:	461d      	mov	r5, r3
 8007882:	eb14 0800 	adds.w	r8, r4, r0
 8007886:	eb45 0901 	adc.w	r9, r5, r1
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800789a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800789e:	4690      	mov	r8, r2
 80078a0:	4699      	mov	r9, r3
 80078a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80078a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80078aa:	4610      	mov	r0, r2
 80078ac:	4619      	mov	r1, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080078b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80078c6:	2205      	movs	r2, #5
 80078c8:	492b      	ldr	r1, [pc, #172]	@ (8007978 <SYSVIEW_AddTask+0xc0>)
 80078ca:	68b8      	ldr	r0, [r7, #8]
 80078cc:	f000 f9c1 	bl	8007c52 <memcmp>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d04b      	beq.n	800796e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80078d6:	4b29      	ldr	r3, [pc, #164]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b07      	cmp	r3, #7
 80078dc:	d903      	bls.n	80078e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80078de:	4828      	ldr	r0, [pc, #160]	@ (8007980 <SYSVIEW_AddTask+0xc8>)
 80078e0:	f7ff fef0 	bl	80076c4 <SEGGER_SYSVIEW_Warn>
    return;
 80078e4:	e044      	b.n	8007970 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80078e6:	4b25      	ldr	r3, [pc, #148]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4926      	ldr	r1, [pc, #152]	@ (8007984 <SYSVIEW_AddTask+0xcc>)
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80078fa:	4b20      	ldr	r3, [pc, #128]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4921      	ldr	r1, [pc, #132]	@ (8007984 <SYSVIEW_AddTask+0xcc>)
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	3304      	adds	r3, #4
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007910:	4b1a      	ldr	r3, [pc, #104]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	491b      	ldr	r1, [pc, #108]	@ (8007984 <SYSVIEW_AddTask+0xcc>)
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	3308      	adds	r3, #8
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007926:	4b15      	ldr	r3, [pc, #84]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4916      	ldr	r1, [pc, #88]	@ (8007984 <SYSVIEW_AddTask+0xcc>)
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	330c      	adds	r3, #12
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800793c:	4b0f      	ldr	r3, [pc, #60]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	4910      	ldr	r1, [pc, #64]	@ (8007984 <SYSVIEW_AddTask+0xcc>)
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3310      	adds	r3, #16
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3301      	adds	r3, #1
 8007958:	4a08      	ldr	r2, [pc, #32]	@ (800797c <SYSVIEW_AddTask+0xc4>)
 800795a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f80e 	bl	8007988 <SYSVIEW_SendTaskInfo>
 800796c:	e000      	b.n	8007970 <SYSVIEW_AddTask+0xb8>
    return;
 800796e:	bf00      	nop

}
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	08008a80 	.word	0x08008a80
 800797c:	20019940 	.word	0x20019940
 8007980:	08008a88 	.word	0x08008a88
 8007984:	200198a0 	.word	0x200198a0

08007988 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	@ 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007996:	f107 0314 	add.w	r3, r7, #20
 800799a:	2214      	movs	r2, #20
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f967 	bl	8007c72 <memset>
  TaskInfo.TaskID     = TaskID;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff f9ed 	bl	8006d9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80079c2:	bf00      	nop
 80079c4:	3728      	adds	r7, #40	@ 0x28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <rand>:
 80079cc:	4b16      	ldr	r3, [pc, #88]	@ (8007a28 <rand+0x5c>)
 80079ce:	b510      	push	{r4, lr}
 80079d0:	681c      	ldr	r4, [r3, #0]
 80079d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80079d4:	b9b3      	cbnz	r3, 8007a04 <rand+0x38>
 80079d6:	2018      	movs	r0, #24
 80079d8:	f000 fa2c 	bl	8007e34 <malloc>
 80079dc:	4602      	mov	r2, r0
 80079de:	6320      	str	r0, [r4, #48]	@ 0x30
 80079e0:	b920      	cbnz	r0, 80079ec <rand+0x20>
 80079e2:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <rand+0x60>)
 80079e4:	4812      	ldr	r0, [pc, #72]	@ (8007a30 <rand+0x64>)
 80079e6:	2152      	movs	r1, #82	@ 0x52
 80079e8:	f000 f9bc 	bl	8007d64 <__assert_func>
 80079ec:	4911      	ldr	r1, [pc, #68]	@ (8007a34 <rand+0x68>)
 80079ee:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <rand+0x6c>)
 80079f0:	e9c0 1300 	strd	r1, r3, [r0]
 80079f4:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <rand+0x70>)
 80079f6:	6083      	str	r3, [r0, #8]
 80079f8:	230b      	movs	r3, #11
 80079fa:	8183      	strh	r3, [r0, #12]
 80079fc:	2100      	movs	r1, #0
 80079fe:	2001      	movs	r0, #1
 8007a00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007a04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a06:	480e      	ldr	r0, [pc, #56]	@ (8007a40 <rand+0x74>)
 8007a08:	690b      	ldr	r3, [r1, #16]
 8007a0a:	694c      	ldr	r4, [r1, #20]
 8007a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a44 <rand+0x78>)
 8007a0e:	4358      	muls	r0, r3
 8007a10:	fb02 0004 	mla	r0, r2, r4, r0
 8007a14:	fba3 3202 	umull	r3, r2, r3, r2
 8007a18:	3301      	adds	r3, #1
 8007a1a:	eb40 0002 	adc.w	r0, r0, r2
 8007a1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007a22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007a26:	bd10      	pop	{r4, pc}
 8007a28:	20000020 	.word	0x20000020
 8007a2c:	08008b18 	.word	0x08008b18
 8007a30:	08008b2f 	.word	0x08008b2f
 8007a34:	abcd330e 	.word	0xabcd330e
 8007a38:	e66d1234 	.word	0xe66d1234
 8007a3c:	0005deec 	.word	0x0005deec
 8007a40:	5851f42d 	.word	0x5851f42d
 8007a44:	4c957f2d 	.word	0x4c957f2d

08007a48 <std>:
 8007a48:	2300      	movs	r3, #0
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a56:	6083      	str	r3, [r0, #8]
 8007a58:	8181      	strh	r1, [r0, #12]
 8007a5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a5c:	81c2      	strh	r2, [r0, #14]
 8007a5e:	6183      	str	r3, [r0, #24]
 8007a60:	4619      	mov	r1, r3
 8007a62:	2208      	movs	r2, #8
 8007a64:	305c      	adds	r0, #92	@ 0x5c
 8007a66:	f000 f904 	bl	8007c72 <memset>
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <std+0x58>)
 8007a6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa4 <std+0x5c>)
 8007a70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a72:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <std+0x60>)
 8007a74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a76:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <std+0x64>)
 8007a78:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <std+0x68>)
 8007a7c:	6224      	str	r4, [r4, #32]
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d006      	beq.n	8007a90 <std+0x48>
 8007a82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a86:	4294      	cmp	r4, r2
 8007a88:	d002      	beq.n	8007a90 <std+0x48>
 8007a8a:	33d0      	adds	r3, #208	@ 0xd0
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d105      	bne.n	8007a9c <std+0x54>
 8007a90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f000 b952 	b.w	8007d40 <__retarget_lock_init_recursive>
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08007bcd 	.word	0x08007bcd
 8007aa4:	08007bef 	.word	0x08007bef
 8007aa8:	08007c27 	.word	0x08007c27
 8007aac:	08007c4b 	.word	0x08007c4b
 8007ab0:	20019944 	.word	0x20019944

08007ab4 <stdio_exit_handler>:
 8007ab4:	4a02      	ldr	r2, [pc, #8]	@ (8007ac0 <stdio_exit_handler+0xc>)
 8007ab6:	4903      	ldr	r1, [pc, #12]	@ (8007ac4 <stdio_exit_handler+0x10>)
 8007ab8:	4803      	ldr	r0, [pc, #12]	@ (8007ac8 <stdio_exit_handler+0x14>)
 8007aba:	f000 b869 	b.w	8007b90 <_fwalk_sglue>
 8007abe:	bf00      	nop
 8007ac0:	20000014 	.word	0x20000014
 8007ac4:	080080a9 	.word	0x080080a9
 8007ac8:	20000024 	.word	0x20000024

08007acc <cleanup_stdio>:
 8007acc:	6841      	ldr	r1, [r0, #4]
 8007ace:	4b0c      	ldr	r3, [pc, #48]	@ (8007b00 <cleanup_stdio+0x34>)
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	d001      	beq.n	8007adc <cleanup_stdio+0x10>
 8007ad8:	f000 fae6 	bl	80080a8 <_fflush_r>
 8007adc:	68a1      	ldr	r1, [r4, #8]
 8007ade:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <cleanup_stdio+0x38>)
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	d002      	beq.n	8007aea <cleanup_stdio+0x1e>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fadf 	bl	80080a8 <_fflush_r>
 8007aea:	68e1      	ldr	r1, [r4, #12]
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <cleanup_stdio+0x3c>)
 8007aee:	4299      	cmp	r1, r3
 8007af0:	d004      	beq.n	8007afc <cleanup_stdio+0x30>
 8007af2:	4620      	mov	r0, r4
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f000 bad6 	b.w	80080a8 <_fflush_r>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	20019944 	.word	0x20019944
 8007b04:	200199ac 	.word	0x200199ac
 8007b08:	20019a14 	.word	0x20019a14

08007b0c <global_stdio_init.part.0>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <global_stdio_init.part.0+0x30>)
 8007b10:	4c0b      	ldr	r4, [pc, #44]	@ (8007b40 <global_stdio_init.part.0+0x34>)
 8007b12:	4a0c      	ldr	r2, [pc, #48]	@ (8007b44 <global_stdio_init.part.0+0x38>)
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	4620      	mov	r0, r4
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	f7ff ff94 	bl	8007a48 <std>
 8007b20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b24:	2201      	movs	r2, #1
 8007b26:	2109      	movs	r1, #9
 8007b28:	f7ff ff8e 	bl	8007a48 <std>
 8007b2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b30:	2202      	movs	r2, #2
 8007b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b36:	2112      	movs	r1, #18
 8007b38:	f7ff bf86 	b.w	8007a48 <std>
 8007b3c:	20019a7c 	.word	0x20019a7c
 8007b40:	20019944 	.word	0x20019944
 8007b44:	08007ab5 	.word	0x08007ab5

08007b48 <__sfp_lock_acquire>:
 8007b48:	4801      	ldr	r0, [pc, #4]	@ (8007b50 <__sfp_lock_acquire+0x8>)
 8007b4a:	f000 b8fa 	b.w	8007d42 <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20019a85 	.word	0x20019a85

08007b54 <__sfp_lock_release>:
 8007b54:	4801      	ldr	r0, [pc, #4]	@ (8007b5c <__sfp_lock_release+0x8>)
 8007b56:	f000 b8f5 	b.w	8007d44 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	20019a85 	.word	0x20019a85

08007b60 <__sinit>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	4604      	mov	r4, r0
 8007b64:	f7ff fff0 	bl	8007b48 <__sfp_lock_acquire>
 8007b68:	6a23      	ldr	r3, [r4, #32]
 8007b6a:	b11b      	cbz	r3, 8007b74 <__sinit+0x14>
 8007b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b70:	f7ff bff0 	b.w	8007b54 <__sfp_lock_release>
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <__sinit+0x28>)
 8007b76:	6223      	str	r3, [r4, #32]
 8007b78:	4b04      	ldr	r3, [pc, #16]	@ (8007b8c <__sinit+0x2c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f5      	bne.n	8007b6c <__sinit+0xc>
 8007b80:	f7ff ffc4 	bl	8007b0c <global_stdio_init.part.0>
 8007b84:	e7f2      	b.n	8007b6c <__sinit+0xc>
 8007b86:	bf00      	nop
 8007b88:	08007acd 	.word	0x08007acd
 8007b8c:	20019a7c 	.word	0x20019a7c

08007b90 <_fwalk_sglue>:
 8007b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b94:	4607      	mov	r7, r0
 8007b96:	4688      	mov	r8, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ba4:	d505      	bpl.n	8007bb2 <_fwalk_sglue+0x22>
 8007ba6:	6824      	ldr	r4, [r4, #0]
 8007ba8:	2c00      	cmp	r4, #0
 8007baa:	d1f7      	bne.n	8007b9c <_fwalk_sglue+0xc>
 8007bac:	4630      	mov	r0, r6
 8007bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d907      	bls.n	8007bc8 <_fwalk_sglue+0x38>
 8007bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	d003      	beq.n	8007bc8 <_fwalk_sglue+0x38>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	47c0      	blx	r8
 8007bc6:	4306      	orrs	r6, r0
 8007bc8:	3568      	adds	r5, #104	@ 0x68
 8007bca:	e7e9      	b.n	8007ba0 <_fwalk_sglue+0x10>

08007bcc <__sread>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	460c      	mov	r4, r1
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	f000 f878 	bl	8007cc8 <_read_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	bfab      	itete	ge
 8007bdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bde:	89a3      	ldrhlt	r3, [r4, #12]
 8007be0:	181b      	addge	r3, r3, r0
 8007be2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007be6:	bfac      	ite	ge
 8007be8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bea:	81a3      	strhlt	r3, [r4, #12]
 8007bec:	bd10      	pop	{r4, pc}

08007bee <__swrite>:
 8007bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	898b      	ldrh	r3, [r1, #12]
 8007bf6:	05db      	lsls	r3, r3, #23
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	d505      	bpl.n	8007c0c <__swrite+0x1e>
 8007c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c04:	2302      	movs	r3, #2
 8007c06:	2200      	movs	r2, #0
 8007c08:	f000 f84c 	bl	8007ca4 <_lseek_r>
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	4632      	mov	r2, r6
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c22:	f7ff bdab 	b.w	800777c <_write_r>

08007c26 <__sseek>:
 8007c26:	b510      	push	{r4, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2e:	f000 f839 	bl	8007ca4 <_lseek_r>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	bf15      	itete	ne
 8007c38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c42:	81a3      	strheq	r3, [r4, #12]
 8007c44:	bf18      	it	ne
 8007c46:	81a3      	strhne	r3, [r4, #12]
 8007c48:	bd10      	pop	{r4, pc}

08007c4a <__sclose>:
 8007c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4e:	f000 b819 	b.w	8007c84 <_close_r>

08007c52 <memcmp>:
 8007c52:	b510      	push	{r4, lr}
 8007c54:	3901      	subs	r1, #1
 8007c56:	4402      	add	r2, r0
 8007c58:	4290      	cmp	r0, r2
 8007c5a:	d101      	bne.n	8007c60 <memcmp+0xe>
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e005      	b.n	8007c6c <memcmp+0x1a>
 8007c60:	7803      	ldrb	r3, [r0, #0]
 8007c62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	d001      	beq.n	8007c6e <memcmp+0x1c>
 8007c6a:	1b18      	subs	r0, r3, r4
 8007c6c:	bd10      	pop	{r4, pc}
 8007c6e:	3001      	adds	r0, #1
 8007c70:	e7f2      	b.n	8007c58 <memcmp+0x6>

08007c72 <memset>:
 8007c72:	4402      	add	r2, r0
 8007c74:	4603      	mov	r3, r0
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d100      	bne.n	8007c7c <memset+0xa>
 8007c7a:	4770      	bx	lr
 8007c7c:	f803 1b01 	strb.w	r1, [r3], #1
 8007c80:	e7f9      	b.n	8007c76 <memset+0x4>
	...

08007c84 <_close_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	@ (8007ca0 <_close_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7f8 ffea 	bl	8000c68 <_close>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_close_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_close_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20019a80 	.word	0x20019a80

08007ca4 <_lseek_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d07      	ldr	r5, [pc, #28]	@ (8007cc4 <_lseek_r+0x20>)
 8007ca8:	4604      	mov	r4, r0
 8007caa:	4608      	mov	r0, r1
 8007cac:	4611      	mov	r1, r2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7f8 ffff 	bl	8000cb6 <_lseek>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_lseek_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_lseek_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	20019a80 	.word	0x20019a80

08007cc8 <_read_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	@ (8007ce8 <_read_r+0x20>)
 8007ccc:	4604      	mov	r4, r0
 8007cce:	4608      	mov	r0, r1
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f7f8 ffa9 	bl	8000c2e <_read>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_read_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_read_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20019a80 	.word	0x20019a80

08007cec <__errno>:
 8007cec:	4b01      	ldr	r3, [pc, #4]	@ (8007cf4 <__errno+0x8>)
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000020 	.word	0x20000020

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8007d30 <__libc_init_array+0x38>)
 8007cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d34 <__libc_init_array+0x3c>)
 8007cfe:	1b64      	subs	r4, r4, r5
 8007d00:	10a4      	asrs	r4, r4, #2
 8007d02:	2600      	movs	r6, #0
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	4d0b      	ldr	r5, [pc, #44]	@ (8007d38 <__libc_init_array+0x40>)
 8007d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d3c <__libc_init_array+0x44>)
 8007d0c:	f000 fe48 	bl	80089a0 <_init>
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	2600      	movs	r6, #0
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d20:	4798      	blx	r3
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2a:	4798      	blx	r3
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	08008c00 	.word	0x08008c00
 8007d34:	08008c00 	.word	0x08008c00
 8007d38:	08008c00 	.word	0x08008c00
 8007d3c:	08008c04 	.word	0x08008c04

08007d40 <__retarget_lock_init_recursive>:
 8007d40:	4770      	bx	lr

08007d42 <__retarget_lock_acquire_recursive>:
 8007d42:	4770      	bx	lr

08007d44 <__retarget_lock_release_recursive>:
 8007d44:	4770      	bx	lr

08007d46 <memcpy>:
 8007d46:	440a      	add	r2, r1
 8007d48:	4291      	cmp	r1, r2
 8007d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d4e:	d100      	bne.n	8007d52 <memcpy+0xc>
 8007d50:	4770      	bx	lr
 8007d52:	b510      	push	{r4, lr}
 8007d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d5c:	4291      	cmp	r1, r2
 8007d5e:	d1f9      	bne.n	8007d54 <memcpy+0xe>
 8007d60:	bd10      	pop	{r4, pc}
	...

08007d64 <__assert_func>:
 8007d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d66:	4614      	mov	r4, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4b09      	ldr	r3, [pc, #36]	@ (8007d90 <__assert_func+0x2c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4605      	mov	r5, r0
 8007d70:	68d8      	ldr	r0, [r3, #12]
 8007d72:	b954      	cbnz	r4, 8007d8a <__assert_func+0x26>
 8007d74:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <__assert_func+0x30>)
 8007d76:	461c      	mov	r4, r3
 8007d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d7c:	9100      	str	r1, [sp, #0]
 8007d7e:	462b      	mov	r3, r5
 8007d80:	4905      	ldr	r1, [pc, #20]	@ (8007d98 <__assert_func+0x34>)
 8007d82:	f000 f9b9 	bl	80080f8 <fiprintf>
 8007d86:	f000 f9d9 	bl	800813c <abort>
 8007d8a:	4b04      	ldr	r3, [pc, #16]	@ (8007d9c <__assert_func+0x38>)
 8007d8c:	e7f4      	b.n	8007d78 <__assert_func+0x14>
 8007d8e:	bf00      	nop
 8007d90:	20000020 	.word	0x20000020
 8007d94:	08008bc2 	.word	0x08008bc2
 8007d98:	08008b94 	.word	0x08008b94
 8007d9c:	08008b87 	.word	0x08008b87

08007da0 <_free_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4605      	mov	r5, r0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d041      	beq.n	8007e2c <_free_r+0x8c>
 8007da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dac:	1f0c      	subs	r4, r1, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfb8      	it	lt
 8007db2:	18e4      	addlt	r4, r4, r3
 8007db4:	f000 f8e8 	bl	8007f88 <__malloc_lock>
 8007db8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e30 <_free_r+0x90>)
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	b933      	cbnz	r3, 8007dcc <_free_r+0x2c>
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	6014      	str	r4, [r2, #0]
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc8:	f000 b8e4 	b.w	8007f94 <__malloc_unlock>
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d908      	bls.n	8007de2 <_free_r+0x42>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	1821      	adds	r1, r4, r0
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	bf01      	itttt	eq
 8007dd8:	6819      	ldreq	r1, [r3, #0]
 8007dda:	685b      	ldreq	r3, [r3, #4]
 8007ddc:	1809      	addeq	r1, r1, r0
 8007dde:	6021      	streq	r1, [r4, #0]
 8007de0:	e7ed      	b.n	8007dbe <_free_r+0x1e>
 8007de2:	461a      	mov	r2, r3
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	b10b      	cbz	r3, 8007dec <_free_r+0x4c>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d9fa      	bls.n	8007de2 <_free_r+0x42>
 8007dec:	6811      	ldr	r1, [r2, #0]
 8007dee:	1850      	adds	r0, r2, r1
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d10b      	bne.n	8007e0c <_free_r+0x6c>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	4401      	add	r1, r0
 8007df8:	1850      	adds	r0, r2, r1
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	d1e0      	bne.n	8007dc2 <_free_r+0x22>
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	6053      	str	r3, [r2, #4]
 8007e06:	4408      	add	r0, r1
 8007e08:	6010      	str	r0, [r2, #0]
 8007e0a:	e7da      	b.n	8007dc2 <_free_r+0x22>
 8007e0c:	d902      	bls.n	8007e14 <_free_r+0x74>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	e7d6      	b.n	8007dc2 <_free_r+0x22>
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	1821      	adds	r1, r4, r0
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf04      	itt	eq
 8007e1c:	6819      	ldreq	r1, [r3, #0]
 8007e1e:	685b      	ldreq	r3, [r3, #4]
 8007e20:	6063      	str	r3, [r4, #4]
 8007e22:	bf04      	itt	eq
 8007e24:	1809      	addeq	r1, r1, r0
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	6054      	str	r4, [r2, #4]
 8007e2a:	e7ca      	b.n	8007dc2 <_free_r+0x22>
 8007e2c:	bd38      	pop	{r3, r4, r5, pc}
 8007e2e:	bf00      	nop
 8007e30:	20019a8c 	.word	0x20019a8c

08007e34 <malloc>:
 8007e34:	4b02      	ldr	r3, [pc, #8]	@ (8007e40 <malloc+0xc>)
 8007e36:	4601      	mov	r1, r0
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	f000 b825 	b.w	8007e88 <_malloc_r>
 8007e3e:	bf00      	nop
 8007e40:	20000020 	.word	0x20000020

08007e44 <sbrk_aligned>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	4e0f      	ldr	r6, [pc, #60]	@ (8007e84 <sbrk_aligned+0x40>)
 8007e48:	460c      	mov	r4, r1
 8007e4a:	6831      	ldr	r1, [r6, #0]
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	b911      	cbnz	r1, 8007e56 <sbrk_aligned+0x12>
 8007e50:	f000 f964 	bl	800811c <_sbrk_r>
 8007e54:	6030      	str	r0, [r6, #0]
 8007e56:	4621      	mov	r1, r4
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f000 f95f 	bl	800811c <_sbrk_r>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	d103      	bne.n	8007e6a <sbrk_aligned+0x26>
 8007e62:	f04f 34ff 	mov.w	r4, #4294967295
 8007e66:	4620      	mov	r0, r4
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	1cc4      	adds	r4, r0, #3
 8007e6c:	f024 0403 	bic.w	r4, r4, #3
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d0f8      	beq.n	8007e66 <sbrk_aligned+0x22>
 8007e74:	1a21      	subs	r1, r4, r0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 f950 	bl	800811c <_sbrk_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d1f2      	bne.n	8007e66 <sbrk_aligned+0x22>
 8007e80:	e7ef      	b.n	8007e62 <sbrk_aligned+0x1e>
 8007e82:	bf00      	nop
 8007e84:	20019a88 	.word	0x20019a88

08007e88 <_malloc_r>:
 8007e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	1ccd      	adds	r5, r1, #3
 8007e8e:	f025 0503 	bic.w	r5, r5, #3
 8007e92:	3508      	adds	r5, #8
 8007e94:	2d0c      	cmp	r5, #12
 8007e96:	bf38      	it	cc
 8007e98:	250c      	movcc	r5, #12
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	db01      	blt.n	8007ea4 <_malloc_r+0x1c>
 8007ea0:	42a9      	cmp	r1, r5
 8007ea2:	d904      	bls.n	8007eae <_malloc_r+0x26>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	6033      	str	r3, [r6, #0]
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f84 <_malloc_r+0xfc>
 8007eb2:	f000 f869 	bl	8007f88 <__malloc_lock>
 8007eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eba:	461c      	mov	r4, r3
 8007ebc:	bb44      	cbnz	r4, 8007f10 <_malloc_r+0x88>
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f7ff ffbf 	bl	8007e44 <sbrk_aligned>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	4604      	mov	r4, r0
 8007eca:	d158      	bne.n	8007f7e <_malloc_r+0xf6>
 8007ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed0:	4627      	mov	r7, r4
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	d143      	bne.n	8007f5e <_malloc_r+0xd6>
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	d04b      	beq.n	8007f72 <_malloc_r+0xea>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	4639      	mov	r1, r7
 8007ede:	4630      	mov	r0, r6
 8007ee0:	eb04 0903 	add.w	r9, r4, r3
 8007ee4:	f000 f91a 	bl	800811c <_sbrk_r>
 8007ee8:	4581      	cmp	r9, r0
 8007eea:	d142      	bne.n	8007f72 <_malloc_r+0xea>
 8007eec:	6821      	ldr	r1, [r4, #0]
 8007eee:	1a6d      	subs	r5, r5, r1
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ffa6 	bl	8007e44 <sbrk_aligned>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d03a      	beq.n	8007f72 <_malloc_r+0xea>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	442b      	add	r3, r5
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	f8d8 3000 	ldr.w	r3, [r8]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	bb62      	cbnz	r2, 8007f64 <_malloc_r+0xdc>
 8007f0a:	f8c8 7000 	str.w	r7, [r8]
 8007f0e:	e00f      	b.n	8007f30 <_malloc_r+0xa8>
 8007f10:	6822      	ldr	r2, [r4, #0]
 8007f12:	1b52      	subs	r2, r2, r5
 8007f14:	d420      	bmi.n	8007f58 <_malloc_r+0xd0>
 8007f16:	2a0b      	cmp	r2, #11
 8007f18:	d917      	bls.n	8007f4a <_malloc_r+0xc2>
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	6025      	str	r5, [r4, #0]
 8007f20:	bf18      	it	ne
 8007f22:	6059      	strne	r1, [r3, #4]
 8007f24:	6863      	ldr	r3, [r4, #4]
 8007f26:	bf08      	it	eq
 8007f28:	f8c8 1000 	streq.w	r1, [r8]
 8007f2c:	5162      	str	r2, [r4, r5]
 8007f2e:	604b      	str	r3, [r1, #4]
 8007f30:	4630      	mov	r0, r6
 8007f32:	f000 f82f 	bl	8007f94 <__malloc_unlock>
 8007f36:	f104 000b 	add.w	r0, r4, #11
 8007f3a:	1d23      	adds	r3, r4, #4
 8007f3c:	f020 0007 	bic.w	r0, r0, #7
 8007f40:	1ac2      	subs	r2, r0, r3
 8007f42:	bf1c      	itt	ne
 8007f44:	1a1b      	subne	r3, r3, r0
 8007f46:	50a3      	strne	r3, [r4, r2]
 8007f48:	e7af      	b.n	8007eaa <_malloc_r+0x22>
 8007f4a:	6862      	ldr	r2, [r4, #4]
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	bf0c      	ite	eq
 8007f50:	f8c8 2000 	streq.w	r2, [r8]
 8007f54:	605a      	strne	r2, [r3, #4]
 8007f56:	e7eb      	b.n	8007f30 <_malloc_r+0xa8>
 8007f58:	4623      	mov	r3, r4
 8007f5a:	6864      	ldr	r4, [r4, #4]
 8007f5c:	e7ae      	b.n	8007ebc <_malloc_r+0x34>
 8007f5e:	463c      	mov	r4, r7
 8007f60:	687f      	ldr	r7, [r7, #4]
 8007f62:	e7b6      	b.n	8007ed2 <_malloc_r+0x4a>
 8007f64:	461a      	mov	r2, r3
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d1fb      	bne.n	8007f64 <_malloc_r+0xdc>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6053      	str	r3, [r2, #4]
 8007f70:	e7de      	b.n	8007f30 <_malloc_r+0xa8>
 8007f72:	230c      	movs	r3, #12
 8007f74:	6033      	str	r3, [r6, #0]
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 f80c 	bl	8007f94 <__malloc_unlock>
 8007f7c:	e794      	b.n	8007ea8 <_malloc_r+0x20>
 8007f7e:	6005      	str	r5, [r0, #0]
 8007f80:	e7d6      	b.n	8007f30 <_malloc_r+0xa8>
 8007f82:	bf00      	nop
 8007f84:	20019a8c 	.word	0x20019a8c

08007f88 <__malloc_lock>:
 8007f88:	4801      	ldr	r0, [pc, #4]	@ (8007f90 <__malloc_lock+0x8>)
 8007f8a:	f7ff beda 	b.w	8007d42 <__retarget_lock_acquire_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20019a84 	.word	0x20019a84

08007f94 <__malloc_unlock>:
 8007f94:	4801      	ldr	r0, [pc, #4]	@ (8007f9c <__malloc_unlock+0x8>)
 8007f96:	f7ff bed5 	b.w	8007d44 <__retarget_lock_release_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20019a84 	.word	0x20019a84

08007fa0 <__sflush_r>:
 8007fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	0716      	lsls	r6, r2, #28
 8007faa:	4605      	mov	r5, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	d454      	bmi.n	800805a <__sflush_r+0xba>
 8007fb0:	684b      	ldr	r3, [r1, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc02      	bgt.n	8007fbc <__sflush_r+0x1c>
 8007fb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dd48      	ble.n	800804e <__sflush_r+0xae>
 8007fbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	d045      	beq.n	800804e <__sflush_r+0xae>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fc8:	682f      	ldr	r7, [r5, #0]
 8007fca:	6a21      	ldr	r1, [r4, #32]
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	d030      	beq.n	8008032 <__sflush_r+0x92>
 8007fd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	0759      	lsls	r1, r3, #29
 8007fd6:	d505      	bpl.n	8007fe4 <__sflush_r+0x44>
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fde:	b10b      	cbz	r3, 8007fe4 <__sflush_r+0x44>
 8007fe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fe2:	1ad2      	subs	r2, r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fe8:	6a21      	ldr	r1, [r4, #32]
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b0      	blx	r6
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	d106      	bne.n	8008002 <__sflush_r+0x62>
 8007ff4:	6829      	ldr	r1, [r5, #0]
 8007ff6:	291d      	cmp	r1, #29
 8007ff8:	d82b      	bhi.n	8008052 <__sflush_r+0xb2>
 8007ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80080a4 <__sflush_r+0x104>)
 8007ffc:	410a      	asrs	r2, r1
 8007ffe:	07d6      	lsls	r6, r2, #31
 8008000:	d427      	bmi.n	8008052 <__sflush_r+0xb2>
 8008002:	2200      	movs	r2, #0
 8008004:	6062      	str	r2, [r4, #4]
 8008006:	04d9      	lsls	r1, r3, #19
 8008008:	6922      	ldr	r2, [r4, #16]
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	d504      	bpl.n	8008018 <__sflush_r+0x78>
 800800e:	1c42      	adds	r2, r0, #1
 8008010:	d101      	bne.n	8008016 <__sflush_r+0x76>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	b903      	cbnz	r3, 8008018 <__sflush_r+0x78>
 8008016:	6560      	str	r0, [r4, #84]	@ 0x54
 8008018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800801a:	602f      	str	r7, [r5, #0]
 800801c:	b1b9      	cbz	r1, 800804e <__sflush_r+0xae>
 800801e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008022:	4299      	cmp	r1, r3
 8008024:	d002      	beq.n	800802c <__sflush_r+0x8c>
 8008026:	4628      	mov	r0, r5
 8008028:	f7ff feba 	bl	8007da0 <_free_r>
 800802c:	2300      	movs	r3, #0
 800802e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008030:	e00d      	b.n	800804e <__sflush_r+0xae>
 8008032:	2301      	movs	r3, #1
 8008034:	4628      	mov	r0, r5
 8008036:	47b0      	blx	r6
 8008038:	4602      	mov	r2, r0
 800803a:	1c50      	adds	r0, r2, #1
 800803c:	d1c9      	bne.n	8007fd2 <__sflush_r+0x32>
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0c6      	beq.n	8007fd2 <__sflush_r+0x32>
 8008044:	2b1d      	cmp	r3, #29
 8008046:	d001      	beq.n	800804c <__sflush_r+0xac>
 8008048:	2b16      	cmp	r3, #22
 800804a:	d11e      	bne.n	800808a <__sflush_r+0xea>
 800804c:	602f      	str	r7, [r5, #0]
 800804e:	2000      	movs	r0, #0
 8008050:	e022      	b.n	8008098 <__sflush_r+0xf8>
 8008052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008056:	b21b      	sxth	r3, r3
 8008058:	e01b      	b.n	8008092 <__sflush_r+0xf2>
 800805a:	690f      	ldr	r7, [r1, #16]
 800805c:	2f00      	cmp	r7, #0
 800805e:	d0f6      	beq.n	800804e <__sflush_r+0xae>
 8008060:	0793      	lsls	r3, r2, #30
 8008062:	680e      	ldr	r6, [r1, #0]
 8008064:	bf08      	it	eq
 8008066:	694b      	ldreq	r3, [r1, #20]
 8008068:	600f      	str	r7, [r1, #0]
 800806a:	bf18      	it	ne
 800806c:	2300      	movne	r3, #0
 800806e:	eba6 0807 	sub.w	r8, r6, r7
 8008072:	608b      	str	r3, [r1, #8]
 8008074:	f1b8 0f00 	cmp.w	r8, #0
 8008078:	dde9      	ble.n	800804e <__sflush_r+0xae>
 800807a:	6a21      	ldr	r1, [r4, #32]
 800807c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800807e:	4643      	mov	r3, r8
 8008080:	463a      	mov	r2, r7
 8008082:	4628      	mov	r0, r5
 8008084:	47b0      	blx	r6
 8008086:	2800      	cmp	r0, #0
 8008088:	dc08      	bgt.n	800809c <__sflush_r+0xfc>
 800808a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	4407      	add	r7, r0
 800809e:	eba8 0800 	sub.w	r8, r8, r0
 80080a2:	e7e7      	b.n	8008074 <__sflush_r+0xd4>
 80080a4:	dfbffffe 	.word	0xdfbffffe

080080a8 <_fflush_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	4605      	mov	r5, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b913      	cbnz	r3, 80080b8 <_fflush_r+0x10>
 80080b2:	2500      	movs	r5, #0
 80080b4:	4628      	mov	r0, r5
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	b118      	cbz	r0, 80080c2 <_fflush_r+0x1a>
 80080ba:	6a03      	ldr	r3, [r0, #32]
 80080bc:	b90b      	cbnz	r3, 80080c2 <_fflush_r+0x1a>
 80080be:	f7ff fd4f 	bl	8007b60 <__sinit>
 80080c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f3      	beq.n	80080b2 <_fflush_r+0xa>
 80080ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080cc:	07d0      	lsls	r0, r2, #31
 80080ce:	d404      	bmi.n	80080da <_fflush_r+0x32>
 80080d0:	0599      	lsls	r1, r3, #22
 80080d2:	d402      	bmi.n	80080da <_fflush_r+0x32>
 80080d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080d6:	f7ff fe34 	bl	8007d42 <__retarget_lock_acquire_recursive>
 80080da:	4628      	mov	r0, r5
 80080dc:	4621      	mov	r1, r4
 80080de:	f7ff ff5f 	bl	8007fa0 <__sflush_r>
 80080e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080e4:	07da      	lsls	r2, r3, #31
 80080e6:	4605      	mov	r5, r0
 80080e8:	d4e4      	bmi.n	80080b4 <_fflush_r+0xc>
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	059b      	lsls	r3, r3, #22
 80080ee:	d4e1      	bmi.n	80080b4 <_fflush_r+0xc>
 80080f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f2:	f7ff fe27 	bl	8007d44 <__retarget_lock_release_recursive>
 80080f6:	e7dd      	b.n	80080b4 <_fflush_r+0xc>

080080f8 <fiprintf>:
 80080f8:	b40e      	push	{r1, r2, r3}
 80080fa:	b503      	push	{r0, r1, lr}
 80080fc:	4601      	mov	r1, r0
 80080fe:	ab03      	add	r3, sp, #12
 8008100:	4805      	ldr	r0, [pc, #20]	@ (8008118 <fiprintf+0x20>)
 8008102:	f853 2b04 	ldr.w	r2, [r3], #4
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	f000 f847 	bl	800819c <_vfiprintf_r>
 800810e:	b002      	add	sp, #8
 8008110:	f85d eb04 	ldr.w	lr, [sp], #4
 8008114:	b003      	add	sp, #12
 8008116:	4770      	bx	lr
 8008118:	20000020 	.word	0x20000020

0800811c <_sbrk_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4d06      	ldr	r5, [pc, #24]	@ (8008138 <_sbrk_r+0x1c>)
 8008120:	2300      	movs	r3, #0
 8008122:	4604      	mov	r4, r0
 8008124:	4608      	mov	r0, r1
 8008126:	602b      	str	r3, [r5, #0]
 8008128:	f7f8 fdd2 	bl	8000cd0 <_sbrk>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_sbrk_r+0x1a>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_sbrk_r+0x1a>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	20019a80 	.word	0x20019a80

0800813c <abort>:
 800813c:	b508      	push	{r3, lr}
 800813e:	2006      	movs	r0, #6
 8008140:	f000 fb8e 	bl	8008860 <raise>
 8008144:	2001      	movs	r0, #1
 8008146:	f7f8 fd67 	bl	8000c18 <_exit>

0800814a <__sfputc_r>:
 800814a:	6893      	ldr	r3, [r2, #8]
 800814c:	3b01      	subs	r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	b410      	push	{r4}
 8008152:	6093      	str	r3, [r2, #8]
 8008154:	da08      	bge.n	8008168 <__sfputc_r+0x1e>
 8008156:	6994      	ldr	r4, [r2, #24]
 8008158:	42a3      	cmp	r3, r4
 800815a:	db01      	blt.n	8008160 <__sfputc_r+0x16>
 800815c:	290a      	cmp	r1, #10
 800815e:	d103      	bne.n	8008168 <__sfputc_r+0x1e>
 8008160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008164:	f000 bac0 	b.w	80086e8 <__swbuf_r>
 8008168:	6813      	ldr	r3, [r2, #0]
 800816a:	1c58      	adds	r0, r3, #1
 800816c:	6010      	str	r0, [r2, #0]
 800816e:	7019      	strb	r1, [r3, #0]
 8008170:	4608      	mov	r0, r1
 8008172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008176:	4770      	bx	lr

08008178 <__sfputs_r>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	4614      	mov	r4, r2
 8008180:	18d5      	adds	r5, r2, r3
 8008182:	42ac      	cmp	r4, r5
 8008184:	d101      	bne.n	800818a <__sfputs_r+0x12>
 8008186:	2000      	movs	r0, #0
 8008188:	e007      	b.n	800819a <__sfputs_r+0x22>
 800818a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818e:	463a      	mov	r2, r7
 8008190:	4630      	mov	r0, r6
 8008192:	f7ff ffda 	bl	800814a <__sfputc_r>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d1f3      	bne.n	8008182 <__sfputs_r+0xa>
 800819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800819c <_vfiprintf_r>:
 800819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	460d      	mov	r5, r1
 80081a2:	b09d      	sub	sp, #116	@ 0x74
 80081a4:	4614      	mov	r4, r2
 80081a6:	4698      	mov	r8, r3
 80081a8:	4606      	mov	r6, r0
 80081aa:	b118      	cbz	r0, 80081b4 <_vfiprintf_r+0x18>
 80081ac:	6a03      	ldr	r3, [r0, #32]
 80081ae:	b90b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x18>
 80081b0:	f7ff fcd6 	bl	8007b60 <__sinit>
 80081b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081b6:	07d9      	lsls	r1, r3, #31
 80081b8:	d405      	bmi.n	80081c6 <_vfiprintf_r+0x2a>
 80081ba:	89ab      	ldrh	r3, [r5, #12]
 80081bc:	059a      	lsls	r2, r3, #22
 80081be:	d402      	bmi.n	80081c6 <_vfiprintf_r+0x2a>
 80081c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081c2:	f7ff fdbe 	bl	8007d42 <__retarget_lock_acquire_recursive>
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	071b      	lsls	r3, r3, #28
 80081ca:	d501      	bpl.n	80081d0 <_vfiprintf_r+0x34>
 80081cc:	692b      	ldr	r3, [r5, #16]
 80081ce:	b99b      	cbnz	r3, 80081f8 <_vfiprintf_r+0x5c>
 80081d0:	4629      	mov	r1, r5
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 fac6 	bl	8008764 <__swsetup_r>
 80081d8:	b170      	cbz	r0, 80081f8 <_vfiprintf_r+0x5c>
 80081da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081dc:	07dc      	lsls	r4, r3, #31
 80081de:	d504      	bpl.n	80081ea <_vfiprintf_r+0x4e>
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	b01d      	add	sp, #116	@ 0x74
 80081e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	89ab      	ldrh	r3, [r5, #12]
 80081ec:	0598      	lsls	r0, r3, #22
 80081ee:	d4f7      	bmi.n	80081e0 <_vfiprintf_r+0x44>
 80081f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081f2:	f7ff fda7 	bl	8007d44 <__retarget_lock_release_recursive>
 80081f6:	e7f3      	b.n	80081e0 <_vfiprintf_r+0x44>
 80081f8:	2300      	movs	r3, #0
 80081fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fc:	2320      	movs	r3, #32
 80081fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008202:	f8cd 800c 	str.w	r8, [sp, #12]
 8008206:	2330      	movs	r3, #48	@ 0x30
 8008208:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083b8 <_vfiprintf_r+0x21c>
 800820c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008210:	f04f 0901 	mov.w	r9, #1
 8008214:	4623      	mov	r3, r4
 8008216:	469a      	mov	sl, r3
 8008218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800821c:	b10a      	cbz	r2, 8008222 <_vfiprintf_r+0x86>
 800821e:	2a25      	cmp	r2, #37	@ 0x25
 8008220:	d1f9      	bne.n	8008216 <_vfiprintf_r+0x7a>
 8008222:	ebba 0b04 	subs.w	fp, sl, r4
 8008226:	d00b      	beq.n	8008240 <_vfiprintf_r+0xa4>
 8008228:	465b      	mov	r3, fp
 800822a:	4622      	mov	r2, r4
 800822c:	4629      	mov	r1, r5
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff ffa2 	bl	8008178 <__sfputs_r>
 8008234:	3001      	adds	r0, #1
 8008236:	f000 80a7 	beq.w	8008388 <_vfiprintf_r+0x1ec>
 800823a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800823c:	445a      	add	r2, fp
 800823e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008240:	f89a 3000 	ldrb.w	r3, [sl]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 809f 	beq.w	8008388 <_vfiprintf_r+0x1ec>
 800824a:	2300      	movs	r3, #0
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008254:	f10a 0a01 	add.w	sl, sl, #1
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	9307      	str	r3, [sp, #28]
 800825c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008260:	931a      	str	r3, [sp, #104]	@ 0x68
 8008262:	4654      	mov	r4, sl
 8008264:	2205      	movs	r2, #5
 8008266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826a:	4853      	ldr	r0, [pc, #332]	@ (80083b8 <_vfiprintf_r+0x21c>)
 800826c:	f7f8 f800 	bl	8000270 <memchr>
 8008270:	9a04      	ldr	r2, [sp, #16]
 8008272:	b9d8      	cbnz	r0, 80082ac <_vfiprintf_r+0x110>
 8008274:	06d1      	lsls	r1, r2, #27
 8008276:	bf44      	itt	mi
 8008278:	2320      	movmi	r3, #32
 800827a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800827e:	0713      	lsls	r3, r2, #28
 8008280:	bf44      	itt	mi
 8008282:	232b      	movmi	r3, #43	@ 0x2b
 8008284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008288:	f89a 3000 	ldrb.w	r3, [sl]
 800828c:	2b2a      	cmp	r3, #42	@ 0x2a
 800828e:	d015      	beq.n	80082bc <_vfiprintf_r+0x120>
 8008290:	9a07      	ldr	r2, [sp, #28]
 8008292:	4654      	mov	r4, sl
 8008294:	2000      	movs	r0, #0
 8008296:	f04f 0c0a 	mov.w	ip, #10
 800829a:	4621      	mov	r1, r4
 800829c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a0:	3b30      	subs	r3, #48	@ 0x30
 80082a2:	2b09      	cmp	r3, #9
 80082a4:	d94b      	bls.n	800833e <_vfiprintf_r+0x1a2>
 80082a6:	b1b0      	cbz	r0, 80082d6 <_vfiprintf_r+0x13a>
 80082a8:	9207      	str	r2, [sp, #28]
 80082aa:	e014      	b.n	80082d6 <_vfiprintf_r+0x13a>
 80082ac:	eba0 0308 	sub.w	r3, r0, r8
 80082b0:	fa09 f303 	lsl.w	r3, r9, r3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	46a2      	mov	sl, r4
 80082ba:	e7d2      	b.n	8008262 <_vfiprintf_r+0xc6>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	1d19      	adds	r1, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	9103      	str	r1, [sp, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfbb      	ittet	lt
 80082c8:	425b      	neglt	r3, r3
 80082ca:	f042 0202 	orrlt.w	r2, r2, #2
 80082ce:	9307      	strge	r3, [sp, #28]
 80082d0:	9307      	strlt	r3, [sp, #28]
 80082d2:	bfb8      	it	lt
 80082d4:	9204      	strlt	r2, [sp, #16]
 80082d6:	7823      	ldrb	r3, [r4, #0]
 80082d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80082da:	d10a      	bne.n	80082f2 <_vfiprintf_r+0x156>
 80082dc:	7863      	ldrb	r3, [r4, #1]
 80082de:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e0:	d132      	bne.n	8008348 <_vfiprintf_r+0x1ac>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	9203      	str	r2, [sp, #12]
 80082ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082ee:	3402      	adds	r4, #2
 80082f0:	9305      	str	r3, [sp, #20]
 80082f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083c8 <_vfiprintf_r+0x22c>
 80082f6:	7821      	ldrb	r1, [r4, #0]
 80082f8:	2203      	movs	r2, #3
 80082fa:	4650      	mov	r0, sl
 80082fc:	f7f7 ffb8 	bl	8000270 <memchr>
 8008300:	b138      	cbz	r0, 8008312 <_vfiprintf_r+0x176>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	eba0 000a 	sub.w	r0, r0, sl
 8008308:	2240      	movs	r2, #64	@ 0x40
 800830a:	4082      	lsls	r2, r0
 800830c:	4313      	orrs	r3, r2
 800830e:	3401      	adds	r4, #1
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008316:	4829      	ldr	r0, [pc, #164]	@ (80083bc <_vfiprintf_r+0x220>)
 8008318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800831c:	2206      	movs	r2, #6
 800831e:	f7f7 ffa7 	bl	8000270 <memchr>
 8008322:	2800      	cmp	r0, #0
 8008324:	d03f      	beq.n	80083a6 <_vfiprintf_r+0x20a>
 8008326:	4b26      	ldr	r3, [pc, #152]	@ (80083c0 <_vfiprintf_r+0x224>)
 8008328:	bb1b      	cbnz	r3, 8008372 <_vfiprintf_r+0x1d6>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	3307      	adds	r3, #7
 800832e:	f023 0307 	bic.w	r3, r3, #7
 8008332:	3308      	adds	r3, #8
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008338:	443b      	add	r3, r7
 800833a:	9309      	str	r3, [sp, #36]	@ 0x24
 800833c:	e76a      	b.n	8008214 <_vfiprintf_r+0x78>
 800833e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008342:	460c      	mov	r4, r1
 8008344:	2001      	movs	r0, #1
 8008346:	e7a8      	b.n	800829a <_vfiprintf_r+0xfe>
 8008348:	2300      	movs	r3, #0
 800834a:	3401      	adds	r4, #1
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	4619      	mov	r1, r3
 8008350:	f04f 0c0a 	mov.w	ip, #10
 8008354:	4620      	mov	r0, r4
 8008356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800835a:	3a30      	subs	r2, #48	@ 0x30
 800835c:	2a09      	cmp	r2, #9
 800835e:	d903      	bls.n	8008368 <_vfiprintf_r+0x1cc>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0c6      	beq.n	80082f2 <_vfiprintf_r+0x156>
 8008364:	9105      	str	r1, [sp, #20]
 8008366:	e7c4      	b.n	80082f2 <_vfiprintf_r+0x156>
 8008368:	fb0c 2101 	mla	r1, ip, r1, r2
 800836c:	4604      	mov	r4, r0
 800836e:	2301      	movs	r3, #1
 8008370:	e7f0      	b.n	8008354 <_vfiprintf_r+0x1b8>
 8008372:	ab03      	add	r3, sp, #12
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	462a      	mov	r2, r5
 8008378:	4b12      	ldr	r3, [pc, #72]	@ (80083c4 <_vfiprintf_r+0x228>)
 800837a:	a904      	add	r1, sp, #16
 800837c:	4630      	mov	r0, r6
 800837e:	f3af 8000 	nop.w
 8008382:	4607      	mov	r7, r0
 8008384:	1c78      	adds	r0, r7, #1
 8008386:	d1d6      	bne.n	8008336 <_vfiprintf_r+0x19a>
 8008388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800838a:	07d9      	lsls	r1, r3, #31
 800838c:	d405      	bmi.n	800839a <_vfiprintf_r+0x1fe>
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	059a      	lsls	r2, r3, #22
 8008392:	d402      	bmi.n	800839a <_vfiprintf_r+0x1fe>
 8008394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008396:	f7ff fcd5 	bl	8007d44 <__retarget_lock_release_recursive>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	065b      	lsls	r3, r3, #25
 800839e:	f53f af1f 	bmi.w	80081e0 <_vfiprintf_r+0x44>
 80083a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a4:	e71e      	b.n	80081e4 <_vfiprintf_r+0x48>
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	462a      	mov	r2, r5
 80083ac:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <_vfiprintf_r+0x228>)
 80083ae:	a904      	add	r1, sp, #16
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 f879 	bl	80084a8 <_printf_i>
 80083b6:	e7e4      	b.n	8008382 <_vfiprintf_r+0x1e6>
 80083b8:	08008bc3 	.word	0x08008bc3
 80083bc:	08008bcd 	.word	0x08008bcd
 80083c0:	00000000 	.word	0x00000000
 80083c4:	08008179 	.word	0x08008179
 80083c8:	08008bc9 	.word	0x08008bc9

080083cc <_printf_common>:
 80083cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	4616      	mov	r6, r2
 80083d2:	4698      	mov	r8, r3
 80083d4:	688a      	ldr	r2, [r1, #8]
 80083d6:	690b      	ldr	r3, [r1, #16]
 80083d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083dc:	4293      	cmp	r3, r2
 80083de:	bfb8      	it	lt
 80083e0:	4613      	movlt	r3, r2
 80083e2:	6033      	str	r3, [r6, #0]
 80083e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083e8:	4607      	mov	r7, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	b10a      	cbz	r2, 80083f2 <_printf_common+0x26>
 80083ee:	3301      	adds	r3, #1
 80083f0:	6033      	str	r3, [r6, #0]
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	0699      	lsls	r1, r3, #26
 80083f6:	bf42      	ittt	mi
 80083f8:	6833      	ldrmi	r3, [r6, #0]
 80083fa:	3302      	addmi	r3, #2
 80083fc:	6033      	strmi	r3, [r6, #0]
 80083fe:	6825      	ldr	r5, [r4, #0]
 8008400:	f015 0506 	ands.w	r5, r5, #6
 8008404:	d106      	bne.n	8008414 <_printf_common+0x48>
 8008406:	f104 0a19 	add.w	sl, r4, #25
 800840a:	68e3      	ldr	r3, [r4, #12]
 800840c:	6832      	ldr	r2, [r6, #0]
 800840e:	1a9b      	subs	r3, r3, r2
 8008410:	42ab      	cmp	r3, r5
 8008412:	dc26      	bgt.n	8008462 <_printf_common+0x96>
 8008414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	3b00      	subs	r3, #0
 800841c:	bf18      	it	ne
 800841e:	2301      	movne	r3, #1
 8008420:	0692      	lsls	r2, r2, #26
 8008422:	d42b      	bmi.n	800847c <_printf_common+0xb0>
 8008424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008428:	4641      	mov	r1, r8
 800842a:	4638      	mov	r0, r7
 800842c:	47c8      	blx	r9
 800842e:	3001      	adds	r0, #1
 8008430:	d01e      	beq.n	8008470 <_printf_common+0xa4>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	6922      	ldr	r2, [r4, #16]
 8008436:	f003 0306 	and.w	r3, r3, #6
 800843a:	2b04      	cmp	r3, #4
 800843c:	bf02      	ittt	eq
 800843e:	68e5      	ldreq	r5, [r4, #12]
 8008440:	6833      	ldreq	r3, [r6, #0]
 8008442:	1aed      	subeq	r5, r5, r3
 8008444:	68a3      	ldr	r3, [r4, #8]
 8008446:	bf0c      	ite	eq
 8008448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800844c:	2500      	movne	r5, #0
 800844e:	4293      	cmp	r3, r2
 8008450:	bfc4      	itt	gt
 8008452:	1a9b      	subgt	r3, r3, r2
 8008454:	18ed      	addgt	r5, r5, r3
 8008456:	2600      	movs	r6, #0
 8008458:	341a      	adds	r4, #26
 800845a:	42b5      	cmp	r5, r6
 800845c:	d11a      	bne.n	8008494 <_printf_common+0xc8>
 800845e:	2000      	movs	r0, #0
 8008460:	e008      	b.n	8008474 <_printf_common+0xa8>
 8008462:	2301      	movs	r3, #1
 8008464:	4652      	mov	r2, sl
 8008466:	4641      	mov	r1, r8
 8008468:	4638      	mov	r0, r7
 800846a:	47c8      	blx	r9
 800846c:	3001      	adds	r0, #1
 800846e:	d103      	bne.n	8008478 <_printf_common+0xac>
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008478:	3501      	adds	r5, #1
 800847a:	e7c6      	b.n	800840a <_printf_common+0x3e>
 800847c:	18e1      	adds	r1, r4, r3
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	2030      	movs	r0, #48	@ 0x30
 8008482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008486:	4422      	add	r2, r4
 8008488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800848c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008490:	3302      	adds	r3, #2
 8008492:	e7c7      	b.n	8008424 <_printf_common+0x58>
 8008494:	2301      	movs	r3, #1
 8008496:	4622      	mov	r2, r4
 8008498:	4641      	mov	r1, r8
 800849a:	4638      	mov	r0, r7
 800849c:	47c8      	blx	r9
 800849e:	3001      	adds	r0, #1
 80084a0:	d0e6      	beq.n	8008470 <_printf_common+0xa4>
 80084a2:	3601      	adds	r6, #1
 80084a4:	e7d9      	b.n	800845a <_printf_common+0x8e>
	...

080084a8 <_printf_i>:
 80084a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	7e0f      	ldrb	r7, [r1, #24]
 80084ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084b0:	2f78      	cmp	r7, #120	@ 0x78
 80084b2:	4691      	mov	r9, r2
 80084b4:	4680      	mov	r8, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	469a      	mov	sl, r3
 80084ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084be:	d807      	bhi.n	80084d0 <_printf_i+0x28>
 80084c0:	2f62      	cmp	r7, #98	@ 0x62
 80084c2:	d80a      	bhi.n	80084da <_printf_i+0x32>
 80084c4:	2f00      	cmp	r7, #0
 80084c6:	f000 80d2 	beq.w	800866e <_printf_i+0x1c6>
 80084ca:	2f58      	cmp	r7, #88	@ 0x58
 80084cc:	f000 80b9 	beq.w	8008642 <_printf_i+0x19a>
 80084d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084d8:	e03a      	b.n	8008550 <_printf_i+0xa8>
 80084da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084de:	2b15      	cmp	r3, #21
 80084e0:	d8f6      	bhi.n	80084d0 <_printf_i+0x28>
 80084e2:	a101      	add	r1, pc, #4	@ (adr r1, 80084e8 <_printf_i+0x40>)
 80084e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084e8:	08008541 	.word	0x08008541
 80084ec:	08008555 	.word	0x08008555
 80084f0:	080084d1 	.word	0x080084d1
 80084f4:	080084d1 	.word	0x080084d1
 80084f8:	080084d1 	.word	0x080084d1
 80084fc:	080084d1 	.word	0x080084d1
 8008500:	08008555 	.word	0x08008555
 8008504:	080084d1 	.word	0x080084d1
 8008508:	080084d1 	.word	0x080084d1
 800850c:	080084d1 	.word	0x080084d1
 8008510:	080084d1 	.word	0x080084d1
 8008514:	08008655 	.word	0x08008655
 8008518:	0800857f 	.word	0x0800857f
 800851c:	0800860f 	.word	0x0800860f
 8008520:	080084d1 	.word	0x080084d1
 8008524:	080084d1 	.word	0x080084d1
 8008528:	08008677 	.word	0x08008677
 800852c:	080084d1 	.word	0x080084d1
 8008530:	0800857f 	.word	0x0800857f
 8008534:	080084d1 	.word	0x080084d1
 8008538:	080084d1 	.word	0x080084d1
 800853c:	08008617 	.word	0x08008617
 8008540:	6833      	ldr	r3, [r6, #0]
 8008542:	1d1a      	adds	r2, r3, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6032      	str	r2, [r6, #0]
 8008548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800854c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008550:	2301      	movs	r3, #1
 8008552:	e09d      	b.n	8008690 <_printf_i+0x1e8>
 8008554:	6833      	ldr	r3, [r6, #0]
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	1d19      	adds	r1, r3, #4
 800855a:	6031      	str	r1, [r6, #0]
 800855c:	0606      	lsls	r6, r0, #24
 800855e:	d501      	bpl.n	8008564 <_printf_i+0xbc>
 8008560:	681d      	ldr	r5, [r3, #0]
 8008562:	e003      	b.n	800856c <_printf_i+0xc4>
 8008564:	0645      	lsls	r5, r0, #25
 8008566:	d5fb      	bpl.n	8008560 <_printf_i+0xb8>
 8008568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800856c:	2d00      	cmp	r5, #0
 800856e:	da03      	bge.n	8008578 <_printf_i+0xd0>
 8008570:	232d      	movs	r3, #45	@ 0x2d
 8008572:	426d      	negs	r5, r5
 8008574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008578:	4859      	ldr	r0, [pc, #356]	@ (80086e0 <_printf_i+0x238>)
 800857a:	230a      	movs	r3, #10
 800857c:	e011      	b.n	80085a2 <_printf_i+0xfa>
 800857e:	6821      	ldr	r1, [r4, #0]
 8008580:	6833      	ldr	r3, [r6, #0]
 8008582:	0608      	lsls	r0, r1, #24
 8008584:	f853 5b04 	ldr.w	r5, [r3], #4
 8008588:	d402      	bmi.n	8008590 <_printf_i+0xe8>
 800858a:	0649      	lsls	r1, r1, #25
 800858c:	bf48      	it	mi
 800858e:	b2ad      	uxthmi	r5, r5
 8008590:	2f6f      	cmp	r7, #111	@ 0x6f
 8008592:	4853      	ldr	r0, [pc, #332]	@ (80086e0 <_printf_i+0x238>)
 8008594:	6033      	str	r3, [r6, #0]
 8008596:	bf14      	ite	ne
 8008598:	230a      	movne	r3, #10
 800859a:	2308      	moveq	r3, #8
 800859c:	2100      	movs	r1, #0
 800859e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085a2:	6866      	ldr	r6, [r4, #4]
 80085a4:	60a6      	str	r6, [r4, #8]
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	bfa2      	ittt	ge
 80085aa:	6821      	ldrge	r1, [r4, #0]
 80085ac:	f021 0104 	bicge.w	r1, r1, #4
 80085b0:	6021      	strge	r1, [r4, #0]
 80085b2:	b90d      	cbnz	r5, 80085b8 <_printf_i+0x110>
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	d04b      	beq.n	8008650 <_printf_i+0x1a8>
 80085b8:	4616      	mov	r6, r2
 80085ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80085be:	fb03 5711 	mls	r7, r3, r1, r5
 80085c2:	5dc7      	ldrb	r7, [r0, r7]
 80085c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085c8:	462f      	mov	r7, r5
 80085ca:	42bb      	cmp	r3, r7
 80085cc:	460d      	mov	r5, r1
 80085ce:	d9f4      	bls.n	80085ba <_printf_i+0x112>
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d10b      	bne.n	80085ec <_printf_i+0x144>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07df      	lsls	r7, r3, #31
 80085d8:	d508      	bpl.n	80085ec <_printf_i+0x144>
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	6861      	ldr	r1, [r4, #4]
 80085de:	4299      	cmp	r1, r3
 80085e0:	bfde      	ittt	le
 80085e2:	2330      	movle	r3, #48	@ 0x30
 80085e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085ec:	1b92      	subs	r2, r2, r6
 80085ee:	6122      	str	r2, [r4, #16]
 80085f0:	f8cd a000 	str.w	sl, [sp]
 80085f4:	464b      	mov	r3, r9
 80085f6:	aa03      	add	r2, sp, #12
 80085f8:	4621      	mov	r1, r4
 80085fa:	4640      	mov	r0, r8
 80085fc:	f7ff fee6 	bl	80083cc <_printf_common>
 8008600:	3001      	adds	r0, #1
 8008602:	d14a      	bne.n	800869a <_printf_i+0x1f2>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	b004      	add	sp, #16
 800860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	f043 0320 	orr.w	r3, r3, #32
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	4833      	ldr	r0, [pc, #204]	@ (80086e4 <_printf_i+0x23c>)
 8008618:	2778      	movs	r7, #120	@ 0x78
 800861a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	6831      	ldr	r1, [r6, #0]
 8008622:	061f      	lsls	r7, r3, #24
 8008624:	f851 5b04 	ldr.w	r5, [r1], #4
 8008628:	d402      	bmi.n	8008630 <_printf_i+0x188>
 800862a:	065f      	lsls	r7, r3, #25
 800862c:	bf48      	it	mi
 800862e:	b2ad      	uxthmi	r5, r5
 8008630:	6031      	str	r1, [r6, #0]
 8008632:	07d9      	lsls	r1, r3, #31
 8008634:	bf44      	itt	mi
 8008636:	f043 0320 	orrmi.w	r3, r3, #32
 800863a:	6023      	strmi	r3, [r4, #0]
 800863c:	b11d      	cbz	r5, 8008646 <_printf_i+0x19e>
 800863e:	2310      	movs	r3, #16
 8008640:	e7ac      	b.n	800859c <_printf_i+0xf4>
 8008642:	4827      	ldr	r0, [pc, #156]	@ (80086e0 <_printf_i+0x238>)
 8008644:	e7e9      	b.n	800861a <_printf_i+0x172>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	f023 0320 	bic.w	r3, r3, #32
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	e7f6      	b.n	800863e <_printf_i+0x196>
 8008650:	4616      	mov	r6, r2
 8008652:	e7bd      	b.n	80085d0 <_printf_i+0x128>
 8008654:	6833      	ldr	r3, [r6, #0]
 8008656:	6825      	ldr	r5, [r4, #0]
 8008658:	6961      	ldr	r1, [r4, #20]
 800865a:	1d18      	adds	r0, r3, #4
 800865c:	6030      	str	r0, [r6, #0]
 800865e:	062e      	lsls	r6, r5, #24
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	d501      	bpl.n	8008668 <_printf_i+0x1c0>
 8008664:	6019      	str	r1, [r3, #0]
 8008666:	e002      	b.n	800866e <_printf_i+0x1c6>
 8008668:	0668      	lsls	r0, r5, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0x1bc>
 800866c:	8019      	strh	r1, [r3, #0]
 800866e:	2300      	movs	r3, #0
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	4616      	mov	r6, r2
 8008674:	e7bc      	b.n	80085f0 <_printf_i+0x148>
 8008676:	6833      	ldr	r3, [r6, #0]
 8008678:	1d1a      	adds	r2, r3, #4
 800867a:	6032      	str	r2, [r6, #0]
 800867c:	681e      	ldr	r6, [r3, #0]
 800867e:	6862      	ldr	r2, [r4, #4]
 8008680:	2100      	movs	r1, #0
 8008682:	4630      	mov	r0, r6
 8008684:	f7f7 fdf4 	bl	8000270 <memchr>
 8008688:	b108      	cbz	r0, 800868e <_printf_i+0x1e6>
 800868a:	1b80      	subs	r0, r0, r6
 800868c:	6060      	str	r0, [r4, #4]
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	2300      	movs	r3, #0
 8008694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008698:	e7aa      	b.n	80085f0 <_printf_i+0x148>
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	4632      	mov	r2, r6
 800869e:	4649      	mov	r1, r9
 80086a0:	4640      	mov	r0, r8
 80086a2:	47d0      	blx	sl
 80086a4:	3001      	adds	r0, #1
 80086a6:	d0ad      	beq.n	8008604 <_printf_i+0x15c>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	079b      	lsls	r3, r3, #30
 80086ac:	d413      	bmi.n	80086d6 <_printf_i+0x22e>
 80086ae:	68e0      	ldr	r0, [r4, #12]
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	4298      	cmp	r0, r3
 80086b4:	bfb8      	it	lt
 80086b6:	4618      	movlt	r0, r3
 80086b8:	e7a6      	b.n	8008608 <_printf_i+0x160>
 80086ba:	2301      	movs	r3, #1
 80086bc:	4632      	mov	r2, r6
 80086be:	4649      	mov	r1, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	47d0      	blx	sl
 80086c4:	3001      	adds	r0, #1
 80086c6:	d09d      	beq.n	8008604 <_printf_i+0x15c>
 80086c8:	3501      	adds	r5, #1
 80086ca:	68e3      	ldr	r3, [r4, #12]
 80086cc:	9903      	ldr	r1, [sp, #12]
 80086ce:	1a5b      	subs	r3, r3, r1
 80086d0:	42ab      	cmp	r3, r5
 80086d2:	dcf2      	bgt.n	80086ba <_printf_i+0x212>
 80086d4:	e7eb      	b.n	80086ae <_printf_i+0x206>
 80086d6:	2500      	movs	r5, #0
 80086d8:	f104 0619 	add.w	r6, r4, #25
 80086dc:	e7f5      	b.n	80086ca <_printf_i+0x222>
 80086de:	bf00      	nop
 80086e0:	08008bd4 	.word	0x08008bd4
 80086e4:	08008be5 	.word	0x08008be5

080086e8 <__swbuf_r>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	460e      	mov	r6, r1
 80086ec:	4614      	mov	r4, r2
 80086ee:	4605      	mov	r5, r0
 80086f0:	b118      	cbz	r0, 80086fa <__swbuf_r+0x12>
 80086f2:	6a03      	ldr	r3, [r0, #32]
 80086f4:	b90b      	cbnz	r3, 80086fa <__swbuf_r+0x12>
 80086f6:	f7ff fa33 	bl	8007b60 <__sinit>
 80086fa:	69a3      	ldr	r3, [r4, #24]
 80086fc:	60a3      	str	r3, [r4, #8]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	071a      	lsls	r2, r3, #28
 8008702:	d501      	bpl.n	8008708 <__swbuf_r+0x20>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	b943      	cbnz	r3, 800871a <__swbuf_r+0x32>
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	f000 f82a 	bl	8008764 <__swsetup_r>
 8008710:	b118      	cbz	r0, 800871a <__swbuf_r+0x32>
 8008712:	f04f 37ff 	mov.w	r7, #4294967295
 8008716:	4638      	mov	r0, r7
 8008718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	6922      	ldr	r2, [r4, #16]
 800871e:	1a98      	subs	r0, r3, r2
 8008720:	6963      	ldr	r3, [r4, #20]
 8008722:	b2f6      	uxtb	r6, r6
 8008724:	4283      	cmp	r3, r0
 8008726:	4637      	mov	r7, r6
 8008728:	dc05      	bgt.n	8008736 <__swbuf_r+0x4e>
 800872a:	4621      	mov	r1, r4
 800872c:	4628      	mov	r0, r5
 800872e:	f7ff fcbb 	bl	80080a8 <_fflush_r>
 8008732:	2800      	cmp	r0, #0
 8008734:	d1ed      	bne.n	8008712 <__swbuf_r+0x2a>
 8008736:	68a3      	ldr	r3, [r4, #8]
 8008738:	3b01      	subs	r3, #1
 800873a:	60a3      	str	r3, [r4, #8]
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	6022      	str	r2, [r4, #0]
 8008742:	701e      	strb	r6, [r3, #0]
 8008744:	6962      	ldr	r2, [r4, #20]
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	429a      	cmp	r2, r3
 800874a:	d004      	beq.n	8008756 <__swbuf_r+0x6e>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	07db      	lsls	r3, r3, #31
 8008750:	d5e1      	bpl.n	8008716 <__swbuf_r+0x2e>
 8008752:	2e0a      	cmp	r6, #10
 8008754:	d1df      	bne.n	8008716 <__swbuf_r+0x2e>
 8008756:	4621      	mov	r1, r4
 8008758:	4628      	mov	r0, r5
 800875a:	f7ff fca5 	bl	80080a8 <_fflush_r>
 800875e:	2800      	cmp	r0, #0
 8008760:	d0d9      	beq.n	8008716 <__swbuf_r+0x2e>
 8008762:	e7d6      	b.n	8008712 <__swbuf_r+0x2a>

08008764 <__swsetup_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4b29      	ldr	r3, [pc, #164]	@ (800880c <__swsetup_r+0xa8>)
 8008768:	4605      	mov	r5, r0
 800876a:	6818      	ldr	r0, [r3, #0]
 800876c:	460c      	mov	r4, r1
 800876e:	b118      	cbz	r0, 8008778 <__swsetup_r+0x14>
 8008770:	6a03      	ldr	r3, [r0, #32]
 8008772:	b90b      	cbnz	r3, 8008778 <__swsetup_r+0x14>
 8008774:	f7ff f9f4 	bl	8007b60 <__sinit>
 8008778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877c:	0719      	lsls	r1, r3, #28
 800877e:	d422      	bmi.n	80087c6 <__swsetup_r+0x62>
 8008780:	06da      	lsls	r2, r3, #27
 8008782:	d407      	bmi.n	8008794 <__swsetup_r+0x30>
 8008784:	2209      	movs	r2, #9
 8008786:	602a      	str	r2, [r5, #0]
 8008788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	e033      	b.n	80087fc <__swsetup_r+0x98>
 8008794:	0758      	lsls	r0, r3, #29
 8008796:	d512      	bpl.n	80087be <__swsetup_r+0x5a>
 8008798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800879a:	b141      	cbz	r1, 80087ae <__swsetup_r+0x4a>
 800879c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087a0:	4299      	cmp	r1, r3
 80087a2:	d002      	beq.n	80087aa <__swsetup_r+0x46>
 80087a4:	4628      	mov	r0, r5
 80087a6:	f7ff fafb 	bl	8007da0 <_free_r>
 80087aa:	2300      	movs	r3, #0
 80087ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	2300      	movs	r3, #0
 80087b8:	6063      	str	r3, [r4, #4]
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f043 0308 	orr.w	r3, r3, #8
 80087c4:	81a3      	strh	r3, [r4, #12]
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	b94b      	cbnz	r3, 80087de <__swsetup_r+0x7a>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087d4:	d003      	beq.n	80087de <__swsetup_r+0x7a>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f883 	bl	80088e4 <__smakebuf_r>
 80087de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e2:	f013 0201 	ands.w	r2, r3, #1
 80087e6:	d00a      	beq.n	80087fe <__swsetup_r+0x9a>
 80087e8:	2200      	movs	r2, #0
 80087ea:	60a2      	str	r2, [r4, #8]
 80087ec:	6962      	ldr	r2, [r4, #20]
 80087ee:	4252      	negs	r2, r2
 80087f0:	61a2      	str	r2, [r4, #24]
 80087f2:	6922      	ldr	r2, [r4, #16]
 80087f4:	b942      	cbnz	r2, 8008808 <__swsetup_r+0xa4>
 80087f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087fa:	d1c5      	bne.n	8008788 <__swsetup_r+0x24>
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
 80087fe:	0799      	lsls	r1, r3, #30
 8008800:	bf58      	it	pl
 8008802:	6962      	ldrpl	r2, [r4, #20]
 8008804:	60a2      	str	r2, [r4, #8]
 8008806:	e7f4      	b.n	80087f2 <__swsetup_r+0x8e>
 8008808:	2000      	movs	r0, #0
 800880a:	e7f7      	b.n	80087fc <__swsetup_r+0x98>
 800880c:	20000020 	.word	0x20000020

08008810 <_raise_r>:
 8008810:	291f      	cmp	r1, #31
 8008812:	b538      	push	{r3, r4, r5, lr}
 8008814:	4605      	mov	r5, r0
 8008816:	460c      	mov	r4, r1
 8008818:	d904      	bls.n	8008824 <_raise_r+0x14>
 800881a:	2316      	movs	r3, #22
 800881c:	6003      	str	r3, [r0, #0]
 800881e:	f04f 30ff 	mov.w	r0, #4294967295
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008826:	b112      	cbz	r2, 800882e <_raise_r+0x1e>
 8008828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800882c:	b94b      	cbnz	r3, 8008842 <_raise_r+0x32>
 800882e:	4628      	mov	r0, r5
 8008830:	f000 f830 	bl	8008894 <_getpid_r>
 8008834:	4622      	mov	r2, r4
 8008836:	4601      	mov	r1, r0
 8008838:	4628      	mov	r0, r5
 800883a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800883e:	f000 b817 	b.w	8008870 <_kill_r>
 8008842:	2b01      	cmp	r3, #1
 8008844:	d00a      	beq.n	800885c <_raise_r+0x4c>
 8008846:	1c59      	adds	r1, r3, #1
 8008848:	d103      	bne.n	8008852 <_raise_r+0x42>
 800884a:	2316      	movs	r3, #22
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	2001      	movs	r0, #1
 8008850:	e7e7      	b.n	8008822 <_raise_r+0x12>
 8008852:	2100      	movs	r1, #0
 8008854:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008858:	4620      	mov	r0, r4
 800885a:	4798      	blx	r3
 800885c:	2000      	movs	r0, #0
 800885e:	e7e0      	b.n	8008822 <_raise_r+0x12>

08008860 <raise>:
 8008860:	4b02      	ldr	r3, [pc, #8]	@ (800886c <raise+0xc>)
 8008862:	4601      	mov	r1, r0
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	f7ff bfd3 	b.w	8008810 <_raise_r>
 800886a:	bf00      	nop
 800886c:	20000020 	.word	0x20000020

08008870 <_kill_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	@ (8008890 <_kill_r+0x20>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	f7f8 f9bb 	bl	8000bf8 <_kill>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d102      	bne.n	800888c <_kill_r+0x1c>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b103      	cbz	r3, 800888c <_kill_r+0x1c>
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	bf00      	nop
 8008890:	20019a80 	.word	0x20019a80

08008894 <_getpid_r>:
 8008894:	f7f8 b9a8 	b.w	8000be8 <_getpid>

08008898 <__swhatbuf_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	460c      	mov	r4, r1
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	2900      	cmp	r1, #0
 80088a2:	b096      	sub	sp, #88	@ 0x58
 80088a4:	4615      	mov	r5, r2
 80088a6:	461e      	mov	r6, r3
 80088a8:	da0d      	bge.n	80088c6 <__swhatbuf_r+0x2e>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088b0:	f04f 0100 	mov.w	r1, #0
 80088b4:	bf14      	ite	ne
 80088b6:	2340      	movne	r3, #64	@ 0x40
 80088b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088bc:	2000      	movs	r0, #0
 80088be:	6031      	str	r1, [r6, #0]
 80088c0:	602b      	str	r3, [r5, #0]
 80088c2:	b016      	add	sp, #88	@ 0x58
 80088c4:	bd70      	pop	{r4, r5, r6, pc}
 80088c6:	466a      	mov	r2, sp
 80088c8:	f000 f848 	bl	800895c <_fstat_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	dbec      	blt.n	80088aa <__swhatbuf_r+0x12>
 80088d0:	9901      	ldr	r1, [sp, #4]
 80088d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088da:	4259      	negs	r1, r3
 80088dc:	4159      	adcs	r1, r3
 80088de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088e2:	e7eb      	b.n	80088bc <__swhatbuf_r+0x24>

080088e4 <__smakebuf_r>:
 80088e4:	898b      	ldrh	r3, [r1, #12]
 80088e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e8:	079d      	lsls	r5, r3, #30
 80088ea:	4606      	mov	r6, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	d507      	bpl.n	8008900 <__smakebuf_r+0x1c>
 80088f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	2301      	movs	r3, #1
 80088fa:	6163      	str	r3, [r4, #20]
 80088fc:	b003      	add	sp, #12
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008900:	ab01      	add	r3, sp, #4
 8008902:	466a      	mov	r2, sp
 8008904:	f7ff ffc8 	bl	8008898 <__swhatbuf_r>
 8008908:	9f00      	ldr	r7, [sp, #0]
 800890a:	4605      	mov	r5, r0
 800890c:	4639      	mov	r1, r7
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff faba 	bl	8007e88 <_malloc_r>
 8008914:	b948      	cbnz	r0, 800892a <__smakebuf_r+0x46>
 8008916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891a:	059a      	lsls	r2, r3, #22
 800891c:	d4ee      	bmi.n	80088fc <__smakebuf_r+0x18>
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	e7e2      	b.n	80088f0 <__smakebuf_r+0xc>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	6020      	str	r0, [r4, #0]
 800892e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800893a:	b15b      	cbz	r3, 8008954 <__smakebuf_r+0x70>
 800893c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f81d 	bl	8008980 <_isatty_r>
 8008946:	b128      	cbz	r0, 8008954 <__smakebuf_r+0x70>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f023 0303 	bic.w	r3, r3, #3
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	431d      	orrs	r5, r3
 8008958:	81a5      	strh	r5, [r4, #12]
 800895a:	e7cf      	b.n	80088fc <__smakebuf_r+0x18>

0800895c <_fstat_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	@ (800897c <_fstat_r+0x20>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	f7f8 f989 	bl	8000c80 <_fstat>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d102      	bne.n	8008978 <_fstat_r+0x1c>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	b103      	cbz	r3, 8008978 <_fstat_r+0x1c>
 8008976:	6023      	str	r3, [r4, #0]
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	bf00      	nop
 800897c:	20019a80 	.word	0x20019a80

08008980 <_isatty_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d06      	ldr	r5, [pc, #24]	@ (800899c <_isatty_r+0x1c>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	f7f8 f988 	bl	8000ca0 <_isatty>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_isatty_r+0x1a>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_isatty_r+0x1a>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	20019a80 	.word	0x20019a80

080089a0 <_init>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	bf00      	nop
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr

080089ac <_fini>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr
