
App_019_Example_6.2_Use_Callback_Function_Param_and_SW_Timer_ID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005e78  08005e78  00006e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f44  08005f44  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005f44  08005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f4c  08005f4c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f4c  08005f4c  00006f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f50  08005f50  00006f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005f54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007064  2**0
                  CONTENTS
 10 .bss          00012fe4  20000064  20000064  00007064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013048  20013048  00007064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124a1  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b33  00000000  00000000  00019535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  0001c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d72  00000000  00000000  0001d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207bb  00000000  00000000  0001df0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014553  00000000  00000000  0003e6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da74f  00000000  00000000  00052c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d367  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d14  00000000  00000000  0012d3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  001320c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e60 	.word	0x08005e60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08005e60 	.word	0x08005e60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f103 0208 	add.w	r2, r3, #8
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f04f 32ff 	mov.w	r2, #4294967295
 8000578:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f103 0208 	add.w	r2, r3, #8
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f103 0208 	add.w	r2, r3, #8
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d103      	bne.n	80005da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00c      	b.n	80005f4 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3308      	adds	r3, #8
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <vListInsert+0x2e>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d2f6      	bcs.n	80005e2 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6892      	ldr	r2, [r2, #8]
 8000642:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d103      	bne.n	8000660 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10b      	bne.n	80006b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d05d      	beq.n	8000772 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d059      	beq.n	8000772 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c6:	2100      	movs	r1, #0
 80006c8:	fba3 2302 	umull	r2, r3, r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <xQueueGenericReset+0x52>
 80006d0:	2101      	movs	r1, #1
 80006d2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14c      	bne.n	8000772 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80006d8:	f002 f9cc 	bl	8002a74 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006e8:	fb01 f303 	mul.w	r3, r1, r3
 80006ec:	441a      	add	r2, r3
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2200      	movs	r2, #0
 80006f6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000708:	3b01      	subs	r3, #1
 800070a:	6939      	ldr	r1, [r7, #16]
 800070c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	441a      	add	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	22ff      	movs	r2, #255	@ 0xff
 800071c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	22ff      	movs	r2, #255	@ 0xff
 8000724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01a      	beq.n	800076c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	3310      	adds	r3, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f93c 	bl	80019b8 <xTaskRemoveFromEventList>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d012      	beq.n	800076c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <xQueueGenericReset+0x120>)
 8000748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	f3bf 8f4f 	dsb	sy
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	e009      	b.n	800076c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feff 	bl	8000560 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3324      	adds	r3, #36	@ 0x24
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fefa 	bl	8000560 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800076c:	f002 f9b4 	bl	8002ad8 <vPortExitCritical>
 8000770:	e001      	b.n	8000776 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <xQueueGenericReset+0x114>
    __asm volatile
 800077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000780:	f383 8811 	msr	BASEPRI, r3
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	f3bf 8f4f 	dsb	sy
 800078c:	60bb      	str	r3, [r7, #8]
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000794:	697b      	ldr	r3, [r7, #20]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4613      	mov	r3, r2
 80007b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d02e      	beq.n	800081a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007bc:	2100      	movs	r1, #0
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	fba3 2302 	umull	r2, r3, r3, r2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <xQueueGenericCreate+0x28>
 80007ca:	2101      	movs	r1, #1
 80007cc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d123      	bne.n	800081a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007da:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80007de:	d81c      	bhi.n	800081a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3350      	adds	r3, #80	@ 0x50
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fa24 	bl	8002c3c <pvPortMalloc>
 80007f4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d01d      	beq.n	8000838 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3350      	adds	r3, #80	@ 0x50
 8000804:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f815 	bl	8000842 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000818:	e00e      	b.n	8000838 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10b      	bne.n	8000838 <xQueueGenericCreate+0x94>
    __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000838:	69fb      	ldr	r3, [r7, #28]
    }
 800083a:	4618      	mov	r0, r3
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e002      	b.n	8000864 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000870:	2101      	movs	r1, #1
 8000872:	69b8      	ldr	r0, [r7, #24]
 8000874:	f7ff ff04 	bl	8000680 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	@ 0x38
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800089e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10b      	bne.n	80008bc <xQueueGenericSend+0x34>
    __asm volatile
 80008a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d103      	bne.n	80008ca <xQueueGenericSend+0x42>
 80008c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <xQueueGenericSend+0x46>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <xQueueGenericSend+0x48>
 80008ce:	2300      	movs	r3, #0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10b      	bne.n	80008ec <xQueueGenericSend+0x64>
    __asm volatile
 80008d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d103      	bne.n	80008fa <xQueueGenericSend+0x72>
 80008f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <xQueueGenericSend+0x76>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <xQueueGenericSend+0x78>
 80008fe:	2300      	movs	r3, #0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10b      	bne.n	800091c <xQueueGenericSend+0x94>
    __asm volatile
 8000904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000908:	f383 8811 	msr	BASEPRI, r3
 800090c:	f3bf 8f6f 	isb	sy
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	623b      	str	r3, [r7, #32]
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800091c:	f001 fa62 	bl	8001de4 <xTaskGetSchedulerState>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <xQueueGenericSend+0xa4>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <xQueueGenericSend+0xa8>
 800092c:	2301      	movs	r3, #1
 800092e:	e000      	b.n	8000932 <xQueueGenericSend+0xaa>
 8000930:	2300      	movs	r3, #0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10b      	bne.n	800094e <xQueueGenericSend+0xc6>
    __asm volatile
 8000936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	61fb      	str	r3, [r7, #28]
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	e7fd      	b.n	800094a <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800094e:	f002 f891 	bl	8002a74 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800095a:	429a      	cmp	r2, r3
 800095c:	d302      	bcc.n	8000964 <xQueueGenericSend+0xdc>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d129      	bne.n	80009b8 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800096a:	f000 f971 	bl	8000c50 <prvCopyDataToQueue>
 800096e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000974:	2b00      	cmp	r3, #0
 8000976:	d010      	beq.n	800099a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800097a:	3324      	adds	r3, #36	@ 0x24
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f81b 	bl	80019b8 <xTaskRemoveFromEventList>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d013      	beq.n	80009b0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000988:	4b3f      	ldr	r3, [pc, #252]	@ (8000a88 <xQueueGenericSend+0x200>)
 800098a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	f3bf 8f6f 	isb	sy
 8000998:	e00a      	b.n	80009b0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099c:	2b00      	cmp	r3, #0
 800099e:	d007      	beq.n	80009b0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009a0:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <xQueueGenericSend+0x200>)
 80009a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	f3bf 8f4f 	dsb	sy
 80009ac:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009b0:	f002 f892 	bl	8002ad8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e063      	b.n	8000a80 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009be:	f002 f88b 	bl	8002ad8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e05c      	b.n	8000a80 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f8cb 	bl	8001b6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009da:	f002 f87d 	bl	8002ad8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009de:	f000 fce1 	bl	80013a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009e2:	f002 f847 	bl	8002a74 <vPortEnterCritical>
 80009e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f2:	d103      	bne.n	80009fc <xQueueGenericSend+0x174>
 80009f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d103      	bne.n	8000a12 <xQueueGenericSend+0x18a>
 8000a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a12:	f002 f861 	bl	8002ad8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a16:	1d3a      	adds	r2, r7, #4
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f8ba 	bl	8001b98 <xTaskCheckForTimeOut>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d124      	bne.n	8000a74 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a2c:	f000 fa08 	bl	8000e40 <prvIsQueueFull>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d018      	beq.n	8000a68 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a38:	3310      	adds	r3, #16
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 ff4e 	bl	80018e0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a46:	f000 f993 	bl	8000d70 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a4a:	f000 fcb9 	bl	80013c0 <xTaskResumeAll>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f47f af7c 	bne.w	800094e <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <xQueueGenericSend+0x200>)
 8000a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	f3bf 8f4f 	dsb	sy
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	e772      	b.n	800094e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a6a:	f000 f981 	bl	8000d70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a6e:	f000 fca7 	bl	80013c0 <xTaskResumeAll>
 8000a72:	e76c      	b.n	800094e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a76:	f000 f97b 	bl	8000d70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a7a:	f000 fca1 	bl	80013c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000a7e:	2300      	movs	r3, #0
        }
    }
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	e000ed04 	.word	0xe000ed04

08000a8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	@ 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10b      	bne.n	8000abe <xQueueReceive+0x32>
    __asm volatile
 8000aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	623b      	str	r3, [r7, #32]
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	e7fd      	b.n	8000aba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <xQueueReceive+0x40>
 8000ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d101      	bne.n	8000ad0 <xQueueReceive+0x44>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <xQueueReceive+0x46>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10b      	bne.n	8000aee <xQueueReceive+0x62>
    __asm volatile
 8000ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ada:	f383 8811 	msr	BASEPRI, r3
 8000ade:	f3bf 8f6f 	isb	sy
 8000ae2:	f3bf 8f4f 	dsb	sy
 8000ae6:	61fb      	str	r3, [r7, #28]
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	e7fd      	b.n	8000aea <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000aee:	f001 f979 	bl	8001de4 <xTaskGetSchedulerState>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <xQueueReceive+0x72>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <xQueueReceive+0x76>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <xQueueReceive+0x78>
 8000b02:	2300      	movs	r3, #0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10b      	bne.n	8000b20 <xQueueReceive+0x94>
    __asm volatile
 8000b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b0c:	f383 8811 	msr	BASEPRI, r3
 8000b10:	f3bf 8f6f 	isb	sy
 8000b14:	f3bf 8f4f 	dsb	sy
 8000b18:	61bb      	str	r3, [r7, #24]
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b20:	f001 ffa8 	bl	8002a74 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d01f      	beq.n	8000b70 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b34:	f000 f8f6 	bl	8000d24 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b3e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00f      	beq.n	8000b68 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 ff33 	bl	80019b8 <xTaskRemoveFromEventList>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d007      	beq.n	8000b68 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b58:	4b3c      	ldr	r3, [pc, #240]	@ (8000c4c <xQueueReceive+0x1c0>)
 8000b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	f3bf 8f4f 	dsb	sy
 8000b64:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b68:	f001 ffb6 	bl	8002ad8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e069      	b.n	8000c44 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b76:	f001 ffaf 	bl	8002ad8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e062      	b.n	8000c44 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 ffef 	bl	8001b6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b92:	f001 ffa1 	bl	8002ad8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b96:	f000 fc05 	bl	80013a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b9a:	f001 ff6b 	bl	8002a74 <vPortEnterCritical>
 8000b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000baa:	d103      	bne.n	8000bb4 <xQueueReceive+0x128>
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d103      	bne.n	8000bca <xQueueReceive+0x13e>
 8000bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000bca:	f001 ff85 	bl	8002ad8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000bce:	1d3a      	adds	r2, r7, #4
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 ffde 	bl	8001b98 <xTaskCheckForTimeOut>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d123      	bne.n	8000c2a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000be4:	f000 f916 	bl	8000e14 <prvIsQueueEmpty>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d017      	beq.n	8000c1e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf0:	3324      	adds	r3, #36	@ 0x24
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fe72 	bl	80018e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000bfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bfe:	f000 f8b7 	bl	8000d70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c02:	f000 fbdd 	bl	80013c0 <xTaskResumeAll>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d189      	bne.n	8000b20 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <xQueueReceive+0x1c0>)
 8000c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	f3bf 8f4f 	dsb	sy
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	e780      	b.n	8000b20 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c20:	f000 f8a6 	bl	8000d70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c24:	f000 fbcc 	bl	80013c0 <xTaskResumeAll>
 8000c28:	e77a      	b.n	8000b20 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c2c:	f000 f8a0 	bl	8000d70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c30:	f000 fbc6 	bl	80013c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c36:	f000 f8ed 	bl	8000e14 <prvIsQueueEmpty>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f43f af6f 	beq.w	8000b20 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000c42:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3730      	adds	r7, #48	@ 0x30
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	e000ed04 	.word	0xe000ed04

08000c50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10d      	bne.n	8000c8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f8d0 	bl	8001e20 <xTaskPriorityDisinherit>
 8000c80:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	e043      	b.n	8000d12 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d119      	bne.n	8000cc4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6858      	ldr	r0, [r3, #4]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	f004 fc94 	bl	80055c8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	441a      	add	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d32b      	bcc.n	8000d12 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	e026      	b.n	8000d12 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	68d8      	ldr	r0, [r3, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	f004 fc7a 	bl	80055c8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	425b      	negs	r3, r3
 8000cde:	441a      	add	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d207      	bcs.n	8000d00 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	425b      	negs	r3, r3
 8000cfa:	441a      	add	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d105      	bne.n	8000d12 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000d1a:	697b      	ldr	r3, [r7, #20]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d018      	beq.n	8000d68 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	441a      	add	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d303      	bcc.n	8000d58 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68d9      	ldr	r1, [r3, #12]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	461a      	mov	r2, r3
 8000d62:	6838      	ldr	r0, [r7, #0]
 8000d64:	f004 fc30 	bl	80055c8 <memcpy>
    }
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d78:	f001 fe7c 	bl	8002a74 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d82:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d84:	e011      	b.n	8000daa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d012      	beq.n	8000db4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3324      	adds	r3, #36	@ 0x24
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fe10 	bl	80019b8 <xTaskRemoveFromEventList>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000d9e:	f000 ff63 	bl	8001c68 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	dce9      	bgt.n	8000d86 <prvUnlockQueue+0x16>
 8000db2:	e000      	b.n	8000db6 <prvUnlockQueue+0x46>
                    break;
 8000db4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	22ff      	movs	r2, #255	@ 0xff
 8000dba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000dbe:	f001 fe8b 	bl	8002ad8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000dc2:	f001 fe57 	bl	8002a74 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000dcc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dce:	e011      	b.n	8000df4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d012      	beq.n	8000dfe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3310      	adds	r3, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fdeb 	bl	80019b8 <xTaskRemoveFromEventList>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000de8:	f000 ff3e 	bl	8001c68 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dce9      	bgt.n	8000dd0 <prvUnlockQueue+0x60>
 8000dfc:	e000      	b.n	8000e00 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000dfe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	22ff      	movs	r2, #255	@ 0xff
 8000e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000e08:	f001 fe66 	bl	8002ad8 <vPortExitCritical>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e1c:	f001 fe2a 	bl	8002a74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e001      	b.n	8000e32 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e32:	f001 fe51 	bl	8002ad8 <vPortExitCritical>

    return xReturn;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e48:	f001 fe14 	bl	8002a74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d102      	bne.n	8000e5e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e001      	b.n	8000e62 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e62:	f001 fe39 	bl	8002ad8 <vPortExitCritical>

    return xReturn;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10b      	bne.n	8000e9c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e88:	f383 8811 	msr	BASEPRI, r3
 8000e8c:	f3bf 8f6f 	isb	sy
 8000e90:	f3bf 8f4f 	dsb	sy
 8000e94:	60fb      	str	r3, [r7, #12]
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d024      	beq.n	8000eec <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e01e      	b.n	8000ee6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000ea8:	4a18      	ldr	r2, [pc, #96]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d105      	bne.n	8000ec4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4a13      	ldr	r2, [pc, #76]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
                    break;
 8000ec2:	e013      	b.n	8000eec <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10a      	bne.n	8000ee0 <vQueueAddToRegistry+0x70>
 8000eca:	4a10      	ldr	r2, [pc, #64]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d104      	bne.n	8000ee0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000edc:	4413      	add	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b07      	cmp	r3, #7
 8000eea:	d9dd      	bls.n	8000ea8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000080 	.word	0x20000080

08000f10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000f20:	f001 fda8 	bl	8002a74 <vPortEnterCritical>
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d103      	bne.n	8000f3a <vQueueWaitForMessageRestricted+0x2a>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f46:	d103      	bne.n	8000f50 <vQueueWaitForMessageRestricted+0x40>
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000f50:	f001 fdc2 	bl	8002ad8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3324      	adds	r3, #36	@ 0x24
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fce1 	bl	800192c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff00 	bl	8000d70 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fe56 	bl	8002c3c <pvPortMalloc>
 8000f90:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000f98:	2058      	movs	r0, #88	@ 0x58
 8000f9a:	f001 fe4f 	bl	8002c3c <pvPortMalloc>
 8000f9e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d008      	beq.n	8000fb8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000fa6:	2258      	movs	r2, #88	@ 0x58
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f004 fad8 	bl	8005560 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fb6:	e005      	b.n	8000fc4 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000fb8:	6938      	ldr	r0, [r7, #16]
 8000fba:	f001 ff71 	bl	8002ea0 <vPortFree>
 8000fbe:	e001      	b.n	8000fc4 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00d      	beq.n	8000fe6 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9303      	str	r3, [sp, #12]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 f828 	bl	8001036 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000fe6:	697b      	ldr	r3, [r7, #20]
    }
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff ffb3 	bl	8000f78 <prvCreateTask>
 8001012:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800101a:	6938      	ldr	r0, [r7, #16]
 800101c:	f000 f89c 	bl	8001158 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001020:	2301      	movs	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e002      	b.n	800102c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800102c:	697b      	ldr	r3, [r7, #20]
    }
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b088      	sub	sp, #32
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001046:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	21a5      	movs	r1, #165	@ 0xa5
 8001050:	f004 fa86 	bl	8005560 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800105e:	3b01      	subs	r3, #1
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f023 0307 	bic.w	r3, r3, #7
 800106c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	617b      	str	r3, [r7, #20]
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d01e      	beq.n	80010d4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e012      	b.n	80010c2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	7819      	ldrb	r1, [r3, #0]
 80010a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4413      	add	r3, r2
 80010aa:	3334      	adds	r3, #52	@ 0x34
 80010ac:	460a      	mov	r2, r1
 80010ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	3301      	adds	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	d9e9      	bls.n	800109c <prvInitialiseNewTask+0x66>
 80010c8:	e000      	b.n	80010cc <prvInitialiseNewTask+0x96>
            {
                break;
 80010ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80010cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80010d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d90b      	bls.n	80010f2 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	613b      	str	r3, [r7, #16]
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	e7fd      	b.n	80010ee <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d901      	bls.n	80010fc <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010f8:	2304      	movs	r3, #4
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80010fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001106:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800110a:	3304      	adds	r3, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa47 	bl	80005a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001114:	3318      	adds	r3, #24
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa42 	bl	80005a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800111c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800111e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001120:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001124:	f1c3 0205 	rsb	r2, r3, #5
 8001128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800112c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	69b8      	ldr	r0, [r7, #24]
 8001138:	f001 fb1e 	bl	8002778 <pxPortInitialiseStack>
 800113c:	4602      	mov	r2, r0
 800113e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001140:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800114a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800114c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001160:	f001 fc88 	bl	8002a74 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001164:	4b41      	ldr	r3, [pc, #260]	@ (800126c <prvAddNewTaskToReadyList+0x114>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a40      	ldr	r2, [pc, #256]	@ (800126c <prvAddNewTaskToReadyList+0x114>)
 800116c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800116e:	4b40      	ldr	r3, [pc, #256]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001176:	4a3e      	ldr	r2, [pc, #248]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800117c:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <prvAddNewTaskToReadyList+0x114>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d110      	bne.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001184:	f000 fd94 	bl	8001cb0 <prvInitialiseTaskLists>
 8001188:	e00d      	b.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800118a:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <prvAddNewTaskToReadyList+0x11c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001192:	4b37      	ldr	r3, [pc, #220]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119c:	429a      	cmp	r2, r3
 800119e:	d802      	bhi.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80011a0:	4a33      	ldr	r2, [pc, #204]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80011a6:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <prvAddNewTaskToReadyList+0x120>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a32      	ldr	r2, [pc, #200]	@ (8001278 <prvAddNewTaskToReadyList+0x120>)
 80011ae:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80011b0:	4b31      	ldr	r3, [pc, #196]	@ (8001278 <prvAddNewTaskToReadyList+0x120>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	2201      	movs	r2, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <prvAddNewTaskToReadyList+0x124>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <prvAddNewTaskToReadyList+0x124>)
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ce:	492c      	ldr	r1, [pc, #176]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	3204      	adds	r2, #4
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1d1a      	adds	r2, r3, #4
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 800120e:	441a      	add	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001218:	4919      	ldr	r1, [pc, #100]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	4814      	ldr	r0, [pc, #80]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4403      	add	r3, r0
 8001238:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800123a:	f001 fc4d 	bl	8002ad8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <prvAddNewTaskToReadyList+0x11c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00e      	beq.n	8001264 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <prvAddNewTaskToReadyList+0x10c>
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <prvAddNewTaskToReadyList+0x12c>)
 8001256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	f3bf 8f4f 	dsb	sy
 8001260:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000198 	.word	0x20000198
 8001270:	200000c0 	.word	0x200000c0
 8001274:	200001a4 	.word	0x200001a4
 8001278:	200001b4 	.word	0x200001b4
 800127c:	200001a0 	.word	0x200001a0
 8001280:	200000c4 	.word	0x200000c4
 8001284:	e000ed04 	.word	0xe000ed04

08001288 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800128e:	2301      	movs	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e011      	b.n	80012c0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800129c:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <prvCreateIdleTasks+0x88>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4413      	add	r3, r2
 80012a2:	7819      	ldrb	r1, [r3, #0]
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4413      	add	r3, r2
 80012aa:	460a      	mov	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	ddea      	ble.n	800129c <prvCreateIdleTasks+0x14>
 80012c6:	e000      	b.n	80012ca <prvCreateIdleTasks+0x42>
        {
            break;
 80012c8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	e015      	b.n	80012fc <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <prvCreateIdleTasks+0x8c>)
 80012d2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <prvCreateIdleTasks+0x90>)
 80012da:	4413      	add	r3, r2
 80012dc:	1d39      	adds	r1, r7, #4
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	2300      	movs	r3, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	2282      	movs	r2, #130	@ 0x82
 80012e8:	6938      	ldr	r0, [r7, #16]
 80012ea:	f7ff fe81 	bl	8000ff0 <xTaskCreate>
 80012ee:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dde6      	ble.n	80012d0 <prvCreateIdleTasks+0x48>
 8001302:	e000      	b.n	8001306 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001304:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001306:	69fb      	ldr	r3, [r7, #28]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08005e78 	.word	0x08005e78
 8001314:	08001c81 	.word	0x08001c81
 8001318:	200001bc 	.word	0x200001bc

0800131c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001322:	f7ff ffb1 	bl	8001288 <prvCreateIdleTasks>
 8001326:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800132e:	f000 fea1 	bl	8002074 <xTimerCreateTimerTask>
 8001332:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d116      	bne.n	8001368 <vTaskStartScheduler+0x4c>
    __asm volatile
 800133a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800133e:	f383 8811 	msr	BASEPRI, r3
 8001342:	f3bf 8f6f 	isb	sy
 8001346:	f3bf 8f4f 	dsb	sy
 800134a:	60bb      	str	r3, [r7, #8]
}
 800134c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <vTaskStartScheduler+0x78>)
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <vTaskStartScheduler+0x7c>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <vTaskStartScheduler+0x80>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001362:	f001 fa97 	bl	8002894 <xPortStartScheduler>
 8001366:	e00f      	b.n	8001388 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136e:	d10b      	bne.n	8001388 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001374:	f383 8811 	msr	BASEPRI, r3
 8001378:	f3bf 8f6f 	isb	sy
 800137c:	f3bf 8f4f 	dsb	sy
 8001380:	607b      	str	r3, [r7, #4]
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <vTaskStartScheduler+0x84>)
 800138a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001b8 	.word	0x200001b8
 8001398:	200001a4 	.word	0x200001a4
 800139c:	2000019c 	.word	0x2000019c
 80013a0:	20000000 	.word	0x20000000

080013a4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <vTaskSuspendAll+0x18>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a03      	ldr	r2, [pc, #12]	@ (80013bc <vTaskSuspendAll+0x18>)
 80013b0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	200001c0 	.word	0x200001c0

080013c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80013ce:	f001 fb51 	bl	8002a74 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80013d6:	4b75      	ldr	r3, [pc, #468]	@ (80015ac <xTaskResumeAll+0x1ec>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10b      	bne.n	80013f6 <xTaskResumeAll+0x36>
    __asm volatile
 80013de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013e2:	f383 8811 	msr	BASEPRI, r3
 80013e6:	f3bf 8f6f 	isb	sy
 80013ea:	f3bf 8f4f 	dsb	sy
 80013ee:	603b      	str	r3, [r7, #0]
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80013f6:	4b6d      	ldr	r3, [pc, #436]	@ (80015ac <xTaskResumeAll+0x1ec>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a6b      	ldr	r2, [pc, #428]	@ (80015ac <xTaskResumeAll+0x1ec>)
 80013fe:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001400:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <xTaskResumeAll+0x1ec>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f040 80ca 	bne.w	800159e <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800140a:	4b69      	ldr	r3, [pc, #420]	@ (80015b0 <xTaskResumeAll+0x1f0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80c5 	beq.w	800159e <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001414:	e08e      	b.n	8001534 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001416:	4b67      	ldr	r3, [pc, #412]	@ (80015b4 <xTaskResumeAll+0x1f4>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	6a12      	ldr	r2, [r2, #32]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	69d2      	ldr	r2, [r2, #28]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	3318      	adds	r3, #24
 8001440:	429a      	cmp	r2, r3
 8001442:	d103      	bne.n	800144c <xTaskResumeAll+0x8c>
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	68d2      	ldr	r2, [r2, #12]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	6892      	ldr	r2, [r2, #8]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	429a      	cmp	r2, r3
 8001480:	d103      	bne.n	800148a <xTaskResumeAll+0xca>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149e:	2201      	movs	r2, #1
 80014a0:	409a      	lsls	r2, r3
 80014a2:	4b45      	ldr	r3, [pc, #276]	@ (80015b8 <xTaskResumeAll+0x1f8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <xTaskResumeAll+0x1f8>)
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b0:	4942      	ldr	r1, [pc, #264]	@ (80015bc <xTaskResumeAll+0x1fc>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3304      	adds	r3, #4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	3204      	adds	r2, #4
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	1d1a      	adds	r2, r3, #4
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <xTaskResumeAll+0x1fc>)
 80014f0:	441a      	add	r2, r3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014fa:	4930      	ldr	r1, [pc, #192]	@ (80015bc <xTaskResumeAll+0x1fc>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800150c:	1c59      	adds	r1, r3, #1
 800150e:	482b      	ldr	r0, [pc, #172]	@ (80015bc <xTaskResumeAll+0x1fc>)
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001520:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <xTaskResumeAll+0x200>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001526:	429a      	cmp	r2, r3
 8001528:	d904      	bls.n	8001534 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800152a:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <xTaskResumeAll+0x204>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2101      	movs	r1, #1
 8001530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <xTaskResumeAll+0x1f4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f47f af6c 	bne.w	8001416 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001544:	f000 fc32 	bl	8001dac <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001548:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <xTaskResumeAll+0x208>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d012      	beq.n	800157a <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001554:	f000 f84c 	bl	80015f0 <xTaskIncrementTick>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800155e:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <xTaskResumeAll+0x204>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	2101      	movs	r1, #1
 8001564:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b01      	subs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ef      	bne.n	8001554 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <xTaskResumeAll+0x208>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <xTaskResumeAll+0x204>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <xTaskResumeAll+0x200>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <xTaskResumeAll+0x20c>)
 8001590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800159e:	f001 fa9b 	bl	8002ad8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80015a2:	69bb      	ldr	r3, [r7, #24]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001c0 	.word	0x200001c0
 80015b0:	20000198 	.word	0x20000198
 80015b4:	20000158 	.word	0x20000158
 80015b8:	200001a0 	.word	0x200001a0
 80015bc:	200000c4 	.word	0x200000c4
 80015c0:	200000c0 	.word	0x200000c0
 80015c4:	200001ac 	.word	0x200001ac
 80015c8:	200001a8 	.word	0x200001a8
 80015cc:	e000ed04 	.word	0xe000ed04

080015d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <xTaskGetTickCount+0x1c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	2000019c 	.word	0x2000019c

080015f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80015fa:	4b7f      	ldr	r3, [pc, #508]	@ (80017f8 <xTaskIncrementTick+0x208>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 80ef 	bne.w	80017e2 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001604:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <xTaskIncrementTick+0x20c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800160c:	4a7b      	ldr	r2, [pc, #492]	@ (80017fc <xTaskIncrementTick+0x20c>)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d121      	bne.n	800165c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001618:	4b79      	ldr	r3, [pc, #484]	@ (8001800 <xTaskIncrementTick+0x210>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001626:	f383 8811 	msr	BASEPRI, r3
 800162a:	f3bf 8f6f 	isb	sy
 800162e:	f3bf 8f4f 	dsb	sy
 8001632:	607b      	str	r3, [r7, #4]
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	e7fd      	b.n	8001636 <xTaskIncrementTick+0x46>
 800163a:	4b71      	ldr	r3, [pc, #452]	@ (8001800 <xTaskIncrementTick+0x210>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	4b70      	ldr	r3, [pc, #448]	@ (8001804 <xTaskIncrementTick+0x214>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a6e      	ldr	r2, [pc, #440]	@ (8001800 <xTaskIncrementTick+0x210>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4a6e      	ldr	r2, [pc, #440]	@ (8001804 <xTaskIncrementTick+0x214>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b6e      	ldr	r3, [pc, #440]	@ (8001808 <xTaskIncrementTick+0x218>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a6c      	ldr	r2, [pc, #432]	@ (8001808 <xTaskIncrementTick+0x218>)
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	f000 fba8 	bl	8001dac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800165c:	4b6b      	ldr	r3, [pc, #428]	@ (800180c <xTaskIncrementTick+0x21c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	429a      	cmp	r2, r3
 8001664:	f0c0 80a8 	bcc.w	80017b8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001668:	4b65      	ldr	r3, [pc, #404]	@ (8001800 <xTaskIncrementTick+0x210>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001672:	4b66      	ldr	r3, [pc, #408]	@ (800180c <xTaskIncrementTick+0x21c>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	601a      	str	r2, [r3, #0]
                    break;
 800167a:	e09d      	b.n	80017b8 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800167c:	4b60      	ldr	r3, [pc, #384]	@ (8001800 <xTaskIncrementTick+0x210>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	d203      	bcs.n	800169c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001694:	4a5d      	ldr	r2, [pc, #372]	@ (800180c <xTaskIncrementTick+0x21c>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6013      	str	r3, [r2, #0]
                        break;
 800169a:	e08d      	b.n	80017b8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	6892      	ldr	r2, [r2, #8]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3304      	adds	r3, #4
 80016be:	429a      	cmp	r2, r3
 80016c0:	d103      	bne.n	80016ca <xTaskIncrementTick+0xda>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01e      	beq.n	8001720 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	6a12      	ldr	r2, [r2, #32]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	69d2      	ldr	r2, [r2, #28]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	3318      	adds	r3, #24
 8001704:	429a      	cmp	r2, r3
 8001706:	d103      	bne.n	8001710 <xTaskIncrementTick+0x120>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	2201      	movs	r2, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <xTaskIncrementTick+0x220>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4313      	orrs	r3, r2
 800172e:	4a38      	ldr	r2, [pc, #224]	@ (8001810 <xTaskIncrementTick+0x220>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001736:	4937      	ldr	r1, [pc, #220]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	3204      	adds	r2, #4
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	1d1a      	adds	r2, r3, #4
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001776:	441a      	add	r2, r3
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001780:	4924      	ldr	r1, [pc, #144]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	481f      	ldr	r0, [pc, #124]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4403      	add	r3, r0
 80017a0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <xTaskIncrementTick+0x228>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f67f af5b 	bls.w	8001668 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017b6:	e757      	b.n	8001668 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <xTaskIncrementTick+0x228>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017be:	4915      	ldr	r1, [pc, #84]	@ (8001814 <xTaskIncrementTick+0x224>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d901      	bls.n	80017d4 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <xTaskIncrementTick+0x22c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	e004      	b.n	80017ec <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <xTaskIncrementTick+0x230>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <xTaskIncrementTick+0x230>)
 80017ea:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001c0 	.word	0x200001c0
 80017fc:	2000019c 	.word	0x2000019c
 8001800:	20000150 	.word	0x20000150
 8001804:	20000154 	.word	0x20000154
 8001808:	200001b0 	.word	0x200001b0
 800180c:	200001b8 	.word	0x200001b8
 8001810:	200001a0 	.word	0x200001a0
 8001814:	200000c4 	.word	0x200000c4
 8001818:	200000c0 	.word	0x200000c0
 800181c:	200001ac 	.word	0x200001ac
 8001820:	200001a8 	.word	0x200001a8

08001824 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800182a:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <vTaskSwitchContext+0xa8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001832:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <vTaskSwitchContext+0xac>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001838:	e041      	b.n	80018be <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 800183a:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <vTaskSwitchContext+0xac>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001840:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <vTaskSwitchContext+0xb0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	f1c3 031f 	rsb	r3, r3, #31
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	4920      	ldr	r1, [pc, #128]	@ (80018d8 <vTaskSwitchContext+0xb4>)
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10b      	bne.n	8001882 <vTaskSwitchContext+0x5e>
    __asm volatile
 800186a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800186e:	f383 8811 	msr	BASEPRI, r3
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	607b      	str	r3, [r7, #4]
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	e7fd      	b.n	800187e <vTaskSwitchContext+0x5a>
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <vTaskSwitchContext+0xb4>)
 800188e:	4413      	add	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	3308      	adds	r3, #8
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d103      	bne.n	80018b0 <vTaskSwitchContext+0x8c>
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <vTaskSwitchContext+0xb8>)
 80018b8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <vTaskSwitchContext+0xb8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
    }
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200001c0 	.word	0x200001c0
 80018d0:	200001ac 	.word	0x200001ac
 80018d4:	200001a0 	.word	0x200001a0
 80018d8:	200000c4 	.word	0x200000c4
 80018dc:	200000c0 	.word	0x200000c0

080018e0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10b      	bne.n	8001908 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80018f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018f4:	f383 8811 	msr	BASEPRI, r3
 80018f8:	f3bf 8f6f 	isb	sy
 80018fc:	f3bf 8f4f 	dsb	sy
 8001900:	60fb      	str	r3, [r7, #12]
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001908:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <vTaskPlaceOnEventList+0x48>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3318      	adds	r3, #24
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7fe fe52 	bl	80005ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001916:	2101      	movs	r1, #1
 8001918:	6838      	ldr	r0, [r7, #0]
 800191a:	f000 fb29 	bl	8001f70 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200000c0 	.word	0x200000c0

0800192c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10b      	bne.n	8001956 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800193e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	613b      	str	r3, [r7, #16]
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	e7fd      	b.n	8001952 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	61da      	str	r2, [r3, #28]
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	6892      	ldr	r2, [r2, #8]
 800196c:	621a      	str	r2, [r3, #32]
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	3218      	adds	r2, #24
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f103 0218 	add.w	r2, r3, #24
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	68b8      	ldr	r0, [r7, #8]
 80019a8:	f000 fae2 	bl	8001f70 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200000c0 	.word	0x200000c0

080019b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b08b      	sub	sp, #44	@ 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10b      	bne.n	80019e6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80019ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019d2:	f383 8811 	msr	BASEPRI, r3
 80019d6:	f3bf 8f6f 	isb	sy
 80019da:	f3bf 8f4f 	dsb	sy
 80019de:	60fb      	str	r3, [r7, #12]
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	6a3a      	ldr	r2, [r7, #32]
 80019f2:	6a12      	ldr	r2, [r2, #32]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	6a3a      	ldr	r2, [r7, #32]
 80019fc:	69d2      	ldr	r2, [r2, #28]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	3318      	adds	r3, #24
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d103      	bne.n	8001a14 <xTaskRemoveFromEventList+0x5c>
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1e5a      	subs	r2, r3, #1
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001a24:	4b4b      	ldr	r3, [pc, #300]	@ (8001b54 <xTaskRemoveFromEventList+0x19c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d160      	bne.n	8001aee <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	68d2      	ldr	r2, [r2, #12]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	6892      	ldr	r2, [r2, #8]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d103      	bne.n	8001a5a <xTaskRemoveFromEventList+0xa2>
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6e:	2201      	movs	r2, #1
 8001a70:	409a      	lsls	r2, r3
 8001a72:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <xTaskRemoveFromEventList+0x1a0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	4a37      	ldr	r2, [pc, #220]	@ (8001b58 <xTaskRemoveFromEventList+0x1a0>)
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a80:	4936      	ldr	r1, [pc, #216]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	6a3a      	ldr	r2, [r7, #32]
 8001aa6:	3204      	adds	r2, #4
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	1d1a      	adds	r2, r3, #4
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001ac0:	441a      	add	r2, r3
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aca:	4924      	ldr	r1, [pc, #144]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001adc:	1c59      	adds	r1, r3, #1
 8001ade:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4403      	add	r3, r0
 8001aea:	6019      	str	r1, [r3, #0]
 8001aec:	e01b      	b.n	8001b26 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	61da      	str	r2, [r3, #28]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	621a      	str	r2, [r3, #32]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	6a3a      	ldr	r2, [r7, #32]
 8001b08:	3218      	adds	r2, #24
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	f103 0218 	add.w	r2, r3, #24
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b1c:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a0f      	ldr	r2, [pc, #60]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001b24:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <xTaskRemoveFromEventList+0x1ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d905      	bls.n	8001b40 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <xTaskRemoveFromEventList+0x1b0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e001      	b.n	8001b44 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	372c      	adds	r7, #44	@ 0x2c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200001c0 	.word	0x200001c0
 8001b58:	200001a0 	.word	0x200001a0
 8001b5c:	200000c4 	.word	0x200000c4
 8001b60:	20000158 	.word	0x20000158
 8001b64:	200000c0 	.word	0x200000c0
 8001b68:	200001ac 	.word	0x200001ac

08001b6c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <vTaskInternalSetTimeOutState+0x24>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <vTaskInternalSetTimeOutState+0x28>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	200001b0 	.word	0x200001b0
 8001b94:	2000019c 	.word	0x2000019c

08001b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10b      	bne.n	8001bc0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bac:	f383 8811 	msr	BASEPRI, r3
 8001bb0:	f3bf 8f6f 	isb	sy
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	613b      	str	r3, [r7, #16]
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	60fb      	str	r3, [r7, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	e7fd      	b.n	8001bda <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001bde:	f000 ff49 	bl	8002a74 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <xTaskCheckForTimeOut+0xc8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d102      	bne.n	8001c02 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	e026      	b.n	8001c50 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <xTaskCheckForTimeOut+0xcc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d00a      	beq.n	8001c24 <xTaskCheckForTimeOut+0x8c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d305      	bcc.n	8001c24 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e015      	b.n	8001c50 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d20b      	bcs.n	8001c46 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	1ad2      	subs	r2, r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff96 	bl	8001b6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	e004      	b.n	8001c50 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001c50:	f000 ff42 	bl	8002ad8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001c54:	69fb      	ldr	r3, [r7, #28]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000019c 	.word	0x2000019c
 8001c64:	200001b0 	.word	0x200001b0

08001c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <vTaskMissedYield+0x14>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	200001ac 	.word	0x200001ac

08001c80 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c88:	f000 f852 	bl	8001d30 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <prvIdleTask+0x28>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d9f9      	bls.n	8001c88 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <prvIdleTask+0x2c>)
 8001c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001ca4:	e7f0      	b.n	8001c88 <prvIdleTask+0x8>
 8001ca6:	bf00      	nop
 8001ca8:	200000c4 	.word	0x200000c4
 8001cac:	e000ed04 	.word	0xe000ed04

08001cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	e00c      	b.n	8001cd6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <prvInitialiseTaskLists+0x60>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc48 	bl	8000560 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d9ef      	bls.n	8001cbc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001cdc:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <prvInitialiseTaskLists+0x64>)
 8001cde:	f7fe fc3f 	bl	8000560 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ce2:	480d      	ldr	r0, [pc, #52]	@ (8001d18 <prvInitialiseTaskLists+0x68>)
 8001ce4:	f7fe fc3c 	bl	8000560 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <prvInitialiseTaskLists+0x6c>)
 8001cea:	f7fe fc39 	bl	8000560 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001cee:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <prvInitialiseTaskLists+0x70>)
 8001cf0:	f7fe fc36 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001cf4:	480b      	ldr	r0, [pc, #44]	@ (8001d24 <prvInitialiseTaskLists+0x74>)
 8001cf6:	f7fe fc33 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <prvInitialiseTaskLists+0x78>)
 8001cfc:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <prvInitialiseTaskLists+0x64>)
 8001cfe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <prvInitialiseTaskLists+0x7c>)
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <prvInitialiseTaskLists+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200000c4 	.word	0x200000c4
 8001d14:	20000128 	.word	0x20000128
 8001d18:	2000013c 	.word	0x2000013c
 8001d1c:	20000158 	.word	0x20000158
 8001d20:	2000016c 	.word	0x2000016c
 8001d24:	20000184 	.word	0x20000184
 8001d28:	20000150 	.word	0x20000150
 8001d2c:	20000154 	.word	0x20000154

08001d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d36:	e019      	b.n	8001d6c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001d38:	f000 fe9c 	bl	8002a74 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <prvCheckTasksWaitingTermination+0x50>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc6f 	bl	800062c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <prvCheckTasksWaitingTermination+0x54>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <prvCheckTasksWaitingTermination+0x54>)
 8001d56:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <prvCheckTasksWaitingTermination+0x58>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <prvCheckTasksWaitingTermination+0x58>)
 8001d60:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001d62:	f000 feb9 	bl	8002ad8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f810 	bl	8001d8c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <prvCheckTasksWaitingTermination+0x58>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e1      	bne.n	8001d38 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000016c 	.word	0x2000016c
 8001d84:	20000198 	.word	0x20000198
 8001d88:	20000180 	.word	0x20000180

08001d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 f881 	bl	8002ea0 <vPortFree>
            vPortFree( pxTCB );
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f001 f87e 	bl	8002ea0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <prvResetNextTaskUnblockTime+0x30>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d104      	bne.n	8001dc4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <prvResetNextTaskUnblockTime+0x34>)
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001dc2:	e005      	b.n	8001dd0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <prvResetNextTaskUnblockTime+0x30>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <prvResetNextTaskUnblockTime+0x34>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000150 	.word	0x20000150
 8001de0:	200001b8 	.word	0x200001b8

08001de4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <xTaskGetSchedulerState+0x34>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001df2:	2301      	movs	r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e008      	b.n	8001e0a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <xTaskGetSchedulerState+0x38>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001e00:	2302      	movs	r3, #2
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	e001      	b.n	8001e0a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001e0a:	687b      	ldr	r3, [r7, #4]
    }
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	200001a4 	.word	0x200001a4
 8001e1c:	200001c0 	.word	0x200001c0

08001e20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8090 	beq.w	8001f58 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001e38:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <xTaskPriorityDisinherit+0x144>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d00b      	beq.n	8001e5a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8001e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e46:	f383 8811 	msr	BASEPRI, r3
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	f3bf 8f4f 	dsb	sy
 8001e52:	613b      	str	r3, [r7, #16]
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	e7fd      	b.n	8001e56 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8001e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	60fb      	str	r3, [r7, #12]
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	e7fd      	b.n	8001e76 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	1e5a      	subs	r2, r3, #1
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d063      	beq.n	8001f58 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d15f      	bne.n	8001f58 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fbc5 	bl	800062c <uxListRemove>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	2201      	movs	r2, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001ebc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	f1c3 0205 	rsb	r2, r3, #5
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	4a21      	ldr	r2, [pc, #132]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee8:	4920      	ldr	r1, [pc, #128]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	3204      	adds	r2, #4
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1d1a      	adds	r2, r3, #4
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001f28:	441a      	add	r2, r3
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f32:	490e      	ldr	r1, [pc, #56]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f44:	1c59      	adds	r1, r3, #1
 8001f46:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4403      	add	r3, r0
 8001f52:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8001f58:	69fb      	ldr	r3, [r7, #28]
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200000c0 	.word	0x200000c0
 8001f68:	200001a0 	.word	0x200001a0
 8001f6c:	200000c4 	.word	0x200000c4

08001f70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001f7a:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001f80:	4b36      	ldr	r3, [pc, #216]	@ (800205c <prvAddCurrentTaskToDelayedList+0xec>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001f86:	4b36      	ldr	r3, [pc, #216]	@ (8002060 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f8c:	4b35      	ldr	r3, [pc, #212]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fb4a 	bl	800062c <uxListRemove>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f9e:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001fb4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d124      	bne.n	8002008 <prvAddCurrentTaskToDelayedList+0x98>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	6892      	ldr	r2, [r2, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	3204      	adds	r2, #4
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1d1a      	adds	r2, r3, #4
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002006:	e022      	b.n	800204e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	d207      	bcs.n	8002030 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002020:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3304      	adds	r3, #4
 8002026:	4619      	mov	r1, r3
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7fe fac6 	bl	80005ba <vListInsert>
}
 800202e:	e00e      	b.n	800204e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3304      	adds	r3, #4
 8002036:	4619      	mov	r1, r3
 8002038:	69b8      	ldr	r0, [r7, #24]
 800203a:	f7fe fabe 	bl	80005ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <prvAddCurrentTaskToDelayedList+0x100>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d202      	bcs.n	800204e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <prvAddCurrentTaskToDelayedList+0x100>)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000019c 	.word	0x2000019c
 800205c:	20000150 	.word	0x20000150
 8002060:	20000154 	.word	0x20000154
 8002064:	200000c0 	.word	0x200000c0
 8002068:	200001a0 	.word	0x200001a0
 800206c:	20000184 	.word	0x20000184
 8002070:	200001b8 	.word	0x200001b8

08002074 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800207e:	f000 fb03 	bl	8002688 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002082:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <xTimerCreateTimerTask+0x58>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <xTimerCreateTimerTask+0x5c>)
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	2302      	movs	r3, #2
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002098:	490e      	ldr	r1, [pc, #56]	@ (80020d4 <xTimerCreateTimerTask+0x60>)
 800209a:	480f      	ldr	r0, [pc, #60]	@ (80020d8 <xTimerCreateTimerTask+0x64>)
 800209c:	f7fe ffa8 	bl	8000ff0 <xTaskCreate>
 80020a0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80020a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	603b      	str	r3, [r7, #0]
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80020c0:	687b      	ldr	r3, [r7, #4]
    }
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200001f4 	.word	0x200001f4
 80020d0:	200001f8 	.word	0x200001f8
 80020d4:	08005e80 	.word	0x08005e80
 80020d8:	080022dd 	.word	0x080022dd

080020dc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80020ea:	202c      	movs	r0, #44	@ 0x2c
 80020ec:	f000 fda6 	bl	8002c3c <pvPortMalloc>
 80020f0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f805 	bl	800211e <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 8002114:	697b      	ldr	r3, [r7, #20]
        }
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <prvInitialiseNewTimer+0x2c>
    __asm volatile
 8002132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	617b      	str	r3, [r7, #20]
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	e7fd      	b.n	8002146 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800214a:	f000 fa9d 	bl	8002688 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	6a3a      	ldr	r2, [r7, #32]
 8002164:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	3304      	adds	r3, #4
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fa18 	bl	80005a0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	b2da      	uxtb	r2, r3
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <xTimerGenericCommandFromTask+0x30>
    __asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	623b      	str	r3, [r7, #32]
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <xTimerGenericCommandFromTask+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80021c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <xTimerGenericCommandFromTask+0xa4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02f      	beq.n	8002228 <xTimerGenericCommandFromTask+0x98>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	dd0b      	ble.n	80021f2 <xTimerGenericCommandFromTask+0x62>
    __asm volatile
 80021da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021de:	f383 8811 	msr	BASEPRI, r3
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	61fb      	str	r3, [r7, #28]
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	e7fd      	b.n	80021ee <xTimerGenericCommandFromTask+0x5e>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	dc17      	bgt.n	8002228 <xTimerGenericCommandFromTask+0x98>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80021f8:	f7ff fdf4 	bl	8001de4 <xTaskGetSchedulerState>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d109      	bne.n	8002216 <xTimerGenericCommandFromTask+0x86>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <xTimerGenericCommandFromTask+0xa4>)
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	f107 0110 	add.w	r1, r7, #16
 800220a:	2300      	movs	r3, #0
 800220c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800220e:	f7fe fb3b 	bl	8000888 <xQueueGenericSend>
 8002212:	6278      	str	r0, [r7, #36]	@ 0x24
 8002214:	e008      	b.n	8002228 <xTimerGenericCommandFromTask+0x98>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <xTimerGenericCommandFromTask+0xa4>)
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	f107 0110 	add.w	r1, r7, #16
 800221e:	2300      	movs	r3, #0
 8002220:	2200      	movs	r2, #0
 8002222:	f7fe fb31 	bl	8000888 <xQueueGenericSend>
 8002226:	6278      	str	r0, [r7, #36]	@ 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800222a:	4618      	mov	r0, r3
 800222c:	3728      	adds	r7, #40	@ 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200001f4 	.word	0x200001f4

08002238 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002244:	e008      	b.n	8002258 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4413      	add	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	18d1      	adds	r1, r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f8df 	bl	8002428 <prvInsertTimerInActiveList>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ea      	bne.n	8002246 <prvReloadTimer+0xe>
        }
    }
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <prvProcessExpiredTimer+0x5c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3304      	adds	r3, #4
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f9c9 	bl	800062c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ffc3 	bl	8002238 <prvReloadTimer>
 80022b2:	e008      	b.n	80022c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	4798      	blx	r3
    }
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200001ec 	.word	0x200001ec

080022dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f859 	bl	80023a0 <prvGetNextExpireTime>
 80022ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4619      	mov	r1, r3
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f805 	bl	8002304 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80022fa:	f000 f8d7 	bl	80024ac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022fe:	bf00      	nop
 8002300:	e7f0      	b.n	80022e4 <prvTimerTask+0x8>
	...

08002304 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800230e:	f7ff f849 	bl	80013a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f866 	bl	80023e8 <prvSampleTimeNow>
 800231c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d130      	bne.n	8002386 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <prvProcessTimerOrBlockTask+0x3c>
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	429a      	cmp	r2, r3
 8002330:	d806      	bhi.n	8002340 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002332:	f7ff f845 	bl	80013c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff9f 	bl	800227c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800233e:	e024      	b.n	800238a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002346:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <prvProcessTimerOrBlockTask+0x90>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <prvProcessTimerOrBlockTask+0x50>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <prvProcessTimerOrBlockTask+0x52>
 8002354:	2300      	movs	r3, #0
 8002356:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002358:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <prvProcessTimerOrBlockTask+0x94>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe fdd3 	bl	8000f10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800236a:	f7ff f829 	bl	80013c0 <xTaskResumeAll>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002374:	4b09      	ldr	r3, [pc, #36]	@ (800239c <prvProcessTimerOrBlockTask+0x98>)
 8002376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	f3bf 8f6f 	isb	sy
    }
 8002384:	e001      	b.n	800238a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002386:	f7ff f81b 	bl	80013c0 <xTaskResumeAll>
    }
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200001f0 	.word	0x200001f0
 8002398:	200001f4 	.word	0x200001f4
 800239c:	e000ed04 	.word	0xe000ed04

080023a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <prvGetNextExpireTime+0x44>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <prvGetNextExpireTime+0x16>
 80023b2:	2201      	movs	r2, #1
 80023b4:	e000      	b.n	80023b8 <prvGetNextExpireTime+0x18>
 80023b6:	2200      	movs	r2, #0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023c4:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <prvGetNextExpireTime+0x44>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e001      	b.n	80023d4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80023d4:	68fb      	ldr	r3, [r7, #12]
    }
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	200001ec 	.word	0x200001ec

080023e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80023f0:	f7ff f8ee 	bl	80015d0 <xTaskGetTickCount>
 80023f4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <prvSampleTimeNow+0x3c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d205      	bcs.n	800240c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002400:	f000 f91c 	bl	800263c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e002      	b.n	8002412 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002412:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <prvSampleTimeNow+0x3c>)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002418:	68fb      	ldr	r3, [r7, #12]
    }
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200001fc 	.word	0x200001fc

08002428 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	d812      	bhi.n	8002474 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	1ad2      	subs	r2, r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	429a      	cmp	r2, r3
 800245a:	d302      	bcc.n	8002462 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e01b      	b.n	800249a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <prvInsertTimerInActiveList+0x7c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3304      	adds	r3, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7fe f8a4 	bl	80005ba <vListInsert>
 8002472:	e012      	b.n	800249a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d206      	bcs.n	800248a <prvInsertTimerInActiveList+0x62>
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d302      	bcc.n	800248a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002484:	2301      	movs	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e007      	b.n	800249a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800248a:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <prvInsertTimerInActiveList+0x80>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3304      	adds	r3, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f7fe f890 	bl	80005ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 800249a:	697b      	ldr	r3, [r7, #20]
    }
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200001f0 	.word	0x200001f0
 80024a8:	200001ec 	.word	0x200001ec

080024ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80024be:	e0a9      	b.n	8002614 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f2c0 80a6 	blt.w	8002614 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f8a7 	bl	800062c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff81 	bl	80023e8 <prvSampleTimeNow>
 80024e6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	f200 808e 	bhi.w	800260e <prvProcessReceivedCommands+0x162>
 80024f2:	a201      	add	r2, pc, #4	@ (adr r2, 80024f8 <prvProcessReceivedCommands+0x4c>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	0800251d 	.word	0x0800251d
 80024fc:	0800251d 	.word	0x0800251d
 8002500:	08002585 	.word	0x08002585
 8002504:	08002599 	.word	0x08002599
 8002508:	080025e5 	.word	0x080025e5
 800250c:	0800251d 	.word	0x0800251d
 8002510:	0800251d 	.word	0x0800251d
 8002514:	08002585 	.word	0x08002585
 8002518:	08002599 	.word	0x08002599
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	18d1      	adds	r1, r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	69f8      	ldr	r0, [r7, #28]
 800253c:	f7ff ff74 	bl	8002428 <prvInsertTimerInActiveList>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d065      	beq.n	8002612 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4413      	add	r3, r2
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4619      	mov	r1, r3
 8002560:	69f8      	ldr	r0, [r7, #28]
 8002562:	f7ff fe69 	bl	8002238 <prvReloadTimer>
 8002566:	e008      	b.n	800257a <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	69f8      	ldr	r0, [r7, #28]
 8002580:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002582:	e046      	b.n	8002612 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002596:	e03d      	b.n	8002614 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10b      	bne.n	80025d0 <prvProcessReceivedCommands+0x124>
    __asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	617b      	str	r3, [r7, #20]
}
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	18d1      	adds	r1, r2, r3
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	69f8      	ldr	r0, [r7, #28]
 80025de:	f7ff ff23 	bl	8002428 <prvInsertTimerInActiveList>
                        break;
 80025e2:	e017      	b.n	8002614 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 80025f2:	69f8      	ldr	r0, [r7, #28]
 80025f4:	f000 fc54 	bl	8002ea0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80025f8:	e00c      	b.n	8002614 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800260c:	e002      	b.n	8002614 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <prvProcessReceivedCommands+0x168>
                        break;
 8002612:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <prvProcessReceivedCommands+0x18c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f107 0108 	add.w	r1, r7, #8
 800261c:	2200      	movs	r2, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fa34 	bl	8000a8c <xQueueReceive>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f47f af4a 	bne.w	80024c0 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200001f4 	.word	0x200001f4

0800263c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002642:	e009      	b.n	8002658 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002644:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <prvSwitchTimerLists+0x44>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800264e:	f04f 31ff 	mov.w	r1, #4294967295
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f7ff fe12 	bl	800227c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002658:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <prvSwitchTimerLists+0x44>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002662:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <prvSwitchTimerLists+0x44>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <prvSwitchTimerLists+0x48>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <prvSwitchTimerLists+0x44>)
 800266e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002670:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <prvSwitchTimerLists+0x48>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]
    }
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200001ec 	.word	0x200001ec
 8002684:	200001f0 	.word	0x200001f0

08002688 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800268c:	f000 f9f2 	bl	8002a74 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002690:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <prvCheckForValidListAndQueue+0x54>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d11d      	bne.n	80026d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002698:	4811      	ldr	r0, [pc, #68]	@ (80026e0 <prvCheckForValidListAndQueue+0x58>)
 800269a:	f7fd ff61 	bl	8000560 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800269e:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <prvCheckForValidListAndQueue+0x5c>)
 80026a0:	f7fd ff5e 	bl	8000560 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <prvCheckForValidListAndQueue+0x60>)
 80026a6:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <prvCheckForValidListAndQueue+0x58>)
 80026a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <prvCheckForValidListAndQueue+0x64>)
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <prvCheckForValidListAndQueue+0x5c>)
 80026ae:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80026b0:	2200      	movs	r2, #0
 80026b2:	210c      	movs	r1, #12
 80026b4:	200a      	movs	r0, #10
 80026b6:	f7fe f875 	bl	80007a4 <xQueueGenericCreate>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <prvCheckForValidListAndQueue+0x54>)
 80026be:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <prvCheckForValidListAndQueue+0x54>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80026c8:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <prvCheckForValidListAndQueue+0x54>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4908      	ldr	r1, [pc, #32]	@ (80026f0 <prvCheckForValidListAndQueue+0x68>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fbce 	bl	8000e70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80026d4:	f000 fa00 	bl	8002ad8 <vPortExitCritical>
    }
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200001f4 	.word	0x200001f4
 80026e0:	200001c4 	.word	0x200001c4
 80026e4:	200001d8 	.word	0x200001d8
 80026e8:	200001ec 	.word	0x200001ec
 80026ec:	200001f0 	.word	0x200001f0
 80026f0:	08005e88 	.word	0x08005e88

080026f4 <pvTimerGetTimerID>:
        return xReturn;
    }
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10b      	bne.n	800271e <pvTimerGetTimerID+0x2a>
    __asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	60fb      	str	r3, [r7, #12]
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	e7fd      	b.n	800271a <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800271e:	f000 f9a9 	bl	8002a74 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8002728:	f000 f9d6 	bl	8002ad8 <vPortExitCritical>

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
 800272c:	693b      	ldr	r3, [r7, #16]
    }
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60fb      	str	r3, [r7, #12]

        traceENTER_vTimerSetTimerID( xTimer, pvNewID );

        configASSERT( xTimer );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <vTimerSetTimerID+0x2c>
    __asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	60bb      	str	r3, [r7, #8]
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	e7fd      	b.n	800275e <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 8002762:	f000 f987 	bl	8002a74 <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 800276c:	f000 f9b4 	bl	8002ad8 <vPortExitCritical>

        traceRETURN_vTimerSetTimerID();
    }
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3b04      	subs	r3, #4
 8002788:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002790:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3b04      	subs	r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b04      	subs	r3, #4
 80027a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80027a8:	4a0c      	ldr	r2, [pc, #48]	@ (80027dc <pxPortInitialiseStack+0x64>)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3b14      	subs	r3, #20
 80027b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3b04      	subs	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f06f 0202 	mvn.w	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3b20      	subs	r3, #32
 80027cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	080027e1 	.word	0x080027e1

080027e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80027ea:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <prvTaskExitError+0x58>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d00b      	beq.n	800280c <prvTaskExitError+0x2c>
    __asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	60fb      	str	r3, [r7, #12]
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <prvTaskExitError+0x28>
    __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60bb      	str	r3, [r7, #8]
}
 800281e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002820:	bf00      	nop
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0fc      	beq.n	8002822 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000004 	.word	0x20000004
 800283c:	00000000 	.word	0x00000000

08002840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002840:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <pxCurrentTCBConst2>)
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	6808      	ldr	r0, [r1, #0]
 8002846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284a:	f380 8809 	msr	PSP, r0
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f380 8811 	msr	BASEPRI, r0
 800285a:	4770      	bx	lr
 800285c:	f3af 8000 	nop.w

08002860 <pxCurrentTCBConst2>:
 8002860:	200000c0 	.word	0x200000c0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop

08002868 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002868:	4808      	ldr	r0, [pc, #32]	@ (800288c <prvPortStartFirstTask+0x24>)
 800286a:	6800      	ldr	r0, [r0, #0]
 800286c:	6800      	ldr	r0, [r0, #0]
 800286e:	f380 8808 	msr	MSP, r0
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f380 8814 	msr	CONTROL, r0
 800287a:	b662      	cpsie	i
 800287c:	b661      	cpsie	f
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	df00      	svc	0
 8002888:	bf00      	nop
 800288a:	0000      	.short	0x0000
 800288c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop

08002894 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	@ 0x30
 8002898:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800289a:	4b69      	ldr	r3, [pc, #420]	@ (8002a40 <xPortStartScheduler+0x1ac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a69      	ldr	r2, [pc, #420]	@ (8002a44 <xPortStartScheduler+0x1b0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10b      	bne.n	80028bc <xPortStartScheduler+0x28>
    __asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028bc:	4b60      	ldr	r3, [pc, #384]	@ (8002a40 <xPortStartScheduler+0x1ac>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a61      	ldr	r2, [pc, #388]	@ (8002a48 <xPortStartScheduler+0x1b4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10b      	bne.n	80028de <xPortStartScheduler+0x4a>
    __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	623b      	str	r3, [r7, #32]
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	e7fd      	b.n	80028da <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80028de:	4b5b      	ldr	r3, [pc, #364]	@ (8002a4c <xPortStartScheduler+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80028e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e6:	332c      	adds	r3, #44	@ 0x2c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a59      	ldr	r2, [pc, #356]	@ (8002a50 <xPortStartScheduler+0x1bc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <xPortStartScheduler+0x74>
    __asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	61fb      	str	r3, [r7, #28]
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	3338      	adds	r3, #56	@ 0x38
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a51      	ldr	r2, [pc, #324]	@ (8002a54 <xPortStartScheduler+0x1c0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00b      	beq.n	800292c <xPortStartScheduler+0x98>
    __asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61bb      	str	r3, [r7, #24]
}
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002930:	4b49      	ldr	r3, [pc, #292]	@ (8002a58 <xPortStartScheduler+0x1c4>)
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	22ff      	movs	r2, #255	@ 0xff
 8002940:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b41      	ldr	r3, [pc, #260]	@ (8002a5c <xPortStartScheduler+0x1c8>)
 8002956:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002958:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <xPortStartScheduler+0x1c8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10b      	bne.n	8002978 <xPortStartScheduler+0xe4>
    __asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	617b      	str	r3, [r7, #20]
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d013      	beq.n	80029ae <xPortStartScheduler+0x11a>
    __asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	613b      	str	r3, [r7, #16]
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	e7fd      	b.n	800299a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b80      	cmp	r3, #128	@ 0x80
 80029b8:	d0f1      	beq.n	800299e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d103      	bne.n	80029c8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80029c0:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <xPortStartScheduler+0x1cc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e004      	b.n	80029d2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	4a24      	ldr	r2, [pc, #144]	@ (8002a60 <xPortStartScheduler+0x1cc>)
 80029d0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029d2:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <xPortStartScheduler+0x1cc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	4a21      	ldr	r2, [pc, #132]	@ (8002a60 <xPortStartScheduler+0x1cc>)
 80029da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029dc:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <xPortStartScheduler+0x1cc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a60 <xPortStartScheduler+0x1cc>)
 80029e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <xPortStartScheduler+0x1d0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <xPortStartScheduler+0x1d0>)
 80029f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <xPortStartScheduler+0x1d0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <xPortStartScheduler+0x1d0>)
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a06:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002a08:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <xPortStartScheduler+0x1d4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002a0e:	f000 f8e5 	bl	8002bdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002a12:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <xPortStartScheduler+0x1d8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002a18:	f000 f904 	bl	8002c24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a1c:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <xPortStartScheduler+0x1dc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <xPortStartScheduler+0x1dc>)
 8002a22:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002a26:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002a28:	f7ff ff1e 	bl	8002868 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002a2c:	f7fe fefa 	bl	8001824 <vTaskSwitchContext>
    prvTaskExitError();
 8002a30:	f7ff fed6 	bl	80027e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3730      	adds	r7, #48	@ 0x30
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	410fc271 	.word	0x410fc271
 8002a48:	410fc270 	.word	0x410fc270
 8002a4c:	e000ed08 	.word	0xe000ed08
 8002a50:	08002841 	.word	0x08002841
 8002a54:	08002b31 	.word	0x08002b31
 8002a58:	e000e400 	.word	0xe000e400
 8002a5c:	20000200 	.word	0x20000200
 8002a60:	20000204 	.word	0x20000204
 8002a64:	e000ed20 	.word	0xe000ed20
 8002a68:	e000ed1c 	.word	0xe000ed1c
 8002a6c:	20000004 	.word	0x20000004
 8002a70:	e000ef34 	.word	0xe000ef34

08002a74 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
    __asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	607b      	str	r3, [r7, #4]
}
 8002a8c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <vPortEnterCritical+0x5c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad0 <vPortEnterCritical+0x5c>)
 8002a96:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <vPortEnterCritical+0x5c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d110      	bne.n	8002ac2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <vPortEnterCritical+0x60>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <vPortEnterCritical+0x4e>
    __asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	603b      	str	r3, [r7, #0]
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	e7fd      	b.n	8002abe <vPortEnterCritical+0x4a>
    }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <vPortExitCritical+0x50>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <vPortExitCritical+0x26>
    __asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	607b      	str	r3, [r7, #4]
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	e7fd      	b.n	8002afa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002afe:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <vPortExitCritical+0x50>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <vPortExitCritical+0x50>)
 8002b06:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b08:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <vPortExitCritical+0x50>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <vPortExitCritical+0x44>
 8002b10:	2300      	movs	r3, #0
 8002b12:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002b1a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	00000000 	.word	0x00000000

08002b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b30:	f3ef 8009 	mrs	r0, PSP
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <pxCurrentTCBConst>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	f01e 0f10 	tst.w	lr, #16
 8002b40:	bf08      	it	eq
 8002b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4a:	6010      	str	r0, [r2, #0]
 8002b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b54:	f380 8811 	msr	BASEPRI, r0
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f7fe fe60 	bl	8001824 <vTaskSwitchContext>
 8002b64:	f04f 0000 	mov.w	r0, #0
 8002b68:	f380 8811 	msr	BASEPRI, r0
 8002b6c:	bc09      	pop	{r0, r3}
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	6808      	ldr	r0, [r1, #0]
 8002b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b76:	f01e 0f10 	tst.w	lr, #16
 8002b7a:	bf08      	it	eq
 8002b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b80:	f380 8809 	msr	PSP, r0
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	f3af 8000 	nop.w

08002b90 <pxCurrentTCBConst>:
 8002b90:	200000c0 	.word	0x200000c0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop

08002b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
    __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	607b      	str	r3, [r7, #4]
}
 8002bb0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002bb2:	f7fe fd1d 	bl	80015f0 <xTaskIncrementTick>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <SysTick_Handler+0x40>)
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f383 8811 	msr	BASEPRI, r3
}
 8002bce:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <vPortSetupTimerInterrupt+0x34>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <vPortSetupTimerInterrupt+0x38>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <vPortSetupTimerInterrupt+0x3c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <vPortSetupTimerInterrupt+0x40>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	4a09      	ldr	r2, [pc, #36]	@ (8002c20 <vPortSetupTimerInterrupt+0x44>)
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bfe:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <vPortSetupTimerInterrupt+0x34>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010
 8002c14:	e000e018 	.word	0xe000e018
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	10624dd3 	.word	0x10624dd3
 8002c20:	e000e014 	.word	0xe000e014

08002c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002c34 <vPortEnableVFP+0x10>
 8002c28:	6801      	ldr	r1, [r0, #0]
 8002c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002c2e:	6001      	str	r1, [r0, #0]
 8002c30:	4770      	bx	lr
 8002c32:	0000      	.short	0x0000
 8002c34:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop

08002c3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	@ 0x38
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d022      	beq.n	8002c94 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002c4e:	2308      	movs	r3, #8
 8002c50:	43db      	mvns	r3, r3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d81b      	bhi.n	8002c90 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002c58:	2208      	movs	r2, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d014      	beq.n	8002c94 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	f1c3 0308 	rsb	r3, r3, #8
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d804      	bhi.n	8002c8a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c84:	4413      	add	r3, r2
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	e004      	b.n	8002c94 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	e001      	b.n	8002c94 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002c94:	f7fe fb86 	bl	80013a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c98:	4b7a      	ldr	r3, [pc, #488]	@ (8002e84 <pvPortMalloc+0x248>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002ca0:	f000 f978 	bl	8002f94 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f2c0 80d3 	blt.w	8002e52 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80cf 	beq.w	8002e52 <pvPortMalloc+0x216>
 8002cb4:	4b74      	ldr	r3, [pc, #464]	@ (8002e88 <pvPortMalloc+0x24c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	f200 80c9 	bhi.w	8002e52 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002cc0:	4b72      	ldr	r3, [pc, #456]	@ (8002e8c <pvPortMalloc+0x250>)
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002cc4:	4b71      	ldr	r3, [pc, #452]	@ (8002e8c <pvPortMalloc+0x250>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ccc:	4a70      	ldr	r2, [pc, #448]	@ (8002e90 <pvPortMalloc+0x254>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d305      	bcc.n	8002cde <pvPortMalloc+0xa2>
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd4:	4a6f      	ldr	r2, [pc, #444]	@ (8002e94 <pvPortMalloc+0x258>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d801      	bhi.n	8002cde <pvPortMalloc+0xa2>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <pvPortMalloc+0xa4>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d129      	bne.n	8002d38 <pvPortMalloc+0xfc>
    __asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	623b      	str	r3, [r7, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d08:	4a61      	ldr	r2, [pc, #388]	@ (8002e90 <pvPortMalloc+0x254>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d305      	bcc.n	8002d1a <pvPortMalloc+0xde>
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d10:	4a60      	ldr	r2, [pc, #384]	@ (8002e94 <pvPortMalloc+0x258>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d801      	bhi.n	8002d1a <pvPortMalloc+0xde>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <pvPortMalloc+0xe0>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <pvPortMalloc+0xfc>
    __asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	61fb      	str	r3, [r7, #28]
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d903      	bls.n	8002d4a <pvPortMalloc+0x10e>
 8002d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1d8      	bne.n	8002cfc <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e84 <pvPortMalloc+0x248>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d07e      	beq.n	8002e52 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d60:	4a4b      	ldr	r2, [pc, #300]	@ (8002e90 <pvPortMalloc+0x254>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d305      	bcc.n	8002d72 <pvPortMalloc+0x136>
 8002d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d68:	4a4a      	ldr	r2, [pc, #296]	@ (8002e94 <pvPortMalloc+0x258>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d801      	bhi.n	8002d72 <pvPortMalloc+0x136>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <pvPortMalloc+0x138>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <pvPortMalloc+0x154>
    __asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	61bb      	str	r3, [r7, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d96:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90b      	bls.n	8002dba <pvPortMalloc+0x17e>
    __asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	617b      	str	r3, [r7, #20]
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	1ad2      	subs	r2, r2, r3
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d924      	bls.n	8002e14 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <pvPortMalloc+0x1b8>
    __asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	613b      	str	r3, [r7, #16]
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e12:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e14:	4b1c      	ldr	r3, [pc, #112]	@ (8002e88 <pvPortMalloc+0x24c>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e88 <pvPortMalloc+0x24c>)
 8002e20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e22:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <pvPortMalloc+0x24c>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <pvPortMalloc+0x25c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d203      	bcs.n	8002e36 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <pvPortMalloc+0x24c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <pvPortMalloc+0x25c>)
 8002e34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e40:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <pvPortMalloc+0x260>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	4a13      	ldr	r2, [pc, #76]	@ (8002e9c <pvPortMalloc+0x260>)
 8002e50:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e52:	f7fe fab5 	bl	80013c0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <pvPortMalloc+0x23c>
    __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	60fb      	str	r3, [r7, #12]
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <pvPortMalloc+0x238>
    return pvReturn;
 8002e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3738      	adds	r7, #56	@ 0x38
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20012e10 	.word	0x20012e10
 8002e88:	20012e14 	.word	0x20012e14
 8002e8c:	20012e08 	.word	0x20012e08
 8002e90:	20000208 	.word	0x20000208
 8002e94:	20012e07 	.word	0x20012e07
 8002e98:	20012e18 	.word	0x20012e18
 8002e9c:	20012e1c 	.word	0x20012e1c

08002ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d064      	beq.n	8002f7c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	425b      	negs	r3, r3
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4a30      	ldr	r2, [pc, #192]	@ (8002f84 <vPortFree+0xe4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d305      	bcc.n	8002ed4 <vPortFree+0x34>
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4a2f      	ldr	r2, [pc, #188]	@ (8002f88 <vPortFree+0xe8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d801      	bhi.n	8002ed4 <vPortFree+0x34>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <vPortFree+0x36>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <vPortFree+0x52>
    __asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	617b      	str	r3, [r7, #20]
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <vPortFree+0x72>
    __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	613b      	str	r3, [r7, #16]
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	e7fd      	b.n	8002f0e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <vPortFree+0x92>
    __asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	60fb      	str	r3, [r7, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	e7fd      	b.n	8002f2e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	0fdb      	lsrs	r3, r3, #31
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01c      	beq.n	8002f7c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002f56:	f7fe fa25 	bl	80013a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <vPortFree+0xec>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <vPortFree+0xec>)
 8002f66:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f68:	69b8      	ldr	r0, [r7, #24]
 8002f6a:	f000 f86d 	bl	8003048 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <vPortFree+0xf0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	4a06      	ldr	r2, [pc, #24]	@ (8002f90 <vPortFree+0xf0>)
 8002f76:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f78:	f7fe fa22 	bl	80013c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f7c:	bf00      	nop
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000208 	.word	0x20000208
 8002f88:	20012e07 	.word	0x20012e07
 8002f8c:	20012e14 	.word	0x20012e14
 8002f90:	20012e20 	.word	0x20012e20

08002f94 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f9a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002f9e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002fa0:	4b24      	ldr	r3, [pc, #144]	@ (8003034 <prvHeapInit+0xa0>)
 8002fa2:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3307      	adds	r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <prvHeapInit+0xa0>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <prvHeapInit+0xa4>)
 8002fcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002fce:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <prvHeapInit+0xa4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002fdc:	2208      	movs	r2, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f023 0307 	bic.w	r3, r3, #7
 8002fea:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a13      	ldr	r2, [pc, #76]	@ (800303c <prvHeapInit+0xa8>)
 8002ff0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002ff2:	4b12      	ldr	r3, [pc, #72]	@ (800303c <prvHeapInit+0xa8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002ffa:	4b10      	ldr	r3, [pc, #64]	@ (800303c <prvHeapInit+0xa8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <prvHeapInit+0xa8>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a08      	ldr	r2, [pc, #32]	@ (8003040 <prvHeapInit+0xac>)
 800301e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <prvHeapInit+0xb0>)
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000208 	.word	0x20000208
 8003038:	20012e08 	.word	0x20012e08
 800303c:	20012e10 	.word	0x20012e10
 8003040:	20012e18 	.word	0x20012e18
 8003044:	20012e14 	.word	0x20012e14

08003048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003050:	4b36      	ldr	r3, [pc, #216]	@ (800312c <prvInsertBlockIntoFreeList+0xe4>)
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e002      	b.n	800305c <prvInsertBlockIntoFreeList+0x14>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d8f7      	bhi.n	8003056 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	4a30      	ldr	r2, [pc, #192]	@ (800312c <prvInsertBlockIntoFreeList+0xe4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d018      	beq.n	80030a0 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4a2f      	ldr	r2, [pc, #188]	@ (8003130 <prvInsertBlockIntoFreeList+0xe8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d305      	bcc.n	8003082 <prvInsertBlockIntoFreeList+0x3a>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	4a2e      	ldr	r2, [pc, #184]	@ (8003134 <prvInsertBlockIntoFreeList+0xec>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d801      	bhi.n	8003082 <prvInsertBlockIntoFreeList+0x3a>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <prvInsertBlockIntoFreeList+0x3c>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	60fb      	str	r3, [r7, #12]
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d108      	bne.n	80030c4 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	441a      	add	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	441a      	add	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d118      	bne.n	800310a <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <prvInsertBlockIntoFreeList+0xf0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d00d      	beq.n	8003100 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	441a      	add	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e008      	b.n	8003112 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003100:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <prvInsertBlockIntoFreeList+0xf0>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e003      	b.n	8003112 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	429a      	cmp	r2, r3
 8003118:	d002      	beq.n	8003120 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	20012e08 	.word	0x20012e08
 8003130:	20000208 	.word	0x20000208
 8003134:	20012e07 	.word	0x20012e07
 8003138:	20012e10 	.word	0x20012e10

0800313c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b083      	sub	sp, #12
 8003140:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003142:	f000 fb87 	bl	8003854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003146:	f000 f85d 	bl	8003204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800314a:	f000 f8ef 	bl	800332c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800314e:	f000 f8c3 	bl	80032d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* create the one-shot timer, storing the handle to the created timer in xOneShotTimer */
  xOneShotTimer = xTimerCreate( "OneShot", /* text name for the software timer - not used by FreeRTOS */
 8003152:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <main+0xac>)
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2300      	movs	r3, #0
 8003158:	2200      	movs	r2, #0
 800315a:	f640 5105 	movw	r1, #3333	@ 0xd05
 800315e:	4823      	ldr	r0, [pc, #140]	@ (80031ec <main+0xb0>)
 8003160:	f7fe ffbc 	bl	80020dc <xTimerCreate>
 8003164:	4603      	mov	r3, r0
 8003166:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <main+0xb4>)
 8003168:	6013      	str	r3, [r2, #0]
                                NULL,      /* the timer's ID is initialized to NULL */
                                pvTimerCallback /* pvTimerCallback callback function is used by both software timers */
                              );

  /* create the auto-reload timer, storing the handle to the created timer in xAutoReloadTimer */
  xAutoReloadTimer = xTimerCreate( "AutoReload", /* text name for the software timer - not used by FreeRTOS */
 800316a:	4b1f      	ldr	r3, [pc, #124]	@ (80031e8 <main+0xac>)
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	2201      	movs	r2, #1
 8003172:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003176:	481f      	ldr	r0, [pc, #124]	@ (80031f4 <main+0xb8>)
 8003178:	f7fe ffb0 	bl	80020dc <xTimerCreate>
 800317c:	4603      	mov	r3, r0
 800317e:	4a1e      	ldr	r2, [pc, #120]	@ (80031f8 <main+0xbc>)
 8003180:	6013      	str	r3, [r2, #0]
                                   NULL,         /* the timer's ID is initialized to NULL */
                                   pvTimerCallback /* pvTimerCallback callback function is used by both software timers */
                                 );

  /* check the software timers were created */
  if ( ( xOneShotTimer != NULL ) && ( xAutoReloadTimer != NULL ) )
 8003182:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <main+0xb4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02c      	beq.n	80031e4 <main+0xa8>
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <main+0xbc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d028      	beq.n	80031e4 <main+0xa8>
  {
    /* Start the software timers, using a block time of 0 (no block time).
       The scheduler has not been started yet so any block time specified
       here would be ignored anyway */
    xTimer1Started = xTimerStart( xOneShotTimer, 0 );
 8003192:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <main+0xb4>)
 8003194:	681c      	ldr	r4, [r3, #0]
 8003196:	f7fe fa1b 	bl	80015d0 <xTaskGetTickCount>
 800319a:	4602      	mov	r2, r0
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2300      	movs	r3, #0
 80031a2:	2101      	movs	r1, #1
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7fe fff3 	bl	8002190 <xTimerGenericCommandFromTask>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4a13      	ldr	r2, [pc, #76]	@ (80031fc <main+0xc0>)
 80031ae:	6013      	str	r3, [r2, #0]
    xTimer2Started = xTimerStart( xAutoReloadTimer, 0 );
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <main+0xbc>)
 80031b2:	681c      	ldr	r4, [r3, #0]
 80031b4:	f7fe fa0c 	bl	80015d0 <xTaskGetTickCount>
 80031b8:	4602      	mov	r2, r0
 80031ba:	2300      	movs	r3, #0
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2300      	movs	r3, #0
 80031c0:	2101      	movs	r1, #1
 80031c2:	4620      	mov	r0, r4
 80031c4:	f7fe ffe4 	bl	8002190 <xTimerGenericCommandFromTask>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <main+0xc4>)
 80031cc:	6013      	str	r3, [r2, #0]
       and xTimerStart() will fail if the timer command queue gets full.
       The timer service task does not get created until the scheduler is
       started, so all commands sent to the command queue will stay in the
       queue until after the scheduler has been started. Check both calls
       to xTimerStart() passed */
    if ( ( xTimer1Started == pdPASS ) && ( xTimer2Started == pdPASS ) )
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <main+0xc0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d106      	bne.n	80031e4 <main+0xa8>
 80031d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <main+0xc4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <main+0xa8>
    {
      /* start the scheduler */
      vTaskStartScheduler();
 80031de:	f7fe f89d 	bl	800131c <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <main+0xa8>
 80031e8:	0800348d 	.word	0x0800348d
 80031ec:	08005e90 	.word	0x08005e90
 80031f0:	20012ea4 	.word	0x20012ea4
 80031f4:	08005e98 	.word	0x08005e98
 80031f8:	20012ea0 	.word	0x20012ea0
 80031fc:	20012ea8 	.word	0x20012ea8
 8003200:	20012eac 	.word	0x20012eac

08003204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b094      	sub	sp, #80	@ 0x50
 8003208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	2230      	movs	r2, #48	@ 0x30
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f002 f9a4 	bl	8005560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <SystemClock_Config+0xcc>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	4a27      	ldr	r2, [pc, #156]	@ (80032d0 <SystemClock_Config+0xcc>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003236:	6413      	str	r3, [r2, #64]	@ 0x40
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <SystemClock_Config+0xcc>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	2300      	movs	r3, #0
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	4b22      	ldr	r3, [pc, #136]	@ (80032d4 <SystemClock_Config+0xd0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a21      	ldr	r2, [pc, #132]	@ (80032d4 <SystemClock_Config+0xd0>)
 800324e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <SystemClock_Config+0xd0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003260:	2302      	movs	r3, #2
 8003262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003264:	2301      	movs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003268:	2310      	movs	r3, #16
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800326c:	2302      	movs	r3, #2
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003270:	2300      	movs	r3, #0
 8003272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003274:	2308      	movs	r3, #8
 8003276:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003278:	2332      	movs	r3, #50	@ 0x32
 800327a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800327c:	2304      	movs	r3, #4
 800327e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003280:	2307      	movs	r3, #7
 8003282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003284:	f107 0320 	add.w	r3, r7, #32
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fdbd 	bl	8003e08 <HAL_RCC_OscConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003294:	f000 f954 	bl	8003540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003298:	230f      	movs	r3, #15
 800329a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800329c:	2302      	movs	r3, #2
 800329e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 f81e 	bl	80042f8 <HAL_RCC_ClockConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80032c2:	f000 f93d 	bl	8003540 <Error_Handler>
  }
}
 80032c6:	bf00      	nop
 80032c8:	3750      	adds	r7, #80	@ 0x50
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000

080032d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 80032de:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <MX_USART2_UART_Init+0x50>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 80032e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032fc:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800330e:	4805      	ldr	r0, [pc, #20]	@ (8003324 <MX_USART2_UART_Init+0x4c>)
 8003310:	f001 fce6 	bl	8004ce0 <HAL_UART_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800331a:	f000 f911 	bl	8003540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20012e24 	.word	0x20012e24
 8003328:	40004400 	.word	0x40004400

0800332c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	@ 0x28
 8003330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4b3c      	ldr	r3, [pc, #240]	@ (8003438 <MX_GPIO_Init+0x10c>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a3b      	ldr	r2, [pc, #236]	@ (8003438 <MX_GPIO_Init+0x10c>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <MX_GPIO_Init+0x10c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b35      	ldr	r3, [pc, #212]	@ (8003438 <MX_GPIO_Init+0x10c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a34      	ldr	r2, [pc, #208]	@ (8003438 <MX_GPIO_Init+0x10c>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <MX_GPIO_Init+0x10c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b2e      	ldr	r3, [pc, #184]	@ (8003438 <MX_GPIO_Init+0x10c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a2d      	ldr	r2, [pc, #180]	@ (8003438 <MX_GPIO_Init+0x10c>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <MX_GPIO_Init+0x10c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <MX_GPIO_Init+0x10c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	4a26      	ldr	r2, [pc, #152]	@ (8003438 <MX_GPIO_Init+0x10c>)
 80033a0:	f043 0304 	orr.w	r3, r3, #4
 80033a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a6:	4b24      	ldr	r3, [pc, #144]	@ (8003438 <MX_GPIO_Init+0x10c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80033b8:	4820      	ldr	r0, [pc, #128]	@ (800343c <MX_GPIO_Init+0x110>)
 80033ba:	f000 fd0b 	bl	8003dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033be:	2301      	movs	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	481b      	ldr	r0, [pc, #108]	@ (8003440 <MX_GPIO_Init+0x114>)
 80033d4:	f000 fb62 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80033d8:	2304      	movs	r3, #4
 80033da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	4816      	ldr	r0, [pc, #88]	@ (8003444 <MX_GPIO_Init+0x118>)
 80033ec:	f000 fb56 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80033f0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80033f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	480c      	ldr	r0, [pc, #48]	@ (800343c <MX_GPIO_Init+0x110>)
 800340a:	f000 fb47 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800341e:	2306      	movs	r3, #6
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	4807      	ldr	r0, [pc, #28]	@ (8003448 <MX_GPIO_Init+0x11c>)
 800342a:	f000 fb37 	bl	8003a9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800342e:	bf00      	nop
 8003430:	3728      	adds	r7, #40	@ 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	40020c00 	.word	0x40020c00
 8003440:	40020000 	.word	0x40020000
 8003444:	40020400 	.word	0x40020400
 8003448:	40020800 	.word	0x40020800

0800344c <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	e00b      	b.n	8003474 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	18d1      	adds	r1, r2, r3
 8003462:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003466:	2201      	movs	r2, #1
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f001 fc89 	bl	8004d80 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3301      	adds	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ed      	bne.n	800345c <UART2_Print_Text+0x10>
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <pvTimerCallback>:

static void pvTimerCallback( TimerHandle_t xTimer )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af02      	add	r7, sp, #8
 8003492:	6078      	str	r0, [r7, #4]
     The ID is a void pointer, so is cast to a uint32_t.
     
     note: since the timer IDs were set to NULL by default (when the timers were created via xTimerCreate()),
           the first time pvTimerGetTimerID() is called (for each timer) will assign a value of zero to
           ulExecutionCount since the timer IDs will return NULL (i.e. 0 when cast to integer) */
  ulExecutionCount = ( uint32_t ) pvTimerGetTimerID( xTimer ); /*  */
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff f92d 	bl	80026f4 <pvTimerGetTimerID>
 800349a:	4603      	mov	r3, r0
 800349c:	60fb      	str	r3, [r7, #12]
  ulExecutionCount++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3301      	adds	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
  vTimerSetTimerID( xTimer, ( void * ) ulExecutionCount );
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff f944 	bl	8002736 <vTimerSetTimerID>

  /* obtain the current tick count */
  xTimeNow = xTaskGetTickCount();
 80034ae:	f7fe f88f 	bl	80015d0 <xTaskGetTickCount>
 80034b2:	60b8      	str	r0, [r7, #8]

  /* The handle of the one-shot timer was stored in xOneShotTimer when the timer was created.
     Compare the handle passed into this function with xOneShotTimer to determine if it was the
     one-shot or auto-reload timer that expired, then output a string to show the time at which
     the callback was executed */
  if ( xTimer == xOneShotTimer )
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <pvTimerCallback+0x7c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d10a      	bne.n	80034d4 <pvTimerCallback+0x48>
  {
    ( void ) snprintf( ucOutputString, STRING_SIZE, "One-shot timer callback executing %lu\n\r", xTimeNow );
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4a12      	ldr	r2, [pc, #72]	@ (800350c <pvTimerCallback+0x80>)
 80034c2:	2132      	movs	r1, #50	@ 0x32
 80034c4:	4812      	ldr	r0, [pc, #72]	@ (8003510 <pvTimerCallback+0x84>)
 80034c6:	f002 f817 	bl	80054f8 <sniprintf>
    UART2_Print_Text( &huart2, ( const char * ) ucOutputString );
 80034ca:	4911      	ldr	r1, [pc, #68]	@ (8003510 <pvTimerCallback+0x84>)
 80034cc:	4811      	ldr	r0, [pc, #68]	@ (8003514 <pvTimerCallback+0x88>)
 80034ce:	f7ff ffbd 	bl	800344c <UART2_Print_Text>
         so must not call any function that might place the daemon task into the
         Blocked state. Therefore a block time of 0 is used */
      xTimerStop( xTimer, 0 );
    }
  }
}
 80034d2:	e014      	b.n	80034fe <pvTimerCallback+0x72>
    ( void ) snprintf( ucOutputString, STRING_SIZE, "Auto-reload timer callback executing %lu\n\r", xTimeNow );
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a10      	ldr	r2, [pc, #64]	@ (8003518 <pvTimerCallback+0x8c>)
 80034d8:	2132      	movs	r1, #50	@ 0x32
 80034da:	480d      	ldr	r0, [pc, #52]	@ (8003510 <pvTimerCallback+0x84>)
 80034dc:	f002 f80c 	bl	80054f8 <sniprintf>
    UART2_Print_Text( &huart2, ( const char * ) ucOutputString );
 80034e0:	490b      	ldr	r1, [pc, #44]	@ (8003510 <pvTimerCallback+0x84>)
 80034e2:	480c      	ldr	r0, [pc, #48]	@ (8003514 <pvTimerCallback+0x88>)
 80034e4:	f7ff ffb2 	bl	800344c <UART2_Print_Text>
    if ( ulExecutionCount == 5 )
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d107      	bne.n	80034fe <pvTimerCallback+0x72>
      xTimerStop( xTimer, 0 );
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	2200      	movs	r2, #0
 80034f6:	2103      	movs	r1, #3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7fe fe49 	bl	8002190 <xTimerGenericCommandFromTask>
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20012ea4 	.word	0x20012ea4
 800350c:	08005ea4 	.word	0x08005ea4
 8003510:	20012e6c 	.word	0x20012e6c
 8003514:	20012e24 	.word	0x20012e24
 8003518:	08005ecc 	.word	0x08005ecc

0800351c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a04      	ldr	r2, [pc, #16]	@ (800353c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800352e:	f000 f9b3 	bl	8003898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40001000 	.word	0x40001000

08003540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003544:	b672      	cpsid	i
}
 8003546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <Error_Handler+0x8>

0800354c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <HAL_MspInit+0x4c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	4a0f      	ldr	r2, [pc, #60]	@ (8003598 <HAL_MspInit+0x4c>)
 800355c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003560:	6453      	str	r3, [r2, #68]	@ 0x44
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <HAL_MspInit+0x4c>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_MspInit+0x4c>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <HAL_MspInit+0x4c>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	@ 0x40
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_MspInit+0x4c>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	@ 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a19      	ldr	r2, [pc, #100]	@ (8003620 <HAL_UART_MspInit+0x84>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d12b      	bne.n	8003616 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <HAL_UART_MspInit+0x88>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a17      	ldr	r2, [pc, #92]	@ (8003624 <HAL_UART_MspInit+0x88>)
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b15      	ldr	r3, [pc, #84]	@ (8003624 <HAL_UART_MspInit+0x88>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <HAL_UART_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a10      	ldr	r2, [pc, #64]	@ (8003624 <HAL_UART_MspInit+0x88>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003624 <HAL_UART_MspInit+0x88>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035f6:	230c      	movs	r3, #12
 80035f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003606:	2307      	movs	r3, #7
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	4805      	ldr	r0, [pc, #20]	@ (8003628 <HAL_UART_MspInit+0x8c>)
 8003612:	f000 fa43 	bl	8003a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003616:	bf00      	nop
 8003618:	3728      	adds	r7, #40	@ 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40004400 	.word	0x40004400
 8003624:	40023800 	.word	0x40023800
 8003628:	40020000 	.word	0x40020000

0800362c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	@ 0x38
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	4b33      	ldr	r3, [pc, #204]	@ (8003710 <HAL_InitTick+0xe4>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	4a32      	ldr	r2, [pc, #200]	@ (8003710 <HAL_InitTick+0xe4>)
 8003646:	f043 0310 	orr.w	r3, r3, #16
 800364a:	6413      	str	r3, [r2, #64]	@ 0x40
 800364c:	4b30      	ldr	r3, [pc, #192]	@ (8003710 <HAL_InitTick+0xe4>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003658:	f107 0210 	add.w	r2, r7, #16
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f868 	bl	8004738 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003672:	f001 f839 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8003676:	6378      	str	r0, [r7, #52]	@ 0x34
 8003678:	e004      	b.n	8003684 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800367a:	f001 f835 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 800367e:	4603      	mov	r3, r0
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003686:	4a23      	ldr	r2, [pc, #140]	@ (8003714 <HAL_InitTick+0xe8>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0c9b      	lsrs	r3, r3, #18
 800368e:	3b01      	subs	r3, #1
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003692:	4b21      	ldr	r3, [pc, #132]	@ (8003718 <HAL_InitTick+0xec>)
 8003694:	4a21      	ldr	r2, [pc, #132]	@ (800371c <HAL_InitTick+0xf0>)
 8003696:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003698:	4b1f      	ldr	r3, [pc, #124]	@ (8003718 <HAL_InitTick+0xec>)
 800369a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800369e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <HAL_InitTick+0xec>)
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003718 <HAL_InitTick+0xec>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <HAL_InitTick+0xec>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b2:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <HAL_InitTick+0xec>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036b8:	4817      	ldr	r0, [pc, #92]	@ (8003718 <HAL_InitTick+0xec>)
 80036ba:	f001 f86f 	bl	800479c <HAL_TIM_Base_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80036c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11b      	bne.n	8003704 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036cc:	4812      	ldr	r0, [pc, #72]	@ (8003718 <HAL_InitTick+0xec>)
 80036ce:	f001 f8bf 	bl	8004850 <HAL_TIM_Base_Start_IT>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80036d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d111      	bne.n	8003704 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036e0:	2036      	movs	r0, #54	@ 0x36
 80036e2:	f000 f9cd 	bl	8003a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d808      	bhi.n	80036fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80036ec:	2200      	movs	r2, #0
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	2036      	movs	r0, #54	@ 0x36
 80036f2:	f000 f9a9 	bl	8003a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003720 <HAL_InitTick+0xf4>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	e002      	b.n	8003704 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003704:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003708:	4618      	mov	r0, r3
 800370a:	3738      	adds	r7, #56	@ 0x38
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	431bde83 	.word	0x431bde83
 8003718:	20012eb0 	.word	0x20012eb0
 800371c:	40001000 	.word	0x40001000
 8003720:	2000000c 	.word	0x2000000c

08003724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <NMI_Handler+0x4>

0800372c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <HardFault_Handler+0x4>

08003734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <MemManage_Handler+0x4>

0800373c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003740:	bf00      	nop
 8003742:	e7fd      	b.n	8003740 <BusFault_Handler+0x4>

08003744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <UsageFault_Handler+0x4>

0800374c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003760:	4802      	ldr	r0, [pc, #8]	@ (800376c <TIM6_DAC_IRQHandler+0x10>)
 8003762:	f001 f8e5 	bl	8004930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20012eb0 	.word	0x20012eb0

08003770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003778:	4a14      	ldr	r2, [pc, #80]	@ (80037cc <_sbrk+0x5c>)
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <_sbrk+0x60>)
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <_sbrk+0x64>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800378c:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <_sbrk+0x64>)
 800378e:	4a12      	ldr	r2, [pc, #72]	@ (80037d8 <_sbrk+0x68>)
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037a0:	f001 fee6 	bl	8005570 <__errno>
 80037a4:	4603      	mov	r3, r0
 80037a6:	220c      	movs	r2, #12
 80037a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e009      	b.n	80037c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037b0:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <_sbrk+0x64>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037b6:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <_sbrk+0x64>)
 80037c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20020000 	.word	0x20020000
 80037d0:	00000400 	.word	0x00000400
 80037d4:	20012ef8 	.word	0x20012ef8
 80037d8:	20013048 	.word	0x20013048

080037dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <SystemInit+0x20>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <SystemInit+0x20>)
 80037e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003800:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003838 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003804:	f7ff ffea 	bl	80037dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003808:	480c      	ldr	r0, [pc, #48]	@ (800383c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800380a:	490d      	ldr	r1, [pc, #52]	@ (8003840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800380c:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800380e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003810:	e002      	b.n	8003818 <LoopCopyDataInit>

08003812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003816:	3304      	adds	r3, #4

08003818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800381a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800381c:	d3f9      	bcc.n	8003812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800381e:	4a0a      	ldr	r2, [pc, #40]	@ (8003848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003820:	4c0a      	ldr	r4, [pc, #40]	@ (800384c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003824:	e001      	b.n	800382a <LoopFillZerobss>

08003826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003828:	3204      	adds	r2, #4

0800382a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800382a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800382c:	d3fb      	bcc.n	8003826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800382e:	f001 fea5 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003832:	f7ff fc83 	bl	800313c <main>
  bx  lr    
 8003836:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800383c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003840:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003844:	08005f54 	.word	0x08005f54
  ldr r2, =_sbss
 8003848:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800384c:	20013048 	.word	0x20013048

08003850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003850:	e7fe      	b.n	8003850 <ADC_IRQHandler>
	...

08003854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003858:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <HAL_Init+0x40>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <HAL_Init+0x40>)
 800385e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003864:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <HAL_Init+0x40>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <HAL_Init+0x40>)
 800386a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800386e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <HAL_Init+0x40>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a07      	ldr	r2, [pc, #28]	@ (8003894 <HAL_Init+0x40>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800387a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800387c:	2003      	movs	r0, #3
 800387e:	f000 f8d8 	bl	8003a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003882:	2000      	movs	r0, #0
 8003884:	f7ff fed2 	bl	800362c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003888:	f7ff fe60 	bl	800354c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023c00 	.word	0x40023c00

08003898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_IncTick+0x20>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_IncTick+0x24>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	4a04      	ldr	r2, [pc, #16]	@ (80038bc <HAL_IncTick+0x24>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000010 	.word	0x20000010
 80038bc:	20012efc 	.word	0x20012efc

080038c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return uwTick;
 80038c4:	4b03      	ldr	r3, [pc, #12]	@ (80038d4 <HAL_GetTick+0x14>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20012efc 	.word	0x20012efc

080038d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e8:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <__NVIC_SetPriorityGrouping+0x44>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038f4:	4013      	ands	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800390a:	4a04      	ldr	r2, [pc, #16]	@ (800391c <__NVIC_SetPriorityGrouping+0x44>)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	60d3      	str	r3, [r2, #12]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003924:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <__NVIC_GetPriorityGrouping+0x18>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	f003 0307 	and.w	r3, r3, #7
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	2b00      	cmp	r3, #0
 800394c:	db0b      	blt.n	8003966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	f003 021f 	and.w	r2, r3, #31
 8003954:	4907      	ldr	r1, [pc, #28]	@ (8003974 <__NVIC_EnableIRQ+0x38>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2001      	movs	r0, #1
 800395e:	fa00 f202 	lsl.w	r2, r0, r2
 8003962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000e100 	.word	0xe000e100

08003978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	6039      	str	r1, [r7, #0]
 8003982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003988:	2b00      	cmp	r3, #0
 800398a:	db0a      	blt.n	80039a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	490c      	ldr	r1, [pc, #48]	@ (80039c4 <__NVIC_SetPriority+0x4c>)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	0112      	lsls	r2, r2, #4
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	440b      	add	r3, r1
 800399c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a0:	e00a      	b.n	80039b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4908      	ldr	r1, [pc, #32]	@ (80039c8 <__NVIC_SetPriority+0x50>)
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	3b04      	subs	r3, #4
 80039b0:	0112      	lsls	r2, r2, #4
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	440b      	add	r3, r1
 80039b6:	761a      	strb	r2, [r3, #24]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000e100 	.word	0xe000e100
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	@ 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f1c3 0307 	rsb	r3, r3, #7
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	bf28      	it	cs
 80039ea:	2304      	movcs	r3, #4
 80039ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d902      	bls.n	80039fc <NVIC_EncodePriority+0x30>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3b03      	subs	r3, #3
 80039fa:	e000      	b.n	80039fe <NVIC_EncodePriority+0x32>
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	401a      	ands	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a14:	f04f 31ff 	mov.w	r1, #4294967295
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	43d9      	mvns	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	4313      	orrs	r3, r2
         );
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3724      	adds	r7, #36	@ 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff4c 	bl	80038d8 <__NVIC_SetPriorityGrouping>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5a:	f7ff ff61 	bl	8003920 <__NVIC_GetPriorityGrouping>
 8003a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f7ff ffb1 	bl	80039cc <NVIC_EncodePriority>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff80 	bl	8003978 <__NVIC_SetPriority>
}
 8003a78:	bf00      	nop
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ff54 	bl	800393c <__NVIC_EnableIRQ>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	@ 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	e16b      	b.n	8003d90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ab8:	2201      	movs	r2, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f040 815a 	bne.w	8003d8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d005      	beq.n	8003aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d130      	bne.n	8003b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b24:	2201      	movs	r2, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 0201 	and.w	r2, r3, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d017      	beq.n	8003b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d123      	bne.n	8003be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	08da      	lsrs	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3208      	adds	r2, #8
 8003ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	220f      	movs	r2, #15
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	08da      	lsrs	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	2203      	movs	r2, #3
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0203 	and.w	r2, r3, #3
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80b4 	beq.w	8003d8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b60      	ldr	r3, [pc, #384]	@ (8003da8 <HAL_GPIO_Init+0x30c>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003da8 <HAL_GPIO_Init+0x30c>)
 8003c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c32:	4b5d      	ldr	r3, [pc, #372]	@ (8003da8 <HAL_GPIO_Init+0x30c>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8003dac <HAL_GPIO_Init+0x310>)
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	3302      	adds	r3, #2
 8003c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	220f      	movs	r2, #15
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a52      	ldr	r2, [pc, #328]	@ (8003db0 <HAL_GPIO_Init+0x314>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d02b      	beq.n	8003cc2 <HAL_GPIO_Init+0x226>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a51      	ldr	r2, [pc, #324]	@ (8003db4 <HAL_GPIO_Init+0x318>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d025      	beq.n	8003cbe <HAL_GPIO_Init+0x222>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a50      	ldr	r2, [pc, #320]	@ (8003db8 <HAL_GPIO_Init+0x31c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01f      	beq.n	8003cba <HAL_GPIO_Init+0x21e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003dbc <HAL_GPIO_Init+0x320>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d019      	beq.n	8003cb6 <HAL_GPIO_Init+0x21a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a4e      	ldr	r2, [pc, #312]	@ (8003dc0 <HAL_GPIO_Init+0x324>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_GPIO_Init+0x216>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003dc4 <HAL_GPIO_Init+0x328>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00d      	beq.n	8003cae <HAL_GPIO_Init+0x212>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc8 <HAL_GPIO_Init+0x32c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <HAL_GPIO_Init+0x20e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003dcc <HAL_GPIO_Init+0x330>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_GPIO_Init+0x20a>
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	e00e      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	e00c      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003caa:	2306      	movs	r3, #6
 8003cac:	e00a      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003cae:	2305      	movs	r3, #5
 8003cb0:	e008      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e004      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_GPIO_Init+0x228>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f002 0203 	and.w	r2, r2, #3
 8003cca:	0092      	lsls	r2, r2, #2
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd4:	4935      	ldr	r1, [pc, #212]	@ (8003dac <HAL_GPIO_Init+0x310>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d06:	4a32      	ldr	r2, [pc, #200]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d0c:	4b30      	ldr	r3, [pc, #192]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d30:	4a27      	ldr	r2, [pc, #156]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d36:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d60:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d84:	4a12      	ldr	r2, [pc, #72]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	f67f ae90 	bls.w	8003ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3724      	adds	r7, #36	@ 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40020000 	.word	0x40020000
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40021400 	.word	0x40021400
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	40021c00 	.word	0x40021c00
 8003dd0:	40013c00 	.word	0x40013c00

08003dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
 8003de0:	4613      	mov	r3, r2
 8003de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de4:	787b      	ldrb	r3, [r7, #1]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003df0:	e003      	b.n	8003dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003df2:	887b      	ldrh	r3, [r7, #2]
 8003df4:	041a      	lsls	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	619a      	str	r2, [r3, #24]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e267      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d075      	beq.n	8003f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e26:	4b88      	ldr	r3, [pc, #544]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d00c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	4b85      	ldr	r3, [pc, #532]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d112      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3e:	4b82      	ldr	r3, [pc, #520]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x108>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d157      	bne.n	8003f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e242      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x74>
 8003e6e:	4b76      	ldr	r3, [pc, #472]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a75      	ldr	r2, [pc, #468]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e01d      	b.n	8003eb8 <HAL_RCC_OscConfig+0xb0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x98>
 8003e86:	4b70      	ldr	r3, [pc, #448]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b6d      	ldr	r3, [pc, #436]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6c      	ldr	r2, [pc, #432]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0xb0>
 8003ea0:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a68      	ldr	r2, [pc, #416]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b66      	ldr	r3, [pc, #408]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a65      	ldr	r2, [pc, #404]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7ff fcfe 	bl	80038c0 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7ff fcfa 	bl	80038c0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e207      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b5b      	ldr	r3, [pc, #364]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xc0>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7ff fcea 	bl	80038c0 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7ff fce6 	bl	80038c0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	@ 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e1f3      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	4b51      	ldr	r3, [pc, #324]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xe8>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d063      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2a:	4b47      	ldr	r3, [pc, #284]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d11c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f36:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d116      	bne.n	8003f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	4b41      	ldr	r3, [pc, #260]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCC_OscConfig+0x152>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e1c7      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4937      	ldr	r1, [pc, #220]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6e:	e03a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f78:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCC_OscConfig+0x244>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7ff fc9f 	bl	80038c0 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f86:	f7ff fc9b 	bl	80038c0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1a8      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4925      	ldr	r1, [pc, #148]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fba:	4b24      	ldr	r3, [pc, #144]	@ (800404c <HAL_RCC_OscConfig+0x244>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7ff fc7e 	bl	80038c0 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc8:	f7ff fc7a 	bl	80038c0 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e187      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fda:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d036      	beq.n	8004060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <HAL_RCC_OscConfig+0x248>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7ff fc5e 	bl	80038c0 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004008:	f7ff fc5a 	bl	80038c0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e167      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401a:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 800401c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x200>
 8004026:	e01b      	b.n	8004060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004028:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_RCC_OscConfig+0x248>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7ff fc47 	bl	80038c0 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	e00e      	b.n	8004054 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004036:	f7ff fc43 	bl	80038c0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d907      	bls.n	8004054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e150      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	4b88      	ldr	r3, [pc, #544]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ea      	bne.n	8004036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8097 	beq.w	800419c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004072:	4b81      	ldr	r3, [pc, #516]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	4b7d      	ldr	r3, [pc, #500]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	4a7c      	ldr	r2, [pc, #496]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800408c:	6413      	str	r3, [r2, #64]	@ 0x40
 800408e:	4b7a      	ldr	r3, [pc, #488]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b77      	ldr	r3, [pc, #476]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d118      	bne.n	80040dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040aa:	4b74      	ldr	r3, [pc, #464]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a73      	ldr	r2, [pc, #460]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b6:	f7ff fc03 	bl	80038c0 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7ff fbff 	bl	80038c0 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e10c      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	4b6a      	ldr	r3, [pc, #424]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2ea>
 80040e4:	4b64      	ldr	r3, [pc, #400]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e8:	4a63      	ldr	r2, [pc, #396]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f0:	e01c      	b.n	800412c <HAL_RCC_OscConfig+0x324>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x30c>
 80040fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	6713      	str	r3, [r2, #112]	@ 0x70
 8004106:	4b5c      	ldr	r3, [pc, #368]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410a:	4a5b      	ldr	r2, [pc, #364]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6713      	str	r3, [r2, #112]	@ 0x70
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0x324>
 8004114:	4b58      	ldr	r3, [pc, #352]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004118:	4a57      	ldr	r2, [pc, #348]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004120:	4b55      	ldr	r3, [pc, #340]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004124:	4a54      	ldr	r2, [pc, #336]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004126:	f023 0304 	bic.w	r3, r3, #4
 800412a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d015      	beq.n	8004160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7ff fbc4 	bl	80038c0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7ff fbc0 	bl	80038c0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0cb      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	4b49      	ldr	r3, [pc, #292]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0ee      	beq.n	800413c <HAL_RCC_OscConfig+0x334>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004160:	f7ff fbae 	bl	80038c0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004166:	e00a      	b.n	800417e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7ff fbaa 	bl	80038c0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0b5      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417e:	4b3e      	ldr	r3, [pc, #248]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1ee      	bne.n	8004168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004190:	4b39      	ldr	r3, [pc, #228]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	4a38      	ldr	r2, [pc, #224]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a1 	beq.w	80042e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a6:	4b34      	ldr	r3, [pc, #208]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d05c      	beq.n	800426c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d141      	bne.n	800423e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <HAL_RCC_OscConfig+0x478>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7ff fb7e 	bl	80038c0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c8:	f7ff fb7a 	bl	80038c0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e087      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	019b      	lsls	r3, r3, #6
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	491b      	ldr	r1, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004210:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <HAL_RCC_OscConfig+0x478>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7ff fb53 	bl	80038c0 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421e:	f7ff fb4f 	bl	80038c0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e05c      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x416>
 800423c:	e054      	b.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <HAL_RCC_OscConfig+0x478>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7ff fb3c 	bl	80038c0 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424c:	f7ff fb38 	bl	80038c0 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e045      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x444>
 800426a:	e03d      	b.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e038      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
 8004278:	40023800 	.word	0x40023800
 800427c:	40007000 	.word	0x40007000
 8004280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004284:	4b1b      	ldr	r3, [pc, #108]	@ (80042f4 <HAL_RCC_OscConfig+0x4ec>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d028      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d121      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d11a      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042bc:	4293      	cmp	r3, r2
 80042be:	d111      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	3b01      	subs	r3, #1
 80042ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800

080042f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0cc      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b68      	ldr	r3, [pc, #416]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d90c      	bls.n	8004334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b65      	ldr	r3, [pc, #404]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b63      	ldr	r3, [pc, #396]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b8      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434c:	4b59      	ldr	r3, [pc, #356]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a58      	ldr	r2, [pc, #352]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004364:	4b53      	ldr	r3, [pc, #332]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a52      	ldr	r2, [pc, #328]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800436e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b50      	ldr	r3, [pc, #320]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	494d      	ldr	r1, [pc, #308]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d044      	beq.n	8004418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b47      	ldr	r3, [pc, #284]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d119      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b3f      	ldr	r3, [pc, #252]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3b      	ldr	r3, [pc, #236]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e067      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4934      	ldr	r1, [pc, #208]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e8:	f7ff fa6a 	bl	80038c0 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7ff fa66 	bl	80038c0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e04f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20c      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b22      	ldr	r3, [pc, #136]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b20      	ldr	r3, [pc, #128]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e032      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4916      	ldr	r1, [pc, #88]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446a:	4b12      	ldr	r3, [pc, #72]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490e      	ldr	r1, [pc, #56]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447e:	f000 f821 	bl	80044c4 <HAL_RCC_GetSysClockFreq>
 8004482:	4602      	mov	r2, r0
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	490a      	ldr	r1, [pc, #40]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	fa22 f303 	lsr.w	r3, r2, r3
 8004496:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff f8c4 	bl	800362c <HAL_InitTick>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023c00 	.word	0x40023c00
 80044b4:	40023800 	.word	0x40023800
 80044b8:	08005ef8 	.word	0x08005ef8
 80044bc:	20000008 	.word	0x20000008
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b094      	sub	sp, #80	@ 0x50
 80044ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d0:	2300      	movs	r3, #0
 80044d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044dc:	4b79      	ldr	r3, [pc, #484]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d00d      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x40>
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	f200 80e1 	bhi.w	80046b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x34>
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x3a>
 80044f6:	e0db      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b73      	ldr	r3, [pc, #460]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80044fc:	e0db      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044fe:	4b73      	ldr	r3, [pc, #460]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004500:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004502:	e0d8      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004504:	4b6f      	ldr	r3, [pc, #444]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800450c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800450e:	4b6d      	ldr	r3, [pc, #436]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d063      	beq.n	80045e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451a:	4b6a      	ldr	r3, [pc, #424]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	099b      	lsrs	r3, r3, #6
 8004520:	2200      	movs	r2, #0
 8004522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004524:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452c:	633b      	str	r3, [r7, #48]	@ 0x30
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004536:	4622      	mov	r2, r4
 8004538:	462b      	mov	r3, r5
 800453a:	f04f 0000 	mov.w	r0, #0
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	0159      	lsls	r1, r3, #5
 8004544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004548:	0150      	lsls	r0, r2, #5
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4621      	mov	r1, r4
 8004550:	1a51      	subs	r1, r2, r1
 8004552:	6139      	str	r1, [r7, #16]
 8004554:	4629      	mov	r1, r5
 8004556:	eb63 0301 	sbc.w	r3, r3, r1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004568:	4659      	mov	r1, fp
 800456a:	018b      	lsls	r3, r1, #6
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004572:	4651      	mov	r1, sl
 8004574:	018a      	lsls	r2, r1, #6
 8004576:	4651      	mov	r1, sl
 8004578:	ebb2 0801 	subs.w	r8, r2, r1
 800457c:	4659      	mov	r1, fp
 800457e:	eb63 0901 	sbc.w	r9, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004596:	4690      	mov	r8, r2
 8004598:	4699      	mov	r9, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb18 0303 	adds.w	r3, r8, r3
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	462b      	mov	r3, r5
 80045a4:	eb49 0303 	adc.w	r3, r9, r3
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045b6:	4629      	mov	r1, r5
 80045b8:	024b      	lsls	r3, r1, #9
 80045ba:	4621      	mov	r1, r4
 80045bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045c0:	4621      	mov	r1, r4
 80045c2:	024a      	lsls	r2, r1, #9
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ca:	2200      	movs	r2, #0
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d4:	f7fb fe4c 	bl	8000270 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e0:	e058      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b38      	ldr	r3, [pc, #224]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	4611      	mov	r1, r2
 80045ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045f2:	623b      	str	r3, [r7, #32]
 80045f4:	2300      	movs	r3, #0
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	f04f 0000 	mov.w	r0, #0
 8004604:	f04f 0100 	mov.w	r1, #0
 8004608:	0159      	lsls	r1, r3, #5
 800460a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800460e:	0150      	lsls	r0, r2, #5
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4641      	mov	r1, r8
 8004616:	ebb2 0a01 	subs.w	sl, r2, r1
 800461a:	4649      	mov	r1, r9
 800461c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800462c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004634:	ebb2 040a 	subs.w	r4, r2, sl
 8004638:	eb63 050b 	sbc.w	r5, r3, fp
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4614      	mov	r4, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4643      	mov	r3, r8
 8004652:	18e3      	adds	r3, r4, r3
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	464b      	mov	r3, r9
 8004658:	eb45 0303 	adc.w	r3, r5, r3
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466a:	4629      	mov	r1, r5
 800466c:	028b      	lsls	r3, r1, #10
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004674:	4621      	mov	r1, r4
 8004676:	028a      	lsls	r2, r1, #10
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	61fa      	str	r2, [r7, #28]
 8004684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004688:	f7fb fdf2 	bl	8000270 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80046a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3750      	adds	r7, #80	@ 0x50
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000008 	.word	0x20000008

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	08005f08 	.word	0x08005f08

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffdc 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0b5b      	lsrs	r3, r3, #13
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	08005f08 	.word	0x08005f08

08004738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	220f      	movs	r2, #15
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004748:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800476c:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <HAL_RCC_GetClockConfig+0x60>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40023c00 	.word	0x40023c00

0800479c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e041      	b.n	8004832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f839 	bl	800483a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 f9c0 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d001      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e04e      	b.n	8004906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	@ (8004914 <HAL_TIM_Base_Start_IT+0xc4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d022      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x80>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004892:	d01d      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x80>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1f      	ldr	r2, [pc, #124]	@ (8004918 <HAL_TIM_Base_Start_IT+0xc8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d018      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x80>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1e      	ldr	r2, [pc, #120]	@ (800491c <HAL_TIM_Base_Start_IT+0xcc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x80>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004920 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x80>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004924 <HAL_TIM_Base_Start_IT+0xd4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x80>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a19      	ldr	r2, [pc, #100]	@ (8004928 <HAL_TIM_Base_Start_IT+0xd8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x80>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a18      	ldr	r2, [pc, #96]	@ (800492c <HAL_TIM_Base_Start_IT+0xdc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d111      	bne.n	80048f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d010      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	e007      	b.n	8004904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40010400 	.word	0x40010400
 8004928:	40014000 	.word	0x40014000
 800492c:	40001800 	.word	0x40001800

08004930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0202 	mvn.w	r2, #2
 8004964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8d2 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8c4 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8d5 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d020      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0204 	mvn.w	r2, #4
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8ac 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f89e 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f8af 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0208 	mvn.w	r2, #8
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f886 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f878 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f889 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d020      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f860 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f852 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f863 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0201 	mvn.w	r2, #1
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fe fd40 	bl	800351c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f906 	bl	8004ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f834 	bl	8004b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0220 	mvn.w	r2, #32
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8d8 	bl	8004cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a46      	ldr	r2, [pc, #280]	@ (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a43      	ldr	r2, [pc, #268]	@ (8004c90 <TIM_Base_SetConfig+0x130>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a42      	ldr	r2, [pc, #264]	@ (8004c94 <TIM_Base_SetConfig+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a41      	ldr	r2, [pc, #260]	@ (8004c98 <TIM_Base_SetConfig+0x138>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a40      	ldr	r2, [pc, #256]	@ (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a35      	ldr	r2, [pc, #212]	@ (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d02b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc0:	d027      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a32      	ldr	r2, [pc, #200]	@ (8004c90 <TIM_Base_SetConfig+0x130>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d023      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a31      	ldr	r2, [pc, #196]	@ (8004c94 <TIM_Base_SetConfig+0x134>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01f      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a30      	ldr	r2, [pc, #192]	@ (8004c98 <TIM_Base_SetConfig+0x138>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d017      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca0 <TIM_Base_SetConfig+0x140>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca4 <TIM_Base_SetConfig+0x144>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00f      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca8 <TIM_Base_SetConfig+0x148>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004cac <TIM_Base_SetConfig+0x14c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb0 <TIM_Base_SetConfig+0x150>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a29      	ldr	r2, [pc, #164]	@ (8004cb4 <TIM_Base_SetConfig+0x154>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a10      	ldr	r2, [pc, #64]	@ (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d103      	bne.n	8004c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]
  }
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40010400 	.word	0x40010400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800
 8004cac:	40001800 	.word	0x40001800
 8004cb0:	40001c00 	.word	0x40001c00
 8004cb4:	40002000 	.word	0x40002000

08004cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e042      	b.n	8004d78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fe fc48 	bl	800359c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	@ 0x24
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f973 	bl	8005010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	@ 0x28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d175      	bne.n	8004e8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Transmit+0x2c>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e06e      	b.n	8004e8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2221      	movs	r2, #33	@ 0x21
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dbe:	f7fe fd7f 	bl	80038c0 <HAL_GetTick>
 8004dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	88fa      	ldrh	r2, [r7, #6]
 8004dce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd8:	d108      	bne.n	8004dec <HAL_UART_Transmit+0x6c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	e003      	b.n	8004df4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df4:	e02e      	b.n	8004e54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	@ 0x80
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f848 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e03a      	b.n	8004e8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3302      	adds	r3, #2
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e007      	b.n	8004e46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3301      	adds	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1cb      	bne.n	8004df6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	2140      	movs	r1, #64	@ 0x40
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f814 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e006      	b.n	8004e8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea6:	e03b      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d037      	beq.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb0:	f7fe fd06 	bl	80038c0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	6a3a      	ldr	r2, [r7, #32]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d302      	bcc.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e03a      	b.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d023      	beq.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b80      	cmp	r3, #128	@ 0x80
 8004edc:	d020      	beq.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b40      	cmp	r3, #64	@ 0x40
 8004ee2:	d01d      	beq.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d116      	bne.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f81d 	bl	8004f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2208      	movs	r2, #8
 8004f12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e00f      	b.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d0b4      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b095      	sub	sp, #84	@ 0x54
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f70:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d119      	bne.n	8004ff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe0:	61ba      	str	r2, [r7, #24]
 8004fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6979      	ldr	r1, [r7, #20]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	613b      	str	r3, [r7, #16]
   return(result);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e5      	bne.n	8004fc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005002:	bf00      	nop
 8005004:	3754      	adds	r7, #84	@ 0x54
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005014:	b0c0      	sub	sp, #256	@ 0x100
 8005016:	af00      	add	r7, sp, #0
 8005018:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	68d9      	ldr	r1, [r3, #12]
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	ea40 0301 	orr.w	r3, r0, r1
 8005038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	431a      	orrs	r2, r3
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	431a      	orrs	r2, r3
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005068:	f021 010c 	bic.w	r1, r1, #12
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005076:	430b      	orrs	r3, r1
 8005078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508a:	6999      	ldr	r1, [r3, #24]
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	ea40 0301 	orr.w	r3, r0, r1
 8005096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b8f      	ldr	r3, [pc, #572]	@ (80052dc <UART_SetConfig+0x2cc>)
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d005      	beq.n	80050b0 <UART_SetConfig+0xa0>
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b8d      	ldr	r3, [pc, #564]	@ (80052e0 <UART_SetConfig+0x2d0>)
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d104      	bne.n	80050ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7ff fb2e 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 80050b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050b8:	e003      	b.n	80050c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ba:	f7ff fb15 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 80050be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	f040 810c 	bne.w	80052e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050e2:	4622      	mov	r2, r4
 80050e4:	462b      	mov	r3, r5
 80050e6:	1891      	adds	r1, r2, r2
 80050e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ea:	415b      	adcs	r3, r3
 80050ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050f2:	4621      	mov	r1, r4
 80050f4:	eb12 0801 	adds.w	r8, r2, r1
 80050f8:	4629      	mov	r1, r5
 80050fa:	eb43 0901 	adc.w	r9, r3, r1
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800510e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005112:	4690      	mov	r8, r2
 8005114:	4699      	mov	r9, r3
 8005116:	4623      	mov	r3, r4
 8005118:	eb18 0303 	adds.w	r3, r8, r3
 800511c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005120:	462b      	mov	r3, r5
 8005122:	eb49 0303 	adc.w	r3, r9, r3
 8005126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800512a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005136:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800513a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800513e:	460b      	mov	r3, r1
 8005140:	18db      	adds	r3, r3, r3
 8005142:	653b      	str	r3, [r7, #80]	@ 0x50
 8005144:	4613      	mov	r3, r2
 8005146:	eb42 0303 	adc.w	r3, r2, r3
 800514a:	657b      	str	r3, [r7, #84]	@ 0x54
 800514c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005154:	f7fb f88c 	bl	8000270 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4b61      	ldr	r3, [pc, #388]	@ (80052e4 <UART_SetConfig+0x2d4>)
 800515e:	fba3 2302 	umull	r2, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	011c      	lsls	r4, r3, #4
 8005166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516a:	2200      	movs	r2, #0
 800516c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005170:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	1891      	adds	r1, r2, r2
 800517e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005180:	415b      	adcs	r3, r3
 8005182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005188:	4641      	mov	r1, r8
 800518a:	eb12 0a01 	adds.w	sl, r2, r1
 800518e:	4649      	mov	r1, r9
 8005190:	eb43 0b01 	adc.w	fp, r3, r1
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a8:	4692      	mov	sl, r2
 80051aa:	469b      	mov	fp, r3
 80051ac:	4643      	mov	r3, r8
 80051ae:	eb1a 0303 	adds.w	r3, sl, r3
 80051b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051b6:	464b      	mov	r3, r9
 80051b8:	eb4b 0303 	adc.w	r3, fp, r3
 80051bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051d4:	460b      	mov	r3, r1
 80051d6:	18db      	adds	r3, r3, r3
 80051d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051da:	4613      	mov	r3, r2
 80051dc:	eb42 0303 	adc.w	r3, r2, r3
 80051e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ea:	f7fb f841 	bl	8000270 <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	4b3b      	ldr	r3, [pc, #236]	@ (80052e4 <UART_SetConfig+0x2d4>)
 80051f6:	fba3 2301 	umull	r2, r3, r3, r1
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2264      	movs	r2, #100	@ 0x64
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	1acb      	subs	r3, r1, r3
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800520a:	4b36      	ldr	r3, [pc, #216]	@ (80052e4 <UART_SetConfig+0x2d4>)
 800520c:	fba3 2302 	umull	r2, r3, r3, r2
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005218:	441c      	add	r4, r3
 800521a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800521e:	2200      	movs	r2, #0
 8005220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005224:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800522c:	4642      	mov	r2, r8
 800522e:	464b      	mov	r3, r9
 8005230:	1891      	adds	r1, r2, r2
 8005232:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005234:	415b      	adcs	r3, r3
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800523c:	4641      	mov	r1, r8
 800523e:	1851      	adds	r1, r2, r1
 8005240:	6339      	str	r1, [r7, #48]	@ 0x30
 8005242:	4649      	mov	r1, r9
 8005244:	414b      	adcs	r3, r1
 8005246:	637b      	str	r3, [r7, #52]	@ 0x34
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005254:	4659      	mov	r1, fp
 8005256:	00cb      	lsls	r3, r1, #3
 8005258:	4651      	mov	r1, sl
 800525a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525e:	4651      	mov	r1, sl
 8005260:	00ca      	lsls	r2, r1, #3
 8005262:	4610      	mov	r0, r2
 8005264:	4619      	mov	r1, r3
 8005266:	4603      	mov	r3, r0
 8005268:	4642      	mov	r2, r8
 800526a:	189b      	adds	r3, r3, r2
 800526c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005270:	464b      	mov	r3, r9
 8005272:	460a      	mov	r2, r1
 8005274:	eb42 0303 	adc.w	r3, r2, r3
 8005278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005288:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800528c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005290:	460b      	mov	r3, r1
 8005292:	18db      	adds	r3, r3, r3
 8005294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005296:	4613      	mov	r3, r2
 8005298:	eb42 0303 	adc.w	r3, r2, r3
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800529e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052a6:	f7fa ffe3 	bl	8000270 <__aeabi_uldivmod>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <UART_SetConfig+0x2d4>)
 80052b0:	fba3 1302 	umull	r1, r3, r3, r2
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	2164      	movs	r1, #100	@ 0x64
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	3332      	adds	r3, #50	@ 0x32
 80052c2:	4a08      	ldr	r2, [pc, #32]	@ (80052e4 <UART_SetConfig+0x2d4>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	f003 0207 	and.w	r2, r3, #7
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4422      	add	r2, r4
 80052d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052d8:	e106      	b.n	80054e8 <UART_SetConfig+0x4d8>
 80052da:	bf00      	nop
 80052dc:	40011000 	.word	0x40011000
 80052e0:	40011400 	.word	0x40011400
 80052e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052fa:	4642      	mov	r2, r8
 80052fc:	464b      	mov	r3, r9
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	6239      	str	r1, [r7, #32]
 8005302:	415b      	adcs	r3, r3
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24
 8005306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800530a:	4641      	mov	r1, r8
 800530c:	1854      	adds	r4, r2, r1
 800530e:	4649      	mov	r1, r9
 8005310:	eb43 0501 	adc.w	r5, r3, r1
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	00eb      	lsls	r3, r5, #3
 800531e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005322:	00e2      	lsls	r2, r4, #3
 8005324:	4614      	mov	r4, r2
 8005326:	461d      	mov	r5, r3
 8005328:	4643      	mov	r3, r8
 800532a:	18e3      	adds	r3, r4, r3
 800532c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005330:	464b      	mov	r3, r9
 8005332:	eb45 0303 	adc.w	r3, r5, r3
 8005336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005346:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005356:	4629      	mov	r1, r5
 8005358:	008b      	lsls	r3, r1, #2
 800535a:	4621      	mov	r1, r4
 800535c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005360:	4621      	mov	r1, r4
 8005362:	008a      	lsls	r2, r1, #2
 8005364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005368:	f7fa ff82 	bl	8000270 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4b60      	ldr	r3, [pc, #384]	@ (80054f4 <UART_SetConfig+0x4e4>)
 8005372:	fba3 2302 	umull	r2, r3, r3, r2
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	011c      	lsls	r4, r3, #4
 800537a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800537e:	2200      	movs	r2, #0
 8005380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005384:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800538c:	4642      	mov	r2, r8
 800538e:	464b      	mov	r3, r9
 8005390:	1891      	adds	r1, r2, r2
 8005392:	61b9      	str	r1, [r7, #24]
 8005394:	415b      	adcs	r3, r3
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800539c:	4641      	mov	r1, r8
 800539e:	1851      	adds	r1, r2, r1
 80053a0:	6139      	str	r1, [r7, #16]
 80053a2:	4649      	mov	r1, r9
 80053a4:	414b      	adcs	r3, r1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b4:	4659      	mov	r1, fp
 80053b6:	00cb      	lsls	r3, r1, #3
 80053b8:	4651      	mov	r1, sl
 80053ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053be:	4651      	mov	r1, sl
 80053c0:	00ca      	lsls	r2, r1, #3
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	4642      	mov	r2, r8
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053d0:	464b      	mov	r3, r9
 80053d2:	460a      	mov	r2, r1
 80053d4:	eb42 0303 	adc.w	r3, r2, r3
 80053d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053f4:	4649      	mov	r1, r9
 80053f6:	008b      	lsls	r3, r1, #2
 80053f8:	4641      	mov	r1, r8
 80053fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053fe:	4641      	mov	r1, r8
 8005400:	008a      	lsls	r2, r1, #2
 8005402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005406:	f7fa ff33 	bl	8000270 <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4611      	mov	r1, r2
 8005410:	4b38      	ldr	r3, [pc, #224]	@ (80054f4 <UART_SetConfig+0x4e4>)
 8005412:	fba3 2301 	umull	r2, r3, r3, r1
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	2264      	movs	r2, #100	@ 0x64
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	1acb      	subs	r3, r1, r3
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	3332      	adds	r3, #50	@ 0x32
 8005424:	4a33      	ldr	r2, [pc, #204]	@ (80054f4 <UART_SetConfig+0x4e4>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005430:	441c      	add	r4, r3
 8005432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005436:	2200      	movs	r2, #0
 8005438:	673b      	str	r3, [r7, #112]	@ 0x70
 800543a:	677a      	str	r2, [r7, #116]	@ 0x74
 800543c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	1891      	adds	r1, r2, r2
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	415b      	adcs	r3, r3
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005450:	4641      	mov	r1, r8
 8005452:	1851      	adds	r1, r2, r1
 8005454:	6039      	str	r1, [r7, #0]
 8005456:	4649      	mov	r1, r9
 8005458:	414b      	adcs	r3, r1
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005468:	4659      	mov	r1, fp
 800546a:	00cb      	lsls	r3, r1, #3
 800546c:	4651      	mov	r1, sl
 800546e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005472:	4651      	mov	r1, sl
 8005474:	00ca      	lsls	r2, r1, #3
 8005476:	4610      	mov	r0, r2
 8005478:	4619      	mov	r1, r3
 800547a:	4603      	mov	r3, r0
 800547c:	4642      	mov	r2, r8
 800547e:	189b      	adds	r3, r3, r2
 8005480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005482:	464b      	mov	r3, r9
 8005484:	460a      	mov	r2, r1
 8005486:	eb42 0303 	adc.w	r3, r2, r3
 800548a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	663b      	str	r3, [r7, #96]	@ 0x60
 8005496:	667a      	str	r2, [r7, #100]	@ 0x64
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054a4:	4649      	mov	r1, r9
 80054a6:	008b      	lsls	r3, r1, #2
 80054a8:	4641      	mov	r1, r8
 80054aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ae:	4641      	mov	r1, r8
 80054b0:	008a      	lsls	r2, r1, #2
 80054b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054b6:	f7fa fedb 	bl	8000270 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <UART_SetConfig+0x4e4>)
 80054c0:	fba3 1302 	umull	r1, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	2164      	movs	r1, #100	@ 0x64
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	3332      	adds	r3, #50	@ 0x32
 80054d2:	4a08      	ldr	r2, [pc, #32]	@ (80054f4 <UART_SetConfig+0x4e4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	f003 020f 	and.w	r2, r3, #15
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4422      	add	r2, r4
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054ee:	46bd      	mov	sp, r7
 80054f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f4:	51eb851f 	.word	0x51eb851f

080054f8 <sniprintf>:
 80054f8:	b40c      	push	{r2, r3}
 80054fa:	b530      	push	{r4, r5, lr}
 80054fc:	4b17      	ldr	r3, [pc, #92]	@ (800555c <sniprintf+0x64>)
 80054fe:	1e0c      	subs	r4, r1, #0
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	b09d      	sub	sp, #116	@ 0x74
 8005504:	da08      	bge.n	8005518 <sniprintf+0x20>
 8005506:	238b      	movs	r3, #139	@ 0x8b
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	b01d      	add	sp, #116	@ 0x74
 8005510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005514:	b002      	add	sp, #8
 8005516:	4770      	bx	lr
 8005518:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800551c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005520:	bf14      	ite	ne
 8005522:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005526:	4623      	moveq	r3, r4
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005530:	9002      	str	r0, [sp, #8]
 8005532:	9006      	str	r0, [sp, #24]
 8005534:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005538:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800553a:	ab21      	add	r3, sp, #132	@ 0x84
 800553c:	a902      	add	r1, sp, #8
 800553e:	4628      	mov	r0, r5
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	f000 f9a3 	bl	800588c <_svfiprintf_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	bfbc      	itt	lt
 800554a:	238b      	movlt	r3, #139	@ 0x8b
 800554c:	602b      	strlt	r3, [r5, #0]
 800554e:	2c00      	cmp	r4, #0
 8005550:	d0dd      	beq.n	800550e <sniprintf+0x16>
 8005552:	9b02      	ldr	r3, [sp, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e7d9      	b.n	800550e <sniprintf+0x16>
 800555a:	bf00      	nop
 800555c:	20000014 	.word	0x20000014

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	@ (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000014 	.word	0x20000014

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	@ (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	@ (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	@ (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	@ (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 fc66 	bl	8005e60 <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08005f4c 	.word	0x08005f4c
 80055b8:	08005f4c 	.word	0x08005f4c
 80055bc:	08005f4c 	.word	0x08005f4c
 80055c0:	08005f50 	.word	0x08005f50

080055c4 <__retarget_lock_acquire_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_release_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <memcpy>:
 80055c8:	440a      	add	r2, r1
 80055ca:	4291      	cmp	r1, r2
 80055cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d0:	d100      	bne.n	80055d4 <memcpy+0xc>
 80055d2:	4770      	bx	lr
 80055d4:	b510      	push	{r4, lr}
 80055d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055de:	4291      	cmp	r1, r2
 80055e0:	d1f9      	bne.n	80055d6 <memcpy+0xe>
 80055e2:	bd10      	pop	{r4, pc}

080055e4 <_free_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4605      	mov	r5, r0
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d041      	beq.n	8005670 <_free_r+0x8c>
 80055ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f0:	1f0c      	subs	r4, r1, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bfb8      	it	lt
 80055f6:	18e4      	addlt	r4, r4, r3
 80055f8:	f000 f8e0 	bl	80057bc <__malloc_lock>
 80055fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005674 <_free_r+0x90>)
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	b933      	cbnz	r3, 8005610 <_free_r+0x2c>
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	6014      	str	r4, [r2, #0]
 8005606:	4628      	mov	r0, r5
 8005608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800560c:	f000 b8dc 	b.w	80057c8 <__malloc_unlock>
 8005610:	42a3      	cmp	r3, r4
 8005612:	d908      	bls.n	8005626 <_free_r+0x42>
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	1821      	adds	r1, r4, r0
 8005618:	428b      	cmp	r3, r1
 800561a:	bf01      	itttt	eq
 800561c:	6819      	ldreq	r1, [r3, #0]
 800561e:	685b      	ldreq	r3, [r3, #4]
 8005620:	1809      	addeq	r1, r1, r0
 8005622:	6021      	streq	r1, [r4, #0]
 8005624:	e7ed      	b.n	8005602 <_free_r+0x1e>
 8005626:	461a      	mov	r2, r3
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b10b      	cbz	r3, 8005630 <_free_r+0x4c>
 800562c:	42a3      	cmp	r3, r4
 800562e:	d9fa      	bls.n	8005626 <_free_r+0x42>
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	1850      	adds	r0, r2, r1
 8005634:	42a0      	cmp	r0, r4
 8005636:	d10b      	bne.n	8005650 <_free_r+0x6c>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	4401      	add	r1, r0
 800563c:	1850      	adds	r0, r2, r1
 800563e:	4283      	cmp	r3, r0
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	d1e0      	bne.n	8005606 <_free_r+0x22>
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	6053      	str	r3, [r2, #4]
 800564a:	4408      	add	r0, r1
 800564c:	6010      	str	r0, [r2, #0]
 800564e:	e7da      	b.n	8005606 <_free_r+0x22>
 8005650:	d902      	bls.n	8005658 <_free_r+0x74>
 8005652:	230c      	movs	r3, #12
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	e7d6      	b.n	8005606 <_free_r+0x22>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	1821      	adds	r1, r4, r0
 800565c:	428b      	cmp	r3, r1
 800565e:	bf04      	itt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	bf04      	itt	eq
 8005668:	1809      	addeq	r1, r1, r0
 800566a:	6021      	streq	r1, [r4, #0]
 800566c:	6054      	str	r4, [r2, #4]
 800566e:	e7ca      	b.n	8005606 <_free_r+0x22>
 8005670:	bd38      	pop	{r3, r4, r5, pc}
 8005672:	bf00      	nop
 8005674:	20013044 	.word	0x20013044

08005678 <sbrk_aligned>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4e0f      	ldr	r6, [pc, #60]	@ (80056b8 <sbrk_aligned+0x40>)
 800567c:	460c      	mov	r4, r1
 800567e:	6831      	ldr	r1, [r6, #0]
 8005680:	4605      	mov	r5, r0
 8005682:	b911      	cbnz	r1, 800568a <sbrk_aligned+0x12>
 8005684:	f000 fba6 	bl	8005dd4 <_sbrk_r>
 8005688:	6030      	str	r0, [r6, #0]
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f000 fba1 	bl	8005dd4 <_sbrk_r>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	d103      	bne.n	800569e <sbrk_aligned+0x26>
 8005696:	f04f 34ff 	mov.w	r4, #4294967295
 800569a:	4620      	mov	r0, r4
 800569c:	bd70      	pop	{r4, r5, r6, pc}
 800569e:	1cc4      	adds	r4, r0, #3
 80056a0:	f024 0403 	bic.w	r4, r4, #3
 80056a4:	42a0      	cmp	r0, r4
 80056a6:	d0f8      	beq.n	800569a <sbrk_aligned+0x22>
 80056a8:	1a21      	subs	r1, r4, r0
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 fb92 	bl	8005dd4 <_sbrk_r>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d1f2      	bne.n	800569a <sbrk_aligned+0x22>
 80056b4:	e7ef      	b.n	8005696 <sbrk_aligned+0x1e>
 80056b6:	bf00      	nop
 80056b8:	20013040 	.word	0x20013040

080056bc <_malloc_r>:
 80056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	1ccd      	adds	r5, r1, #3
 80056c2:	f025 0503 	bic.w	r5, r5, #3
 80056c6:	3508      	adds	r5, #8
 80056c8:	2d0c      	cmp	r5, #12
 80056ca:	bf38      	it	cc
 80056cc:	250c      	movcc	r5, #12
 80056ce:	2d00      	cmp	r5, #0
 80056d0:	4606      	mov	r6, r0
 80056d2:	db01      	blt.n	80056d8 <_malloc_r+0x1c>
 80056d4:	42a9      	cmp	r1, r5
 80056d6:	d904      	bls.n	80056e2 <_malloc_r+0x26>
 80056d8:	230c      	movs	r3, #12
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	2000      	movs	r0, #0
 80056de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057b8 <_malloc_r+0xfc>
 80056e6:	f000 f869 	bl	80057bc <__malloc_lock>
 80056ea:	f8d8 3000 	ldr.w	r3, [r8]
 80056ee:	461c      	mov	r4, r3
 80056f0:	bb44      	cbnz	r4, 8005744 <_malloc_r+0x88>
 80056f2:	4629      	mov	r1, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	f7ff ffbf 	bl	8005678 <sbrk_aligned>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	4604      	mov	r4, r0
 80056fe:	d158      	bne.n	80057b2 <_malloc_r+0xf6>
 8005700:	f8d8 4000 	ldr.w	r4, [r8]
 8005704:	4627      	mov	r7, r4
 8005706:	2f00      	cmp	r7, #0
 8005708:	d143      	bne.n	8005792 <_malloc_r+0xd6>
 800570a:	2c00      	cmp	r4, #0
 800570c:	d04b      	beq.n	80057a6 <_malloc_r+0xea>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	4639      	mov	r1, r7
 8005712:	4630      	mov	r0, r6
 8005714:	eb04 0903 	add.w	r9, r4, r3
 8005718:	f000 fb5c 	bl	8005dd4 <_sbrk_r>
 800571c:	4581      	cmp	r9, r0
 800571e:	d142      	bne.n	80057a6 <_malloc_r+0xea>
 8005720:	6821      	ldr	r1, [r4, #0]
 8005722:	1a6d      	subs	r5, r5, r1
 8005724:	4629      	mov	r1, r5
 8005726:	4630      	mov	r0, r6
 8005728:	f7ff ffa6 	bl	8005678 <sbrk_aligned>
 800572c:	3001      	adds	r0, #1
 800572e:	d03a      	beq.n	80057a6 <_malloc_r+0xea>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	442b      	add	r3, r5
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	f8d8 3000 	ldr.w	r3, [r8]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	bb62      	cbnz	r2, 8005798 <_malloc_r+0xdc>
 800573e:	f8c8 7000 	str.w	r7, [r8]
 8005742:	e00f      	b.n	8005764 <_malloc_r+0xa8>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	1b52      	subs	r2, r2, r5
 8005748:	d420      	bmi.n	800578c <_malloc_r+0xd0>
 800574a:	2a0b      	cmp	r2, #11
 800574c:	d917      	bls.n	800577e <_malloc_r+0xc2>
 800574e:	1961      	adds	r1, r4, r5
 8005750:	42a3      	cmp	r3, r4
 8005752:	6025      	str	r5, [r4, #0]
 8005754:	bf18      	it	ne
 8005756:	6059      	strne	r1, [r3, #4]
 8005758:	6863      	ldr	r3, [r4, #4]
 800575a:	bf08      	it	eq
 800575c:	f8c8 1000 	streq.w	r1, [r8]
 8005760:	5162      	str	r2, [r4, r5]
 8005762:	604b      	str	r3, [r1, #4]
 8005764:	4630      	mov	r0, r6
 8005766:	f000 f82f 	bl	80057c8 <__malloc_unlock>
 800576a:	f104 000b 	add.w	r0, r4, #11
 800576e:	1d23      	adds	r3, r4, #4
 8005770:	f020 0007 	bic.w	r0, r0, #7
 8005774:	1ac2      	subs	r2, r0, r3
 8005776:	bf1c      	itt	ne
 8005778:	1a1b      	subne	r3, r3, r0
 800577a:	50a3      	strne	r3, [r4, r2]
 800577c:	e7af      	b.n	80056de <_malloc_r+0x22>
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	42a3      	cmp	r3, r4
 8005782:	bf0c      	ite	eq
 8005784:	f8c8 2000 	streq.w	r2, [r8]
 8005788:	605a      	strne	r2, [r3, #4]
 800578a:	e7eb      	b.n	8005764 <_malloc_r+0xa8>
 800578c:	4623      	mov	r3, r4
 800578e:	6864      	ldr	r4, [r4, #4]
 8005790:	e7ae      	b.n	80056f0 <_malloc_r+0x34>
 8005792:	463c      	mov	r4, r7
 8005794:	687f      	ldr	r7, [r7, #4]
 8005796:	e7b6      	b.n	8005706 <_malloc_r+0x4a>
 8005798:	461a      	mov	r2, r3
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	42a3      	cmp	r3, r4
 800579e:	d1fb      	bne.n	8005798 <_malloc_r+0xdc>
 80057a0:	2300      	movs	r3, #0
 80057a2:	6053      	str	r3, [r2, #4]
 80057a4:	e7de      	b.n	8005764 <_malloc_r+0xa8>
 80057a6:	230c      	movs	r3, #12
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	4630      	mov	r0, r6
 80057ac:	f000 f80c 	bl	80057c8 <__malloc_unlock>
 80057b0:	e794      	b.n	80056dc <_malloc_r+0x20>
 80057b2:	6005      	str	r5, [r0, #0]
 80057b4:	e7d6      	b.n	8005764 <_malloc_r+0xa8>
 80057b6:	bf00      	nop
 80057b8:	20013044 	.word	0x20013044

080057bc <__malloc_lock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	@ (80057c4 <__malloc_lock+0x8>)
 80057be:	f7ff bf01 	b.w	80055c4 <__retarget_lock_acquire_recursive>
 80057c2:	bf00      	nop
 80057c4:	2001303c 	.word	0x2001303c

080057c8 <__malloc_unlock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	@ (80057d0 <__malloc_unlock+0x8>)
 80057ca:	f7ff befc 	b.w	80055c6 <__retarget_lock_release_recursive>
 80057ce:	bf00      	nop
 80057d0:	2001303c 	.word	0x2001303c

080057d4 <__ssputs_r>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	688e      	ldr	r6, [r1, #8]
 80057da:	461f      	mov	r7, r3
 80057dc:	42be      	cmp	r6, r7
 80057de:	680b      	ldr	r3, [r1, #0]
 80057e0:	4682      	mov	sl, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4690      	mov	r8, r2
 80057e6:	d82d      	bhi.n	8005844 <__ssputs_r+0x70>
 80057e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057f0:	d026      	beq.n	8005840 <__ssputs_r+0x6c>
 80057f2:	6965      	ldr	r5, [r4, #20]
 80057f4:	6909      	ldr	r1, [r1, #16]
 80057f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057fa:	eba3 0901 	sub.w	r9, r3, r1
 80057fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005802:	1c7b      	adds	r3, r7, #1
 8005804:	444b      	add	r3, r9
 8005806:	106d      	asrs	r5, r5, #1
 8005808:	429d      	cmp	r5, r3
 800580a:	bf38      	it	cc
 800580c:	461d      	movcc	r5, r3
 800580e:	0553      	lsls	r3, r2, #21
 8005810:	d527      	bpl.n	8005862 <__ssputs_r+0x8e>
 8005812:	4629      	mov	r1, r5
 8005814:	f7ff ff52 	bl	80056bc <_malloc_r>
 8005818:	4606      	mov	r6, r0
 800581a:	b360      	cbz	r0, 8005876 <__ssputs_r+0xa2>
 800581c:	6921      	ldr	r1, [r4, #16]
 800581e:	464a      	mov	r2, r9
 8005820:	f7ff fed2 	bl	80055c8 <memcpy>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800582a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	6126      	str	r6, [r4, #16]
 8005832:	6165      	str	r5, [r4, #20]
 8005834:	444e      	add	r6, r9
 8005836:	eba5 0509 	sub.w	r5, r5, r9
 800583a:	6026      	str	r6, [r4, #0]
 800583c:	60a5      	str	r5, [r4, #8]
 800583e:	463e      	mov	r6, r7
 8005840:	42be      	cmp	r6, r7
 8005842:	d900      	bls.n	8005846 <__ssputs_r+0x72>
 8005844:	463e      	mov	r6, r7
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	4632      	mov	r2, r6
 800584a:	4641      	mov	r1, r8
 800584c:	f000 faa8 	bl	8005da0 <memmove>
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	1b9b      	subs	r3, r3, r6
 8005854:	60a3      	str	r3, [r4, #8]
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4433      	add	r3, r6
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	2000      	movs	r0, #0
 800585e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005862:	462a      	mov	r2, r5
 8005864:	f000 fac6 	bl	8005df4 <_realloc_r>
 8005868:	4606      	mov	r6, r0
 800586a:	2800      	cmp	r0, #0
 800586c:	d1e0      	bne.n	8005830 <__ssputs_r+0x5c>
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	4650      	mov	r0, sl
 8005872:	f7ff feb7 	bl	80055e4 <_free_r>
 8005876:	230c      	movs	r3, #12
 8005878:	f8ca 3000 	str.w	r3, [sl]
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e7e9      	b.n	800585e <__ssputs_r+0x8a>
	...

0800588c <_svfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	4698      	mov	r8, r3
 8005892:	898b      	ldrh	r3, [r1, #12]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	b09d      	sub	sp, #116	@ 0x74
 8005898:	4607      	mov	r7, r0
 800589a:	460d      	mov	r5, r1
 800589c:	4614      	mov	r4, r2
 800589e:	d510      	bpl.n	80058c2 <_svfiprintf_r+0x36>
 80058a0:	690b      	ldr	r3, [r1, #16]
 80058a2:	b973      	cbnz	r3, 80058c2 <_svfiprintf_r+0x36>
 80058a4:	2140      	movs	r1, #64	@ 0x40
 80058a6:	f7ff ff09 	bl	80056bc <_malloc_r>
 80058aa:	6028      	str	r0, [r5, #0]
 80058ac:	6128      	str	r0, [r5, #16]
 80058ae:	b930      	cbnz	r0, 80058be <_svfiprintf_r+0x32>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	b01d      	add	sp, #116	@ 0x74
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058be:	2340      	movs	r3, #64	@ 0x40
 80058c0:	616b      	str	r3, [r5, #20]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c6:	2320      	movs	r3, #32
 80058c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d0:	2330      	movs	r3, #48	@ 0x30
 80058d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a70 <_svfiprintf_r+0x1e4>
 80058d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058da:	f04f 0901 	mov.w	r9, #1
 80058de:	4623      	mov	r3, r4
 80058e0:	469a      	mov	sl, r3
 80058e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e6:	b10a      	cbz	r2, 80058ec <_svfiprintf_r+0x60>
 80058e8:	2a25      	cmp	r2, #37	@ 0x25
 80058ea:	d1f9      	bne.n	80058e0 <_svfiprintf_r+0x54>
 80058ec:	ebba 0b04 	subs.w	fp, sl, r4
 80058f0:	d00b      	beq.n	800590a <_svfiprintf_r+0x7e>
 80058f2:	465b      	mov	r3, fp
 80058f4:	4622      	mov	r2, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	4638      	mov	r0, r7
 80058fa:	f7ff ff6b 	bl	80057d4 <__ssputs_r>
 80058fe:	3001      	adds	r0, #1
 8005900:	f000 80a7 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005906:	445a      	add	r2, fp
 8005908:	9209      	str	r2, [sp, #36]	@ 0x24
 800590a:	f89a 3000 	ldrb.w	r3, [sl]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 809f 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005914:	2300      	movs	r3, #0
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591e:	f10a 0a01 	add.w	sl, sl, #1
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	9307      	str	r3, [sp, #28]
 8005926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800592a:	931a      	str	r3, [sp, #104]	@ 0x68
 800592c:	4654      	mov	r4, sl
 800592e:	2205      	movs	r2, #5
 8005930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005934:	484e      	ldr	r0, [pc, #312]	@ (8005a70 <_svfiprintf_r+0x1e4>)
 8005936:	f7fa fc4b 	bl	80001d0 <memchr>
 800593a:	9a04      	ldr	r2, [sp, #16]
 800593c:	b9d8      	cbnz	r0, 8005976 <_svfiprintf_r+0xea>
 800593e:	06d0      	lsls	r0, r2, #27
 8005940:	bf44      	itt	mi
 8005942:	2320      	movmi	r3, #32
 8005944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005948:	0711      	lsls	r1, r2, #28
 800594a:	bf44      	itt	mi
 800594c:	232b      	movmi	r3, #43	@ 0x2b
 800594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005952:	f89a 3000 	ldrb.w	r3, [sl]
 8005956:	2b2a      	cmp	r3, #42	@ 0x2a
 8005958:	d015      	beq.n	8005986 <_svfiprintf_r+0xfa>
 800595a:	9a07      	ldr	r2, [sp, #28]
 800595c:	4654      	mov	r4, sl
 800595e:	2000      	movs	r0, #0
 8005960:	f04f 0c0a 	mov.w	ip, #10
 8005964:	4621      	mov	r1, r4
 8005966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800596a:	3b30      	subs	r3, #48	@ 0x30
 800596c:	2b09      	cmp	r3, #9
 800596e:	d94b      	bls.n	8005a08 <_svfiprintf_r+0x17c>
 8005970:	b1b0      	cbz	r0, 80059a0 <_svfiprintf_r+0x114>
 8005972:	9207      	str	r2, [sp, #28]
 8005974:	e014      	b.n	80059a0 <_svfiprintf_r+0x114>
 8005976:	eba0 0308 	sub.w	r3, r0, r8
 800597a:	fa09 f303 	lsl.w	r3, r9, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	46a2      	mov	sl, r4
 8005984:	e7d2      	b.n	800592c <_svfiprintf_r+0xa0>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	1d19      	adds	r1, r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	9103      	str	r1, [sp, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfbb      	ittet	lt
 8005992:	425b      	neglt	r3, r3
 8005994:	f042 0202 	orrlt.w	r2, r2, #2
 8005998:	9307      	strge	r3, [sp, #28]
 800599a:	9307      	strlt	r3, [sp, #28]
 800599c:	bfb8      	it	lt
 800599e:	9204      	strlt	r2, [sp, #16]
 80059a0:	7823      	ldrb	r3, [r4, #0]
 80059a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80059a4:	d10a      	bne.n	80059bc <_svfiprintf_r+0x130>
 80059a6:	7863      	ldrb	r3, [r4, #1]
 80059a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059aa:	d132      	bne.n	8005a12 <_svfiprintf_r+0x186>
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	1d1a      	adds	r2, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9203      	str	r2, [sp, #12]
 80059b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059b8:	3402      	adds	r4, #2
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a80 <_svfiprintf_r+0x1f4>
 80059c0:	7821      	ldrb	r1, [r4, #0]
 80059c2:	2203      	movs	r2, #3
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7fa fc03 	bl	80001d0 <memchr>
 80059ca:	b138      	cbz	r0, 80059dc <_svfiprintf_r+0x150>
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	eba0 000a 	sub.w	r0, r0, sl
 80059d2:	2240      	movs	r2, #64	@ 0x40
 80059d4:	4082      	lsls	r2, r0
 80059d6:	4313      	orrs	r3, r2
 80059d8:	3401      	adds	r4, #1
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	4824      	ldr	r0, [pc, #144]	@ (8005a74 <_svfiprintf_r+0x1e8>)
 80059e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059e6:	2206      	movs	r2, #6
 80059e8:	f7fa fbf2 	bl	80001d0 <memchr>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d036      	beq.n	8005a5e <_svfiprintf_r+0x1d2>
 80059f0:	4b21      	ldr	r3, [pc, #132]	@ (8005a78 <_svfiprintf_r+0x1ec>)
 80059f2:	bb1b      	cbnz	r3, 8005a3c <_svfiprintf_r+0x1b0>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	3307      	adds	r3, #7
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	3308      	adds	r3, #8
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a02:	4433      	add	r3, r6
 8005a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a06:	e76a      	b.n	80058de <_svfiprintf_r+0x52>
 8005a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7a8      	b.n	8005964 <_svfiprintf_r+0xd8>
 8005a12:	2300      	movs	r3, #0
 8005a14:	3401      	adds	r4, #1
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 0c0a 	mov.w	ip, #10
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a24:	3a30      	subs	r2, #48	@ 0x30
 8005a26:	2a09      	cmp	r2, #9
 8005a28:	d903      	bls.n	8005a32 <_svfiprintf_r+0x1a6>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0c6      	beq.n	80059bc <_svfiprintf_r+0x130>
 8005a2e:	9105      	str	r1, [sp, #20]
 8005a30:	e7c4      	b.n	80059bc <_svfiprintf_r+0x130>
 8005a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a36:	4604      	mov	r4, r0
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e7f0      	b.n	8005a1e <_svfiprintf_r+0x192>
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4b0e      	ldr	r3, [pc, #56]	@ (8005a7c <_svfiprintf_r+0x1f0>)
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	4638      	mov	r0, r7
 8005a48:	f3af 8000 	nop.w
 8005a4c:	1c42      	adds	r2, r0, #1
 8005a4e:	4606      	mov	r6, r0
 8005a50:	d1d6      	bne.n	8005a00 <_svfiprintf_r+0x174>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	065b      	lsls	r3, r3, #25
 8005a56:	f53f af2d 	bmi.w	80058b4 <_svfiprintf_r+0x28>
 8005a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a5c:	e72c      	b.n	80058b8 <_svfiprintf_r+0x2c>
 8005a5e:	ab03      	add	r3, sp, #12
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <_svfiprintf_r+0x1f0>)
 8005a66:	a904      	add	r1, sp, #16
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f000 f879 	bl	8005b60 <_printf_i>
 8005a6e:	e7ed      	b.n	8005a4c <_svfiprintf_r+0x1c0>
 8005a70:	08005f10 	.word	0x08005f10
 8005a74:	08005f1a 	.word	0x08005f1a
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	080057d5 	.word	0x080057d5
 8005a80:	08005f16 	.word	0x08005f16

08005a84 <_printf_common>:
 8005a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	4616      	mov	r6, r2
 8005a8a:	4698      	mov	r8, r3
 8005a8c:	688a      	ldr	r2, [r1, #8]
 8005a8e:	690b      	ldr	r3, [r1, #16]
 8005a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bfb8      	it	lt
 8005a98:	4613      	movlt	r3, r2
 8005a9a:	6033      	str	r3, [r6, #0]
 8005a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	b10a      	cbz	r2, 8005aaa <_printf_common+0x26>
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	6033      	str	r3, [r6, #0]
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	0699      	lsls	r1, r3, #26
 8005aae:	bf42      	ittt	mi
 8005ab0:	6833      	ldrmi	r3, [r6, #0]
 8005ab2:	3302      	addmi	r3, #2
 8005ab4:	6033      	strmi	r3, [r6, #0]
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	f015 0506 	ands.w	r5, r5, #6
 8005abc:	d106      	bne.n	8005acc <_printf_common+0x48>
 8005abe:	f104 0a19 	add.w	sl, r4, #25
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	6832      	ldr	r2, [r6, #0]
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dc26      	bgt.n	8005b1a <_printf_common+0x96>
 8005acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ad0:	6822      	ldr	r2, [r4, #0]
 8005ad2:	3b00      	subs	r3, #0
 8005ad4:	bf18      	it	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	0692      	lsls	r2, r2, #26
 8005ada:	d42b      	bmi.n	8005b34 <_printf_common+0xb0>
 8005adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c8      	blx	r9
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d01e      	beq.n	8005b28 <_printf_common+0xa4>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	6922      	ldr	r2, [r4, #16]
 8005aee:	f003 0306 	and.w	r3, r3, #6
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	bf02      	ittt	eq
 8005af6:	68e5      	ldreq	r5, [r4, #12]
 8005af8:	6833      	ldreq	r3, [r6, #0]
 8005afa:	1aed      	subeq	r5, r5, r3
 8005afc:	68a3      	ldr	r3, [r4, #8]
 8005afe:	bf0c      	ite	eq
 8005b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b04:	2500      	movne	r5, #0
 8005b06:	4293      	cmp	r3, r2
 8005b08:	bfc4      	itt	gt
 8005b0a:	1a9b      	subgt	r3, r3, r2
 8005b0c:	18ed      	addgt	r5, r5, r3
 8005b0e:	2600      	movs	r6, #0
 8005b10:	341a      	adds	r4, #26
 8005b12:	42b5      	cmp	r5, r6
 8005b14:	d11a      	bne.n	8005b4c <_printf_common+0xc8>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e008      	b.n	8005b2c <_printf_common+0xa8>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	4641      	mov	r1, r8
 8005b20:	4638      	mov	r0, r7
 8005b22:	47c8      	blx	r9
 8005b24:	3001      	adds	r0, #1
 8005b26:	d103      	bne.n	8005b30 <_printf_common+0xac>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b30:	3501      	adds	r5, #1
 8005b32:	e7c6      	b.n	8005ac2 <_printf_common+0x3e>
 8005b34:	18e1      	adds	r1, r4, r3
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	2030      	movs	r0, #48	@ 0x30
 8005b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b3e:	4422      	add	r2, r4
 8005b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b48:	3302      	adds	r3, #2
 8005b4a:	e7c7      	b.n	8005adc <_printf_common+0x58>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4641      	mov	r1, r8
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c8      	blx	r9
 8005b56:	3001      	adds	r0, #1
 8005b58:	d0e6      	beq.n	8005b28 <_printf_common+0xa4>
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7d9      	b.n	8005b12 <_printf_common+0x8e>
	...

08005b60 <_printf_i>:
 8005b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	7e0f      	ldrb	r7, [r1, #24]
 8005b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b68:	2f78      	cmp	r7, #120	@ 0x78
 8005b6a:	4691      	mov	r9, r2
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	469a      	mov	sl, r3
 8005b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b76:	d807      	bhi.n	8005b88 <_printf_i+0x28>
 8005b78:	2f62      	cmp	r7, #98	@ 0x62
 8005b7a:	d80a      	bhi.n	8005b92 <_printf_i+0x32>
 8005b7c:	2f00      	cmp	r7, #0
 8005b7e:	f000 80d2 	beq.w	8005d26 <_printf_i+0x1c6>
 8005b82:	2f58      	cmp	r7, #88	@ 0x58
 8005b84:	f000 80b9 	beq.w	8005cfa <_printf_i+0x19a>
 8005b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b90:	e03a      	b.n	8005c08 <_printf_i+0xa8>
 8005b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b96:	2b15      	cmp	r3, #21
 8005b98:	d8f6      	bhi.n	8005b88 <_printf_i+0x28>
 8005b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8005ba0 <_printf_i+0x40>)
 8005b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005c0d 	.word	0x08005c0d
 8005ba8:	08005b89 	.word	0x08005b89
 8005bac:	08005b89 	.word	0x08005b89
 8005bb0:	08005b89 	.word	0x08005b89
 8005bb4:	08005b89 	.word	0x08005b89
 8005bb8:	08005c0d 	.word	0x08005c0d
 8005bbc:	08005b89 	.word	0x08005b89
 8005bc0:	08005b89 	.word	0x08005b89
 8005bc4:	08005b89 	.word	0x08005b89
 8005bc8:	08005b89 	.word	0x08005b89
 8005bcc:	08005d0d 	.word	0x08005d0d
 8005bd0:	08005c37 	.word	0x08005c37
 8005bd4:	08005cc7 	.word	0x08005cc7
 8005bd8:	08005b89 	.word	0x08005b89
 8005bdc:	08005b89 	.word	0x08005b89
 8005be0:	08005d2f 	.word	0x08005d2f
 8005be4:	08005b89 	.word	0x08005b89
 8005be8:	08005c37 	.word	0x08005c37
 8005bec:	08005b89 	.word	0x08005b89
 8005bf0:	08005b89 	.word	0x08005b89
 8005bf4:	08005ccf 	.word	0x08005ccf
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	1d1a      	adds	r2, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6032      	str	r2, [r6, #0]
 8005c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e09d      	b.n	8005d48 <_printf_i+0x1e8>
 8005c0c:	6833      	ldr	r3, [r6, #0]
 8005c0e:	6820      	ldr	r0, [r4, #0]
 8005c10:	1d19      	adds	r1, r3, #4
 8005c12:	6031      	str	r1, [r6, #0]
 8005c14:	0606      	lsls	r6, r0, #24
 8005c16:	d501      	bpl.n	8005c1c <_printf_i+0xbc>
 8005c18:	681d      	ldr	r5, [r3, #0]
 8005c1a:	e003      	b.n	8005c24 <_printf_i+0xc4>
 8005c1c:	0645      	lsls	r5, r0, #25
 8005c1e:	d5fb      	bpl.n	8005c18 <_printf_i+0xb8>
 8005c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c24:	2d00      	cmp	r5, #0
 8005c26:	da03      	bge.n	8005c30 <_printf_i+0xd0>
 8005c28:	232d      	movs	r3, #45	@ 0x2d
 8005c2a:	426d      	negs	r5, r5
 8005c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c30:	4859      	ldr	r0, [pc, #356]	@ (8005d98 <_printf_i+0x238>)
 8005c32:	230a      	movs	r3, #10
 8005c34:	e011      	b.n	8005c5a <_printf_i+0xfa>
 8005c36:	6821      	ldr	r1, [r4, #0]
 8005c38:	6833      	ldr	r3, [r6, #0]
 8005c3a:	0608      	lsls	r0, r1, #24
 8005c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c40:	d402      	bmi.n	8005c48 <_printf_i+0xe8>
 8005c42:	0649      	lsls	r1, r1, #25
 8005c44:	bf48      	it	mi
 8005c46:	b2ad      	uxthmi	r5, r5
 8005c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c4a:	4853      	ldr	r0, [pc, #332]	@ (8005d98 <_printf_i+0x238>)
 8005c4c:	6033      	str	r3, [r6, #0]
 8005c4e:	bf14      	ite	ne
 8005c50:	230a      	movne	r3, #10
 8005c52:	2308      	moveq	r3, #8
 8005c54:	2100      	movs	r1, #0
 8005c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c5a:	6866      	ldr	r6, [r4, #4]
 8005c5c:	60a6      	str	r6, [r4, #8]
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	bfa2      	ittt	ge
 8005c62:	6821      	ldrge	r1, [r4, #0]
 8005c64:	f021 0104 	bicge.w	r1, r1, #4
 8005c68:	6021      	strge	r1, [r4, #0]
 8005c6a:	b90d      	cbnz	r5, 8005c70 <_printf_i+0x110>
 8005c6c:	2e00      	cmp	r6, #0
 8005c6e:	d04b      	beq.n	8005d08 <_printf_i+0x1a8>
 8005c70:	4616      	mov	r6, r2
 8005c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c76:	fb03 5711 	mls	r7, r3, r1, r5
 8005c7a:	5dc7      	ldrb	r7, [r0, r7]
 8005c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c80:	462f      	mov	r7, r5
 8005c82:	42bb      	cmp	r3, r7
 8005c84:	460d      	mov	r5, r1
 8005c86:	d9f4      	bls.n	8005c72 <_printf_i+0x112>
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d10b      	bne.n	8005ca4 <_printf_i+0x144>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	07df      	lsls	r7, r3, #31
 8005c90:	d508      	bpl.n	8005ca4 <_printf_i+0x144>
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	6861      	ldr	r1, [r4, #4]
 8005c96:	4299      	cmp	r1, r3
 8005c98:	bfde      	ittt	le
 8005c9a:	2330      	movle	r3, #48	@ 0x30
 8005c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ca4:	1b92      	subs	r2, r2, r6
 8005ca6:	6122      	str	r2, [r4, #16]
 8005ca8:	f8cd a000 	str.w	sl, [sp]
 8005cac:	464b      	mov	r3, r9
 8005cae:	aa03      	add	r2, sp, #12
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f7ff fee6 	bl	8005a84 <_printf_common>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d14a      	bne.n	8005d52 <_printf_i+0x1f2>
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	b004      	add	sp, #16
 8005cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f043 0320 	orr.w	r3, r3, #32
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	4833      	ldr	r0, [pc, #204]	@ (8005d9c <_printf_i+0x23c>)
 8005cd0:	2778      	movs	r7, #120	@ 0x78
 8005cd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	6831      	ldr	r1, [r6, #0]
 8005cda:	061f      	lsls	r7, r3, #24
 8005cdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ce0:	d402      	bmi.n	8005ce8 <_printf_i+0x188>
 8005ce2:	065f      	lsls	r7, r3, #25
 8005ce4:	bf48      	it	mi
 8005ce6:	b2ad      	uxthmi	r5, r5
 8005ce8:	6031      	str	r1, [r6, #0]
 8005cea:	07d9      	lsls	r1, r3, #31
 8005cec:	bf44      	itt	mi
 8005cee:	f043 0320 	orrmi.w	r3, r3, #32
 8005cf2:	6023      	strmi	r3, [r4, #0]
 8005cf4:	b11d      	cbz	r5, 8005cfe <_printf_i+0x19e>
 8005cf6:	2310      	movs	r3, #16
 8005cf8:	e7ac      	b.n	8005c54 <_printf_i+0xf4>
 8005cfa:	4827      	ldr	r0, [pc, #156]	@ (8005d98 <_printf_i+0x238>)
 8005cfc:	e7e9      	b.n	8005cd2 <_printf_i+0x172>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	f023 0320 	bic.w	r3, r3, #32
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	e7f6      	b.n	8005cf6 <_printf_i+0x196>
 8005d08:	4616      	mov	r6, r2
 8005d0a:	e7bd      	b.n	8005c88 <_printf_i+0x128>
 8005d0c:	6833      	ldr	r3, [r6, #0]
 8005d0e:	6825      	ldr	r5, [r4, #0]
 8005d10:	6961      	ldr	r1, [r4, #20]
 8005d12:	1d18      	adds	r0, r3, #4
 8005d14:	6030      	str	r0, [r6, #0]
 8005d16:	062e      	lsls	r6, r5, #24
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	d501      	bpl.n	8005d20 <_printf_i+0x1c0>
 8005d1c:	6019      	str	r1, [r3, #0]
 8005d1e:	e002      	b.n	8005d26 <_printf_i+0x1c6>
 8005d20:	0668      	lsls	r0, r5, #25
 8005d22:	d5fb      	bpl.n	8005d1c <_printf_i+0x1bc>
 8005d24:	8019      	strh	r1, [r3, #0]
 8005d26:	2300      	movs	r3, #0
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	4616      	mov	r6, r2
 8005d2c:	e7bc      	b.n	8005ca8 <_printf_i+0x148>
 8005d2e:	6833      	ldr	r3, [r6, #0]
 8005d30:	1d1a      	adds	r2, r3, #4
 8005d32:	6032      	str	r2, [r6, #0]
 8005d34:	681e      	ldr	r6, [r3, #0]
 8005d36:	6862      	ldr	r2, [r4, #4]
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7fa fa48 	bl	80001d0 <memchr>
 8005d40:	b108      	cbz	r0, 8005d46 <_printf_i+0x1e6>
 8005d42:	1b80      	subs	r0, r0, r6
 8005d44:	6060      	str	r0, [r4, #4]
 8005d46:	6863      	ldr	r3, [r4, #4]
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d50:	e7aa      	b.n	8005ca8 <_printf_i+0x148>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	4632      	mov	r2, r6
 8005d56:	4649      	mov	r1, r9
 8005d58:	4640      	mov	r0, r8
 8005d5a:	47d0      	blx	sl
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d0ad      	beq.n	8005cbc <_printf_i+0x15c>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	079b      	lsls	r3, r3, #30
 8005d64:	d413      	bmi.n	8005d8e <_printf_i+0x22e>
 8005d66:	68e0      	ldr	r0, [r4, #12]
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	4298      	cmp	r0, r3
 8005d6c:	bfb8      	it	lt
 8005d6e:	4618      	movlt	r0, r3
 8005d70:	e7a6      	b.n	8005cc0 <_printf_i+0x160>
 8005d72:	2301      	movs	r3, #1
 8005d74:	4632      	mov	r2, r6
 8005d76:	4649      	mov	r1, r9
 8005d78:	4640      	mov	r0, r8
 8005d7a:	47d0      	blx	sl
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d09d      	beq.n	8005cbc <_printf_i+0x15c>
 8005d80:	3501      	adds	r5, #1
 8005d82:	68e3      	ldr	r3, [r4, #12]
 8005d84:	9903      	ldr	r1, [sp, #12]
 8005d86:	1a5b      	subs	r3, r3, r1
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	dcf2      	bgt.n	8005d72 <_printf_i+0x212>
 8005d8c:	e7eb      	b.n	8005d66 <_printf_i+0x206>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	f104 0619 	add.w	r6, r4, #25
 8005d94:	e7f5      	b.n	8005d82 <_printf_i+0x222>
 8005d96:	bf00      	nop
 8005d98:	08005f21 	.word	0x08005f21
 8005d9c:	08005f32 	.word	0x08005f32

08005da0 <memmove>:
 8005da0:	4288      	cmp	r0, r1
 8005da2:	b510      	push	{r4, lr}
 8005da4:	eb01 0402 	add.w	r4, r1, r2
 8005da8:	d902      	bls.n	8005db0 <memmove+0x10>
 8005daa:	4284      	cmp	r4, r0
 8005dac:	4623      	mov	r3, r4
 8005dae:	d807      	bhi.n	8005dc0 <memmove+0x20>
 8005db0:	1e43      	subs	r3, r0, #1
 8005db2:	42a1      	cmp	r1, r4
 8005db4:	d008      	beq.n	8005dc8 <memmove+0x28>
 8005db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dbe:	e7f8      	b.n	8005db2 <memmove+0x12>
 8005dc0:	4402      	add	r2, r0
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	428a      	cmp	r2, r1
 8005dc6:	d100      	bne.n	8005dca <memmove+0x2a>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dd2:	e7f7      	b.n	8005dc4 <memmove+0x24>

08005dd4 <_sbrk_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d06      	ldr	r5, [pc, #24]	@ (8005df0 <_sbrk_r+0x1c>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fd fcc6 	bl	8003770 <_sbrk>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_sbrk_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_sbrk_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20013038 	.word	0x20013038

08005df4 <_realloc_r>:
 8005df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4615      	mov	r5, r2
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	b921      	cbnz	r1, 8005e0a <_realloc_r+0x16>
 8005e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	4611      	mov	r1, r2
 8005e06:	f7ff bc59 	b.w	80056bc <_malloc_r>
 8005e0a:	b92a      	cbnz	r2, 8005e18 <_realloc_r+0x24>
 8005e0c:	f7ff fbea 	bl	80055e4 <_free_r>
 8005e10:	2400      	movs	r4, #0
 8005e12:	4620      	mov	r0, r4
 8005e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e18:	f000 f81a 	bl	8005e50 <_malloc_usable_size_r>
 8005e1c:	4285      	cmp	r5, r0
 8005e1e:	4606      	mov	r6, r0
 8005e20:	d802      	bhi.n	8005e28 <_realloc_r+0x34>
 8005e22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e26:	d8f4      	bhi.n	8005e12 <_realloc_r+0x1e>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7ff fc46 	bl	80056bc <_malloc_r>
 8005e30:	4607      	mov	r7, r0
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d0ec      	beq.n	8005e10 <_realloc_r+0x1c>
 8005e36:	42b5      	cmp	r5, r6
 8005e38:	462a      	mov	r2, r5
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	bf28      	it	cs
 8005e3e:	4632      	movcs	r2, r6
 8005e40:	f7ff fbc2 	bl	80055c8 <memcpy>
 8005e44:	4621      	mov	r1, r4
 8005e46:	4640      	mov	r0, r8
 8005e48:	f7ff fbcc 	bl	80055e4 <_free_r>
 8005e4c:	463c      	mov	r4, r7
 8005e4e:	e7e0      	b.n	8005e12 <_realloc_r+0x1e>

08005e50 <_malloc_usable_size_r>:
 8005e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e54:	1f18      	subs	r0, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bfbc      	itt	lt
 8005e5a:	580b      	ldrlt	r3, [r1, r0]
 8005e5c:	18c0      	addlt	r0, r0, r3
 8005e5e:	4770      	bx	lr

08005e60 <_init>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	bf00      	nop
 8005e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e66:	bc08      	pop	{r3}
 8005e68:	469e      	mov	lr, r3
 8005e6a:	4770      	bx	lr

08005e6c <_fini>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr
