
App_021_Example_7.1_Binary_Semaphore_Synch_Task_With_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080059d4  080059d4  000069d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a74  08005a74  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a7c  08005a7c  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a7c  08005a7c  00006a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a80  08005a80  00006a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005a84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00012ea0  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012eb4  20012eb4  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a8d  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a7f  00000000  00000000  00019ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  0001c550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d77  00000000  00000000  0001d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204e8  00000000  00000000  0001e3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014033  00000000  00000000  0003e8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daa34  00000000  00000000  00052912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d346  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004844  00000000  00000000  0012d38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  00131bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059bc 	.word	0x080059bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080059bc 	.word	0x080059bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f103 0208 	add.w	r2, r3, #8
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f04f 32ff 	mov.w	r2, #4294967295
 80004d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f103 0208 	add.w	r2, r3, #8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f103 0208 	add.w	r2, r3, #8
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800051a:	b480      	push	{r7}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d103      	bne.n	800053a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e00c      	b.n	8000554 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3308      	adds	r3, #8
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e002      	b.n	8000548 <vListInsert+0x2e>
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	429a      	cmp	r2, r3
 8000552:	d2f6      	bcs.n	8000542 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6892      	ldr	r2, [r2, #8]
 80005a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6852      	ldr	r2, [r2, #4]
 80005ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d103      	bne.n	80005c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d05d      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800061a:	2b00      	cmp	r3, #0
 800061c:	d059      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000626:	2100      	movs	r1, #0
 8000628:	fba3 2302 	umull	r2, r3, r3, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d000      	beq.n	8000632 <xQueueGenericReset+0x52>
 8000630:	2101      	movs	r1, #1
 8000632:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14c      	bne.n	80006d2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000638:	f002 f9f4 	bl	8002a24 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000644:	6939      	ldr	r1, [r7, #16]
 8000646:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	441a      	add	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000668:	3b01      	subs	r3, #1
 800066a:	6939      	ldr	r1, [r7, #16]
 800066c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	441a      	add	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	22ff      	movs	r2, #255	@ 0xff
 800067c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	22ff      	movs	r2, #255	@ 0xff
 8000684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d114      	bne.n	80006b8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d01a      	beq.n	80006cc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	3310      	adds	r3, #16
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f984 	bl	80019a8 <xTaskRemoveFromEventList>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d012      	beq.n	80006cc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <xQueueGenericReset+0x120>)
 80006a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	e009      	b.n	80006cc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3310      	adds	r3, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff feff 	bl	80004c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3324      	adds	r3, #36	@ 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fefa 	bl	80004c0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006cc:	f002 f9dc 	bl	8002a88 <vPortExitCritical>
 80006d0:	e001      	b.n	80006d6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10b      	bne.n	80006f4 <xQueueGenericReset+0x114>
    __asm volatile
 80006dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	60bb      	str	r3, [r7, #8]
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80006f4:	697b      	ldr	r3, [r7, #20]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	4613      	mov	r3, r2
 8000710:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d02e      	beq.n	800077a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800071c:	2100      	movs	r1, #0
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fba3 2302 	umull	r2, r3, r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <xQueueGenericCreate+0x28>
 800072a:	2101      	movs	r1, #1
 800072c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800072e:	2b00      	cmp	r3, #0
 8000730:	d123      	bne.n	800077a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800073a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800073e:	d81c      	bhi.n	800077a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	3350      	adds	r3, #80	@ 0x50
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fa8e 	bl	8002c70 <pvPortMalloc>
 8000754:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01d      	beq.n	8000798 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3350      	adds	r3, #80	@ 0x50
 8000764:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 f815 	bl	80007a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000778:	e00e      	b.n	8000798 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10b      	bne.n	8000798 <xQueueGenericCreate+0x94>
    __asm volatile
 8000780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	613b      	str	r3, [r7, #16]
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000798:	69fb      	ldr	r3, [r7, #28]
    }
 800079a:	4618      	mov	r0, r3
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007d0:	2101      	movs	r1, #1
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	f7ff ff04 	bl	80005e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	78fa      	ldrb	r2, [r7, #3]
 80007dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b090      	sub	sp, #64	@ 0x40
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80007f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10b      	bne.n	8000814 <xQueueGiveFromISR+0x2c>
    __asm volatile
 80007fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000800:	f383 8811 	msr	BASEPRI, r3
 8000804:	f3bf 8f6f 	isb	sy
 8000808:	f3bf 8f4f 	dsb	sy
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00b      	beq.n	8000834 <xQueueGiveFromISR+0x4c>
    __asm volatile
 800081c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000820:	f383 8811 	msr	BASEPRI, r3
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	623b      	str	r3, [r7, #32]
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d103      	bne.n	8000844 <xQueueGiveFromISR+0x5c>
 800083c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <xQueueGiveFromISR+0x60>
 8000844:	2301      	movs	r3, #1
 8000846:	e000      	b.n	800084a <xQueueGiveFromISR+0x62>
 8000848:	2300      	movs	r3, #0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10b      	bne.n	8000866 <xQueueGiveFromISR+0x7e>
    __asm volatile
 800084e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	f3bf 8f4f 	dsb	sy
 800085e:	61fb      	str	r3, [r7, #28]
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	e7fd      	b.n	8000862 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000866:	f002 f9c1 	bl	8002bec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800086a:	f3ef 8211 	mrs	r2, BASEPRI
 800086e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000872:	f383 8811 	msr	BASEPRI, r3
 8000876:	f3bf 8f6f 	isb	sy
 800087a:	f3bf 8f4f 	dsb	sy
 800087e:	61ba      	str	r2, [r7, #24]
 8000880:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000882:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000884:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800088c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800088e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000892:	429a      	cmp	r2, r3
 8000894:	d243      	bcs.n	800091e <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800089c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80008a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008a6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80008a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d112      	bne.n	80008d8 <xQueueGiveFromISR+0xf0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d02e      	beq.n	8000918 <xQueueGiveFromISR+0x130>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008bc:	3324      	adds	r3, #36	@ 0x24
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f872 	bl	80019a8 <xTaskRemoveFromEventList>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d026      	beq.n	8000918 <xQueueGiveFromISR+0x130>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d023      	beq.n	8000918 <xQueueGiveFromISR+0x130>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2201      	movs	r2, #1
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	e01f      	b.n	8000918 <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80008d8:	f000 fe76 	bl	80015c8 <uxTaskGetNumberOfTasks>
 80008dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80008de:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80008e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d917      	bls.n	8000918 <xQueueGiveFromISR+0x130>
 80008e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80008ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80008ee:	d10b      	bne.n	8000908 <xQueueGiveFromISR+0x120>
    __asm volatile
 80008f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008f4:	f383 8811 	msr	BASEPRI, r3
 80008f8:	f3bf 8f6f 	isb	sy
 80008fc:	f3bf 8f4f 	dsb	sy
 8000900:	613b      	str	r3, [r7, #16]
}
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <xQueueGiveFromISR+0x11c>
 8000908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800090c:	3301      	adds	r3, #1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	b25a      	sxtb	r2, r3
 8000912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000918:	2301      	movs	r3, #1
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800091c:	e001      	b.n	8000922 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800091e:	2300      	movs	r3, #0
 8000920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000924:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800092c:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 800092e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000930:	4618      	mov	r0, r3
 8000932:	3740      	adds	r7, #64	@ 0x40
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10b      	bne.n	800096a <xQueueReceive+0x32>
    __asm volatile
 8000952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000956:	f383 8811 	msr	BASEPRI, r3
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	623b      	str	r3, [r7, #32]
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	e7fd      	b.n	8000966 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d103      	bne.n	8000978 <xQueueReceive+0x40>
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <xQueueReceive+0x44>
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <xQueueReceive+0x46>
 800097c:	2300      	movs	r3, #0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10b      	bne.n	800099a <xQueueReceive+0x62>
    __asm volatile
 8000982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000986:	f383 8811 	msr	BASEPRI, r3
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	f3bf 8f4f 	dsb	sy
 8000992:	61fb      	str	r3, [r7, #28]
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	e7fd      	b.n	8000996 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800099a:	f001 fa1b 	bl	8001dd4 <xTaskGetSchedulerState>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <xQueueReceive+0x72>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <xQueueReceive+0x76>
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <xQueueReceive+0x78>
 80009ae:	2300      	movs	r3, #0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10b      	bne.n	80009cc <xQueueReceive+0x94>
    __asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	61bb      	str	r3, [r7, #24]
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009cc:	f002 f82a 	bl	8002a24 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d01f      	beq.n	8000a1c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009e0:	f000 f9a4 	bl	8000d2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80009e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e6:	1e5a      	subs	r2, r3, #1
 80009e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ea:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00f      	beq.n	8000a14 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f6:	3310      	adds	r3, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 ffd5 	bl	80019a8 <xTaskRemoveFromEventList>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d007      	beq.n	8000a14 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a04:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <xQueueReceive+0x1c0>)
 8000a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	f3bf 8f4f 	dsb	sy
 8000a10:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000a14:	f002 f838 	bl	8002a88 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e069      	b.n	8000af0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d103      	bne.n	8000a2a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a22:	f002 f831 	bl	8002a88 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e062      	b.n	8000af0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f891 	bl	8001b5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a3e:	f002 f823 	bl	8002a88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a42:	f000 fc9b 	bl	800137c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a46:	f001 ffed 	bl	8002a24 <vPortEnterCritical>
 8000a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a56:	d103      	bne.n	8000a60 <xQueueReceive+0x128>
 8000a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d103      	bne.n	8000a76 <xQueueReceive+0x13e>
 8000a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a76:	f002 f807 	bl	8002a88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a7a:	1d3a      	adds	r2, r7, #4
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f880 	bl	8001b88 <xTaskCheckForTimeOut>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d123      	bne.n	8000ad6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a90:	f000 f9c4 	bl	8000e1c <prvIsQueueEmpty>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d017      	beq.n	8000aca <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a9c:	3324      	adds	r3, #36	@ 0x24
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 ff14 	bl	80018d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aaa:	f000 f965 	bl	8000d78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000aae:	f000 fc73 	bl	8001398 <xTaskResumeAll>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d189      	bne.n	80009cc <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <xQueueReceive+0x1c0>)
 8000aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	f3bf 8f4f 	dsb	sy
 8000ac4:	f3bf 8f6f 	isb	sy
 8000ac8:	e780      	b.n	80009cc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000acc:	f000 f954 	bl	8000d78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ad0:	f000 fc62 	bl	8001398 <xTaskResumeAll>
 8000ad4:	e77a      	b.n	80009cc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ad8:	f000 f94e 	bl	8000d78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000adc:	f000 fc5c 	bl	8001398 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ae2:	f000 f99b 	bl	8000e1c <prvIsQueueEmpty>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f43f af6f 	beq.w	80009cc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000aee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3730      	adds	r7, #48	@ 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	e000ed04 	.word	0xe000ed04

08000afc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	@ 0x30
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10b      	bne.n	8000b30 <xQueueSemaphoreTake+0x34>
    __asm volatile
 8000b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b1c:	f383 8811 	msr	BASEPRI, r3
 8000b20:	f3bf 8f6f 	isb	sy
 8000b24:	f3bf 8f4f 	dsb	sy
 8000b28:	61bb      	str	r3, [r7, #24]
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d00b      	beq.n	8000b50 <xQueueSemaphoreTake+0x54>
    __asm volatile
 8000b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b3c:	f383 8811 	msr	BASEPRI, r3
 8000b40:	f3bf 8f6f 	isb	sy
 8000b44:	f3bf 8f4f 	dsb	sy
 8000b48:	617b      	str	r3, [r7, #20]
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b50:	f001 f940 	bl	8001dd4 <xTaskGetSchedulerState>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <xQueueSemaphoreTake+0x64>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <xQueueSemaphoreTake+0x68>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <xQueueSemaphoreTake+0x6a>
 8000b64:	2300      	movs	r3, #0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10b      	bne.n	8000b82 <xQueueSemaphoreTake+0x86>
    __asm volatile
 8000b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6e:	f383 8811 	msr	BASEPRI, r3
 8000b72:	f3bf 8f6f 	isb	sy
 8000b76:	f3bf 8f4f 	dsb	sy
 8000b7a:	613b      	str	r3, [r7, #16]
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b82:	f001 ff4f 	bl	8002a24 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b8a:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d024      	beq.n	8000bdc <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	1e5a      	subs	r2, r3, #1
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d104      	bne.n	8000bac <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000ba2:	f001 fa91 	bl	80020c8 <pvTaskIncrementMutexHeldCount>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00f      	beq.n	8000bd4 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb6:	3310      	adds	r3, #16
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fef5 	bl	80019a8 <xTaskRemoveFromEventList>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8000cf8 <xQueueSemaphoreTake+0x1fc>)
 8000bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	f3bf 8f4f 	dsb	sy
 8000bd0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bd4:	f001 ff58 	bl	8002a88 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e089      	b.n	8000cf0 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d103      	bne.n	8000bea <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000be2:	f001 ff51 	bl	8002a88 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e082      	b.n	8000cf0 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d106      	bne.n	8000bfe <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 ffb1 	bl	8001b5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bfe:	f001 ff43 	bl	8002a88 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c02:	f000 fbbb 	bl	800137c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c06:	f001 ff0d 	bl	8002a24 <vPortEnterCritical>
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c16:	d103      	bne.n	8000c20 <xQueueSemaphoreTake+0x124>
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d103      	bne.n	8000c36 <xQueueSemaphoreTake+0x13a>
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000c36:	f001 ff27 	bl	8002a88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c3a:	463a      	mov	r2, r7
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 ffa0 	bl	8001b88 <xTaskCheckForTimeOut>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d132      	bne.n	8000cb4 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c50:	f000 f8e4 	bl	8000e1c <prvIsQueueEmpty>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d026      	beq.n	8000ca8 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d109      	bne.n	8000c76 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8000c62:	f001 fedf 	bl	8002a24 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 f8d0 	bl	8001e10 <xTaskPriorityInherit>
 8000c70:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8000c72:	f001 ff09 	bl	8002a88 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c78:	3324      	adds	r3, #36	@ 0x24
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fe26 	bl	80018d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c86:	f000 f877 	bl	8000d78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c8a:	f000 fb85 	bl	8001398 <xTaskResumeAll>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f af76 	bne.w	8000b82 <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <xQueueSemaphoreTake+0x1fc>)
 8000c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	f3bf 8f4f 	dsb	sy
 8000ca2:	f3bf 8f6f 	isb	sy
 8000ca6:	e76c      	b.n	8000b82 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000caa:	f000 f865 	bl	8000d78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000cae:	f000 fb73 	bl	8001398 <xTaskResumeAll>
 8000cb2:	e766      	b.n	8000b82 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000cb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000cb6:	f000 f85f 	bl	8000d78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cba:	f000 fb6d 	bl	8001398 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000cc0:	f000 f8ac 	bl	8000e1c <prvIsQueueEmpty>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f43f af5b 	beq.w	8000b82 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00d      	beq.n	8000cee <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8000cd2:	f001 fea7 	bl	8002a24 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000cd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000cd8:	f000 f810 	bl	8000cfc <prvGetDisinheritPriorityAfterTimeout>
 8000cdc:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	69f9      	ldr	r1, [r7, #28]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 f933 	bl	8001f50 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000cea:	f001 fecd 	bl	8002a88 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000cee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3730      	adds	r7, #48	@ 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	e000ed04 	.word	0xe000ed04

08000cfc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f1c3 0305 	rsb	r3, r3, #5
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e001      	b.n	8000d1e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    }
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d018      	beq.n	8000d70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	441a      	add	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d303      	bcc.n	8000d60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68d9      	ldr	r1, [r3, #12]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	461a      	mov	r2, r3
 8000d6a:	6838      	ldr	r0, [r7, #0]
 8000d6c:	f004 fe18 	bl	80059a0 <memcpy>
    }
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d80:	f001 fe50 	bl	8002a24 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d8c:	e011      	b.n	8000db2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d012      	beq.n	8000dbc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3324      	adds	r3, #36	@ 0x24
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fe04 	bl	80019a8 <xTaskRemoveFromEventList>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000da6:	f000 ff57 	bl	8001c58 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dce9      	bgt.n	8000d8e <prvUnlockQueue+0x16>
 8000dba:	e000      	b.n	8000dbe <prvUnlockQueue+0x46>
                    break;
 8000dbc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	22ff      	movs	r2, #255	@ 0xff
 8000dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000dc6:	f001 fe5f 	bl	8002a88 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000dca:	f001 fe2b 	bl	8002a24 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000dd4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dd6:	e011      	b.n	8000dfc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d012      	beq.n	8000e06 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3310      	adds	r3, #16
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fddf 	bl	80019a8 <xTaskRemoveFromEventList>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000df0:	f000 ff32 	bl	8001c58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dce9      	bgt.n	8000dd8 <prvUnlockQueue+0x60>
 8000e04:	e000      	b.n	8000e08 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000e06:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	22ff      	movs	r2, #255	@ 0xff
 8000e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000e10:	f001 fe3a 	bl	8002a88 <vPortExitCritical>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e24:	f001 fdfe 	bl	8002a24 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e001      	b.n	8000e3a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e3a:	f001 fe25 	bl	8002a88 <vPortExitCritical>

    return xReturn;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10b      	bne.n	8000e74 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e60:	f383 8811 	msr	BASEPRI, r3
 8000e64:	f3bf 8f6f 	isb	sy
 8000e68:	f3bf 8f4f 	dsb	sy
 8000e6c:	60fb      	str	r3, [r7, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d024      	beq.n	8000ec4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e01e      	b.n	8000ebe <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000e80:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <vQueueAddToRegistry+0x9c>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d105      	bne.n	8000e9c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <vQueueAddToRegistry+0x9c>)
 8000e96:	4413      	add	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
                    break;
 8000e9a:	e013      	b.n	8000ec4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10a      	bne.n	8000eb8 <vQueueAddToRegistry+0x70>
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <vQueueAddToRegistry+0x9c>)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <vQueueAddToRegistry+0x9c>)
 8000eb4:	4413      	add	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2b07      	cmp	r3, #7
 8000ec2:	d9dd      	bls.n	8000e80 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d005      	beq.n	8000ed6 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000030 	.word	0x20000030

08000ee8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ef8:	f001 fd94 	bl	8002a24 <vPortEnterCritical>
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d103      	bne.n	8000f12 <vQueueWaitForMessageRestricted+0x2a>
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1e:	d103      	bne.n	8000f28 <vQueueWaitForMessageRestricted+0x40>
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000f28:	f001 fdae 	bl	8002a88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d106      	bne.n	8000f42 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3324      	adds	r3, #36	@ 0x24
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fced 	bl	800191c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff18 	bl	8000d78 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fe84 	bl	8002c70 <pvPortMalloc>
 8000f68:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000f70:	2058      	movs	r0, #88	@ 0x58
 8000f72:	f001 fe7d 	bl	8002c70 <pvPortMalloc>
 8000f76:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d008      	beq.n	8000f90 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000f7e:	2258      	movs	r2, #88	@ 0x58
 8000f80:	2100      	movs	r1, #0
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f004 fce0 	bl	8005948 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f8e:	e005      	b.n	8000f9c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000f90:	6938      	ldr	r0, [r7, #16]
 8000f92:	f001 ff9f 	bl	8002ed4 <vPortFree>
 8000f96:	e001      	b.n	8000f9c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00d      	beq.n	8000fbe <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9303      	str	r3, [sp, #12]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f828 	bl	800100e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000fbe:	697b      	ldr	r3, [r7, #20]
    }
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff ffb3 	bl	8000f50 <prvCreateTask>
 8000fea:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000ff2:	6938      	ldr	r0, [r7, #16]
 8000ff4:	f000 f89c 	bl	8001130 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e002      	b.n	8001004 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001004:	697b      	ldr	r3, [r7, #20]
    }
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b088      	sub	sp, #32
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800101c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800101e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	461a      	mov	r2, r3
 8001026:	21a5      	movs	r1, #165	@ 0xa5
 8001028:	f004 fc8e 	bl	8005948 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800102c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800102e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001036:	3b01      	subs	r3, #1
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	f023 0307 	bic.w	r3, r3, #7
 8001044:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	617b      	str	r3, [r7, #20]
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d01e      	beq.n	80010ac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e012      	b.n	800109a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	4413      	add	r3, r2
 800107a:	7819      	ldrb	r1, [r3, #0]
 800107c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	4413      	add	r3, r2
 8001082:	3334      	adds	r3, #52	@ 0x34
 8001084:	460a      	mov	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	3301      	adds	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	2b09      	cmp	r3, #9
 800109e:	d9e9      	bls.n	8001074 <prvInitialiseNewTask+0x66>
 80010a0:	e000      	b.n	80010a4 <prvInitialiseNewTask+0x96>
            {
                break;
 80010a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80010a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80010ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d90b      	bls.n	80010ca <prvInitialiseNewTask+0xbc>
    __asm volatile
 80010b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b6:	f383 8811 	msr	BASEPRI, r3
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	613b      	str	r3, [r7, #16]
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	e7fd      	b.n	80010c6 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80010ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d901      	bls.n	80010d4 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010d0:	2304      	movs	r3, #4
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80010d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80010da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010de:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80010e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e2:	3304      	adds	r3, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa0b 	bl	8000500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ec:	3318      	adds	r3, #24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa06 	bl	8000500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010f8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80010fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010fc:	f1c3 0205 	rsb	r2, r3, #5
 8001100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001102:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	68f9      	ldr	r1, [r7, #12]
 800110e:	69b8      	ldr	r0, [r7, #24]
 8001110:	f001 fb06 	bl	8002720 <pxPortInitialiseStack>
 8001114:	4602      	mov	r2, r0
 8001116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001118:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800111a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001124:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001138:	f001 fc74 	bl	8002a24 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800113c:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <prvAddNewTaskToReadyList+0x114>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	4a40      	ldr	r2, [pc, #256]	@ (8001244 <prvAddNewTaskToReadyList+0x114>)
 8001144:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001146:	4b40      	ldr	r3, [pc, #256]	@ (8001248 <prvAddNewTaskToReadyList+0x118>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800114e:	4a3e      	ldr	r2, [pc, #248]	@ (8001248 <prvAddNewTaskToReadyList+0x118>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001154:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <prvAddNewTaskToReadyList+0x114>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d110      	bne.n	800117e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800115c:	f000 fda0 	bl	8001ca0 <prvInitialiseTaskLists>
 8001160:	e00d      	b.n	800117e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001162:	4b3a      	ldr	r3, [pc, #232]	@ (800124c <prvAddNewTaskToReadyList+0x11c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d109      	bne.n	800117e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800116a:	4b37      	ldr	r3, [pc, #220]	@ (8001248 <prvAddNewTaskToReadyList+0x118>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001174:	429a      	cmp	r2, r3
 8001176:	d802      	bhi.n	800117e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001178:	4a33      	ldr	r2, [pc, #204]	@ (8001248 <prvAddNewTaskToReadyList+0x118>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <prvAddNewTaskToReadyList+0x120>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a32      	ldr	r2, [pc, #200]	@ (8001250 <prvAddNewTaskToReadyList+0x120>)
 8001186:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001188:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <prvAddNewTaskToReadyList+0x120>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001194:	2201      	movs	r2, #1
 8001196:	409a      	lsls	r2, r3
 8001198:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <prvAddNewTaskToReadyList+0x124>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <prvAddNewTaskToReadyList+0x124>)
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011a6:	492c      	ldr	r1, [pc, #176]	@ (8001258 <prvAddNewTaskToReadyList+0x128>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	3204      	adds	r2, #4
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	1d1a      	adds	r2, r3, #4
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <prvAddNewTaskToReadyList+0x128>)
 80011e6:	441a      	add	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f0:	4919      	ldr	r1, [pc, #100]	@ (8001258 <prvAddNewTaskToReadyList+0x128>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	4814      	ldr	r0, [pc, #80]	@ (8001258 <prvAddNewTaskToReadyList+0x128>)
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4403      	add	r3, r0
 8001210:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001212:	f001 fc39 	bl	8002a88 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <prvAddNewTaskToReadyList+0x11c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00e      	beq.n	800123c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <prvAddNewTaskToReadyList+0x118>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <prvAddNewTaskToReadyList+0x10c>
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <prvAddNewTaskToReadyList+0x12c>)
 800122e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f3bf 8f4f 	dsb	sy
 8001238:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000148 	.word	0x20000148
 8001248:	20000070 	.word	0x20000070
 800124c:	20000154 	.word	0x20000154
 8001250:	20000164 	.word	0x20000164
 8001254:	20000150 	.word	0x20000150
 8001258:	20000074 	.word	0x20000074
 800125c:	e000ed04 	.word	0xe000ed04

08001260 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001266:	2301      	movs	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e011      	b.n	8001298 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001274:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <prvCreateIdleTasks+0x88>)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	4413      	add	r3, r2
 800127a:	7819      	ldrb	r1, [r3, #0]
 800127c:	1d3a      	adds	r2, r7, #4
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4413      	add	r3, r2
 8001282:	460a      	mov	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001286:	1d3a      	adds	r2, r7, #4
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b09      	cmp	r3, #9
 800129c:	ddea      	ble.n	8001274 <prvCreateIdleTasks+0x14>
 800129e:	e000      	b.n	80012a2 <prvCreateIdleTasks+0x42>
        {
            break;
 80012a0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	e015      	b.n	80012d4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <prvCreateIdleTasks+0x8c>)
 80012aa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <prvCreateIdleTasks+0x90>)
 80012b2:	4413      	add	r3, r2
 80012b4:	1d39      	adds	r1, r7, #4
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	2300      	movs	r3, #0
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	2282      	movs	r2, #130	@ 0x82
 80012c0:	6938      	ldr	r0, [r7, #16]
 80012c2:	f7ff fe81 	bl	8000fc8 <xTaskCreate>
 80012c6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dde6      	ble.n	80012a8 <prvCreateIdleTasks+0x48>
 80012da:	e000      	b.n	80012de <prvCreateIdleTasks+0x7e>
        {
            break;
 80012dc:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80012de:	69fb      	ldr	r3, [r7, #28]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	080059d4 	.word	0x080059d4
 80012ec:	08001c71 	.word	0x08001c71
 80012f0:	2000016c 	.word	0x2000016c

080012f4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80012fa:	f7ff ffb1 	bl	8001260 <prvCreateIdleTasks>
 80012fe:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001306:	f000 ff79 	bl	80021fc <xTimerCreateTimerTask>
 800130a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d116      	bne.n	8001340 <vTaskStartScheduler+0x4c>
    __asm volatile
 8001312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	f3bf 8f6f 	isb	sy
 800131e:	f3bf 8f4f 	dsb	sy
 8001322:	60bb      	str	r3, [r7, #8]
}
 8001324:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <vTaskStartScheduler+0x78>)
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <vTaskStartScheduler+0x7c>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <vTaskStartScheduler+0x80>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800133a:	f001 fa83 	bl	8002844 <xPortStartScheduler>
 800133e:	e00f      	b.n	8001360 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001346:	d10b      	bne.n	8001360 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800134c:	f383 8811 	msr	BASEPRI, r3
 8001350:	f3bf 8f6f 	isb	sy
 8001354:	f3bf 8f4f 	dsb	sy
 8001358:	607b      	str	r3, [r7, #4]
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <vTaskStartScheduler+0x84>)
 8001362:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000168 	.word	0x20000168
 8001370:	20000154 	.word	0x20000154
 8001374:	2000014c 	.word	0x2000014c
 8001378:	20000000 	.word	0x20000000

0800137c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <vTaskSuspendAll+0x18>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a03      	ldr	r2, [pc, #12]	@ (8001394 <vTaskSuspendAll+0x18>)
 8001388:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000170 	.word	0x20000170

08001398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80013a6:	f001 fb3d 	bl	8002a24 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80013ae:	4b75      	ldr	r3, [pc, #468]	@ (8001584 <xTaskResumeAll+0x1ec>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10b      	bne.n	80013ce <xTaskResumeAll+0x36>
    __asm volatile
 80013b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013ba:	f383 8811 	msr	BASEPRI, r3
 80013be:	f3bf 8f6f 	isb	sy
 80013c2:	f3bf 8f4f 	dsb	sy
 80013c6:	603b      	str	r3, [r7, #0]
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	e7fd      	b.n	80013ca <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80013ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001584 <xTaskResumeAll+0x1ec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	4a6b      	ldr	r2, [pc, #428]	@ (8001584 <xTaskResumeAll+0x1ec>)
 80013d6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80013d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001584 <xTaskResumeAll+0x1ec>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 80ca 	bne.w	8001576 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80013e2:	4b69      	ldr	r3, [pc, #420]	@ (8001588 <xTaskResumeAll+0x1f0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80c5 	beq.w	8001576 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013ec:	e08e      	b.n	800150c <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80013ee:	4b67      	ldr	r3, [pc, #412]	@ (800158c <xTaskResumeAll+0x1f4>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	6a12      	ldr	r2, [r2, #32]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	69d2      	ldr	r2, [r2, #28]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3318      	adds	r3, #24
 8001418:	429a      	cmp	r2, r3
 800141a:	d103      	bne.n	8001424 <xTaskResumeAll+0x8c>
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	6a1a      	ldr	r2, [r3, #32]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2200      	movs	r2, #0
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	68d2      	ldr	r2, [r2, #12]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	6892      	ldr	r2, [r2, #8]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	429a      	cmp	r2, r3
 8001458:	d103      	bne.n	8001462 <xTaskResumeAll+0xca>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001476:	2201      	movs	r2, #1
 8001478:	409a      	lsls	r2, r3
 800147a:	4b45      	ldr	r3, [pc, #276]	@ (8001590 <xTaskResumeAll+0x1f8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	4a43      	ldr	r2, [pc, #268]	@ (8001590 <xTaskResumeAll+0x1f8>)
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001488:	4942      	ldr	r1, [pc, #264]	@ (8001594 <xTaskResumeAll+0x1fc>)
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3304      	adds	r3, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	3204      	adds	r2, #4
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	1d1a      	adds	r2, r3, #4
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4a33      	ldr	r2, [pc, #204]	@ (8001594 <xTaskResumeAll+0x1fc>)
 80014c8:	441a      	add	r2, r3
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d2:	4930      	ldr	r1, [pc, #192]	@ (8001594 <xTaskResumeAll+0x1fc>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014e4:	1c59      	adds	r1, r3, #1
 80014e6:	482b      	ldr	r0, [pc, #172]	@ (8001594 <xTaskResumeAll+0x1fc>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4403      	add	r3, r0
 80014f2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <xTaskResumeAll+0x200>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fe:	429a      	cmp	r2, r3
 8001500:	d904      	bls.n	800150c <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001502:	4a26      	ldr	r2, [pc, #152]	@ (800159c <xTaskResumeAll+0x204>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2101      	movs	r1, #1
 8001508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <xTaskResumeAll+0x1f4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f47f af6c 	bne.w	80013ee <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800151c:	f000 fc3e 	bl	8001d9c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <xTaskResumeAll+0x208>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800152c:	f000 f858 	bl	80015e0 <xTaskIncrementTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001536:	4a19      	ldr	r2, [pc, #100]	@ (800159c <xTaskResumeAll+0x204>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2101      	movs	r1, #1
 800153c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3b01      	subs	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ef      	bne.n	800152c <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <xTaskResumeAll+0x208>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <xTaskResumeAll+0x204>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <xTaskResumeAll+0x200>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <xTaskResumeAll+0x20c>)
 8001568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f3bf 8f4f 	dsb	sy
 8001572:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001576:	f001 fa87 	bl	8002a88 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800157a:	69bb      	ldr	r3, [r7, #24]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000170 	.word	0x20000170
 8001588:	20000148 	.word	0x20000148
 800158c:	20000108 	.word	0x20000108
 8001590:	20000150 	.word	0x20000150
 8001594:	20000074 	.word	0x20000074
 8001598:	20000070 	.word	0x20000070
 800159c:	2000015c 	.word	0x2000015c
 80015a0:	20000158 	.word	0x20000158
 80015a4:	e000ed04 	.word	0xe000ed04

080015a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <xTaskGetTickCount+0x1c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2000014c 	.word	0x2000014c

080015c8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <uxTaskGetNumberOfTasks+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000148 	.word	0x20000148

080015e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80015ea:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <xTaskIncrementTick+0x208>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 80ef 	bne.w	80017d2 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015f4:	4b7d      	ldr	r3, [pc, #500]	@ (80017ec <xTaskIncrementTick+0x20c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80015fc:	4a7b      	ldr	r2, [pc, #492]	@ (80017ec <xTaskIncrementTick+0x20c>)
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d121      	bne.n	800164c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001608:	4b79      	ldr	r3, [pc, #484]	@ (80017f0 <xTaskIncrementTick+0x210>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	607b      	str	r3, [r7, #4]
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <xTaskIncrementTick+0x46>
 800162a:	4b71      	ldr	r3, [pc, #452]	@ (80017f0 <xTaskIncrementTick+0x210>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	4b70      	ldr	r3, [pc, #448]	@ (80017f4 <xTaskIncrementTick+0x214>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a6e      	ldr	r2, [pc, #440]	@ (80017f0 <xTaskIncrementTick+0x210>)
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4a6e      	ldr	r2, [pc, #440]	@ (80017f4 <xTaskIncrementTick+0x214>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b6e      	ldr	r3, [pc, #440]	@ (80017f8 <xTaskIncrementTick+0x218>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a6c      	ldr	r2, [pc, #432]	@ (80017f8 <xTaskIncrementTick+0x218>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	f000 fba8 	bl	8001d9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800164c:	4b6b      	ldr	r3, [pc, #428]	@ (80017fc <xTaskIncrementTick+0x21c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a3a      	ldr	r2, [r7, #32]
 8001652:	429a      	cmp	r2, r3
 8001654:	f0c0 80a8 	bcc.w	80017a8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001658:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <xTaskIncrementTick+0x210>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d104      	bne.n	800166c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001662:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <xTaskIncrementTick+0x21c>)
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	601a      	str	r2, [r3, #0]
                    break;
 800166a:	e09d      	b.n	80017a8 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800166c:	4b60      	ldr	r3, [pc, #384]	@ (80017f0 <xTaskIncrementTick+0x210>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800167c:	6a3a      	ldr	r2, [r7, #32]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	d203      	bcs.n	800168c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001684:	4a5d      	ldr	r2, [pc, #372]	@ (80017fc <xTaskIncrementTick+0x21c>)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	6013      	str	r3, [r2, #0]
                        break;
 800168a:	e08d      	b.n	80017a8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	68d2      	ldr	r2, [r2, #12]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	6892      	ldr	r2, [r2, #8]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	3304      	adds	r3, #4
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d103      	bne.n	80016ba <xTaskIncrementTick+0xda>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01e      	beq.n	8001710 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	6a12      	ldr	r2, [r2, #32]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	69d2      	ldr	r2, [r2, #28]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	3318      	adds	r3, #24
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d103      	bne.n	8001700 <xTaskIncrementTick+0x120>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1e5a      	subs	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <xTaskIncrementTick+0x220>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	4a38      	ldr	r2, [pc, #224]	@ (8001800 <xTaskIncrementTick+0x220>)
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001726:	4937      	ldr	r1, [pc, #220]	@ (8001804 <xTaskIncrementTick+0x224>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	3204      	adds	r2, #4
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1d1a      	adds	r2, r3, #4
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4a27      	ldr	r2, [pc, #156]	@ (8001804 <xTaskIncrementTick+0x224>)
 8001766:	441a      	add	r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001770:	4924      	ldr	r1, [pc, #144]	@ (8001804 <xTaskIncrementTick+0x224>)
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	481f      	ldr	r0, [pc, #124]	@ (8001804 <xTaskIncrementTick+0x224>)
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4403      	add	r3, r0
 8001790:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <xTaskIncrementTick+0x228>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	429a      	cmp	r2, r3
 800179e:	f67f af5b 	bls.w	8001658 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017a6:	e757      	b.n	8001658 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <xTaskIncrementTick+0x228>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ae:	4915      	ldr	r1, [pc, #84]	@ (8001804 <xTaskIncrementTick+0x224>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d901      	bls.n	80017c4 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <xTaskIncrementTick+0x22c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d0:	e004      	b.n	80017dc <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <xTaskIncrementTick+0x230>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <xTaskIncrementTick+0x230>)
 80017da:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3728      	adds	r7, #40	@ 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000170 	.word	0x20000170
 80017ec:	2000014c 	.word	0x2000014c
 80017f0:	20000100 	.word	0x20000100
 80017f4:	20000104 	.word	0x20000104
 80017f8:	20000160 	.word	0x20000160
 80017fc:	20000168 	.word	0x20000168
 8001800:	20000150 	.word	0x20000150
 8001804:	20000074 	.word	0x20000074
 8001808:	20000070 	.word	0x20000070
 800180c:	2000015c 	.word	0x2000015c
 8001810:	20000158 	.word	0x20000158

08001814 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800181a:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <vTaskSwitchContext+0xa8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001822:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <vTaskSwitchContext+0xac>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001828:	e041      	b.n	80018ae <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 800182a:	4b25      	ldr	r3, [pc, #148]	@ (80018c0 <vTaskSwitchContext+0xac>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <vTaskSwitchContext+0xb0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800183e:	7afb      	ldrb	r3, [r7, #11]
 8001840:	f1c3 031f 	rsb	r3, r3, #31
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	4920      	ldr	r1, [pc, #128]	@ (80018c8 <vTaskSwitchContext+0xb4>)
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10b      	bne.n	8001872 <vTaskSwitchContext+0x5e>
    __asm volatile
 800185a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	607b      	str	r3, [r7, #4]
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	e7fd      	b.n	800186e <vTaskSwitchContext+0x5a>
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <vTaskSwitchContext+0xb4>)
 800187e:	4413      	add	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	3308      	adds	r3, #8
 8001894:	429a      	cmp	r2, r3
 8001896:	d103      	bne.n	80018a0 <vTaskSwitchContext+0x8c>
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <vTaskSwitchContext+0xb8>)
 80018a8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <vTaskSwitchContext+0xb8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
    }
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000170 	.word	0x20000170
 80018c0:	2000015c 	.word	0x2000015c
 80018c4:	20000150 	.word	0x20000150
 80018c8:	20000074 	.word	0x20000074
 80018cc:	20000070 	.word	0x20000070

080018d0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10b      	bne.n	80018f8 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80018e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018e4:	f383 8811 	msr	BASEPRI, r3
 80018e8:	f3bf 8f6f 	isb	sy
 80018ec:	f3bf 8f4f 	dsb	sy
 80018f0:	60fb      	str	r3, [r7, #12]
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018f8:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <vTaskPlaceOnEventList+0x48>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3318      	adds	r3, #24
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7fe fe0a 	bl	800051a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001906:	2101      	movs	r1, #1
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f000 fbf5 	bl	80020f8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000070 	.word	0x20000070

0800191c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10b      	bne.n	8001946 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800192e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001932:	f383 8811 	msr	BASEPRI, r3
 8001936:	f3bf 8f6f 	isb	sy
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	613b      	str	r3, [r7, #16]
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	e7fd      	b.n	8001942 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <vTaskPlaceOnEventListRestricted+0x88>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	61da      	str	r2, [r3, #28]
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	6892      	ldr	r2, [r2, #8]
 800195c:	621a      	str	r2, [r3, #32]
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	3218      	adds	r2, #24
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <vTaskPlaceOnEventListRestricted+0x88>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f103 0218 	add.w	r2, r3, #24
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	68b8      	ldr	r0, [r7, #8]
 8001998:	f000 fbae 	bl	80020f8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000070 	.word	0x20000070

080019a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b08b      	sub	sp, #44	@ 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10b      	bne.n	80019d6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80019be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	60fb      	str	r3, [r7, #12]
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	e7fd      	b.n	80019d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	6a12      	ldr	r2, [r2, #32]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	6a3a      	ldr	r2, [r7, #32]
 80019ec:	69d2      	ldr	r2, [r2, #28]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	3318      	adds	r3, #24
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d103      	bne.n	8001a04 <xTaskRemoveFromEventList+0x5c>
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001a14:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <xTaskRemoveFromEventList+0x19c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d160      	bne.n	8001ade <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	6a3a      	ldr	r2, [r7, #32]
 8001a28:	68d2      	ldr	r2, [r2, #12]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	6a3a      	ldr	r2, [r7, #32]
 8001a32:	6892      	ldr	r2, [r2, #8]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d103      	bne.n	8001a4a <xTaskRemoveFromEventList+0xa2>
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5e:	2201      	movs	r2, #1
 8001a60:	409a      	lsls	r2, r3
 8001a62:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <xTaskRemoveFromEventList+0x1a0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	4a37      	ldr	r2, [pc, #220]	@ (8001b48 <xTaskRemoveFromEventList+0x1a0>)
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a70:	4936      	ldr	r1, [pc, #216]	@ (8001b4c <xTaskRemoveFromEventList+0x1a4>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	3204      	adds	r2, #4
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	1d1a      	adds	r2, r3, #4
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <xTaskRemoveFromEventList+0x1a4>)
 8001ab0:	441a      	add	r2, r3
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aba:	4924      	ldr	r1, [pc, #144]	@ (8001b4c <xTaskRemoveFromEventList+0x1a4>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a3a      	ldr	r2, [r7, #32]
 8001aca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001acc:	1c59      	adds	r1, r3, #1
 8001ace:	481f      	ldr	r0, [pc, #124]	@ (8001b4c <xTaskRemoveFromEventList+0x1a4>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4403      	add	r3, r0
 8001ada:	6019      	str	r1, [r3, #0]
 8001adc:	e01b      	b.n	8001b16 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <xTaskRemoveFromEventList+0x1a8>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	61da      	str	r2, [r3, #28]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	621a      	str	r2, [r3, #32]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	6a3a      	ldr	r2, [r7, #32]
 8001af8:	3218      	adds	r2, #24
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f103 0218 	add.w	r2, r3, #24
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <xTaskRemoveFromEventList+0x1a8>)
 8001b0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <xTaskRemoveFromEventList+0x1a8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <xTaskRemoveFromEventList+0x1a8>)
 8001b14:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <xTaskRemoveFromEventList+0x1ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d905      	bls.n	8001b30 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <xTaskRemoveFromEventList+0x1b0>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e001      	b.n	8001b34 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	372c      	adds	r7, #44	@ 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000170 	.word	0x20000170
 8001b48:	20000150 	.word	0x20000150
 8001b4c:	20000074 	.word	0x20000074
 8001b50:	20000108 	.word	0x20000108
 8001b54:	20000070 	.word	0x20000070
 8001b58:	2000015c 	.word	0x2000015c

08001b5c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <vTaskInternalSetTimeOutState+0x24>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <vTaskInternalSetTimeOutState+0x28>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	20000160 	.word	0x20000160
 8001b84:	2000014c 	.word	0x2000014c

08001b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b9c:	f383 8811 	msr	BASEPRI, r3
 8001ba0:	f3bf 8f6f 	isb	sy
 8001ba4:	f3bf 8f4f 	dsb	sy
 8001ba8:	613b      	str	r3, [r7, #16]
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10b      	bne.n	8001bce <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bba:	f383 8811 	msr	BASEPRI, r3
 8001bbe:	f3bf 8f6f 	isb	sy
 8001bc2:	f3bf 8f4f 	dsb	sy
 8001bc6:	60fb      	str	r3, [r7, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	e7fd      	b.n	8001bca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001bce:	f000 ff29 	bl	8002a24 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <xTaskCheckForTimeOut+0xc8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bea:	d102      	bne.n	8001bf2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	e026      	b.n	8001c40 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <xTaskCheckForTimeOut+0xcc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d00a      	beq.n	8001c14 <xTaskCheckForTimeOut+0x8c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d305      	bcc.n	8001c14 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e015      	b.n	8001c40 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d20b      	bcs.n	8001c36 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad2      	subs	r2, r2, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff96 	bl	8001b5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e004      	b.n	8001c40 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001c40:	f000 ff22 	bl	8002a88 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001c44:	69fb      	ldr	r3, [r7, #28]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000014c 	.word	0x2000014c
 8001c54:	20000160 	.word	0x20000160

08001c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <vTaskMissedYield+0x14>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	2000015c 	.word	0x2000015c

08001c70 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c78:	f000 f852 	bl	8001d20 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <prvIdleTask+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d9f9      	bls.n	8001c78 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <prvIdleTask+0x2c>)
 8001c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c94:	e7f0      	b.n	8001c78 <prvIdleTask+0x8>
 8001c96:	bf00      	nop
 8001c98:	20000074 	.word	0x20000074
 8001c9c:	e000ed04 	.word	0xe000ed04

08001ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	e00c      	b.n	8001cc6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <prvInitialiseTaskLists+0x60>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc00 	bl	80004c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d9ef      	bls.n	8001cac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ccc:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <prvInitialiseTaskLists+0x64>)
 8001cce:	f7fe fbf7 	bl	80004c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <prvInitialiseTaskLists+0x68>)
 8001cd4:	f7fe fbf4 	bl	80004c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001cd8:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <prvInitialiseTaskLists+0x6c>)
 8001cda:	f7fe fbf1 	bl	80004c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001cde:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <prvInitialiseTaskLists+0x70>)
 8001ce0:	f7fe fbee 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ce4:	480b      	ldr	r0, [pc, #44]	@ (8001d14 <prvInitialiseTaskLists+0x74>)
 8001ce6:	f7fe fbeb 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <prvInitialiseTaskLists+0x78>)
 8001cec:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <prvInitialiseTaskLists+0x64>)
 8001cee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <prvInitialiseTaskLists+0x7c>)
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <prvInitialiseTaskLists+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000074 	.word	0x20000074
 8001d04:	200000d8 	.word	0x200000d8
 8001d08:	200000ec 	.word	0x200000ec
 8001d0c:	20000108 	.word	0x20000108
 8001d10:	2000011c 	.word	0x2000011c
 8001d14:	20000134 	.word	0x20000134
 8001d18:	20000100 	.word	0x20000100
 8001d1c:	20000104 	.word	0x20000104

08001d20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d26:	e019      	b.n	8001d5c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001d28:	f000 fe7c 	bl	8002a24 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <prvCheckTasksWaitingTermination+0x50>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc27 	bl	800058c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <prvCheckTasksWaitingTermination+0x54>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <prvCheckTasksWaitingTermination+0x54>)
 8001d46:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <prvCheckTasksWaitingTermination+0x58>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <prvCheckTasksWaitingTermination+0x58>)
 8001d50:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001d52:	f000 fe99 	bl	8002a88 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f810 	bl	8001d7c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <prvCheckTasksWaitingTermination+0x58>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e1      	bne.n	8001d28 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000011c 	.word	0x2000011c
 8001d74:	20000148 	.word	0x20000148
 8001d78:	20000130 	.word	0x20000130

08001d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 f8a3 	bl	8002ed4 <vPortFree>
            vPortFree( pxTCB );
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 f8a0 	bl	8002ed4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <prvResetNextTaskUnblockTime+0x30>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d104      	bne.n	8001db4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <prvResetNextTaskUnblockTime+0x34>)
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001db2:	e005      	b.n	8001dc0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <prvResetNextTaskUnblockTime+0x30>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <prvResetNextTaskUnblockTime+0x34>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000100 	.word	0x20000100
 8001dd0:	20000168 	.word	0x20000168

08001dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <xTaskGetSchedulerState+0x34>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001de2:	2301      	movs	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	e008      	b.n	8001dfa <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <xTaskGetSchedulerState+0x38>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001df0:	2302      	movs	r3, #2
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e001      	b.n	8001dfa <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001dfa:	687b      	ldr	r3, [r7, #4]
    }
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	20000154 	.word	0x20000154
 8001e0c:	20000170 	.word	0x20000170

08001e10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8089 	beq.w	8001f3a <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e2c:	4b45      	ldr	r3, [pc, #276]	@ (8001f44 <xTaskPriorityInherit+0x134>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d278      	bcs.n	8001f28 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db06      	blt.n	8001e4c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8001e3e:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <xTaskPriorityInherit+0x134>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	f1c3 0205 	rsb	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	6959      	ldr	r1, [r3, #20]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f48 <xTaskPriorityInherit+0x138>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	4299      	cmp	r1, r3
 8001e62:	d159      	bne.n	8001f18 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb8f 	bl	800058c <uxListRemove>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	2201      	movs	r2, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <xTaskPriorityInherit+0x13c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4013      	ands	r3, r2
 8001e86:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <xTaskPriorityInherit+0x13c>)
 8001e88:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f44 <xTaskPriorityInherit+0x134>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e98:	2201      	movs	r2, #1
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <xTaskPriorityInherit+0x13c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <xTaskPriorityInherit+0x13c>)
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eaa:	4927      	ldr	r1, [pc, #156]	@ (8001f48 <xTaskPriorityInherit+0x138>)
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	3204      	adds	r2, #4
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1d1a      	adds	r2, r3, #4
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4a17      	ldr	r2, [pc, #92]	@ (8001f48 <xTaskPriorityInherit+0x138>)
 8001eea:	441a      	add	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef4:	4914      	ldr	r1, [pc, #80]	@ (8001f48 <xTaskPriorityInherit+0x138>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	480f      	ldr	r0, [pc, #60]	@ (8001f48 <xTaskPriorityInherit+0x138>)
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4403      	add	r3, r0
 8001f14:	6019      	str	r1, [r3, #0]
 8001f16:	e004      	b.n	8001f22 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <xTaskPriorityInherit+0x134>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e008      	b.n	8001f3a <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <xTaskPriorityInherit+0x134>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d201      	bcs.n	8001f3a <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8001f3a:	697b      	ldr	r3, [r7, #20]
    }
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000070 	.word	0x20000070
 8001f48:	20000074 	.word	0x20000074
 8001f4c:	20000150 	.word	0x20000150

08001f50 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a5 	beq.w	80020b4 <vTaskPriorityDisinheritAfterTimeout+0x164>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 8001f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	613b      	str	r3, [r7, #16]
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	e7fd      	b.n	8001f86 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d902      	bls.n	8001f9a <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f98:	e002      	b.n	8001fa0 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	f000 8084 	beq.w	80020b4 <vTaskPriorityDisinheritAfterTimeout+0x164>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d17e      	bne.n	80020b4 <vTaskPriorityDisinheritAfterTimeout+0x164>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001fb6:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a3a      	ldr	r2, [r7, #32]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d10b      	bne.n	8001fd8 <vTaskPriorityDisinheritAfterTimeout+0x88>
    __asm volatile
 8001fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	60fb      	str	r3, [r7, #12]
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fdc:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db04      	blt.n	8001ff6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	f1c3 0205 	rsb	r2, r3, #5
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	6959      	ldr	r1, [r3, #20]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4a2e      	ldr	r2, [pc, #184]	@ (80020c0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002006:	4413      	add	r3, r2
 8002008:	4299      	cmp	r1, r3
 800200a:	d153      	bne.n	80020b4 <vTaskPriorityDisinheritAfterTimeout+0x164>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	3304      	adds	r3, #4
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fabb 	bl	800058c <uxListRemove>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	2201      	movs	r2, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	4b26      	ldr	r3, [pc, #152]	@ (80020c4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4013      	ands	r3, r2
 800202e:	4a25      	ldr	r2, [pc, #148]	@ (80020c4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002030:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	2201      	movs	r2, #1
 8002038:	409a      	lsls	r2, r3
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	4a20      	ldr	r2, [pc, #128]	@ (80020c4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002048:	491d      	ldr	r1, [pc, #116]	@ (80020c0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3304      	adds	r3, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	3204      	adds	r2, #4
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	1d1a      	adds	r2, r3, #4
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002088:	441a      	add	r2, r3
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002092:	490b      	ldr	r1, [pc, #44]	@ (80020c0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020a4:	1c59      	adds	r1, r3, #1
 80020a6:	4806      	ldr	r0, [pc, #24]	@ (80020c0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4403      	add	r3, r0
 80020b2:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80020b4:	bf00      	nop
 80020b6:	3728      	adds	r7, #40	@ 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000070 	.word	0x20000070
 80020c0:	20000074 	.word	0x20000074
 80020c4:	20000150 	.word	0x20000150

080020c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <pvTaskIncrementMutexHeldCount+0x2c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80020e4:	687b      	ldr	r3, [r7, #4]
    }
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000070 	.word	0x20000070

080020f8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002102:	4b37      	ldr	r3, [pc, #220]	@ (80021e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002108:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <prvAddCurrentTaskToDelayedList+0xec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800210e:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002114:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa36 	bl	800058c <uxListRemove>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	2201      	movs	r2, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	4b2e      	ldr	r3, [pc, #184]	@ (80021f0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4013      	ands	r3, r2
 800213a:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <prvAddCurrentTaskToDelayedList+0xf8>)
 800213c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d124      	bne.n	8002190 <prvAddCurrentTaskToDelayedList+0x98>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d021      	beq.n	8002190 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800214c:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	6892      	ldr	r2, [r2, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	3204      	adds	r2, #4
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	1d1a      	adds	r2, r3, #4
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002180:	615a      	str	r2, [r3, #20]
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	4a1a      	ldr	r2, [pc, #104]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800218e:	e022      	b.n	80021d6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3304      	adds	r3, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	6978      	ldr	r0, [r7, #20]
 80021b2:	f7fe f9b2 	bl	800051a <vListInsert>
}
 80021b6:	e00e      	b.n	80021d6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <prvAddCurrentTaskToDelayedList+0xf4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3304      	adds	r3, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	69b8      	ldr	r0, [r7, #24]
 80021c2:	f7fe f9aa 	bl	800051a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0x100>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d202      	bcs.n	80021d6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80021d0:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0x100>)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000014c 	.word	0x2000014c
 80021e4:	20000100 	.word	0x20000100
 80021e8:	20000104 	.word	0x20000104
 80021ec:	20000070 	.word	0x20000070
 80021f0:	20000150 	.word	0x20000150
 80021f4:	20000134 	.word	0x20000134
 80021f8:	20000168 	.word	0x20000168

080021fc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002206:	f000 fa55 	bl	80026b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800220a:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <xTimerCreateTimerTask+0x58>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <xTimerCreateTimerTask+0x5c>)
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	2302      	movs	r3, #2
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2300      	movs	r3, #0
 800221c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002220:	490e      	ldr	r1, [pc, #56]	@ (800225c <xTimerCreateTimerTask+0x60>)
 8002222:	480f      	ldr	r0, [pc, #60]	@ (8002260 <xTimerCreateTimerTask+0x64>)
 8002224:	f7fe fed0 	bl	8000fc8 <xTaskCreate>
 8002228:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	603b      	str	r3, [r7, #0]
}
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002248:	687b      	ldr	r3, [r7, #4]
    }
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200001a4 	.word	0x200001a4
 8002258:	200001a8 	.word	0x200001a8
 800225c:	080059dc 	.word	0x080059dc
 8002260:	08002309 	.word	0x08002309

08002264 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002270:	e008      	b.n	8002284 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	18d1      	adds	r1, r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f8df 	bl	8002454 <prvInsertTimerInActiveList>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ea      	bne.n	8002272 <prvReloadTimer+0xe>
        }
    }
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <prvProcessExpiredTimer+0x5c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3304      	adds	r3, #4
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f963 	bl	800058c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ffc3 	bl	8002264 <prvReloadTimer>
 80022de:	e008      	b.n	80022f2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	4798      	blx	r3
    }
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000019c 	.word	0x2000019c

08002308 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f859 	bl	80023cc <prvGetNextExpireTime>
 800231a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4619      	mov	r1, r3
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f805 	bl	8002330 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002326:	f000 f8d7 	bl	80024d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800232a:	bf00      	nop
 800232c:	e7f0      	b.n	8002310 <prvTimerTask+0x8>
	...

08002330 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800233a:	f7ff f81f 	bl	800137c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f866 	bl	8002414 <prvSampleTimeNow>
 8002348:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d130      	bne.n	80023b2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <prvProcessTimerOrBlockTask+0x3c>
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	429a      	cmp	r2, r3
 800235c:	d806      	bhi.n	800236c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800235e:	f7ff f81b 	bl	8001398 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002362:	68f9      	ldr	r1, [r7, #12]
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff9f 	bl	80022a8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800236a:	e024      	b.n	80023b6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <prvProcessTimerOrBlockTask+0x90>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <prvProcessTimerOrBlockTask+0x50>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <prvProcessTimerOrBlockTask+0x52>
 8002380:	2300      	movs	r3, #0
 8002382:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <prvProcessTimerOrBlockTask+0x94>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fda9 	bl	8000ee8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002396:	f7fe ffff 	bl	8001398 <xTaskResumeAll>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <prvProcessTimerOrBlockTask+0x98>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
    }
 80023b0:	e001      	b.n	80023b6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80023b2:	f7fe fff1 	bl	8001398 <xTaskResumeAll>
    }
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200001a0 	.word	0x200001a0
 80023c4:	200001a4 	.word	0x200001a4
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <prvGetNextExpireTime+0x44>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <prvGetNextExpireTime+0x16>
 80023de:	2201      	movs	r2, #1
 80023e0:	e000      	b.n	80023e4 <prvGetNextExpireTime+0x18>
 80023e2:	2200      	movs	r2, #0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023f0:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <prvGetNextExpireTime+0x44>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e001      	b.n	8002400 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002400:	68fb      	ldr	r3, [r7, #12]
    }
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	2000019c 	.word	0x2000019c

08002414 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800241c:	f7ff f8c4 	bl	80015a8 <xTaskGetTickCount>
 8002420:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002422:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <prvSampleTimeNow+0x3c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d205      	bcs.n	8002438 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800242c:	f000 f91c 	bl	8002668 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e002      	b.n	800243e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <prvSampleTimeNow+0x3c>)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002444:	68fb      	ldr	r3, [r7, #12]
    }
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200001ac 	.word	0x200001ac

08002454 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	d812      	bhi.n	80024a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	1ad2      	subs	r2, r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	429a      	cmp	r2, r3
 8002486:	d302      	bcc.n	800248e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002488:	2301      	movs	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e01b      	b.n	80024c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <prvInsertTimerInActiveList+0x7c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3304      	adds	r3, #4
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f7fe f83e 	bl	800051a <vListInsert>
 800249e:	e012      	b.n	80024c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d206      	bcs.n	80024b6 <prvInsertTimerInActiveList+0x62>
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d302      	bcc.n	80024b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e007      	b.n	80024c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024b6:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <prvInsertTimerInActiveList+0x80>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7fe f82a 	bl	800051a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80024c6:	697b      	ldr	r3, [r7, #20]
    }
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200001a0 	.word	0x200001a0
 80024d4:	2000019c 	.word	0x2000019c

080024d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80024ea:	e0a9      	b.n	8002640 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f2c0 80a6 	blt.w	8002640 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	3304      	adds	r3, #4
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f841 	bl	800058c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff81 	bl	8002414 <prvSampleTimeNow>
 8002512:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	3b01      	subs	r3, #1
 8002518:	2b08      	cmp	r3, #8
 800251a:	f200 808e 	bhi.w	800263a <prvProcessReceivedCommands+0x162>
 800251e:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <prvProcessReceivedCommands+0x4c>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	08002549 	.word	0x08002549
 8002528:	08002549 	.word	0x08002549
 800252c:	080025b1 	.word	0x080025b1
 8002530:	080025c5 	.word	0x080025c5
 8002534:	08002611 	.word	0x08002611
 8002538:	08002549 	.word	0x08002549
 800253c:	08002549 	.word	0x08002549
 8002540:	080025b1 	.word	0x080025b1
 8002544:	080025c5 	.word	0x080025c5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	18d1      	adds	r1, r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	69f8      	ldr	r0, [r7, #28]
 8002568:	f7ff ff74 	bl	8002454 <prvInsertTimerInActiveList>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d065      	beq.n	800263e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	4413      	add	r3, r2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4619      	mov	r1, r3
 800258c:	69f8      	ldr	r0, [r7, #28]
 800258e:	f7ff fe69 	bl	8002264 <prvReloadTimer>
 8002592:	e008      	b.n	80025a6 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	69f8      	ldr	r0, [r7, #28]
 80025ac:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80025ae:	e046      	b.n	800263e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80025c2:	e03d      	b.n	8002640 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <prvProcessReceivedCommands+0x124>
    __asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	617b      	str	r3, [r7, #20]
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	18d1      	adds	r1, r2, r3
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	69f8      	ldr	r0, [r7, #28]
 800260a:	f7ff ff23 	bl	8002454 <prvInsertTimerInActiveList>
                        break;
 800260e:	e017      	b.n	8002640 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800261e:	69f8      	ldr	r0, [r7, #28]
 8002620:	f000 fc58 	bl	8002ed4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002624:	e00c      	b.n	8002640 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002638:	e002      	b.n	8002640 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <prvProcessReceivedCommands+0x168>
                        break;
 800263e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <prvProcessReceivedCommands+0x18c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f107 0108 	add.w	r1, r7, #8
 8002648:	2200      	movs	r2, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe f974 	bl	8000938 <xQueueReceive>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f47f af4a 	bne.w	80024ec <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200001a4 	.word	0x200001a4

08002668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800266e:	e009      	b.n	8002684 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002670:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <prvSwitchTimerLists+0x44>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800267a:	f04f 31ff 	mov.w	r1, #4294967295
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f7ff fe12 	bl	80022a8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <prvSwitchTimerLists+0x44>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <prvSwitchTimerLists+0x44>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <prvSwitchTimerLists+0x48>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <prvSwitchTimerLists+0x44>)
 800269a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800269c:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <prvSwitchTimerLists+0x48>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
    }
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000019c 	.word	0x2000019c
 80026b0:	200001a0 	.word	0x200001a0

080026b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80026b8:	f000 f9b4 	bl	8002a24 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <prvCheckForValidListAndQueue+0x54>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d11d      	bne.n	8002700 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80026c4:	4811      	ldr	r0, [pc, #68]	@ (800270c <prvCheckForValidListAndQueue+0x58>)
 80026c6:	f7fd fefb 	bl	80004c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80026ca:	4811      	ldr	r0, [pc, #68]	@ (8002710 <prvCheckForValidListAndQueue+0x5c>)
 80026cc:	f7fd fef8 	bl	80004c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <prvCheckForValidListAndQueue+0x60>)
 80026d2:	4a0e      	ldr	r2, [pc, #56]	@ (800270c <prvCheckForValidListAndQueue+0x58>)
 80026d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <prvCheckForValidListAndQueue+0x64>)
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <prvCheckForValidListAndQueue+0x5c>)
 80026da:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80026dc:	2200      	movs	r2, #0
 80026de:	210c      	movs	r1, #12
 80026e0:	200a      	movs	r0, #10
 80026e2:	f7fe f80f 	bl	8000704 <xQueueGenericCreate>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <prvCheckForValidListAndQueue+0x54>)
 80026ea:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <prvCheckForValidListAndQueue+0x54>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <prvCheckForValidListAndQueue+0x54>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4908      	ldr	r1, [pc, #32]	@ (800271c <prvCheckForValidListAndQueue+0x68>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fba4 	bl	8000e48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002700:	f000 f9c2 	bl	8002a88 <vPortExitCritical>
    }
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200001a4 	.word	0x200001a4
 800270c:	20000174 	.word	0x20000174
 8002710:	20000188 	.word	0x20000188
 8002714:	2000019c 	.word	0x2000019c
 8002718:	200001a0 	.word	0x200001a0
 800271c:	080059e4 	.word	0x080059e4

08002720 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3b04      	subs	r3, #4
 8002730:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002738:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3b04      	subs	r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f023 0201 	bic.w	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b04      	subs	r3, #4
 800274e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002750:	4a0c      	ldr	r2, [pc, #48]	@ (8002784 <pxPortInitialiseStack+0x64>)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b14      	subs	r3, #20
 800275a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3b04      	subs	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f06f 0202 	mvn.w	r2, #2
 800276e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3b20      	subs	r3, #32
 8002774:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	08002789 	.word	0x08002789

08002788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002792:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <prvTaskExitError+0x58>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d00b      	beq.n	80027b4 <prvTaskExitError+0x2c>
    __asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	60fb      	str	r3, [r7, #12]
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <prvTaskExitError+0x28>
    __asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	60bb      	str	r3, [r7, #8]
}
 80027c6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80027c8:	bf00      	nop
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0fc      	beq.n	80027ca <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000004 	.word	0x20000004
	...

080027f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80027f0:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <pxCurrentTCBConst2>)
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	6808      	ldr	r0, [r1, #0]
 80027f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fa:	f380 8809 	msr	PSP, r0
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f04f 0000 	mov.w	r0, #0
 8002806:	f380 8811 	msr	BASEPRI, r0
 800280a:	4770      	bx	lr
 800280c:	f3af 8000 	nop.w

08002810 <pxCurrentTCBConst2>:
 8002810:	20000070 	.word	0x20000070
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop

08002818 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002818:	4808      	ldr	r0, [pc, #32]	@ (800283c <prvPortStartFirstTask+0x24>)
 800281a:	6800      	ldr	r0, [r0, #0]
 800281c:	6800      	ldr	r0, [r0, #0]
 800281e:	f380 8808 	msr	MSP, r0
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f380 8814 	msr	CONTROL, r0
 800282a:	b662      	cpsie	i
 800282c:	b661      	cpsie	f
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	df00      	svc	0
 8002838:	bf00      	nop
 800283a:	0000      	.short	0x0000
 800283c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop

08002844 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	@ 0x30
 8002848:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800284a:	4b69      	ldr	r3, [pc, #420]	@ (80029f0 <xPortStartScheduler+0x1ac>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a69      	ldr	r2, [pc, #420]	@ (80029f4 <xPortStartScheduler+0x1b0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d10b      	bne.n	800286c <xPortStartScheduler+0x28>
    __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800286c:	4b60      	ldr	r3, [pc, #384]	@ (80029f0 <xPortStartScheduler+0x1ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a61      	ldr	r2, [pc, #388]	@ (80029f8 <xPortStartScheduler+0x1b4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10b      	bne.n	800288e <xPortStartScheduler+0x4a>
    __asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	623b      	str	r3, [r7, #32]
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	e7fd      	b.n	800288a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800288e:	4b5b      	ldr	r3, [pc, #364]	@ (80029fc <xPortStartScheduler+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002896:	332c      	adds	r3, #44	@ 0x2c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a59      	ldr	r2, [pc, #356]	@ (8002a00 <xPortStartScheduler+0x1bc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00b      	beq.n	80028b8 <xPortStartScheduler+0x74>
    __asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	61fb      	str	r3, [r7, #28]
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	3338      	adds	r3, #56	@ 0x38
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a51      	ldr	r2, [pc, #324]	@ (8002a04 <xPortStartScheduler+0x1c0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00b      	beq.n	80028dc <xPortStartScheduler+0x98>
    __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	61bb      	str	r3, [r7, #24]
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80028e0:	4b49      	ldr	r3, [pc, #292]	@ (8002a08 <xPortStartScheduler+0x1c4>)
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	22ff      	movs	r2, #255	@ 0xff
 80028f0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <xPortStartScheduler+0x1c8>)
 8002906:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002908:	4b40      	ldr	r3, [pc, #256]	@ (8002a0c <xPortStartScheduler+0x1c8>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <xPortStartScheduler+0xe4>
    __asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	617b      	str	r3, [r7, #20]
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d013      	beq.n	800295e <xPortStartScheduler+0x11a>
    __asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	613b      	str	r3, [r7, #16]
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	e7fd      	b.n	800294a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b80      	cmp	r3, #128	@ 0x80
 8002968:	d0f1      	beq.n	800294e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d103      	bne.n	8002978 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002970:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <xPortStartScheduler+0x1cc>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e004      	b.n	8002982 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <xPortStartScheduler+0x1cc>)
 8002980:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002982:	4b23      	ldr	r3, [pc, #140]	@ (8002a10 <xPortStartScheduler+0x1cc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4a21      	ldr	r2, [pc, #132]	@ (8002a10 <xPortStartScheduler+0x1cc>)
 800298a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800298c:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <xPortStartScheduler+0x1cc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002994:	4a1e      	ldr	r2, [pc, #120]	@ (8002a10 <xPortStartScheduler+0x1cc>)
 8002996:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <xPortStartScheduler+0x1d0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <xPortStartScheduler+0x1d0>)
 80029a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029ac:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <xPortStartScheduler+0x1d0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <xPortStartScheduler+0x1d0>)
 80029b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029b6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80029b8:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <xPortStartScheduler+0x1d4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80029be:	f000 f8e5 	bl	8002b8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029c2:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <xPortStartScheduler+0x1d8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80029c8:	f000 f904 	bl	8002bd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029cc:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <xPortStartScheduler+0x1dc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <xPortStartScheduler+0x1dc>)
 80029d2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80029d6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80029d8:	f7ff ff1e 	bl	8002818 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80029dc:	f7fe ff1a 	bl	8001814 <vTaskSwitchContext>
    prvTaskExitError();
 80029e0:	f7ff fed2 	bl	8002788 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3730      	adds	r7, #48	@ 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00
 80029f4:	410fc271 	.word	0x410fc271
 80029f8:	410fc270 	.word	0x410fc270
 80029fc:	e000ed08 	.word	0xe000ed08
 8002a00:	080027f1 	.word	0x080027f1
 8002a04:	08002ae1 	.word	0x08002ae1
 8002a08:	e000e400 	.word	0xe000e400
 8002a0c:	200001b0 	.word	0x200001b0
 8002a10:	200001b4 	.word	0x200001b4
 8002a14:	e000ed20 	.word	0xe000ed20
 8002a18:	e000ed1c 	.word	0xe000ed1c
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	e000ef34 	.word	0xe000ef34

08002a24 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
    __asm volatile
 8002a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	607b      	str	r3, [r7, #4]
}
 8002a3c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <vPortEnterCritical+0x5c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <vPortEnterCritical+0x5c>)
 8002a46:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <vPortEnterCritical+0x5c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d110      	bne.n	8002a72 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a50:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <vPortEnterCritical+0x60>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <vPortEnterCritical+0x4e>
    __asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	603b      	str	r3, [r7, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	e7fd      	b.n	8002a6e <vPortEnterCritical+0x4a>
    }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000004 	.word	0x20000004
 8002a84:	e000ed04 	.word	0xe000ed04

08002a88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <vPortExitCritical+0x50>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <vPortExitCritical+0x26>
    __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	607b      	str	r3, [r7, #4]
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	e7fd      	b.n	8002aaa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <vPortExitCritical+0x50>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <vPortExitCritical+0x50>)
 8002ab6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ab8:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <vPortExitCritical+0x50>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <vPortExitCritical+0x44>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f383 8811 	msr	BASEPRI, r3
}
 8002aca:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	20000004 	.word	0x20000004
 8002adc:	00000000 	.word	0x00000000

08002ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ae0:	f3ef 8009 	mrs	r0, PSP
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <pxCurrentTCBConst>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	f01e 0f10 	tst.w	lr, #16
 8002af0:	bf08      	it	eq
 8002af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afa:	6010      	str	r0, [r2, #0]
 8002afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b04:	f380 8811 	msr	BASEPRI, r0
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f7fe fe80 	bl	8001814 <vTaskSwitchContext>
 8002b14:	f04f 0000 	mov.w	r0, #0
 8002b18:	f380 8811 	msr	BASEPRI, r0
 8002b1c:	bc09      	pop	{r0, r3}
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	6808      	ldr	r0, [r1, #0]
 8002b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b26:	f01e 0f10 	tst.w	lr, #16
 8002b2a:	bf08      	it	eq
 8002b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b30:	f380 8809 	msr	PSP, r0
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	f3af 8000 	nop.w

08002b40 <pxCurrentTCBConst>:
 8002b40:	20000070 	.word	0x20000070
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop

08002b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
    __asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	607b      	str	r3, [r7, #4]
}
 8002b60:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002b62:	f7fe fd3d 	bl	80015e0 <xTaskIncrementTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <SysTick_Handler+0x40>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f383 8811 	msr	BASEPRI, r3
}
 8002b7e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	e000ed04 	.word	0xe000ed04

08002b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <vPortSetupTimerInterrupt+0x34>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <vPortSetupTimerInterrupt+0x38>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <vPortSetupTimerInterrupt+0x3c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <vPortSetupTimerInterrupt+0x40>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	4a09      	ldr	r2, [pc, #36]	@ (8002bd0 <vPortSetupTimerInterrupt+0x44>)
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <vPortSetupTimerInterrupt+0x34>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010
 8002bc4:	e000e018 	.word	0xe000e018
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	10624dd3 	.word	0x10624dd3
 8002bd0:	e000e014 	.word	0xe000e014

08002bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002be4 <vPortEnableVFP+0x10>
 8002bd8:	6801      	ldr	r1, [r0, #0]
 8002bda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002bde:	6001      	str	r1, [r0, #0]
 8002be0:	4770      	bx	lr
 8002be2:	0000      	.short	0x0000
 8002be4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop

08002bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002bf2:	f3ef 8305 	mrs	r3, IPSR
 8002bf6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	d915      	bls.n	8002c2a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002bfe:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <vPortValidateInterruptPriority+0x74>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c08:	4b16      	ldr	r3, [pc, #88]	@ (8002c64 <vPortValidateInterruptPriority+0x78>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	7afa      	ldrb	r2, [r7, #11]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d20b      	bcs.n	8002c2a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	607b      	str	r3, [r7, #4]
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <vPortValidateInterruptPriority+0x7c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c32:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <vPortValidateInterruptPriority+0x80>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d90b      	bls.n	8002c52 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	603b      	str	r3, [r7, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	e7fd      	b.n	8002c4e <vPortValidateInterruptPriority+0x62>
    }
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e3f0 	.word	0xe000e3f0
 8002c64:	200001b0 	.word	0x200001b0
 8002c68:	e000ed0c 	.word	0xe000ed0c
 8002c6c:	200001b4 	.word	0x200001b4

08002c70 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08e      	sub	sp, #56	@ 0x38
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d022      	beq.n	8002cc8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002c82:	2308      	movs	r3, #8
 8002c84:	43db      	mvns	r3, r3
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d81b      	bhi.n	8002cc4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d014      	beq.n	8002cc8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	f1c3 0308 	rsb	r3, r3, #8
 8002ca8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cac:	43db      	mvns	r3, r3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d804      	bhi.n	8002cbe <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb8:	4413      	add	r3, r2
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	e004      	b.n	8002cc8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	e001      	b.n	8002cc8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002cc8:	f7fe fb58 	bl	800137c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8002eb8 <pvPortMalloc+0x248>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002cd4:	f000 f978 	bl	8002fc8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f2c0 80d3 	blt.w	8002e86 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80cf 	beq.w	8002e86 <pvPortMalloc+0x216>
 8002ce8:	4b74      	ldr	r3, [pc, #464]	@ (8002ebc <pvPortMalloc+0x24c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	f200 80c9 	bhi.w	8002e86 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002cf4:	4b72      	ldr	r3, [pc, #456]	@ (8002ec0 <pvPortMalloc+0x250>)
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002cf8:	4b71      	ldr	r3, [pc, #452]	@ (8002ec0 <pvPortMalloc+0x250>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d00:	4a70      	ldr	r2, [pc, #448]	@ (8002ec4 <pvPortMalloc+0x254>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d305      	bcc.n	8002d12 <pvPortMalloc+0xa2>
 8002d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d08:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec8 <pvPortMalloc+0x258>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d801      	bhi.n	8002d12 <pvPortMalloc+0xa2>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <pvPortMalloc+0xa4>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d129      	bne.n	8002d6c <pvPortMalloc+0xfc>
    __asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	623b      	str	r3, [r7, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3c:	4a61      	ldr	r2, [pc, #388]	@ (8002ec4 <pvPortMalloc+0x254>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d305      	bcc.n	8002d4e <pvPortMalloc+0xde>
 8002d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d44:	4a60      	ldr	r2, [pc, #384]	@ (8002ec8 <pvPortMalloc+0x258>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d801      	bhi.n	8002d4e <pvPortMalloc+0xde>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <pvPortMalloc+0xe0>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <pvPortMalloc+0xfc>
    __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	61fb      	str	r3, [r7, #28]
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d903      	bls.n	8002d7e <pvPortMalloc+0x10e>
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1d8      	bne.n	8002d30 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb8 <pvPortMalloc+0x248>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d07e      	beq.n	8002e86 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	4413      	add	r3, r2
 8002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d94:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec4 <pvPortMalloc+0x254>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d305      	bcc.n	8002da6 <pvPortMalloc+0x136>
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec8 <pvPortMalloc+0x258>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d801      	bhi.n	8002da6 <pvPortMalloc+0x136>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <pvPortMalloc+0x138>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10b      	bne.n	8002dc4 <pvPortMalloc+0x154>
    __asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	61bb      	str	r3, [r7, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dca:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d90b      	bls.n	8002dee <pvPortMalloc+0x17e>
    __asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	617b      	str	r3, [r7, #20]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	1ad2      	subs	r2, r2, r3
 8002df6:	2308      	movs	r3, #8
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d924      	bls.n	8002e48 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002dfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <pvPortMalloc+0x1b8>
    __asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	613b      	str	r3, [r7, #16]
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e48:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <pvPortMalloc+0x24c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <pvPortMalloc+0x24c>)
 8002e54:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e56:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <pvPortMalloc+0x24c>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ecc <pvPortMalloc+0x25c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d203      	bcs.n	8002e6a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e62:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <pvPortMalloc+0x24c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a19      	ldr	r2, [pc, #100]	@ (8002ecc <pvPortMalloc+0x25c>)
 8002e68:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <pvPortMalloc+0x260>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a13      	ldr	r2, [pc, #76]	@ (8002ed0 <pvPortMalloc+0x260>)
 8002e84:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e86:	f7fe fa87 	bl	8001398 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <pvPortMalloc+0x23c>
    __asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <pvPortMalloc+0x238>
    return pvReturn;
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3738      	adds	r7, #56	@ 0x38
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20012dc0 	.word	0x20012dc0
 8002ebc:	20012dc4 	.word	0x20012dc4
 8002ec0:	20012db8 	.word	0x20012db8
 8002ec4:	200001b8 	.word	0x200001b8
 8002ec8:	20012db7 	.word	0x20012db7
 8002ecc:	20012dc8 	.word	0x20012dc8
 8002ed0:	20012dcc 	.word	0x20012dcc

08002ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d064      	beq.n	8002fb0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	425b      	negs	r3, r3
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4a30      	ldr	r2, [pc, #192]	@ (8002fb8 <vPortFree+0xe4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d305      	bcc.n	8002f08 <vPortFree+0x34>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4a2f      	ldr	r2, [pc, #188]	@ (8002fbc <vPortFree+0xe8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d801      	bhi.n	8002f08 <vPortFree+0x34>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <vPortFree+0x36>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <vPortFree+0x52>
    __asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	617b      	str	r3, [r7, #20]
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	e7fd      	b.n	8002f22 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <vPortFree+0x72>
    __asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	613b      	str	r3, [r7, #16]
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	e7fd      	b.n	8002f42 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <vPortFree+0x92>
    __asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	60fb      	str	r3, [r7, #12]
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	e7fd      	b.n	8002f62 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	0fdb      	lsrs	r3, r3, #31
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01c      	beq.n	8002fb0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d118      	bne.n	8002fb0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002f8a:	f7fe f9f7 	bl	800137c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <vPortFree+0xec>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a09      	ldr	r2, [pc, #36]	@ (8002fc0 <vPortFree+0xec>)
 8002f9a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f9c:	69b8      	ldr	r0, [r7, #24]
 8002f9e:	f000 f86d 	bl	800307c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002fa2:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <vPortFree+0xf0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	4a06      	ldr	r2, [pc, #24]	@ (8002fc4 <vPortFree+0xf0>)
 8002faa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002fac:	f7fe f9f4 	bl	8001398 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002fb0:	bf00      	nop
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200001b8 	.word	0x200001b8
 8002fbc:	20012db7 	.word	0x20012db7
 8002fc0:	20012dc4 	.word	0x20012dc4
 8002fc4:	20012dd0 	.word	0x20012dd0

08002fc8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fce:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002fd2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002fd4:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <prvHeapInit+0xa0>)
 8002fd6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3307      	adds	r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8003068 <prvHeapInit+0xa0>)
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800306c <prvHeapInit+0xa4>)
 8003000:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <prvHeapInit+0xa4>)
 8003004:	2200      	movs	r2, #0
 8003006:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4413      	add	r3, r2
 800300e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003010:	2208      	movs	r2, #8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a13      	ldr	r2, [pc, #76]	@ (8003070 <prvHeapInit+0xa8>)
 8003024:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003026:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <prvHeapInit+0xa8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <prvHeapInit+0xa8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	1ad2      	subs	r2, r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003044:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <prvHeapInit+0xa8>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <prvHeapInit+0xac>)
 8003052:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a07      	ldr	r2, [pc, #28]	@ (8003078 <prvHeapInit+0xb0>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	200001b8 	.word	0x200001b8
 800306c:	20012db8 	.word	0x20012db8
 8003070:	20012dc0 	.word	0x20012dc0
 8003074:	20012dc8 	.word	0x20012dc8
 8003078:	20012dc4 	.word	0x20012dc4

0800307c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003084:	4b36      	ldr	r3, [pc, #216]	@ (8003160 <prvInsertBlockIntoFreeList+0xe4>)
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e002      	b.n	8003090 <prvInsertBlockIntoFreeList+0x14>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d8f7      	bhi.n	800308a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	4a30      	ldr	r2, [pc, #192]	@ (8003160 <prvInsertBlockIntoFreeList+0xe4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d018      	beq.n	80030d4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003164 <prvInsertBlockIntoFreeList+0xe8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d305      	bcc.n	80030b6 <prvInsertBlockIntoFreeList+0x3a>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003168 <prvInsertBlockIntoFreeList+0xec>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d801      	bhi.n	80030b6 <prvInsertBlockIntoFreeList+0x3a>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <prvInsertBlockIntoFreeList+0x3c>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60fb      	str	r3, [r7, #12]
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d108      	bne.n	80030f8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	441a      	add	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	441a      	add	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d118      	bne.n	800313e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b16      	ldr	r3, [pc, #88]	@ (800316c <prvInsertBlockIntoFreeList+0xf0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d00d      	beq.n	8003134 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	441a      	add	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e008      	b.n	8003146 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003134:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <prvInsertBlockIntoFreeList+0xf0>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e003      	b.n	8003146 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d002      	beq.n	8003154 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003154:	bf00      	nop
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	20012db8 	.word	0x20012db8
 8003164:	200001b8 	.word	0x200001b8
 8003168:	20012db7 	.word	0x20012db7
 800316c:	20012dc0 	.word	0x20012dc0

08003170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003176:	f000 fba7 	bl	80038c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800317a:	f000 f82d 	bl	80031d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800317e:	f000 f90d 	bl	800339c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003182:	f000 f8e1 	bl	8003348 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003186:	f000 f891 	bl	80032ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* Before a semaphore is used it must be explicitly created.
     In this example a binary semaphore is created */
  xBinarySemaphore = xSemaphoreCreateBinary();
 800318a:	2203      	movs	r2, #3
 800318c:	2100      	movs	r1, #0
 800318e:	2001      	movs	r0, #1
 8003190:	f7fd fab8 	bl	8000704 <xQueueGenericCreate>
 8003194:	4603      	mov	r3, r0
 8003196:	4a0c      	ldr	r2, [pc, #48]	@ (80031c8 <main+0x58>)
 8003198:	6013      	str	r3, [r2, #0]

  /* check the semaphore was created successfully */
  if ( xBinarySemaphore != NULL )
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <main+0x58>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <main+0x54>
    /* Create the 'handler' task, which is the task to which interrupt processing
       is deferred. This is the task that will be syncronized with the interrupt.
       (The handler task must be created with a high priority to ensure it runs
       immediately after the interrupt exits. But since this is the only task
       running for this example, then a priority of 1 is chosen) */
    xTaskCreate( vHandlerTask, "Handler", 1000, NULL, 1, NULL );
 80031a2:	2300      	movs	r3, #0
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	2301      	movs	r3, #1
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031b0:	4906      	ldr	r1, [pc, #24]	@ (80031cc <main+0x5c>)
 80031b2:	4807      	ldr	r0, [pc, #28]	@ (80031d0 <main+0x60>)
 80031b4:	f7fd ff08 	bl	8000fc8 <xTaskCreate>

    /* start the TIM3 in interrupt mode */
    HAL_TIM_Base_Start_IT( &htim3 );
 80031b8:	4806      	ldr	r0, [pc, #24]	@ (80031d4 <main+0x64>)
 80031ba:	f001 fb93 	bl	80048e4 <HAL_TIM_Base_Start_IT>

    /* start the scheduler */
    vTaskStartScheduler();
 80031be:	f7fe f899 	bl	80012f4 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <main+0x54>
 80031c8:	20012e64 	.word	0x20012e64
 80031cc:	080059ec 	.word	0x080059ec
 80031d0:	080034f9 	.word	0x080034f9
 80031d4:	20012dd4 	.word	0x20012dd4

080031d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b094      	sub	sp, #80	@ 0x50
 80031dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031de:	f107 0320 	add.w	r3, r7, #32
 80031e2:	2230      	movs	r2, #48	@ 0x30
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 fbae 	bl	8005948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	4b28      	ldr	r3, [pc, #160]	@ (80032a4 <SystemClock_Config+0xcc>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	4a27      	ldr	r2, [pc, #156]	@ (80032a4 <SystemClock_Config+0xcc>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320a:	6413      	str	r3, [r2, #64]	@ 0x40
 800320c:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <SystemClock_Config+0xcc>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <SystemClock_Config+0xd0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a21      	ldr	r2, [pc, #132]	@ (80032a8 <SystemClock_Config+0xd0>)
 8003222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b1f      	ldr	r3, [pc, #124]	@ (80032a8 <SystemClock_Config+0xd0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003238:	2301      	movs	r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800323c:	2310      	movs	r3, #16
 800323e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003240:	2302      	movs	r3, #2
 8003242:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003244:	2300      	movs	r3, #0
 8003246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003248:	2308      	movs	r3, #8
 800324a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800324c:	2332      	movs	r3, #50	@ 0x32
 800324e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003250:	2304      	movs	r3, #4
 8003252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003254:	2307      	movs	r3, #7
 8003256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003258:	f107 0320 	add.w	r3, r7, #32
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fe27 	bl	8003eb0 <HAL_RCC_OscConfig>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003268:	f000 f9a8 	bl	80035bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800326c:	230f      	movs	r3, #15
 800326e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003270:	2302      	movs	r3, #2
 8003272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003278:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800327c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800327e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003282:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f001 f888 	bl	80043a0 <HAL_RCC_ClockConfig>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003296:	f000 f991 	bl	80035bc <Error_Handler>
  }
}
 800329a:	bf00      	nop
 800329c:	3750      	adds	r7, #80	@ 0x50
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000

080032ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032b2:	f107 0308 	add.w	r3, r7, #8
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c0:	463b      	mov	r3, r7
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <MX_TIM3_Init+0x94>)
 80032ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <MX_TIM3_Init+0x98>)
 80032cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12499;
 80032ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <MX_TIM3_Init+0x94>)
 80032d0:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 80032d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <MX_TIM3_Init+0x94>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80032dc:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <MX_TIM3_Init+0x94>)
 80032de:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80032e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <MX_TIM3_Init+0x94>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032ea:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <MX_TIM3_Init+0x94>)
 80032ec:	2280      	movs	r2, #128	@ 0x80
 80032ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032f0:	4813      	ldr	r0, [pc, #76]	@ (8003340 <MX_TIM3_Init+0x94>)
 80032f2:	f001 faa7 	bl	8004844 <HAL_TIM_Base_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80032fc:	f000 f95e 	bl	80035bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	4619      	mov	r1, r3
 800330c:	480c      	ldr	r0, [pc, #48]	@ (8003340 <MX_TIM3_Init+0x94>)
 800330e:	f001 fc49 	bl	8004ba4 <HAL_TIM_ConfigClockSource>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003318:	f000 f950 	bl	80035bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003324:	463b      	mov	r3, r7
 8003326:	4619      	mov	r1, r3
 8003328:	4805      	ldr	r0, [pc, #20]	@ (8003340 <MX_TIM3_Init+0x94>)
 800332a:	f001 fe71 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003334:	f000 f942 	bl	80035bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20012dd4 	.word	0x20012dd4
 8003344:	40000400 	.word	0x40000400

08003348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800334c:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <MX_USART2_UART_Init+0x50>)
 8003350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 8003354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800335a:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003360:	4b0c      	ldr	r3, [pc, #48]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800336c:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 800336e:	220c      	movs	r2, #12
 8003370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003372:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800337e:	4805      	ldr	r0, [pc, #20]	@ (8003394 <MX_USART2_UART_Init+0x4c>)
 8003380:	f001 fed6 	bl	8005130 <HAL_UART_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800338a:	f000 f917 	bl	80035bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20012e1c 	.word	0x20012e1c
 8003398:	40004400 	.word	0x40004400

0800339c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	@ 0x28
 80033a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	4a3a      	ldr	r2, [pc, #232]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c2:	4b38      	ldr	r3, [pc, #224]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b34      	ldr	r3, [pc, #208]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	4a33      	ldr	r2, [pc, #204]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033de:	4b31      	ldr	r3, [pc, #196]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	4a2c      	ldr	r2, [pc, #176]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <MX_GPIO_Init+0x108>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <MX_GPIO_Init+0x108>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <MX_GPIO_Init+0x108>)
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	6313      	str	r3, [r2, #48]	@ 0x30
 8003416:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <MX_GPIO_Init+0x108>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	607b      	str	r3, [r7, #4]
 8003420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8003422:	2200      	movs	r2, #0
 8003424:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003428:	481f      	ldr	r0, [pc, #124]	@ (80034a8 <MX_GPIO_Init+0x10c>)
 800342a:	f000 fd0d 	bl	8003e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800342e:	2301      	movs	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0314 	add.w	r3, r7, #20
 800343e:	4619      	mov	r1, r3
 8003440:	481a      	ldr	r0, [pc, #104]	@ (80034ac <MX_GPIO_Init+0x110>)
 8003442:	f000 fb65 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003446:	2304      	movs	r3, #4
 8003448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	4619      	mov	r1, r3
 8003458:	4815      	ldr	r0, [pc, #84]	@ (80034b0 <MX_GPIO_Init+0x114>)
 800345a:	f000 fb59 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800345e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003464:	2301      	movs	r3, #1
 8003466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	2300      	movs	r3, #0
 800346e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	4619      	mov	r1, r3
 8003476:	480c      	ldr	r0, [pc, #48]	@ (80034a8 <MX_GPIO_Init+0x10c>)
 8003478:	f000 fb4a 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800348c:	2306      	movs	r3, #6
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	4619      	mov	r1, r3
 8003496:	4807      	ldr	r0, [pc, #28]	@ (80034b4 <MX_GPIO_Init+0x118>)
 8003498:	f000 fb3a 	bl	8003b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800349c:	bf00      	nop
 800349e:	3728      	adds	r7, #40	@ 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020c00 	.word	0x40020c00
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020800 	.word	0x40020800

080034b8 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e00b      	b.n	80034e0 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	18d1      	adds	r1, r2, r3
 80034ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80034d2:	2201      	movs	r2, #1
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f001 fe7b 	bl	80051d0 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3301      	adds	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ed      	bne.n	80034c8 <UART2_Print_Text+0x10>
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <vHandlerTask>:

static void vHandlerTask( void *pvParameters )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* xMaxExpectedBlockTime holds the maximum time expected between two interrupts */
  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 600 );
 8003500:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8003504:	60fb      	str	r3, [r7, #12]
  {
    /* The semaphore is 'given' by the TIM3 timeout interrupt.
       Wait a maximum of xMaxExpectedBlockTime ticks for the next interrupt.
       Use the semaphore to wait for the event. The semaphore was created before
       the scheduler was started so before this task ran for the first time */
    if ( xSemaphoreTake( xBinarySemaphore, xMaxExpectedBlockTime ) == pdPASS )
 8003506:	4b09      	ldr	r3, [pc, #36]	@ (800352c <vHandlerTask+0x34>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd faf5 	bl	8000afc <xQueueSemaphoreTake>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d104      	bne.n	8003522 <vHandlerTask+0x2a>
    {
      /* The semaphore was obtained (the event must have occurred).
         Process the event (in this case, just print out a message) */
      UART2_Print_Text( &huart2, "Handler task - Processing event.\r\n" );
 8003518:	4905      	ldr	r1, [pc, #20]	@ (8003530 <vHandlerTask+0x38>)
 800351a:	4806      	ldr	r0, [pc, #24]	@ (8003534 <vHandlerTask+0x3c>)
 800351c:	f7ff ffcc 	bl	80034b8 <UART2_Print_Text>
 8003520:	e7f1      	b.n	8003506 <vHandlerTask+0xe>
    }
    else
    {
      /* An event was not received within the expected time.
         Indicate this by printing out an error message */
      UART2_Print_Text( &huart2, "Handler task - Error.\r\n" );
 8003522:	4905      	ldr	r1, [pc, #20]	@ (8003538 <vHandlerTask+0x40>)
 8003524:	4803      	ldr	r0, [pc, #12]	@ (8003534 <vHandlerTask+0x3c>)
 8003526:	f7ff ffc7 	bl	80034b8 <UART2_Print_Text>
    if ( xSemaphoreTake( xBinarySemaphore, xMaxExpectedBlockTime ) == pdPASS )
 800352a:	e7ec      	b.n	8003506 <vHandlerTask+0xe>
 800352c:	20012e64 	.word	0x20012e64
 8003530:	080059f4 	.word	0x080059f4
 8003534:	20012e1c 	.word	0x20012e1c
 8003538:	08005a18 	.word	0x08005a18

0800353c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken;

  /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE
     as it will get set to pdTRUE inside the interrupt safe API function
     if a context switch is required */
  xHigherPriorityTaskWoken = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]

  if ( htim->Instance == TIM3 )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d11b      	bne.n	800358a <HAL_TIM_PeriodElapsedCallback+0x4e>
  {
    /* used for debugging purposes (check TIM3 period via a logic analyzer) */
    HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 8003552:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003556:	4813      	ldr	r0, [pc, #76]	@ (80035a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003558:	f000 fc8f 	bl	8003e7a <HAL_GPIO_TogglePin>

    /* print out a message */
    UART2_Print_Text( &huart2, "ISR Handler - About to give a semaphore.\r\n" );
 800355c:	4912      	ldr	r1, [pc, #72]	@ (80035a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800355e:	4813      	ldr	r0, [pc, #76]	@ (80035ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003560:	f7ff ffaa 	bl	80034b8 <UART2_Print_Text>

    /* 'give' the semaphore to unblock the task, passing in the address of xHigherPriorityTaskWoken
       as the interrupt safe API function's pxHigherPriorityTaskWoken parameter */
    xSemaphoreGiveFromISR( xBinarySemaphore, &xHigherPriorityTaskWoken );
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f107 020c 	add.w	r2, r7, #12
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd f93a 	bl	80007e8 <xQueueGiveFromISR>
    /* Pass the xHigherPriorityTaskWoken value into portYIELD_FROM_ISR():
       - If xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR(),
         then calling portYIELD_FROM_ISR() will request a context switch.
       - If xHigherPriorityTaskWoken is still pdFALSE then calling portYIELD_FROM_ISR()
         will have no effect */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_TIM_PeriodElapsedCallback+0x4e>
 800357a:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800357c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_TIM_PeriodElapsedCallback+0x5c>
    HAL_IncTick();
 8003594:	f000 f9ba 	bl	800390c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40020c00 	.word	0x40020c00
 80035a8:	08005a30 	.word	0x08005a30
 80035ac:	20012e1c 	.word	0x20012e1c
 80035b0:	20012e64 	.word	0x20012e64
 80035b4:	e000ed04 	.word	0xe000ed04
 80035b8:	40001000 	.word	0x40001000

080035bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035c0:	b672      	cpsid	i
}
 80035c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <Error_Handler+0x8>

080035c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <HAL_MspInit+0x4c>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003614 <HAL_MspInit+0x4c>)
 80035d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <HAL_MspInit+0x4c>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <HAL_MspInit+0x4c>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	4a08      	ldr	r2, [pc, #32]	@ (8003614 <HAL_MspInit+0x4c>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fa:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_MspInit+0x4c>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0e      	ldr	r2, [pc, #56]	@ (8003660 <HAL_TIM_Base_MspInit+0x48>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d115      	bne.n	8003656 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <HAL_TIM_Base_MspInit+0x4c>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <HAL_TIM_Base_MspInit+0x4c>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	6413      	str	r3, [r2, #64]	@ 0x40
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_TIM_Base_MspInit+0x4c>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	2106      	movs	r1, #6
 800364a:	201d      	movs	r0, #29
 800364c:	f000 fa36 	bl	8003abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003650:	201d      	movs	r0, #29
 8003652:	f000 fa4f 	bl	8003af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40000400 	.word	0x40000400
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	@ 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a19      	ldr	r2, [pc, #100]	@ (80036ec <HAL_UART_MspInit+0x84>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d12b      	bne.n	80036e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <HAL_UART_MspInit+0x88>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <HAL_UART_MspInit+0x88>)
 8003694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <HAL_UART_MspInit+0x88>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <HAL_UART_MspInit+0x88>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	4a10      	ldr	r2, [pc, #64]	@ (80036f0 <HAL_UART_MspInit+0x88>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b6:	4b0e      	ldr	r3, [pc, #56]	@ (80036f0 <HAL_UART_MspInit+0x88>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036c2:	230c      	movs	r3, #12
 80036c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036d2:	2307      	movs	r3, #7
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4619      	mov	r1, r3
 80036dc:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <HAL_UART_MspInit+0x8c>)
 80036de:	f000 fa17 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036e2:	bf00      	nop
 80036e4:	3728      	adds	r7, #40	@ 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40004400 	.word	0x40004400
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020000 	.word	0x40020000

080036f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08e      	sub	sp, #56	@ 0x38
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	4b33      	ldr	r3, [pc, #204]	@ (80037dc <HAL_InitTick+0xe4>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	4a32      	ldr	r2, [pc, #200]	@ (80037dc <HAL_InitTick+0xe4>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	6413      	str	r3, [r2, #64]	@ 0x40
 8003718:	4b30      	ldr	r3, [pc, #192]	@ (80037dc <HAL_InitTick+0xe4>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003724:	f107 0210 	add.w	r2, r7, #16
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f001 f856 	bl	80047e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800373e:	f001 f827 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8003742:	6378      	str	r0, [r7, #52]	@ 0x34
 8003744:	e004      	b.n	8003750 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003746:	f001 f823 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 800374a:	4603      	mov	r3, r0
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003752:	4a23      	ldr	r2, [pc, #140]	@ (80037e0 <HAL_InitTick+0xe8>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	3b01      	subs	r3, #1
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800375e:	4b21      	ldr	r3, [pc, #132]	@ (80037e4 <HAL_InitTick+0xec>)
 8003760:	4a21      	ldr	r2, [pc, #132]	@ (80037e8 <HAL_InitTick+0xf0>)
 8003762:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003764:	4b1f      	ldr	r3, [pc, #124]	@ (80037e4 <HAL_InitTick+0xec>)
 8003766:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800376a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800376c:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <HAL_InitTick+0xec>)
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003772:	4b1c      	ldr	r3, [pc, #112]	@ (80037e4 <HAL_InitTick+0xec>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003778:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <HAL_InitTick+0xec>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377e:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_InitTick+0xec>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003784:	4817      	ldr	r0, [pc, #92]	@ (80037e4 <HAL_InitTick+0xec>)
 8003786:	f001 f85d 	bl	8004844 <HAL_TIM_Base_Init>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003790:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11b      	bne.n	80037d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003798:	4812      	ldr	r0, [pc, #72]	@ (80037e4 <HAL_InitTick+0xec>)
 800379a:	f001 f8a3 	bl	80048e4 <HAL_TIM_Base_Start_IT>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80037a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d111      	bne.n	80037d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037ac:	2036      	movs	r0, #54	@ 0x36
 80037ae:	f000 f9a1 	bl	8003af4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	d808      	bhi.n	80037ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80037b8:	2200      	movs	r2, #0
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	2036      	movs	r0, #54	@ 0x36
 80037be:	f000 f97d 	bl	8003abc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037c2:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <HAL_InitTick+0xf4>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e002      	b.n	80037d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3738      	adds	r7, #56	@ 0x38
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	431bde83 	.word	0x431bde83
 80037e4:	20012e68 	.word	0x20012e68
 80037e8:	40001000 	.word	0x40001000
 80037ec:	2000000c 	.word	0x2000000c

080037f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <NMI_Handler+0x4>

080037f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <HardFault_Handler+0x4>

08003800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <MemManage_Handler+0x4>

08003808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <BusFault_Handler+0x4>

08003810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <UsageFault_Handler+0x4>

08003818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800382c:	4802      	ldr	r0, [pc, #8]	@ (8003838 <TIM3_IRQHandler+0x10>)
 800382e:	f001 f8c9 	bl	80049c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20012dd4 	.word	0x20012dd4

0800383c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003840:	4802      	ldr	r0, [pc, #8]	@ (800384c <TIM6_DAC_IRQHandler+0x10>)
 8003842:	f001 f8bf 	bl	80049c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20012e68 	.word	0x20012e68

08003850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <SystemInit+0x20>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <SystemInit+0x20>)
 800385c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003878:	f7ff ffea 	bl	8003850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800387c:	480c      	ldr	r0, [pc, #48]	@ (80038b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800387e:	490d      	ldr	r1, [pc, #52]	@ (80038b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003880:	4a0d      	ldr	r2, [pc, #52]	@ (80038b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003884:	e002      	b.n	800388c <LoopCopyDataInit>

08003886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388a:	3304      	adds	r3, #4

0800388c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800388c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800388e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003890:	d3f9      	bcc.n	8003886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003892:	4a0a      	ldr	r2, [pc, #40]	@ (80038bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003894:	4c0a      	ldr	r4, [pc, #40]	@ (80038c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003898:	e001      	b.n	800389e <LoopFillZerobss>

0800389a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800389c:	3204      	adds	r2, #4

0800389e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800389e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a0:	d3fb      	bcc.n	800389a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038a2:	f002 f859 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038a6:	f7ff fc63 	bl	8003170 <main>
  bx  lr    
 80038aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80038b8:	08005a84 	.word	0x08005a84
  ldr r2, =_sbss
 80038bc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80038c0:	20012eb4 	.word	0x20012eb4

080038c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038c4:	e7fe      	b.n	80038c4 <ADC_IRQHandler>
	...

080038c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003908 <HAL_Init+0x40>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003908 <HAL_Init+0x40>)
 80038d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_Init+0x40>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <HAL_Init+0x40>)
 80038de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038e4:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <HAL_Init+0x40>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a07      	ldr	r2, [pc, #28]	@ (8003908 <HAL_Init+0x40>)
 80038ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f0:	2003      	movs	r0, #3
 80038f2:	f000 f8d8 	bl	8003aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7ff fefe 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038fc:	f7ff fe64 	bl	80035c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023c00 	.word	0x40023c00

0800390c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_IncTick+0x20>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_IncTick+0x24>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4413      	add	r3, r2
 800391c:	4a04      	ldr	r2, [pc, #16]	@ (8003930 <HAL_IncTick+0x24>)
 800391e:	6013      	str	r3, [r2, #0]
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000010 	.word	0x20000010
 8003930:	20012eb0 	.word	0x20012eb0

08003934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return uwTick;
 8003938:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_GetTick+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20012eb0 	.word	0x20012eb0

0800394c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800395c:	4b0c      	ldr	r3, [pc, #48]	@ (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003968:	4013      	ands	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397e:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	60d3      	str	r3, [r2, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003998:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <__NVIC_GetPriorityGrouping+0x18>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 0307 	and.w	r3, r3, #7
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db0b      	blt.n	80039da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	4907      	ldr	r1, [pc, #28]	@ (80039e8 <__NVIC_EnableIRQ+0x38>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000e100 	.word	0xe000e100

080039ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0a      	blt.n	8003a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	490c      	ldr	r1, [pc, #48]	@ (8003a38 <__NVIC_SetPriority+0x4c>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a14:	e00a      	b.n	8003a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4908      	ldr	r1, [pc, #32]	@ (8003a3c <__NVIC_SetPriority+0x50>)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3b04      	subs	r3, #4
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	440b      	add	r3, r1
 8003a2a:	761a      	strb	r2, [r3, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	@ 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf28      	it	cs
 8003a5e:	2304      	movcs	r3, #4
 8003a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d902      	bls.n	8003a70 <NVIC_EncodePriority+0x30>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b03      	subs	r3, #3
 8003a6e:	e000      	b.n	8003a72 <NVIC_EncodePriority+0x32>
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	401a      	ands	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a88:	f04f 31ff 	mov.w	r1, #4294967295
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	4313      	orrs	r3, r2
         );
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ff4c 	bl	800394c <__NVIC_SetPriorityGrouping>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ace:	f7ff ff61 	bl	8003994 <__NVIC_GetPriorityGrouping>
 8003ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f7ff ffb1 	bl	8003a40 <NVIC_EncodePriority>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ff80 	bl	80039ec <__NVIC_SetPriority>
}
 8003aec:	bf00      	nop
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff54 	bl	80039b0 <__NVIC_EnableIRQ>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	@ 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e16b      	b.n	8003e04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	f040 815a 	bne.w	8003dfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d005      	beq.n	8003b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d130      	bne.n	8003bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b98:	2201      	movs	r2, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 0201 	and.w	r2, r3, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d017      	beq.n	8003c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d123      	bne.n	8003c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	08da      	lsrs	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3208      	adds	r2, #8
 8003c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	220f      	movs	r2, #15
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	08da      	lsrs	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3208      	adds	r2, #8
 8003c4e:	69b9      	ldr	r1, [r7, #24]
 8003c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	2203      	movs	r2, #3
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0203 	and.w	r2, r3, #3
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80b4 	beq.w	8003dfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b60      	ldr	r3, [pc, #384]	@ (8003e1c <HAL_GPIO_Init+0x30c>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	4a5f      	ldr	r2, [pc, #380]	@ (8003e1c <HAL_GPIO_Init+0x30c>)
 8003ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e1c <HAL_GPIO_Init+0x30c>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e20 <HAL_GPIO_Init+0x310>)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	3302      	adds	r3, #2
 8003cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	220f      	movs	r2, #15
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	@ (8003e24 <HAL_GPIO_Init+0x314>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d02b      	beq.n	8003d36 <HAL_GPIO_Init+0x226>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a51      	ldr	r2, [pc, #324]	@ (8003e28 <HAL_GPIO_Init+0x318>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d025      	beq.n	8003d32 <HAL_GPIO_Init+0x222>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a50      	ldr	r2, [pc, #320]	@ (8003e2c <HAL_GPIO_Init+0x31c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01f      	beq.n	8003d2e <HAL_GPIO_Init+0x21e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8003e30 <HAL_GPIO_Init+0x320>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d019      	beq.n	8003d2a <HAL_GPIO_Init+0x21a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4e      	ldr	r2, [pc, #312]	@ (8003e34 <HAL_GPIO_Init+0x324>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_GPIO_Init+0x216>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4d      	ldr	r2, [pc, #308]	@ (8003e38 <HAL_GPIO_Init+0x328>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00d      	beq.n	8003d22 <HAL_GPIO_Init+0x212>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4c      	ldr	r2, [pc, #304]	@ (8003e3c <HAL_GPIO_Init+0x32c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <HAL_GPIO_Init+0x20e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4b      	ldr	r2, [pc, #300]	@ (8003e40 <HAL_GPIO_Init+0x330>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_GPIO_Init+0x20a>
 8003d16:	2307      	movs	r3, #7
 8003d18:	e00e      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	e00c      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d1e:	2306      	movs	r3, #6
 8003d20:	e00a      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d22:	2305      	movs	r3, #5
 8003d24:	e008      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d26:	2304      	movs	r3, #4
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e004      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_GPIO_Init+0x228>
 8003d36:	2300      	movs	r3, #0
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f002 0203 	and.w	r2, r2, #3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4093      	lsls	r3, r2
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d48:	4935      	ldr	r1, [pc, #212]	@ (8003e20 <HAL_GPIO_Init+0x310>)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d56:	4b3b      	ldr	r3, [pc, #236]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d7a:	4a32      	ldr	r2, [pc, #200]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d80:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003da4:	4a27      	ldr	r2, [pc, #156]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003daa:	4b26      	ldr	r3, [pc, #152]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dce:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003df8:	4a12      	ldr	r2, [pc, #72]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3301      	adds	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	f67f ae90 	bls.w	8003b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3724      	adds	r7, #36	@ 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40013800 	.word	0x40013800
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020c00 	.word	0x40020c00
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40021400 	.word	0x40021400
 8003e3c:	40021800 	.word	0x40021800
 8003e40:	40021c00 	.word	0x40021c00
 8003e44:	40013c00 	.word	0x40013c00

08003e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	4613      	mov	r3, r2
 8003e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e58:	787b      	ldrb	r3, [r7, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e64:	e003      	b.n	8003e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	041a      	lsls	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	619a      	str	r2, [r3, #24]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e8c:	887a      	ldrh	r2, [r7, #2]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	041a      	lsls	r2, r3, #16
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43d9      	mvns	r1, r3
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	400b      	ands	r3, r1
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	619a      	str	r2, [r3, #24]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e267      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d075      	beq.n	8003fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ece:	4b88      	ldr	r3, [pc, #544]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b85      	ldr	r3, [pc, #532]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d112      	bne.n	8003f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee6:	4b82      	ldr	r3, [pc, #520]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	4b7e      	ldr	r3, [pc, #504]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d05b      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x108>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d157      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e242      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d106      	bne.n	8003f24 <HAL_RCC_OscConfig+0x74>
 8003f16:	4b76      	ldr	r3, [pc, #472]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a75      	ldr	r2, [pc, #468]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e01d      	b.n	8003f60 <HAL_RCC_OscConfig+0xb0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x98>
 8003f2e:	4b70      	ldr	r3, [pc, #448]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6f      	ldr	r2, [pc, #444]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6c      	ldr	r2, [pc, #432]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0xb0>
 8003f48:	4b69      	ldr	r3, [pc, #420]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a68      	ldr	r2, [pc, #416]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	4b66      	ldr	r3, [pc, #408]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a65      	ldr	r2, [pc, #404]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7ff fce4 	bl	8003934 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7ff fce0 	bl	8003934 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	@ 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e207      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b5b      	ldr	r3, [pc, #364]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0xc0>
 8003f8e:	e014      	b.n	8003fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7ff fcd0 	bl	8003934 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f98:	f7ff fccc 	bl	8003934 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	@ 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e1f3      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	4b51      	ldr	r3, [pc, #324]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0xe8>
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d063      	beq.n	800408e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd2:	4b47      	ldr	r3, [pc, #284]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d11c      	bne.n	8004018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fde:	4b44      	ldr	r3, [pc, #272]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d116      	bne.n	8004018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	4b41      	ldr	r3, [pc, #260]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_RCC_OscConfig+0x152>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e1c7      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004002:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4937      	ldr	r1, [pc, #220]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	e03a      	b.n	800408e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d020      	beq.n	8004062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004020:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <HAL_RCC_OscConfig+0x244>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7ff fc85 	bl	8003934 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402e:	f7ff fc81 	bl	8003934 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1a8      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	4b2b      	ldr	r3, [pc, #172]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b28      	ldr	r3, [pc, #160]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4925      	ldr	r1, [pc, #148]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
 8004060:	e015      	b.n	800408e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004062:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <HAL_RCC_OscConfig+0x244>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7ff fc64 	bl	8003934 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004070:	f7ff fc60 	bl	8003934 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e187      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d036      	beq.n	8004108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a2:	4b15      	ldr	r3, [pc, #84]	@ (80040f8 <HAL_RCC_OscConfig+0x248>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7ff fc44 	bl	8003934 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b0:	f7ff fc40 	bl	8003934 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e167      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCC_OscConfig+0x240>)
 80040c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x200>
 80040ce:	e01b      	b.n	8004108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d0:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <HAL_RCC_OscConfig+0x248>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d6:	f7ff fc2d 	bl	8003934 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	e00e      	b.n	80040fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040de:	f7ff fc29 	bl	8003934 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d907      	bls.n	80040fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e150      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
 80040f0:	40023800 	.word	0x40023800
 80040f4:	42470000 	.word	0x42470000
 80040f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	4b88      	ldr	r3, [pc, #544]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80040fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ea      	bne.n	80040de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8097 	beq.w	8004244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411a:	4b81      	ldr	r3, [pc, #516]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	4b7d      	ldr	r3, [pc, #500]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	4a7c      	ldr	r2, [pc, #496]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	@ 0x40
 8004136:	4b7a      	ldr	r3, [pc, #488]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	4b77      	ldr	r3, [pc, #476]	@ (8004324 <HAL_RCC_OscConfig+0x474>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d118      	bne.n	8004184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004152:	4b74      	ldr	r3, [pc, #464]	@ (8004324 <HAL_RCC_OscConfig+0x474>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a73      	ldr	r2, [pc, #460]	@ (8004324 <HAL_RCC_OscConfig+0x474>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7ff fbe9 	bl	8003934 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7ff fbe5 	bl	8003934 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e10c      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <HAL_RCC_OscConfig+0x474>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <HAL_RCC_OscConfig+0x2ea>
 800418c:	4b64      	ldr	r3, [pc, #400]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004190:	4a63      	ldr	r2, [pc, #396]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	@ 0x70
 8004198:	e01c      	b.n	80041d4 <HAL_RCC_OscConfig+0x324>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x30c>
 80041a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041a8:	f043 0304 	orr.w	r3, r3, #4
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0x324>
 80041bc:	4b58      	ldr	r3, [pc, #352]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a57      	ldr	r2, [pc, #348]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c8:	4b55      	ldr	r3, [pc, #340]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041cc:	4a54      	ldr	r2, [pc, #336]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041ce:	f023 0304 	bic.w	r3, r3, #4
 80041d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d015      	beq.n	8004208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7ff fbaa 	bl	8003934 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7ff fba6 	bl	8003934 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e0cb      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	4b49      	ldr	r3, [pc, #292]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ee      	beq.n	80041e4 <HAL_RCC_OscConfig+0x334>
 8004206:	e014      	b.n	8004232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7ff fb94 	bl	8003934 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7ff fb90 	bl	8003934 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0b5      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	4b3e      	ldr	r3, [pc, #248]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ee      	bne.n	8004210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004238:	4b39      	ldr	r3, [pc, #228]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	4a38      	ldr	r2, [pc, #224]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004242:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80a1 	beq.w	8004390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800424e:	4b34      	ldr	r3, [pc, #208]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b08      	cmp	r3, #8
 8004258:	d05c      	beq.n	8004314 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d141      	bne.n	80042e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004262:	4b31      	ldr	r3, [pc, #196]	@ (8004328 <HAL_RCC_OscConfig+0x478>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7ff fb64 	bl	8003934 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004270:	f7ff fb60 	bl	8003934 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e087      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	4b27      	ldr	r3, [pc, #156]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	3b01      	subs	r3, #1
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	491b      	ldr	r1, [pc, #108]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <HAL_RCC_OscConfig+0x478>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042be:	f7ff fb39 	bl	8003934 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c6:	f7ff fb35 	bl	8003934 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e05c      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x416>
 80042e4:	e054      	b.n	8004390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <HAL_RCC_OscConfig+0x478>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7ff fb22 	bl	8003934 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f4:	f7ff fb1e 	bl	8003934 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e045      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_RCC_OscConfig+0x470>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x444>
 8004312:	e03d      	b.n	8004390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e038      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
 8004320:	40023800 	.word	0x40023800
 8004324:	40007000 	.word	0x40007000
 8004328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800432c:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <HAL_RCC_OscConfig+0x4ec>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d028      	beq.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d121      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d11a      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004364:	4293      	cmp	r3, r2
 8004366:	d111      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	3b01      	subs	r3, #1
 8004376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0cc      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b4:	4b68      	ldr	r3, [pc, #416]	@ (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d90c      	bls.n	80043dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b65      	ldr	r3, [pc, #404]	@ (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b63      	ldr	r3, [pc, #396]	@ (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0b8      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f4:	4b59      	ldr	r3, [pc, #356]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a58      	ldr	r2, [pc, #352]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800440c:	4b53      	ldr	r3, [pc, #332]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a52      	ldr	r2, [pc, #328]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004418:	4b50      	ldr	r3, [pc, #320]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	494d      	ldr	r1, [pc, #308]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d044      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b47      	ldr	r3, [pc, #284]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d119      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d003      	beq.n	800445e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800445a:	2b03      	cmp	r3, #3
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	4b3f      	ldr	r3, [pc, #252]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e06f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446e:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e067      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447e:	4b37      	ldr	r3, [pc, #220]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f023 0203 	bic.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4934      	ldr	r1, [pc, #208]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004490:	f7ff fa50 	bl	8003934 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	e00a      	b.n	80044ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7ff fa4c 	bl	8003934 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e04f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	4b2b      	ldr	r3, [pc, #172]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 020c 	and.w	r2, r3, #12
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	429a      	cmp	r2, r3
 80044be:	d1eb      	bne.n	8004498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c0:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d20c      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b22      	ldr	r3, [pc, #136]	@ (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b20      	ldr	r3, [pc, #128]	@ (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e032      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f4:	4b19      	ldr	r3, [pc, #100]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4916      	ldr	r1, [pc, #88]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004512:	4b12      	ldr	r3, [pc, #72]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	490e      	ldr	r1, [pc, #56]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004526:	f000 f821 	bl	800456c <HAL_RCC_GetSysClockFreq>
 800452a:	4602      	mov	r2, r0
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	490a      	ldr	r1, [pc, #40]	@ (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 8004538:	5ccb      	ldrb	r3, [r1, r3]
 800453a:	fa22 f303 	lsr.w	r3, r2, r3
 800453e:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004542:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f8d6 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023c00 	.word	0x40023c00
 800455c:	40023800 	.word	0x40023800
 8004560:	08005a5c 	.word	0x08005a5c
 8004564:	20000008 	.word	0x20000008
 8004568:	2000000c 	.word	0x2000000c

0800456c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800456c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004570:	b094      	sub	sp, #80	@ 0x50
 8004572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	647b      	str	r3, [r7, #68]	@ 0x44
 8004578:	2300      	movs	r3, #0
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800457c:	2300      	movs	r3, #0
 800457e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004584:	4b79      	ldr	r3, [pc, #484]	@ (800476c <HAL_RCC_GetSysClockFreq+0x200>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b08      	cmp	r3, #8
 800458e:	d00d      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x40>
 8004590:	2b08      	cmp	r3, #8
 8004592:	f200 80e1 	bhi.w	8004758 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x34>
 800459a:	2b04      	cmp	r3, #4
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800459e:	e0db      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b73      	ldr	r3, [pc, #460]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x204>)
 80045a2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80045a4:	e0db      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045a6:	4b73      	ldr	r3, [pc, #460]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x208>)
 80045a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045aa:	e0d8      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ac:	4b6f      	ldr	r3, [pc, #444]	@ (800476c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b6:	4b6d      	ldr	r3, [pc, #436]	@ (800476c <HAL_RCC_GetSysClockFreq+0x200>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d063      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c2:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <HAL_RCC_GetSysClockFreq+0x200>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	2200      	movs	r2, #0
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045d6:	2300      	movs	r3, #0
 80045d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045de:	4622      	mov	r2, r4
 80045e0:	462b      	mov	r3, r5
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	0159      	lsls	r1, r3, #5
 80045ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f0:	0150      	lsls	r0, r2, #5
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4621      	mov	r1, r4
 80045f8:	1a51      	subs	r1, r2, r1
 80045fa:	6139      	str	r1, [r7, #16]
 80045fc:	4629      	mov	r1, r5
 80045fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004610:	4659      	mov	r1, fp
 8004612:	018b      	lsls	r3, r1, #6
 8004614:	4651      	mov	r1, sl
 8004616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800461a:	4651      	mov	r1, sl
 800461c:	018a      	lsls	r2, r1, #6
 800461e:	4651      	mov	r1, sl
 8004620:	ebb2 0801 	subs.w	r8, r2, r1
 8004624:	4659      	mov	r1, fp
 8004626:	eb63 0901 	sbc.w	r9, r3, r1
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800463a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800463e:	4690      	mov	r8, r2
 8004640:	4699      	mov	r9, r3
 8004642:	4623      	mov	r3, r4
 8004644:	eb18 0303 	adds.w	r3, r8, r3
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	462b      	mov	r3, r5
 800464c:	eb49 0303 	adc.w	r3, r9, r3
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800465e:	4629      	mov	r1, r5
 8004660:	024b      	lsls	r3, r1, #9
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004668:	4621      	mov	r1, r4
 800466a:	024a      	lsls	r2, r1, #9
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004678:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800467c:	f7fb fda8 	bl	80001d0 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004688:	e058      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468a:	4b38      	ldr	r3, [pc, #224]	@ (800476c <HAL_RCC_GetSysClockFreq+0x200>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	2200      	movs	r2, #0
 8004692:	4618      	mov	r0, r3
 8004694:	4611      	mov	r1, r2
 8004696:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800469a:	623b      	str	r3, [r7, #32]
 800469c:	2300      	movs	r3, #0
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	f04f 0000 	mov.w	r0, #0
 80046ac:	f04f 0100 	mov.w	r1, #0
 80046b0:	0159      	lsls	r1, r3, #5
 80046b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b6:	0150      	lsls	r0, r2, #5
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4641      	mov	r1, r8
 80046be:	ebb2 0a01 	subs.w	sl, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046dc:	ebb2 040a 	subs.w	r4, r2, sl
 80046e0:	eb63 050b 	sbc.w	r5, r3, fp
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	00eb      	lsls	r3, r5, #3
 80046ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f2:	00e2      	lsls	r2, r4, #3
 80046f4:	4614      	mov	r4, r2
 80046f6:	461d      	mov	r5, r3
 80046f8:	4643      	mov	r3, r8
 80046fa:	18e3      	adds	r3, r4, r3
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	464b      	mov	r3, r9
 8004700:	eb45 0303 	adc.w	r3, r5, r3
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004712:	4629      	mov	r1, r5
 8004714:	028b      	lsls	r3, r1, #10
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800471c:	4621      	mov	r1, r4
 800471e:	028a      	lsls	r2, r1, #10
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004726:	2200      	movs	r2, #0
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	61fa      	str	r2, [r7, #28]
 800472c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004730:	f7fb fd4e 	bl	80001d0 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4613      	mov	r3, r2
 800473a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800473c:	4b0b      	ldr	r3, [pc, #44]	@ (800476c <HAL_RCC_GetSysClockFreq+0x200>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	3301      	adds	r3, #1
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800474c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800474e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004756:	e002      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x204>)
 800475a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800475c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800475e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004760:	4618      	mov	r0, r3
 8004762:	3750      	adds	r7, #80	@ 0x50
 8004764:	46bd      	mov	sp, r7
 8004766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476a:	bf00      	nop
 800476c:	40023800 	.word	0x40023800
 8004770:	00f42400 	.word	0x00f42400
 8004774:	007a1200 	.word	0x007a1200

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800477c:	4b03      	ldr	r3, [pc, #12]	@ (800478c <HAL_RCC_GetHCLKFreq+0x14>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000008 	.word	0x20000008

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004794:	f7ff fff0 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0a9b      	lsrs	r3, r3, #10
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4903      	ldr	r1, [pc, #12]	@ (80047b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40023800 	.word	0x40023800
 80047b4:	08005a6c 	.word	0x08005a6c

080047b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047bc:	f7ff ffdc 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0b5b      	lsrs	r3, r3, #13
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4903      	ldr	r1, [pc, #12]	@ (80047dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40023800 	.word	0x40023800
 80047dc:	08005a6c 	.word	0x08005a6c

080047e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	220f      	movs	r2, #15
 80047ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047f0:	4b12      	ldr	r3, [pc, #72]	@ (800483c <HAL_RCC_GetClockConfig+0x5c>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0203 	and.w	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047fc:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <HAL_RCC_GetClockConfig+0x5c>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <HAL_RCC_GetClockConfig+0x5c>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004814:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_RCC_GetClockConfig+0x5c>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	08db      	lsrs	r3, r3, #3
 800481a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004822:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <HAL_RCC_GetClockConfig+0x60>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0207 	and.w	r2, r3, #7
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	40023c00 	.word	0x40023c00

08004844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e041      	b.n	80048da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fe fed4 	bl	8003618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 fa7e 	bl	8004d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e04e      	b.n	800499a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004926:	d01d      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <HAL_TIM_Base_Start_IT+0xc8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1e      	ldr	r2, [pc, #120]	@ (80049b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1c      	ldr	r2, [pc, #112]	@ (80049b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a19      	ldr	r2, [pc, #100]	@ (80049bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	@ (80049c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d111      	bne.n	8004988 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d010      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	e007      	b.n	8004998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40001800 	.word	0x40001800

080049c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0202 	mvn.w	r2, #2
 80049f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f999 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f98b 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f99c 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0204 	mvn.w	r2, #4
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f973 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f965 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f976 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d020      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0208 	mvn.w	r2, #8
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2204      	movs	r2, #4
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f94d 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f93f 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f950 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0210 	mvn.w	r2, #16
 8004adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f927 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f919 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f92a 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0201 	mvn.w	r2, #1
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fe fd06 	bl	800353c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fae4 	bl	800511c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8fb 	bl	8004d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0220 	mvn.w	r2, #32
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fab6 	bl	8005108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0b4      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x186>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf8:	d03e      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0xd4>
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bfe:	f200 8087 	bhi.w	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c06:	f000 8086 	beq.w	8004d16 <HAL_TIM_ConfigClockSource+0x172>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0e:	d87f      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b70      	cmp	r3, #112	@ 0x70
 8004c12:	d01a      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xa6>
 8004c14:	2b70      	cmp	r3, #112	@ 0x70
 8004c16:	d87b      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b60      	cmp	r3, #96	@ 0x60
 8004c1a:	d050      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x11a>
 8004c1c:	2b60      	cmp	r3, #96	@ 0x60
 8004c1e:	d877      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b50      	cmp	r3, #80	@ 0x50
 8004c22:	d03c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xfa>
 8004c24:	2b50      	cmp	r3, #80	@ 0x50
 8004c26:	d873      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b40      	cmp	r3, #64	@ 0x40
 8004c2a:	d058      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x13a>
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d86f      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b30      	cmp	r3, #48	@ 0x30
 8004c32:	d064      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	2b30      	cmp	r3, #48	@ 0x30
 8004c36:	d86b      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d060      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d867      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d05c      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d05a      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	e062      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c5a:	f000 f9b9 	bl	8004fd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	609a      	str	r2, [r3, #8]
      break;
 8004c76:	e04f      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c88:	f000 f9a2 	bl	8004fd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c9a:	609a      	str	r2, [r3, #8]
      break;
 8004c9c:	e03c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 f916 	bl	8004edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2150      	movs	r1, #80	@ 0x50
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f96f 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e02c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f000 f935 	bl	8004f3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2160      	movs	r1, #96	@ 0x60
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f95f 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 8004cdc:	e01c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	461a      	mov	r2, r3
 8004cec:	f000 f8f6 	bl	8004edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2140      	movs	r1, #64	@ 0x40
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f94f 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 8004cfc:	e00c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f000 f946 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 8004d0e:	e003      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e000      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a46      	ldr	r2, [pc, #280]	@ (8004eb0 <TIM_Base_SetConfig+0x12c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da2:	d00f      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a43      	ldr	r2, [pc, #268]	@ (8004eb4 <TIM_Base_SetConfig+0x130>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a42      	ldr	r2, [pc, #264]	@ (8004eb8 <TIM_Base_SetConfig+0x134>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a41      	ldr	r2, [pc, #260]	@ (8004ebc <TIM_Base_SetConfig+0x138>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a40      	ldr	r2, [pc, #256]	@ (8004ec0 <TIM_Base_SetConfig+0x13c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d108      	bne.n	8004dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a35      	ldr	r2, [pc, #212]	@ (8004eb0 <TIM_Base_SetConfig+0x12c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02b      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de4:	d027      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a32      	ldr	r2, [pc, #200]	@ (8004eb4 <TIM_Base_SetConfig+0x130>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d023      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a31      	ldr	r2, [pc, #196]	@ (8004eb8 <TIM_Base_SetConfig+0x134>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01f      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a30      	ldr	r2, [pc, #192]	@ (8004ebc <TIM_Base_SetConfig+0x138>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01b      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec0 <TIM_Base_SetConfig+0x13c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d017      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec4 <TIM_Base_SetConfig+0x140>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec8 <TIM_Base_SetConfig+0x144>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00f      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2c      	ldr	r2, [pc, #176]	@ (8004ecc <TIM_Base_SetConfig+0x148>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed0 <TIM_Base_SetConfig+0x14c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed4 <TIM_Base_SetConfig+0x150>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a29      	ldr	r2, [pc, #164]	@ (8004ed8 <TIM_Base_SetConfig+0x154>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d108      	bne.n	8004e48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a10      	ldr	r2, [pc, #64]	@ (8004eb0 <TIM_Base_SetConfig+0x12c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0xf8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a12      	ldr	r2, [pc, #72]	@ (8004ec0 <TIM_Base_SetConfig+0x13c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d105      	bne.n	8004ea2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f023 0201 	bic.w	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	611a      	str	r2, [r3, #16]
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40010400 	.word	0x40010400
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800
 8004ed0:	40001800 	.word	0x40001800
 8004ed4:	40001c00 	.word	0x40001c00
 8004ed8:	40002000 	.word	0x40002000

08004edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 030a 	bic.w	r3, r3, #10
 8004f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0210 	bic.w	r2, r3, #16
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f043 0307 	orr.w	r3, r3, #7
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	609a      	str	r2, [r3, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e05a      	b.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a21      	ldr	r2, [pc, #132]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005074:	d01d      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1b      	ldr	r2, [pc, #108]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a18      	ldr	r2, [pc, #96]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a17      	ldr	r2, [pc, #92]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10c      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40010400 	.word	0x40010400
 8005100:	40014000 	.word	0x40014000
 8005104:	40001800 	.word	0x40001800

08005108 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e042      	b.n	80051c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fe fa86 	bl	8003668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2224      	movs	r2, #36	@ 0x24
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f973 	bl	8005460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	@ 0x28
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d175      	bne.n	80052dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_UART_Transmit+0x2c>
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e06e      	b.n	80052de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2221      	movs	r2, #33	@ 0x21
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800520e:	f7fe fb91 	bl	8003934 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005228:	d108      	bne.n	800523c <HAL_UART_Transmit+0x6c>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	e003      	b.n	8005244 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005244:	e02e      	b.n	80052a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	2180      	movs	r1, #128	@ 0x80
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f848 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e03a      	b.n	80052de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800527c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	3302      	adds	r3, #2
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e007      	b.n	8005296 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1cb      	bne.n	8005246 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2140      	movs	r1, #64	@ 0x40
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f814 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e006      	b.n	80052de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b086      	sub	sp, #24
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f6:	e03b      	b.n	8005370 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d037      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005300:	f7fe fb18 	bl	8003934 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	6a3a      	ldr	r2, [r7, #32]
 800530c:	429a      	cmp	r2, r3
 800530e:	d302      	bcc.n	8005316 <UART_WaitOnFlagUntilTimeout+0x30>
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e03a      	b.n	8005390 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d023      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b80      	cmp	r3, #128	@ 0x80
 800532c:	d020      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x8a>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b40      	cmp	r3, #64	@ 0x40
 8005332:	d01d      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b08      	cmp	r3, #8
 8005340:	d116      	bne.n	8005370 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f81d 	bl	8005398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2208      	movs	r2, #8
 8005362:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e00f      	b.n	8005390 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	429a      	cmp	r2, r3
 800538c:	d0b4      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b095      	sub	sp, #84	@ 0x54
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80053c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e5      	bne.n	80053a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540c:	2b01      	cmp	r3, #1
 800540e:	d119      	bne.n	8005444 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	647b      	str	r3, [r7, #68]	@ 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005430:	61ba      	str	r2, [r7, #24]
 8005432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e5      	bne.n	8005410 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005452:	bf00      	nop
 8005454:	3754      	adds	r7, #84	@ 0x54
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005464:	b0c0      	sub	sp, #256	@ 0x100
 8005466:	af00      	add	r7, sp, #0
 8005468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	ea40 0301 	orr.w	r3, r0, r1
 8005488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	431a      	orrs	r2, r3
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	431a      	orrs	r2, r3
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054b8:	f021 010c 	bic.w	r1, r1, #12
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054c6:	430b      	orrs	r3, r1
 80054c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	6999      	ldr	r1, [r3, #24]
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	ea40 0301 	orr.w	r3, r0, r1
 80054e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b8f      	ldr	r3, [pc, #572]	@ (800572c <UART_SetConfig+0x2cc>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d005      	beq.n	8005500 <UART_SetConfig+0xa0>
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005730 <UART_SetConfig+0x2d0>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d104      	bne.n	800550a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7ff f95a 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 8005504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005508:	e003      	b.n	8005512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800550a:	f7ff f941 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 800550e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551c:	f040 810c 	bne.w	8005738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800552a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800552e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	1891      	adds	r1, r2, r2
 8005538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800553a:	415b      	adcs	r3, r3
 800553c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005542:	4621      	mov	r1, r4
 8005544:	eb12 0801 	adds.w	r8, r2, r1
 8005548:	4629      	mov	r1, r5
 800554a:	eb43 0901 	adc.w	r9, r3, r1
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800555a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800555e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005562:	4690      	mov	r8, r2
 8005564:	4699      	mov	r9, r3
 8005566:	4623      	mov	r3, r4
 8005568:	eb18 0303 	adds.w	r3, r8, r3
 800556c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005570:	462b      	mov	r3, r5
 8005572:	eb49 0303 	adc.w	r3, r9, r3
 8005576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800557a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800558a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800558e:	460b      	mov	r3, r1
 8005590:	18db      	adds	r3, r3, r3
 8005592:	653b      	str	r3, [r7, #80]	@ 0x50
 8005594:	4613      	mov	r3, r2
 8005596:	eb42 0303 	adc.w	r3, r2, r3
 800559a:	657b      	str	r3, [r7, #84]	@ 0x54
 800559c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055a4:	f7fa fe14 	bl	80001d0 <__aeabi_uldivmod>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4b61      	ldr	r3, [pc, #388]	@ (8005734 <UART_SetConfig+0x2d4>)
 80055ae:	fba3 2302 	umull	r2, r3, r3, r2
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	011c      	lsls	r4, r3, #4
 80055b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	1891      	adds	r1, r2, r2
 80055ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055d0:	415b      	adcs	r3, r3
 80055d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055d8:	4641      	mov	r1, r8
 80055da:	eb12 0a01 	adds.w	sl, r2, r1
 80055de:	4649      	mov	r1, r9
 80055e0:	eb43 0b01 	adc.w	fp, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055f8:	4692      	mov	sl, r2
 80055fa:	469b      	mov	fp, r3
 80055fc:	4643      	mov	r3, r8
 80055fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005606:	464b      	mov	r3, r9
 8005608:	eb4b 0303 	adc.w	r3, fp, r3
 800560c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800561c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005624:	460b      	mov	r3, r1
 8005626:	18db      	adds	r3, r3, r3
 8005628:	643b      	str	r3, [r7, #64]	@ 0x40
 800562a:	4613      	mov	r3, r2
 800562c:	eb42 0303 	adc.w	r3, r2, r3
 8005630:	647b      	str	r3, [r7, #68]	@ 0x44
 8005632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800563a:	f7fa fdc9 	bl	80001d0 <__aeabi_uldivmod>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4611      	mov	r1, r2
 8005644:	4b3b      	ldr	r3, [pc, #236]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005646:	fba3 2301 	umull	r2, r3, r3, r1
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2264      	movs	r2, #100	@ 0x64
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	1acb      	subs	r3, r1, r3
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800565a:	4b36      	ldr	r3, [pc, #216]	@ (8005734 <UART_SetConfig+0x2d4>)
 800565c:	fba3 2302 	umull	r2, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005668:	441c      	add	r4, r3
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	1891      	adds	r1, r2, r2
 8005682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005684:	415b      	adcs	r3, r3
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800568c:	4641      	mov	r1, r8
 800568e:	1851      	adds	r1, r2, r1
 8005690:	6339      	str	r1, [r7, #48]	@ 0x30
 8005692:	4649      	mov	r1, r9
 8005694:	414b      	adcs	r3, r1
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056a4:	4659      	mov	r1, fp
 80056a6:	00cb      	lsls	r3, r1, #3
 80056a8:	4651      	mov	r1, sl
 80056aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ae:	4651      	mov	r1, sl
 80056b0:	00ca      	lsls	r2, r1, #3
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	4642      	mov	r2, r8
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056c0:	464b      	mov	r3, r9
 80056c2:	460a      	mov	r2, r1
 80056c4:	eb42 0303 	adc.w	r3, r2, r3
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056e0:	460b      	mov	r3, r1
 80056e2:	18db      	adds	r3, r3, r3
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e6:	4613      	mov	r3, r2
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056f6:	f7fa fd6b 	bl	80001d0 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005700:	fba3 1302 	umull	r1, r3, r3, r2
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	2164      	movs	r1, #100	@ 0x64
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	3332      	adds	r3, #50	@ 0x32
 8005712:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	f003 0207 	and.w	r2, r3, #7
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4422      	add	r2, r4
 8005726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005728:	e106      	b.n	8005938 <UART_SetConfig+0x4d8>
 800572a:	bf00      	nop
 800572c:	40011000 	.word	0x40011000
 8005730:	40011400 	.word	0x40011400
 8005734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573c:	2200      	movs	r2, #0
 800573e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800574a:	4642      	mov	r2, r8
 800574c:	464b      	mov	r3, r9
 800574e:	1891      	adds	r1, r2, r2
 8005750:	6239      	str	r1, [r7, #32]
 8005752:	415b      	adcs	r3, r3
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
 8005756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800575a:	4641      	mov	r1, r8
 800575c:	1854      	adds	r4, r2, r1
 800575e:	4649      	mov	r1, r9
 8005760:	eb43 0501 	adc.w	r5, r3, r1
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	00eb      	lsls	r3, r5, #3
 800576e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005772:	00e2      	lsls	r2, r4, #3
 8005774:	4614      	mov	r4, r2
 8005776:	461d      	mov	r5, r3
 8005778:	4643      	mov	r3, r8
 800577a:	18e3      	adds	r3, r4, r3
 800577c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005780:	464b      	mov	r3, r9
 8005782:	eb45 0303 	adc.w	r3, r5, r3
 8005786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057a6:	4629      	mov	r1, r5
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	4621      	mov	r1, r4
 80057ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b0:	4621      	mov	r1, r4
 80057b2:	008a      	lsls	r2, r1, #2
 80057b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057b8:	f7fa fd0a 	bl	80001d0 <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4b60      	ldr	r3, [pc, #384]	@ (8005944 <UART_SetConfig+0x4e4>)
 80057c2:	fba3 2302 	umull	r2, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	011c      	lsls	r4, r3, #4
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	61b9      	str	r1, [r7, #24]
 80057e4:	415b      	adcs	r3, r3
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ec:	4641      	mov	r1, r8
 80057ee:	1851      	adds	r1, r2, r1
 80057f0:	6139      	str	r1, [r7, #16]
 80057f2:	4649      	mov	r1, r9
 80057f4:	414b      	adcs	r3, r1
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005804:	4659      	mov	r1, fp
 8005806:	00cb      	lsls	r3, r1, #3
 8005808:	4651      	mov	r1, sl
 800580a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580e:	4651      	mov	r1, sl
 8005810:	00ca      	lsls	r2, r1, #3
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	4603      	mov	r3, r0
 8005818:	4642      	mov	r2, r8
 800581a:	189b      	adds	r3, r3, r2
 800581c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005820:	464b      	mov	r3, r9
 8005822:	460a      	mov	r2, r1
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005844:	4649      	mov	r1, r9
 8005846:	008b      	lsls	r3, r1, #2
 8005848:	4641      	mov	r1, r8
 800584a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800584e:	4641      	mov	r1, r8
 8005850:	008a      	lsls	r2, r1, #2
 8005852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005856:	f7fa fcbb 	bl	80001d0 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4611      	mov	r1, r2
 8005860:	4b38      	ldr	r3, [pc, #224]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005862:	fba3 2301 	umull	r2, r3, r3, r1
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2264      	movs	r2, #100	@ 0x64
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	1acb      	subs	r3, r1, r3
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	3332      	adds	r3, #50	@ 0x32
 8005874:	4a33      	ldr	r2, [pc, #204]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005880:	441c      	add	r4, r3
 8005882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005886:	2200      	movs	r2, #0
 8005888:	673b      	str	r3, [r7, #112]	@ 0x70
 800588a:	677a      	str	r2, [r7, #116]	@ 0x74
 800588c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	415b      	adcs	r3, r3
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058a0:	4641      	mov	r1, r8
 80058a2:	1851      	adds	r1, r2, r1
 80058a4:	6039      	str	r1, [r7, #0]
 80058a6:	4649      	mov	r1, r9
 80058a8:	414b      	adcs	r3, r1
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058b8:	4659      	mov	r1, fp
 80058ba:	00cb      	lsls	r3, r1, #3
 80058bc:	4651      	mov	r1, sl
 80058be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c2:	4651      	mov	r1, sl
 80058c4:	00ca      	lsls	r2, r1, #3
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	4642      	mov	r2, r8
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058d2:	464b      	mov	r3, r9
 80058d4:	460a      	mov	r2, r1
 80058d6:	eb42 0303 	adc.w	r3, r2, r3
 80058da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058f4:	4649      	mov	r1, r9
 80058f6:	008b      	lsls	r3, r1, #2
 80058f8:	4641      	mov	r1, r8
 80058fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fe:	4641      	mov	r1, r8
 8005900:	008a      	lsls	r2, r1, #2
 8005902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005906:	f7fa fc63 	bl	80001d0 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	@ 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	3332      	adds	r3, #50	@ 0x32
 8005922:	4a08      	ldr	r2, [pc, #32]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4422      	add	r2, r4
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005944:	51eb851f 	.word	0x51eb851f

08005948 <memset>:
 8005948:	4402      	add	r2, r0
 800594a:	4603      	mov	r3, r0
 800594c:	4293      	cmp	r3, r2
 800594e:	d100      	bne.n	8005952 <memset+0xa>
 8005950:	4770      	bx	lr
 8005952:	f803 1b01 	strb.w	r1, [r3], #1
 8005956:	e7f9      	b.n	800594c <memset+0x4>

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	@ (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	@ (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	@ (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	@ (800599c <__libc_init_array+0x44>)
 800596c:	f000 f826 	bl	80059bc <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	08005a7c 	.word	0x08005a7c
 8005994:	08005a7c 	.word	0x08005a7c
 8005998:	08005a7c 	.word	0x08005a7c
 800599c:	08005a80 	.word	0x08005a80

080059a0 <memcpy>:
 80059a0:	440a      	add	r2, r1
 80059a2:	4291      	cmp	r1, r2
 80059a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059a8:	d100      	bne.n	80059ac <memcpy+0xc>
 80059aa:	4770      	bx	lr
 80059ac:	b510      	push	{r4, lr}
 80059ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059b6:	4291      	cmp	r1, r2
 80059b8:	d1f9      	bne.n	80059ae <memcpy+0xe>
 80059ba:	bd10      	pop	{r4, pc}

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
