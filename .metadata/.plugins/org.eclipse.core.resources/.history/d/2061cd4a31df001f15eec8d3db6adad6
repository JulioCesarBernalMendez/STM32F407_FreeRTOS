
App_017_Example_5.Y_Mailbox_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007cac  08007cac  00008cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e7c  08007e7c  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007e7c  08007e7c  00008e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e84  08007e84  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e84  08007e84  00008e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e88  08007e88  00008e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007e8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          00019a40  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019aa4  20019aa4  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ff0  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f2  00000000  00000000  00021084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  00024378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001109  00000000  00000000  00025968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251ce  00000000  00000000  00026a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a90  00000000  00000000  0004bc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb6fe  00000000  00000000  000656cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150dcd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006138  00000000  00000000  00150e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000bd  00000000  00000000  00156f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c94 	.word	0x08007c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007c94 	.word	0x08007c94

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee4 	.word	0x20012ee4
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fc03 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f83f 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8d1 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8a5 	bl	8000760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <main+0x70>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a15      	ldr	r2, [pc, #84]	@ (8000670 <main+0x70>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000622:	f005 f99b 	bl	800595c <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 8000626:	f005 fef1 	bl	800640c <SEGGER_SYSVIEW_Start>

  /* Create the queue that is going to be used as a mailbox.
     The queue has a length of 1 to allow it to be used with the xQueueOverWrite() API */
  xMailbox = xQueueCreate( 1, sizeof( Example_t ) );
 800062a:	2200      	movs	r2, #0
 800062c:	2108      	movs	r1, #8
 800062e:	2001      	movs	r0, #1
 8000630:	f002 fb72 	bl	8002d18 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <main+0x74>)
 8000638:	6013      	str	r3, [r2, #0]

  /* Create the task that will overwrite the contents in the mailbox queue.
     The task is created with a priority of 2, so above the priority of the peeker task */
  ( void ) xTaskCreate( vUpdateMailboxTask, "Update M.box Task", 1000, ( void* ) &pcString, 2, NULL );
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <main+0x78>)
 8000644:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000648:	490c      	ldr	r1, [pc, #48]	@ (800067c <main+0x7c>)
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <main+0x80>)
 800064c:	f003 f8a1 	bl	8003792 <xTaskCreate>

  /* Create the task that will peek from the queue.
     The task is created with a priority of 1, so below the priority of the overwriter task */
  ( void ) xTaskCreate( vPeekMailboxTask, "Peek M.box Task", 1000, ( void* ) &pcString, 1, NULL );
 8000650:	2300      	movs	r3, #0
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <main+0x78>)
 800065a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800065e:	4909      	ldr	r1, [pc, #36]	@ (8000684 <main+0x84>)
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <main+0x88>)
 8000662:	f003 f896 	bl	8003792 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 8000666:	f003 fa85 	bl	8003b74 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <main+0x6a>
 800066e:	bf00      	nop
 8000670:	e0001000 	.word	0xe0001000
 8000674:	200000c8 	.word	0x200000c8
 8000678:	200000cc 	.word	0x200000cc
 800067c:	08007cac 	.word	0x08007cac
 8000680:	08000915 	.word	0x08000915
 8000684:	08007cc0 	.word	0x08007cc0
 8000688:	08000a01 	.word	0x08000a01

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f006 fe7a 	bl	8007394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	@ (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000700:	2332      	movs	r3, #50	@ 0x32
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000704:	2304      	movs	r3, #4
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fe57 	bl	80013c4 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f9ee 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f8b8 	bl	80018b4 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f9d7 	bl	8000afc <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f001 fd80 	bl	800229c <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f9ab 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000080 	.word	0x20000080
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b3c      	ldr	r3, [pc, #240]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a3b      	ldr	r2, [pc, #236]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b39      	ldr	r3, [pc, #228]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a34      	ldr	r2, [pc, #208]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b32      	ldr	r3, [pc, #200]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a2d      	ldr	r2, [pc, #180]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a26      	ldr	r2, [pc, #152]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <MX_GPIO_Init+0x10c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000840:	4820      	ldr	r0, [pc, #128]	@ (80008c4 <MX_GPIO_Init+0x110>)
 8000842:	f000 fda5 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	481b      	ldr	r0, [pc, #108]	@ (80008c8 <MX_GPIO_Init+0x114>)
 800085c:	f000 fbfc 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000860:	2304      	movs	r3, #4
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4816      	ldr	r0, [pc, #88]	@ (80008cc <MX_GPIO_Init+0x118>)
 8000874:	f000 fbf0 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000878:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_GPIO_Init+0x110>)
 8000892:	f000 fbe1 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000896:	2380      	movs	r3, #128	@ 0x80
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a6:	2306      	movs	r3, #6
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80008b2:	f000 fbd1 	bl	8001058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40020800 	.word	0x40020800

080008d4 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e00b      	b.n	80008fc <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	18d1      	adds	r1, r2, r3
 80008ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008ee:	2201      	movs	r2, #1
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f001 fd23 	bl	800233c <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	3301      	adds	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1ed      	bne.n	80008e4 <UART2_Print_Text+0x10>
  }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <vUpdateMailboxTask>:

/* a task that overwrites the data to the globally created mailbox */
static void vUpdateMailboxTask( void *pvParameters )
{
 8000914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000918:	b088      	sub	sp, #32
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  /* declare a pointer that will point to the string to print */
  char *pcStr = ( char * ) pvParameters;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	61fb      	str	r3, [r7, #28]

  /* get 100 milliseconds in Ticks used for delay */
  const TickType_t xDelay100ms = pdMS_TO_TICKS( 100 );
 8000922:	2364      	movs	r3, #100	@ 0x64
 8000924:	61bb      	str	r3, [r7, #24]
  /* declare the variable that will hold the data to overwrite into the mailbox */
  Example_t xData;

  /* declare the 'data' variable used to overwrite the data in the Example_t struct
     to be stored in the mailbox */
  volatile uint32_t ulNewValue = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* write the new data into the Example_t structure */
    xData.ulValue = ulNewValue;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	617b      	str	r3, [r7, #20]

    /* use the RTOS tick count as the time stamp stored in the Example_t structure */
    xData.xTimeStamp = xTaskGetTickCount();
 800092e:	f003 fa9b 	bl	8003e68 <xTaskGetTickCount>
 8000932:	4603      	mov	r3, r0
 8000934:	613b      	str	r3, [r7, #16]

    /* send the structure to the mailbox, overwritting any data that is already there */
    ( void ) xQueueOverwrite( xMailbox, &xData );
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <vUpdateMailboxTask+0xdc>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f107 0110 	add.w	r1, r7, #16
 800093e:	2302      	movs	r3, #2
 8000940:	2200      	movs	r2, #0
 8000942:	f002 fa65 	bl	8002e10 <xQueueGenericSend>

    /* print the data sent to the mailbox */
    ( void ) snprintf( pcStr, STRING_SIZE, "Data Sent        = %lu\n\r", xData.ulValue );
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	4a2a      	ldr	r2, [pc, #168]	@ (80009f4 <vUpdateMailboxTask+0xe0>)
 800094a:	2121      	movs	r1, #33	@ 0x21
 800094c:	69f8      	ldr	r0, [r7, #28]
 800094e:	f006 fcdd 	bl	800730c <sniprintf>
    UART2_Print_Text( &huart2, ( const char * ) pcStr );
 8000952:	69f9      	ldr	r1, [r7, #28]
 8000954:	4828      	ldr	r0, [pc, #160]	@ (80009f8 <vUpdateMailboxTask+0xe4>)
 8000956:	f7ff ffbd 	bl	80008d4 <UART2_Print_Text>
    ( void ) snprintf( pcStr, STRING_SIZE, "Timestamp Sent   = %lu\n\r", xData.xTimeStamp );
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <vUpdateMailboxTask+0xe8>)
 800095e:	2121      	movs	r1, #33	@ 0x21
 8000960:	69f8      	ldr	r0, [r7, #28]
 8000962:	f006 fcd3 	bl	800730c <sniprintf>
    UART2_Print_Text( &huart2, ( const char * ) pcStr );
 8000966:	69f9      	ldr	r1, [r7, #28]
 8000968:	4823      	ldr	r0, [pc, #140]	@ (80009f8 <vUpdateMailboxTask+0xe4>)
 800096a:	f7ff ffb3 	bl	80008d4 <UART2_Print_Text>

    /* increment the variable so that the data overwritten into the mailbox is different on each
       iteration of this task */
    ulNewValue++;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]

    /* place this task into Blocked state for a 100ms-period */
    vTaskDelay( pdMS_TO_TICKS( xDelay100ms ) );
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2200      	movs	r2, #0
 8000978:	4698      	mov	r8, r3
 800097a:	4691      	mov	r9, r2
 800097c:	4642      	mov	r2, r8
 800097e:	464b      	mov	r3, r9
 8000980:	f04f 0000 	mov.w	r0, #0
 8000984:	f04f 0100 	mov.w	r1, #0
 8000988:	0159      	lsls	r1, r3, #5
 800098a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800098e:	0150      	lsls	r0, r2, #5
 8000990:	4602      	mov	r2, r0
 8000992:	460b      	mov	r3, r1
 8000994:	ebb2 0408 	subs.w	r4, r2, r8
 8000998:	eb63 0509 	sbc.w	r5, r3, r9
 800099c:	f04f 0200 	mov.w	r2, #0
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	00ab      	lsls	r3, r5, #2
 80009a6:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80009aa:	00a2      	lsls	r2, r4, #2
 80009ac:	4614      	mov	r4, r2
 80009ae:	461d      	mov	r5, r3
 80009b0:	eb14 0a08 	adds.w	sl, r4, r8
 80009b4:	eb45 0b09 	adc.w	fp, r5, r9
 80009b8:	f04f 0200 	mov.w	r2, #0
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80009c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80009c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80009cc:	4692      	mov	sl, r2
 80009ce:	469b      	mov	fp, r3
 80009d0:	4650      	mov	r0, sl
 80009d2:	4659      	mov	r1, fp
 80009d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	f7ff fc98 	bl	8000310 <__aeabi_uldivmod>
 80009e0:	4602      	mov	r2, r0
 80009e2:	460b      	mov	r3, r1
 80009e4:	4613      	mov	r3, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 f842 	bl	8003a70 <vTaskDelay>
    xData.ulValue = ulNewValue;
 80009ec:	bf00      	nop
 80009ee:	e79c      	b.n	800092a <vUpdateMailboxTask+0x16>
 80009f0:	200000c8 	.word	0x200000c8
 80009f4:	08007cd0 	.word	0x08007cd0
 80009f8:	20000080 	.word	0x20000080
 80009fc:	08007cec 	.word	0x08007cec

08000a00 <vPeekMailboxTask>:
  }
}

/* A task that peeks the data from the globally created mailbox */
static void vPeekMailboxTask( void *pvParameters )
{
 8000a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  /* declare a pointer that will point to the string to print */
  char *pcStr = ( char * ) pvParameters;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	617b      	str	r3, [r7, #20]

  /* declare the variable that will hold the data peeked from the mailbox */
  Example_t  xMailboxPeek;

  /* get 100 milliseconds in Ticks used for delay */
  const TickType_t xDelay100ms = pdMS_TO_TICKS( 100 );
 8000a0e:	2364      	movs	r3, #100	@ 0x64
 8000a10:	613b      	str	r3, [r7, #16]
       
       Using xQueuePeek() instead of xQueueReceive() ensures the data remains in the mailbox.
       
       A block time is not specified, as this task will execute with a lower priority than
       the overwriter task */
    ( void ) xQueuePeek( xMailbox, &xMailboxPeek, 0 );
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <vPeekMailboxTask+0xc8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f107 0108 	add.w	r1, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fbf3 	bl	8003208 <xQueuePeek>

    /* print the data peeked from the mailbox */
    ( void ) snprintf( pcStr, STRING_SIZE, "Data Peeked      = %lu\n\r", xMailboxPeek.ulValue );
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4a29      	ldr	r2, [pc, #164]	@ (8000acc <vPeekMailboxTask+0xcc>)
 8000a26:	2121      	movs	r1, #33	@ 0x21
 8000a28:	6978      	ldr	r0, [r7, #20]
 8000a2a:	f006 fc6f 	bl	800730c <sniprintf>
    UART2_Print_Text( &huart2, ( const char * ) pcStr );
 8000a2e:	6979      	ldr	r1, [r7, #20]
 8000a30:	4827      	ldr	r0, [pc, #156]	@ (8000ad0 <vPeekMailboxTask+0xd0>)
 8000a32:	f7ff ff4f 	bl	80008d4 <UART2_Print_Text>
    ( void ) snprintf( pcStr, STRING_SIZE, "Timestamp Peeked = %lu\n\n\r", xMailboxPeek.xTimeStamp );
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4a26      	ldr	r2, [pc, #152]	@ (8000ad4 <vPeekMailboxTask+0xd4>)
 8000a3a:	2121      	movs	r1, #33	@ 0x21
 8000a3c:	6978      	ldr	r0, [r7, #20]
 8000a3e:	f006 fc65 	bl	800730c <sniprintf>
    UART2_Print_Text( &huart2, ( const char * ) pcStr );
 8000a42:	6979      	ldr	r1, [r7, #20]
 8000a44:	4822      	ldr	r0, [pc, #136]	@ (8000ad0 <vPeekMailboxTask+0xd0>)
 8000a46:	f7ff ff45 	bl	80008d4 <UART2_Print_Text>

    /* place this task into Blocked state for a 100ms-period */
    vTaskDelay( pdMS_TO_TICKS( xDelay100ms ) );
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4698      	mov	r8, r3
 8000a50:	4691      	mov	r9, r2
 8000a52:	4642      	mov	r2, r8
 8000a54:	464b      	mov	r3, r9
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 0100 	mov.w	r1, #0
 8000a5e:	0159      	lsls	r1, r3, #5
 8000a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000a64:	0150      	lsls	r0, r2, #5
 8000a66:	4602      	mov	r2, r0
 8000a68:	460b      	mov	r3, r1
 8000a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8000a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	00ab      	lsls	r3, r5, #2
 8000a7c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000a80:	00a2      	lsls	r2, r4, #2
 8000a82:	4614      	mov	r4, r2
 8000a84:	461d      	mov	r5, r3
 8000a86:	eb14 0a08 	adds.w	sl, r4, r8
 8000a8a:	eb45 0b09 	adc.w	fp, r5, r9
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	f04f 0300 	mov.w	r3, #0
 8000a96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000a9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000a9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000aa2:	4692      	mov	sl, r2
 8000aa4:	469b      	mov	fp, r3
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	4659      	mov	r1, fp
 8000aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	f7ff fc2d 	bl	8000310 <__aeabi_uldivmod>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4613      	mov	r3, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 ffd7 	bl	8003a70 <vTaskDelay>
    ( void ) xQueuePeek( xMailbox, &xMailboxPeek, 0 );
 8000ac2:	bf00      	nop
 8000ac4:	e7a5      	b.n	8000a12 <vPeekMailboxTask+0x12>
 8000ac6:	bf00      	nop
 8000ac8:	200000c8 	.word	0x200000c8
 8000acc:	08007d08 	.word	0x08007d08
 8000ad0:	20000080 	.word	0x20000080
 8000ad4:	08007d24 	.word	0x08007d24

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 f9b3 	bl	8000e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001000 	.word	0x40001000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 fa51 	bl	8000fee <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_UART_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12b      	bne.n	8000bd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <HAL_UART_MspInit+0x8c>)
 8000bce:	f000 fa43 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	@ 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	@ 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ccc <HAL_InitTick+0xe4>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c00:	4a32      	ldr	r2, [pc, #200]	@ (8000ccc <HAL_InitTick+0xe4>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c08:	4b30      	ldr	r3, [pc, #192]	@ (8000ccc <HAL_InitTick+0xe4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c14:	f107 0210 	add.w	r2, r7, #16
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 f868 	bl	8001cf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d103      	bne.n	8000c36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c2e:	f001 f839 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000c32:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c34:	e004      	b.n	8000c40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c36:	f001 f835 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c42:	4a23      	ldr	r2, [pc, #140]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	0c9b      	lsrs	r3, r3, #18
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c50:	4a21      	ldr	r2, [pc, #132]	@ (8000cd8 <HAL_InitTick+0xf0>)
 8000c52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c74:	4817      	ldr	r0, [pc, #92]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c76:	f001 f86f 	bl	8001d58 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d11b      	bne.n	8000cc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c88:	4812      	ldr	r0, [pc, #72]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c8a:	f001 f8bf 	bl	8001e0c <HAL_TIM_Base_Start_IT>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d111      	bne.n	8000cc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c9c:	2036      	movs	r0, #54	@ 0x36
 8000c9e:	f000 f9cd 	bl	800103c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d808      	bhi.n	8000cba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	2036      	movs	r0, #54	@ 0x36
 8000cae:	f000 f9a9 	bl	8001004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_InitTick+0xf4>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e002      	b.n	8000cc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3738      	adds	r7, #56	@ 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	200000f0 	.word	0x200000f0
 8000cd8:	40001000 	.word	0x40001000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <TIM6_DAC_IRQHandler+0x10>)
 8000d1e:	f001 f8e5 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000f0 	.word	0x200000f0

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f006 fb22 	bl	80073a4 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	20000138 	.word	0x20000138
 8000d94:	20019aa8 	.word	0x20019aa8

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc0:	f7ff ffea 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 fae1 	bl	80073b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fc07 	bl	8000600 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e00:	08007e8c 	.word	0x08007e8c
  ldr r2, =_sbss
 8000e04:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e08:	20019aa4 	.word	0x20019aa4

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f8d8 	bl	8000fee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fed2 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fe60 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	2000013c 	.word	0x2000013c

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	2000013c 	.word	0x2000013c

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	@ (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	@ (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	@ (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	@ 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff4c 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001016:	f7ff ff61 	bl	8000edc <__NVIC_GetPriorityGrouping>
 800101a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	6978      	ldr	r0, [r7, #20]
 8001022:	f7ff ffb1 	bl	8000f88 <NVIC_EncodePriority>
 8001026:	4602      	mov	r2, r0
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff80 	bl	8000f34 <__NVIC_SetPriority>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff54 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e16b      	b.n	800134c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 815a 	bne.w	8001346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80b4 	beq.w	8001346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b60      	ldr	r3, [pc, #384]	@ (8001364 <HAL_GPIO_Init+0x30c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001364 <HAL_GPIO_Init+0x30c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001364 <HAL_GPIO_Init+0x30c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001368 <HAL_GPIO_Init+0x310>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a52      	ldr	r2, [pc, #328]	@ (800136c <HAL_GPIO_Init+0x314>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x226>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a51      	ldr	r2, [pc, #324]	@ (8001370 <HAL_GPIO_Init+0x318>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x222>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a50      	ldr	r2, [pc, #320]	@ (8001374 <HAL_GPIO_Init+0x31c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x21e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4f      	ldr	r2, [pc, #316]	@ (8001378 <HAL_GPIO_Init+0x320>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x21a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4e      	ldr	r2, [pc, #312]	@ (800137c <HAL_GPIO_Init+0x324>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x216>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4d      	ldr	r2, [pc, #308]	@ (8001380 <HAL_GPIO_Init+0x328>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x212>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4c      	ldr	r2, [pc, #304]	@ (8001384 <HAL_GPIO_Init+0x32c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x20e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4b      	ldr	r2, [pc, #300]	@ (8001388 <HAL_GPIO_Init+0x330>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x20a>
 800125e:	2307      	movs	r3, #7
 8001260:	e00e      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001262:	2308      	movs	r3, #8
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001266:	2306      	movs	r3, #6
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	@ (8001368 <HAL_GPIO_Init+0x310>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <HAL_GPIO_Init+0x334>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a32      	ldr	r2, [pc, #200]	@ (800138c <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_GPIO_Init+0x334>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a27      	ldr	r2, [pc, #156]	@ (800138c <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <HAL_GPIO_Init+0x334>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_GPIO_Init+0x334>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_GPIO_Init+0x334>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a12      	ldr	r2, [pc, #72]	@ (800138c <HAL_GPIO_Init+0x334>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae90 	bls.w	8001074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e267      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d075      	beq.n	80014ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e2:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d00c      	beq.n	8001408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ee:	4b85      	ldr	r3, [pc, #532]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d112      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b82      	ldr	r3, [pc, #520]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001406:	d10b      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d05b      	beq.n	80014cc <HAL_RCC_OscConfig+0x108>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d157      	bne.n	80014cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e242      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x74>
 800142a:	4b76      	ldr	r3, [pc, #472]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a75      	ldr	r2, [pc, #468]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6f      	ldr	r2, [pc, #444]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b6d      	ldr	r3, [pc, #436]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6c      	ldr	r2, [pc, #432]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 800145c:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a68      	ldr	r2, [pc, #416]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b66      	ldr	r3, [pc, #408]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a65      	ldr	r2, [pc, #404]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fcfe 	bl	8000e7c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fcfa 	bl	8000e7c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	@ 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e207      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xc0>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcea 	bl	8000e7c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fce6 	bl	8000e7c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1f3      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0xe8>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d063      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d11c      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1c7      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4937      	ldr	r1, [pc, #220]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	e03a      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <HAL_RCC_OscConfig+0x244>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fc9f 	bl	8000e7c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fc9b 	bl	8000e7c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1a8      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4925      	ldr	r1, [pc, #148]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_RCC_OscConfig+0x244>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fc7e 	bl	8000e7c <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fc7a 	bl	8000e7c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e187      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d036      	beq.n	800161c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d016      	beq.n	80015e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_RCC_OscConfig+0x248>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fc5e 	bl	8000e7c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc5a 	bl	8000e7c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e167      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80015d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x200>
 80015e2:	e01b      	b.n	800161c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_RCC_OscConfig+0x248>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fc47 	bl	8000e7c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	e00e      	b.n	8001610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc43 	bl	8000e7c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d907      	bls.n	8001610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e150      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
 8001604:	40023800 	.word	0x40023800
 8001608:	42470000 	.word	0x42470000
 800160c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ea      	bne.n	80015f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8097 	beq.w	8001758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b81      	ldr	r3, [pc, #516]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b7d      	ldr	r3, [pc, #500]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a7c      	ldr	r2, [pc, #496]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b7a      	ldr	r3, [pc, #488]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b77      	ldr	r3, [pc, #476]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a73      	ldr	r2, [pc, #460]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fc03 	bl	8000e7c <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fbff 	bl	8000e7c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e10c      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b6a      	ldr	r3, [pc, #424]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x2ea>
 80016a0:	4b64      	ldr	r3, [pc, #400]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a4:	4a63      	ldr	r2, [pc, #396]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x324>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x30c>
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x324>
 80016d0:	4b58      	ldr	r3, [pc, #352]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d4:	4a57      	ldr	r2, [pc, #348]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	@ 0x70
 80016dc:	4b55      	ldr	r3, [pc, #340]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e0:	4a54      	ldr	r2, [pc, #336]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d015      	beq.n	800171c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fbc4 	bl	8000e7c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fbc0 	bl	8000e7c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0cb      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	4b49      	ldr	r3, [pc, #292]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0ee      	beq.n	80016f8 <HAL_RCC_OscConfig+0x334>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fbae 	bl	8000e7c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff fbaa 	bl	8000e7c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0b5      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ee      	bne.n	8001724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001746:	7dfb      	ldrb	r3, [r7, #23]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a1 	beq.w	80018a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001762:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	d05c      	beq.n	8001828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d141      	bne.n	80017fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb7e 	bl	8000e7c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fb7a 	bl	8000e7c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e087      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	491b      	ldr	r1, [pc, #108]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb53 	bl	8000e7c <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fb4f 	bl	8000e7c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e05c      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x416>
 80017f8:	e054      	b.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb3c 	bl	8000e7c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb38 	bl	8000e7c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e045      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x444>
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e038      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000
 800183c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_RCC_OscConfig+0x4ec>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d028      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d121      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d11a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001878:	4293      	cmp	r3, r2
 800187a:	d111      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0cc      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d90c      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b65      	ldr	r3, [pc, #404]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b8      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001908:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a58      	ldr	r2, [pc, #352]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001920:	4b53      	ldr	r3, [pc, #332]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a52      	ldr	r2, [pc, #328]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800192a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b50      	ldr	r3, [pc, #320]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	494d      	ldr	r1, [pc, #308]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d044      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d119      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e07f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e067      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4934      	ldr	r1, [pc, #208]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff fa6a 	bl	8000e7c <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff fa66 	bl	8000e7c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e04f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d20c      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e032      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4916      	ldr	r1, [pc, #88]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	490e      	ldr	r1, [pc, #56]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3a:	f000 f821 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	490a      	ldr	r1, [pc, #40]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	5ccb      	ldrb	r3, [r1, r3]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a09      	ldr	r2, [pc, #36]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f8c4 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00
 8001a70:	40023800 	.word	0x40023800
 8001a74:	08007e08 	.word	0x08007e08
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a84:	b094      	sub	sp, #80	@ 0x50
 8001a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	2300      	movs	r3, #0
 8001a92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a98:	4b79      	ldr	r3, [pc, #484]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d00d      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	f200 80e1 	bhi.w	8001c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x3a>
 8001ab2:	e0db      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b73      	ldr	r3, [pc, #460]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ab8:	e0db      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aba:	4b73      	ldr	r3, [pc, #460]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001abe:	e0d8      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aca:	4b6d      	ldr	r3, [pc, #436]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	2200      	movs	r2, #0
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001af2:	4622      	mov	r2, r4
 8001af4:	462b      	mov	r3, r5
 8001af6:	f04f 0000 	mov.w	r0, #0
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	0159      	lsls	r1, r3, #5
 8001b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b04:	0150      	lsls	r0, r2, #5
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	1a51      	subs	r1, r2, r1
 8001b0e:	6139      	str	r1, [r7, #16]
 8001b10:	4629      	mov	r1, r5
 8001b12:	eb63 0301 	sbc.w	r3, r3, r1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b24:	4659      	mov	r1, fp
 8001b26:	018b      	lsls	r3, r1, #6
 8001b28:	4651      	mov	r1, sl
 8001b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b2e:	4651      	mov	r1, sl
 8001b30:	018a      	lsls	r2, r1, #6
 8001b32:	4651      	mov	r1, sl
 8001b34:	ebb2 0801 	subs.w	r8, r2, r1
 8001b38:	4659      	mov	r1, fp
 8001b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b52:	4690      	mov	r8, r2
 8001b54:	4699      	mov	r9, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	eb18 0303 	adds.w	r3, r8, r3
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	462b      	mov	r3, r5
 8001b60:	eb49 0303 	adc.w	r3, r9, r3
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b72:	4629      	mov	r1, r5
 8001b74:	024b      	lsls	r3, r1, #9
 8001b76:	4621      	mov	r1, r4
 8001b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	024a      	lsls	r2, r1, #9
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	2200      	movs	r2, #0
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b90:	f7fe fbbe 	bl	8000310 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b9c:	e058      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	099b      	lsrs	r3, r3, #6
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4611      	mov	r1, r2
 8001baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bb8:	4642      	mov	r2, r8
 8001bba:	464b      	mov	r3, r9
 8001bbc:	f04f 0000 	mov.w	r0, #0
 8001bc0:	f04f 0100 	mov.w	r1, #0
 8001bc4:	0159      	lsls	r1, r3, #5
 8001bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bca:	0150      	lsls	r0, r2, #5
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	00eb      	lsls	r3, r5, #3
 8001c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c06:	00e2      	lsls	r2, r4, #3
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	18e3      	adds	r3, r4, r3
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	464b      	mov	r3, r9
 8001c14:	eb45 0303 	adc.w	r3, r5, r3
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c26:	4629      	mov	r1, r5
 8001c28:	028b      	lsls	r3, r1, #10
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c30:	4621      	mov	r1, r4
 8001c32:	028a      	lsls	r2, r1, #10
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	61fa      	str	r2, [r7, #28]
 8001c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c44:	f7fe fb64 	bl	8000310 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3750      	adds	r7, #80	@ 0x50
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08007e18 	.word	0x08007e18

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffdc 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08007e18 	.word	0x08007e18

08001cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_RCC_GetClockConfig+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e041      	b.n	8001dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f839 	bl	8001df6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f000 f9c0 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d001      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04e      	b.n	8001ec2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d022      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4e:	d01d      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d018      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d010      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	e007      	b.n	8001ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40000800 	.word	0x40000800
 8001edc:	40000c00 	.word	0x40000c00
 8001ee0:	40010400 	.word	0x40010400
 8001ee4:	40014000 	.word	0x40014000
 8001ee8:	40001800 	.word	0x40001800

08001eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0202 	mvn.w	r2, #2
 8001f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8d2 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8c4 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8d5 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0204 	mvn.w	r2, #4
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8ac 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f89e 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8af 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0208 	mvn.w	r2, #8
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f886 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f878 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f889 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0210 	mvn.w	r2, #16
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2208      	movs	r2, #8
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f860 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f852 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f863 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fd40 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f906 	bl	8002288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f834 	bl	8002108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0220 	mvn.w	r2, #32
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8d8 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a46      	ldr	r2, [pc, #280]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213a:	d00f      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a43      	ldr	r2, [pc, #268]	@ (800224c <TIM_Base_SetConfig+0x130>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00b      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a42      	ldr	r2, [pc, #264]	@ (8002250 <TIM_Base_SetConfig+0x134>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a41      	ldr	r2, [pc, #260]	@ (8002254 <TIM_Base_SetConfig+0x138>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a40      	ldr	r2, [pc, #256]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a35      	ldr	r2, [pc, #212]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d027      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a32      	ldr	r2, [pc, #200]	@ (800224c <TIM_Base_SetConfig+0x130>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d023      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a31      	ldr	r2, [pc, #196]	@ (8002250 <TIM_Base_SetConfig+0x134>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a30      	ldr	r2, [pc, #192]	@ (8002254 <TIM_Base_SetConfig+0x138>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2f      	ldr	r2, [pc, #188]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d017      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2e      	ldr	r2, [pc, #184]	@ (800225c <TIM_Base_SetConfig+0x140>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002260 <TIM_Base_SetConfig+0x144>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002264 <TIM_Base_SetConfig+0x148>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <TIM_Base_SetConfig+0x14c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <TIM_Base_SetConfig+0x150>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d003      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <TIM_Base_SetConfig+0x154>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d108      	bne.n	80021e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0xf8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f023 0201 	bic.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]
  }
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40010400 	.word	0x40010400
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800
 8002268:	40001800 	.word	0x40001800
 800226c:	40001c00 	.word	0x40001c00
 8002270:	40002000 	.word	0x40002000

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e042      	b.n	8002334 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fc48 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	@ 0x24
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f973 	bl	80025cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b20      	cmp	r3, #32
 800235a:	d175      	bne.n	8002448 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_UART_Transmit+0x2c>
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e06e      	b.n	800244a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2221      	movs	r2, #33	@ 0x21
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800237a:	f7fe fd7f 	bl	8000e7c <HAL_GetTick>
 800237e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002394:	d108      	bne.n	80023a8 <HAL_UART_Transmit+0x6c>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d104      	bne.n	80023a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	e003      	b.n	80023b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b0:	e02e      	b.n	8002410 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f848 	bl	8002452 <UART_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e03a      	b.n	800244a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10b      	bne.n	80023f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	3302      	adds	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e007      	b.n	8002402 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	3301      	adds	r3, #1
 8002400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1cb      	bne.n	80023b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2140      	movs	r1, #64	@ 0x40
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f814 	bl	8002452 <UART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002462:	e03b      	b.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d037      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7fe fd06 	bl	8000e7c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	6a3a      	ldr	r2, [r7, #32]
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <UART_WaitOnFlagUntilTimeout+0x30>
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e03a      	b.n	80024fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b80      	cmp	r3, #128	@ 0x80
 8002498:	d020      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b40      	cmp	r3, #64	@ 0x40
 800249e:	d01d      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d116      	bne.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f81d 	bl	8002504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2208      	movs	r2, #8
 80024ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e00f      	b.n	80024fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4013      	ands	r3, r2
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d0b4      	beq.n	8002464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002504:	b480      	push	{r7}
 8002506:	b095      	sub	sp, #84	@ 0x54
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002516:	e853 3f00 	ldrex	r3, [r3]
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800252c:	643a      	str	r2, [r7, #64]	@ 0x40
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002530:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002532:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002534:	e841 2300 	strex	r3, r2, [r1]
 8002538:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e5      	bne.n	800250c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3314      	adds	r3, #20
 8002546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	e853 3f00 	ldrex	r3, [r3]
 800254e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3314      	adds	r3, #20
 800255e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002560:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e5      	bne.n	8002540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	2b01      	cmp	r3, #1
 800257a:	d119      	bne.n	80025b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	e853 3f00 	ldrex	r3, [r3]
 800258a:	60bb      	str	r3, [r7, #8]
   return(result);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f023 0310 	bic.w	r3, r3, #16
 8002592:	647b      	str	r3, [r7, #68]	@ 0x44
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800259c:	61ba      	str	r2, [r7, #24]
 800259e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	e841 2300 	strex	r3, r2, [r1]
 80025a8:	613b      	str	r3, [r7, #16]
   return(result);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e5      	bne.n	800257c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025be:	bf00      	nop
 80025c0:	3754      	adds	r7, #84	@ 0x54
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d0:	b0c0      	sub	sp, #256	@ 0x100
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	ea40 0301 	orr.w	r3, r0, r1
 80025f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	431a      	orrs	r2, r3
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	431a      	orrs	r2, r3
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002624:	f021 010c 	bic.w	r1, r1, #12
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002632:	430b      	orrs	r3, r1
 8002634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002646:	6999      	ldr	r1, [r3, #24]
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	ea40 0301 	orr.w	r3, r0, r1
 8002652:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b8f      	ldr	r3, [pc, #572]	@ (8002898 <UART_SetConfig+0x2cc>)
 800265c:	429a      	cmp	r2, r3
 800265e:	d005      	beq.n	800266c <UART_SetConfig+0xa0>
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b8d      	ldr	r3, [pc, #564]	@ (800289c <UART_SetConfig+0x2d0>)
 8002668:	429a      	cmp	r2, r3
 800266a:	d104      	bne.n	8002676 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800266c:	f7ff fb2e 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002670:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002674:	e003      	b.n	800267e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002676:	f7ff fb15 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 800267a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002688:	f040 810c 	bne.w	80028a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800268c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002690:	2200      	movs	r2, #0
 8002692:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002696:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800269a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800269e:	4622      	mov	r2, r4
 80026a0:	462b      	mov	r3, r5
 80026a2:	1891      	adds	r1, r2, r2
 80026a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026a6:	415b      	adcs	r3, r3
 80026a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026ae:	4621      	mov	r1, r4
 80026b0:	eb12 0801 	adds.w	r8, r2, r1
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb43 0901 	adc.w	r9, r3, r1
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ce:	4690      	mov	r8, r2
 80026d0:	4699      	mov	r9, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	eb18 0303 	adds.w	r3, r8, r3
 80026d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026dc:	462b      	mov	r3, r5
 80026de:	eb49 0303 	adc.w	r3, r9, r3
 80026e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026fa:	460b      	mov	r3, r1
 80026fc:	18db      	adds	r3, r3, r3
 80026fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002700:	4613      	mov	r3, r2
 8002702:	eb42 0303 	adc.w	r3, r2, r3
 8002706:	657b      	str	r3, [r7, #84]	@ 0x54
 8002708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800270c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002710:	f7fd fdfe 	bl	8000310 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4b61      	ldr	r3, [pc, #388]	@ (80028a0 <UART_SetConfig+0x2d4>)
 800271a:	fba3 2302 	umull	r2, r3, r3, r2
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	011c      	lsls	r4, r3, #4
 8002722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002726:	2200      	movs	r2, #0
 8002728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800272c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002730:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002734:	4642      	mov	r2, r8
 8002736:	464b      	mov	r3, r9
 8002738:	1891      	adds	r1, r2, r2
 800273a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800273c:	415b      	adcs	r3, r3
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002740:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002744:	4641      	mov	r1, r8
 8002746:	eb12 0a01 	adds.w	sl, r2, r1
 800274a:	4649      	mov	r1, r9
 800274c:	eb43 0b01 	adc.w	fp, r3, r1
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800275c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002764:	4692      	mov	sl, r2
 8002766:	469b      	mov	fp, r3
 8002768:	4643      	mov	r3, r8
 800276a:	eb1a 0303 	adds.w	r3, sl, r3
 800276e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002772:	464b      	mov	r3, r9
 8002774:	eb4b 0303 	adc.w	r3, fp, r3
 8002778:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002788:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800278c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002790:	460b      	mov	r3, r1
 8002792:	18db      	adds	r3, r3, r3
 8002794:	643b      	str	r3, [r7, #64]	@ 0x40
 8002796:	4613      	mov	r3, r2
 8002798:	eb42 0303 	adc.w	r3, r2, r3
 800279c:	647b      	str	r3, [r7, #68]	@ 0x44
 800279e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027a6:	f7fd fdb3 	bl	8000310 <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <UART_SetConfig+0x2d4>)
 80027b2:	fba3 2301 	umull	r2, r3, r3, r1
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2264      	movs	r2, #100	@ 0x64
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	1acb      	subs	r3, r1, r3
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027c6:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <UART_SetConfig+0x2d4>)
 80027c8:	fba3 2302 	umull	r2, r3, r3, r2
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027d4:	441c      	add	r4, r3
 80027d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027e8:	4642      	mov	r2, r8
 80027ea:	464b      	mov	r3, r9
 80027ec:	1891      	adds	r1, r2, r2
 80027ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027f0:	415b      	adcs	r3, r3
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027f8:	4641      	mov	r1, r8
 80027fa:	1851      	adds	r1, r2, r1
 80027fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80027fe:	4649      	mov	r1, r9
 8002800:	414b      	adcs	r3, r1
 8002802:	637b      	str	r3, [r7, #52]	@ 0x34
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002810:	4659      	mov	r1, fp
 8002812:	00cb      	lsls	r3, r1, #3
 8002814:	4651      	mov	r1, sl
 8002816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800281a:	4651      	mov	r1, sl
 800281c:	00ca      	lsls	r2, r1, #3
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	4603      	mov	r3, r0
 8002824:	4642      	mov	r2, r8
 8002826:	189b      	adds	r3, r3, r2
 8002828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800282c:	464b      	mov	r3, r9
 800282e:	460a      	mov	r2, r1
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002844:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800284c:	460b      	mov	r3, r1
 800284e:	18db      	adds	r3, r3, r3
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002852:	4613      	mov	r3, r2
 8002854:	eb42 0303 	adc.w	r3, r2, r3
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800285e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002862:	f7fd fd55 	bl	8000310 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <UART_SetConfig+0x2d4>)
 800286c:	fba3 1302 	umull	r1, r3, r3, r2
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2164      	movs	r1, #100	@ 0x64
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3332      	adds	r3, #50	@ 0x32
 800287e:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <UART_SetConfig+0x2d4>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 0207 	and.w	r2, r3, #7
 800288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4422      	add	r2, r4
 8002892:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002894:	e106      	b.n	8002aa4 <UART_SetConfig+0x4d8>
 8002896:	bf00      	nop
 8002898:	40011000 	.word	0x40011000
 800289c:	40011400 	.word	0x40011400
 80028a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a8:	2200      	movs	r2, #0
 80028aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028b6:	4642      	mov	r2, r8
 80028b8:	464b      	mov	r3, r9
 80028ba:	1891      	adds	r1, r2, r2
 80028bc:	6239      	str	r1, [r7, #32]
 80028be:	415b      	adcs	r3, r3
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028c6:	4641      	mov	r1, r8
 80028c8:	1854      	adds	r4, r2, r1
 80028ca:	4649      	mov	r1, r9
 80028cc:	eb43 0501 	adc.w	r5, r3, r1
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	00eb      	lsls	r3, r5, #3
 80028da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	4614      	mov	r4, r2
 80028e2:	461d      	mov	r5, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	18e3      	adds	r3, r4, r3
 80028e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028ec:	464b      	mov	r3, r9
 80028ee:	eb45 0303 	adc.w	r3, r5, r3
 80028f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002902:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002912:	4629      	mov	r1, r5
 8002914:	008b      	lsls	r3, r1, #2
 8002916:	4621      	mov	r1, r4
 8002918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800291c:	4621      	mov	r1, r4
 800291e:	008a      	lsls	r2, r1, #2
 8002920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002924:	f7fd fcf4 	bl	8000310 <__aeabi_uldivmod>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4b60      	ldr	r3, [pc, #384]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 800292e:	fba3 2302 	umull	r2, r3, r3, r2
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	011c      	lsls	r4, r3, #4
 8002936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002940:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002944:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002948:	4642      	mov	r2, r8
 800294a:	464b      	mov	r3, r9
 800294c:	1891      	adds	r1, r2, r2
 800294e:	61b9      	str	r1, [r7, #24]
 8002950:	415b      	adcs	r3, r3
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002958:	4641      	mov	r1, r8
 800295a:	1851      	adds	r1, r2, r1
 800295c:	6139      	str	r1, [r7, #16]
 800295e:	4649      	mov	r1, r9
 8002960:	414b      	adcs	r3, r1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002970:	4659      	mov	r1, fp
 8002972:	00cb      	lsls	r3, r1, #3
 8002974:	4651      	mov	r1, sl
 8002976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800297a:	4651      	mov	r1, sl
 800297c:	00ca      	lsls	r2, r1, #3
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	4603      	mov	r3, r0
 8002984:	4642      	mov	r2, r8
 8002986:	189b      	adds	r3, r3, r2
 8002988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800298c:	464b      	mov	r3, r9
 800298e:	460a      	mov	r2, r1
 8002990:	eb42 0303 	adc.w	r3, r2, r3
 8002994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029b0:	4649      	mov	r1, r9
 80029b2:	008b      	lsls	r3, r1, #2
 80029b4:	4641      	mov	r1, r8
 80029b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ba:	4641      	mov	r1, r8
 80029bc:	008a      	lsls	r2, r1, #2
 80029be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029c2:	f7fd fca5 	bl	8000310 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	4b38      	ldr	r3, [pc, #224]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 80029ce:	fba3 2301 	umull	r2, r3, r3, r1
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2264      	movs	r2, #100	@ 0x64
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	1acb      	subs	r3, r1, r3
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	3332      	adds	r3, #50	@ 0x32
 80029e0:	4a33      	ldr	r2, [pc, #204]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ec:	441c      	add	r4, r3
 80029ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029f2:	2200      	movs	r2, #0
 80029f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80029f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80029f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029fc:	4642      	mov	r2, r8
 80029fe:	464b      	mov	r3, r9
 8002a00:	1891      	adds	r1, r2, r2
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	415b      	adcs	r3, r3
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	1851      	adds	r1, r2, r1
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	4649      	mov	r1, r9
 8002a14:	414b      	adcs	r3, r1
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a24:	4659      	mov	r1, fp
 8002a26:	00cb      	lsls	r3, r1, #3
 8002a28:	4651      	mov	r1, sl
 8002a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2e:	4651      	mov	r1, sl
 8002a30:	00ca      	lsls	r2, r1, #3
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	4642      	mov	r2, r8
 8002a3a:	189b      	adds	r3, r3, r2
 8002a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a3e:	464b      	mov	r3, r9
 8002a40:	460a      	mov	r2, r1
 8002a42:	eb42 0303 	adc.w	r3, r2, r3
 8002a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a52:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a60:	4649      	mov	r1, r9
 8002a62:	008b      	lsls	r3, r1, #2
 8002a64:	4641      	mov	r1, r8
 8002a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	008a      	lsls	r2, r1, #2
 8002a6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a72:	f7fd fc4d 	bl	8000310 <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 8002a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	2164      	movs	r1, #100	@ 0x64
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	3332      	adds	r3, #50	@ 0x32
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	f003 020f 	and.w	r2, r3, #15
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4422      	add	r2, r4
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab0:	51eb851f 	.word	0x51eb851f

08002ab4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f103 0208 	add.w	r2, r3, #8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f103 0208 	add.w	r2, r3, #8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f103 0208 	add.w	r2, r3, #8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002ae8:	f240 1019 	movw	r0, #281	@ 0x119
 8002aec:	f003 ffd0 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002b06:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002b0a:	f003 ffc1 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d103      	bne.n	8002b36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e00c      	b.n	8002b50 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e002      	b.n	8002b44 <vListInsert+0x2e>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d2f6      	bcs.n	8002b3e <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002b7c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002b80:	f003 ff86 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6892      	ldr	r2, [r2, #8]
 8002ba2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6852      	ldr	r2, [r2, #4]
 8002bac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d103      	bne.n	8002bc0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1e5a      	subs	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f240 101d 	movw	r0, #285	@ 0x11d
 8002bda:	f003 ff95 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d05d      	beq.n	8002cde <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d059      	beq.n	8002cde <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	2100      	movs	r1, #0
 8002c34:	fba3 2302 	umull	r2, r3, r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d000      	beq.n	8002c3e <xQueueGenericReset+0x52>
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d14c      	bne.n	8002cde <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002c44:	f002 face 	bl	80051e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	6939      	ldr	r1, [r7, #16]
 8002c52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	441a      	add	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2200      	movs	r2, #0
 8002c62:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	3b01      	subs	r3, #1
 8002c76:	6939      	ldr	r1, [r7, #16]
 8002c78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	441a      	add	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	22ff      	movs	r2, #255	@ 0xff
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d114      	bne.n	8002cc4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01a      	beq.n	8002cd8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 fb06 	bl	80042b8 <xTaskRemoveFromEventList>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <xQueueGenericReset+0x128>)
 8002cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	e009      	b.n	8002cd8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fef3 	bl	8002ab4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	3324      	adds	r3, #36	@ 0x24
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff feee 	bl	8002ab4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002cd8:	f002 fab6 	bl	8005248 <vPortExitCritical>
 8002cdc:	e001      	b.n	8002ce2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <xQueueGenericReset+0x114>
    __asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	60bb      	str	r3, [r7, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	4619      	mov	r1, r3
 8002d04:	2096      	movs	r0, #150	@ 0x96
 8002d06:	f003 feff 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002d0a:	697b      	ldr	r3, [r7, #20]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	e000ed04 	.word	0xe000ed04

08002d18 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02e      	beq.n	8002d8e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d30:	2100      	movs	r1, #0
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d000      	beq.n	8002d40 <xQueueGenericCreate+0x28>
 8002d3e:	2101      	movs	r1, #1
 8002d40:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d123      	bne.n	8002d8e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d4e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002d52:	d81c      	bhi.n	8002d8e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	3350      	adds	r3, #80	@ 0x50
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fb6c 	bl	8005440 <pvPortMalloc>
 8002d68:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01d      	beq.n	8002dac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3350      	adds	r3, #80	@ 0x50
 8002d78:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d7a:	79fa      	ldrb	r2, [r7, #7]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f81e 	bl	8002dc8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002d8c:	e00e      	b.n	8002dac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <xQueueGenericCreate+0x94>
    __asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	613b      	str	r3, [r7, #16]
}
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 f844 	bl	8006e3c <SEGGER_SYSVIEW_ShrinkId>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4619      	mov	r1, r3
 8002db8:	2098      	movs	r0, #152	@ 0x98
 8002dba:	f003 fea5 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
    }
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e002      	b.n	8002dea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002df6:	2101      	movs	r1, #1
 8002df8:	69b8      	ldr	r0, [r7, #24]
 8002dfa:	f7ff fef7 	bl	8002bec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	@ 0x38
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <xQueueGenericSend+0x34>
    __asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	e7fd      	b.n	8002e40 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSend+0x42>
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueGenericSend+0x46>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueGenericSend+0x48>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <xQueueGenericSend+0x64>
    __asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d103      	bne.n	8002e82 <xQueueGenericSend+0x72>
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <xQueueGenericSend+0x76>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <xQueueGenericSend+0x78>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <xQueueGenericSend+0x94>
    __asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	623b      	str	r3, [r7, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea4:	f001 fc2a 	bl	80046fc <xTaskGetSchedulerState>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <xQueueGenericSend+0xa4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <xQueueGenericSend+0xa8>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <xQueueGenericSend+0xaa>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <xQueueGenericSend+0xc6>
    __asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	61fb      	str	r3, [r7, #28]
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	e7fd      	b.n	8002ed2 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ed6:	f002 f985 	bl	80051e4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <xQueueGenericSend+0xdc>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d12d      	bne.n	8002f48 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ef2:	f000 fa7b 	bl	80033ec <prvCopyDataToQueue>
 8002ef6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	3324      	adds	r3, #36	@ 0x24
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 f9d7 	bl	80042b8 <xTaskRemoveFromEventList>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002f10:	4b45      	ldr	r3, [pc, #276]	@ (8003028 <xQueueGenericSend+0x218>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	e00a      	b.n	8002f38 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002f28:	4b3f      	ldr	r3, [pc, #252]	@ (8003028 <xQueueGenericSend+0x218>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002f38:	f002 f986 	bl	8005248 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	20a1      	movs	r0, #161	@ 0xa1
 8002f40:	f003 fde2 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e06b      	b.n	8003020 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d107      	bne.n	8002f5e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f4e:	f002 f97b 	bl	8005248 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002f52:	2100      	movs	r1, #0
 8002f54:	20a1      	movs	r0, #161	@ 0xa1
 8002f56:	f003 fdd7 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e060      	b.n	8003020 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 fa85 	bl	8004478 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f72:	f002 f969 	bl	8005248 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f76:	f000 fe57 	bl	8003c28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f7a:	f002 f933 	bl	80051e4 <vPortEnterCritical>
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d103      	bne.n	8002f94 <xQueueGenericSend+0x184>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d103      	bne.n	8002faa <xQueueGenericSend+0x19a>
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002faa:	f002 f94d 	bl	8005248 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fae:	1d3a      	adds	r2, r7, #4
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 fa76 	bl	80044a8 <xTaskCheckForTimeOut>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d124      	bne.n	800300c <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fc4:	f000 fb0a 	bl	80035dc <prvIsQueueFull>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d018      	beq.n	8003000 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 f8fc 	bl	80041d4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fde:	f000 fa95 	bl	800350c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002fe2:	f000 fe2f 	bl	8003c44 <xTaskResumeAll>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f af74 	bne.w	8002ed6 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8002fee:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <xQueueGenericSend+0x218>)
 8002ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	e76a      	b.n	8002ed6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003002:	f000 fa83 	bl	800350c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003006:	f000 fe1d 	bl	8003c44 <xTaskResumeAll>
 800300a:	e764      	b.n	8002ed6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800300c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800300e:	f000 fa7d 	bl	800350c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003012:	f000 fe17 	bl	8003c44 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8003016:	2100      	movs	r1, #0
 8003018:	20a1      	movs	r0, #161	@ 0xa1
 800301a:	f003 fd75 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 800301e:	2300      	movs	r3, #0
        }
    }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3738      	adds	r7, #56	@ 0x38
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	@ 0x30
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10b      	bne.n	800305e <xQueueReceive+0x32>
    __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	623b      	str	r3, [r7, #32]
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <xQueueReceive+0x40>
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <xQueueReceive+0x44>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <xQueueReceive+0x46>
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <xQueueReceive+0x62>
    __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	61fb      	str	r3, [r7, #28]
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800308e:	f001 fb35 	bl	80046fc <xTaskGetSchedulerState>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <xQueueReceive+0x72>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <xQueueReceive+0x76>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <xQueueReceive+0x78>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <xQueueReceive+0x94>
    __asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	61bb      	str	r3, [r7, #24]
}
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
 80030be:	e7fd      	b.n	80030bc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80030c0:	f002 f890 	bl	80051e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030d4:	f000 f9f4 	bl	80034c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	1e5a      	subs	r2, r3, #1
 80030dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030de:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00f      	beq.n	8003108 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	3310      	adds	r3, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 f8e3 	bl	80042b8 <xTaskRemoveFromEventList>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80030f8:	4b42      	ldr	r3, [pc, #264]	@ (8003204 <xQueueReceive+0x1d8>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003108:	f002 f89e 	bl	8005248 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800310c:	2101      	movs	r1, #1
 800310e:	20a4      	movs	r0, #164	@ 0xa4
 8003110:	f003 fcfa 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8003114:	2301      	movs	r3, #1
 8003116:	e071      	b.n	80031fc <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800311e:	f002 f893 	bl	8005248 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003122:	2100      	movs	r1, #0
 8003124:	20a4      	movs	r0, #164	@ 0xa4
 8003126:	f003 fcef 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800312a:	2300      	movs	r3, #0
 800312c:	e066      	b.n	80031fc <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f99d 	bl	8004478 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003142:	f002 f881 	bl	8005248 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003146:	f000 fd6f 	bl	8003c28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800314a:	f002 f84b 	bl	80051e4 <vPortEnterCritical>
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003154:	b25b      	sxtb	r3, r3
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d103      	bne.n	8003164 <xQueueReceive+0x138>
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800316a:	b25b      	sxtb	r3, r3
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d103      	bne.n	800317a <xQueueReceive+0x14e>
 8003172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800317a:	f002 f865 	bl	8005248 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800317e:	1d3a      	adds	r2, r7, #4
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f98e 	bl	80044a8 <xTaskCheckForTimeOut>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d123      	bne.n	80031da <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003194:	f000 fa0c 	bl	80035b0 <prvIsQueueEmpty>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d017      	beq.n	80031ce <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	3324      	adds	r3, #36	@ 0x24
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 f814 	bl	80041d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80031ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ae:	f000 f9ad 	bl	800350c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80031b2:	f000 fd47 	bl	8003c44 <xTaskResumeAll>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d181      	bne.n	80030c0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <xQueueReceive+0x1d8>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	e778      	b.n	80030c0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80031ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d0:	f000 f99c 	bl	800350c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80031d4:	f000 fd36 	bl	8003c44 <xTaskResumeAll>
 80031d8:	e772      	b.n	80030c0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80031da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031dc:	f000 f996 	bl	800350c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80031e0:	f000 fd30 	bl	8003c44 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031e6:	f000 f9e3 	bl	80035b0 <prvIsQueueEmpty>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f43f af67 	beq.w	80030c0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80031f2:	2100      	movs	r1, #0
 80031f4:	20a4      	movs	r0, #164	@ 0xa4
 80031f6:	f003 fc87 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80031fa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3730      	adds	r7, #48	@ 0x30
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08e      	sub	sp, #56	@ 0x38
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10b      	bne.n	800323a <xQueuePeek+0x32>
    __asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	e7fd      	b.n	8003236 <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <xQueuePeek+0x40>
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <xQueuePeek+0x44>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <xQueuePeek+0x46>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <xQueuePeek+0x62>
    __asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	623b      	str	r3, [r7, #32]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <xQueuePeek+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800326a:	f001 fa47 	bl	80046fc <xTaskGetSchedulerState>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <xQueuePeek+0x72>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <xQueuePeek+0x76>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <xQueuePeek+0x78>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <xQueuePeek+0x94>
    __asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	61fb      	str	r3, [r7, #28]
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <xQueuePeek+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800329c:	f001 ffa2 	bl	80051e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d025      	beq.n	80032f8 <xQueuePeek+0xf0>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80032ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	62bb      	str	r3, [r7, #40]	@ 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032b6:	f000 f903 	bl	80034c0 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032be:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00f      	beq.n	80032e8 <xQueuePeek+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	3324      	adds	r3, #36	@ 0x24
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fff3 	bl	80042b8 <xTaskRemoveFromEventList>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <xQueuePeek+0xe0>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 80032d8:	4b43      	ldr	r3, [pc, #268]	@ (80033e8 <xQueuePeek+0x1e0>)
 80032da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032e8:	f001 ffae 	bl	8005248 <vPortExitCritical>

                traceRETURN_xQueuePeek( pdPASS );
 80032ec:	2101      	movs	r1, #1
 80032ee:	20a6      	movs	r0, #166	@ 0xa6
 80032f0:	f003 fc0a 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e072      	b.n	80033de <xQueuePeek+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <xQueuePeek+0x106>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032fe:	f001 ffa3 	bl	8005248 <vPortExitCritical>

                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );
 8003302:	2100      	movs	r1, #0
 8003304:	20a6      	movs	r0, #166	@ 0xa6
 8003306:	f003 fbff 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800330a:	2300      	movs	r3, #0
 800330c:	e067      	b.n	80033de <xQueuePeek+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800330e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <xQueuePeek+0x11a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4618      	mov	r0, r3
 800331a:	f001 f8ad 	bl	8004478 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800331e:	2301      	movs	r3, #1
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003322:	f001 ff91 	bl	8005248 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8003326:	f000 fc7f 	bl	8003c28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800332a:	f001 ff5b 	bl	80051e4 <vPortEnterCritical>
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003334:	b25b      	sxtb	r3, r3
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d103      	bne.n	8003344 <xQueuePeek+0x13c>
 800333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800334a:	b25b      	sxtb	r3, r3
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d103      	bne.n	800335a <xQueuePeek+0x152>
 8003352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800335a:	f001 ff75 	bl	8005248 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800335e:	1d3a      	adds	r2, r7, #4
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f001 f89e 	bl	80044a8 <xTaskCheckForTimeOut>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d124      	bne.n	80033bc <xQueuePeek+0x1b4>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003372:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003374:	f000 f91c 	bl	80035b0 <prvIsQueueEmpty>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d018      	beq.n	80033b0 <xQueuePeek+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	3324      	adds	r3, #36	@ 0x24
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff24 	bl	80041d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800338c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800338e:	f000 f8bd 	bl	800350c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003392:	f000 fc57 	bl	8003c44 <xTaskResumeAll>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f af7f 	bne.w	800329c <xQueuePeek+0x94>
                {
                    taskYIELD_WITHIN_API();
 800339e:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <xQueuePeek+0x1e0>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	e775      	b.n	800329c <xQueuePeek+0x94>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 80033b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033b2:	f000 f8ab 	bl	800350c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80033b6:	f000 fc45 	bl	8003c44 <xTaskResumeAll>
 80033ba:	e76f      	b.n	800329c <xQueuePeek+0x94>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 80033bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033be:	f000 f8a5 	bl	800350c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033c2:	f000 fc3f 	bl	8003c44 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033c8:	f000 f8f2 	bl	80035b0 <prvIsQueueEmpty>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f43f af64 	beq.w	800329c <xQueuePeek+0x94>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );
 80033d4:	2100      	movs	r1, #0
 80033d6:	20a6      	movs	r0, #166	@ 0xa6
 80033d8:	f003 fb96 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80033dc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3738      	adds	r7, #56	@ 0x38
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000ed04 	.word	0xe000ed04

080033ec <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d14d      	bne.n	80034ae <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4618      	mov	r0, r3
 8003418:	f001 f992 	bl	8004740 <xTaskPriorityDisinherit>
 800341c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e043      	b.n	80034ae <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d119      	bne.n	8003460 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6858      	ldr	r0, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	461a      	mov	r2, r3
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	f003 ffe0 	bl	80073fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	441a      	add	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d32b      	bcc.n	80034ae <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e026      	b.n	80034ae <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68d8      	ldr	r0, [r3, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	461a      	mov	r2, r3
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	f003 ffc6 	bl	80073fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	425b      	negs	r3, r3
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d207      	bcs.n	800349c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	425b      	negs	r3, r3
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d105      	bne.n	80034ae <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80034b6:	697b      	ldr	r3, [r7, #20]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	441a      	add	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d303      	bcc.n	80034f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68d9      	ldr	r1, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	461a      	mov	r2, r3
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	f003 ff7c 	bl	80073fc <memcpy>
    }
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003514:	f001 fe66 	bl	80051e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800351e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003520:	e011      	b.n	8003546 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3324      	adds	r3, #36	@ 0x24
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fec2 	bl	80042b8 <xTaskRemoveFromEventList>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800353a:	f001 f821 	bl	8004580 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	3b01      	subs	r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	dce9      	bgt.n	8003522 <prvUnlockQueue+0x16>
 800354e:	e000      	b.n	8003552 <prvUnlockQueue+0x46>
                    break;
 8003550:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	22ff      	movs	r2, #255	@ 0xff
 8003556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800355a:	f001 fe75 	bl	8005248 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800355e:	f001 fe41 	bl	80051e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003568:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800356a:	e011      	b.n	8003590 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3310      	adds	r3, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fe9d 	bl	80042b8 <xTaskRemoveFromEventList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003584:	f000 fffc 	bl	8004580 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	3b01      	subs	r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003594:	2b00      	cmp	r3, #0
 8003596:	dce9      	bgt.n	800356c <prvUnlockQueue+0x60>
 8003598:	e000      	b.n	800359c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800359a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	22ff      	movs	r2, #255	@ 0xff
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80035a4:	f001 fe50 	bl	8005248 <vPortExitCritical>
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035b8:	f001 fe14 	bl	80051e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e001      	b.n	80035ce <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035ce:	f001 fe3b 	bl	8005248 <vPortExitCritical>

    return xReturn;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035e4:	f001 fdfe 	bl	80051e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d102      	bne.n	80035fa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e001      	b.n	80035fe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035fe:	f001 fe23 	bl	8005248 <vPortExitCritical>

    return xReturn;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d024      	beq.n	8003688 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e01e      	b.n	8003682 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003644:	4a18      	ldr	r2, [pc, #96]	@ (80036a8 <vQueueAddToRegistry+0x9c>)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d105      	bne.n	8003660 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4a13      	ldr	r2, [pc, #76]	@ (80036a8 <vQueueAddToRegistry+0x9c>)
 800365a:	4413      	add	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
                    break;
 800365e:	e013      	b.n	8003688 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <vQueueAddToRegistry+0x70>
 8003666:	4a10      	ldr	r2, [pc, #64]	@ (80036a8 <vQueueAddToRegistry+0x9c>)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4a0c      	ldr	r2, [pc, #48]	@ (80036a8 <vQueueAddToRegistry+0x9c>)
 8003678:	4413      	add	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3301      	adds	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d9dd      	bls.n	8003644 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800369a:	20b6      	movs	r0, #182	@ 0xb6
 800369c:	f003 f9f8 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000140 	.word	0x20000140

080036ac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80036bc:	f001 fd92 	bl	80051e4 <vPortEnterCritical>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036c6:	b25b      	sxtb	r3, r3
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d103      	bne.n	80036d6 <vQueueWaitForMessageRestricted+0x2a>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d103      	bne.n	80036ec <vQueueWaitForMessageRestricted+0x40>
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ec:	f001 fdac 	bl	8005248 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3324      	adds	r3, #36	@ 0x24
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fd8f 	bl	8004224 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7ff ff00 	bl	800350c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 800370c:	20b9      	movs	r0, #185	@ 0xb9
 800370e:	f003 f9bf 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800371a:	b580      	push	{r7, lr}
 800371c:	b08a      	sub	sp, #40	@ 0x28
 800371e:	af04      	add	r7, sp, #16
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fe87 	bl	8005440 <pvPortMalloc>
 8003732:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d013      	beq.n	8003762 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800373a:	2060      	movs	r0, #96	@ 0x60
 800373c:	f001 fe80 	bl	8005440 <pvPortMalloc>
 8003740:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003748:	2260      	movs	r2, #96	@ 0x60
 800374a:	2100      	movs	r1, #0
 800374c:	6978      	ldr	r0, [r7, #20]
 800374e:	f003 fe21 	bl	8007394 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
 8003758:	e005      	b.n	8003766 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800375a:	6938      	ldr	r0, [r7, #16]
 800375c:	f001 ffa2 	bl	80056a4 <vPortFree>
 8003760:	e001      	b.n	8003766 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800376c:	2300      	movs	r3, #0
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f82d 	bl	80037e2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003788:	697b      	ldr	r3, [r7, #20]
    }
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003792:	b580      	push	{r7, lr}
 8003794:	b088      	sub	sp, #32
 8003796:	af02      	add	r7, sp, #8
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f7ff ffb3 	bl	800371a <prvCreateTask>
 80037b4:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80037bc:	6938      	ldr	r0, [r7, #16]
 80037be:	f000 f8a1 	bl	8003904 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80037c2:	2301      	movs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e002      	b.n	80037ce <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4619      	mov	r1, r3
 80037d2:	20c2      	movs	r0, #194	@ 0xc2
 80037d4:	f003 f998 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80037d8:	697b      	ldr	r3, [r7, #20]
    }
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	461a      	mov	r2, r3
 80037fa:	21a5      	movs	r1, #165	@ 0xa5
 80037fc:	f003 fdca 	bl	8007394 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800380a:	3b01      	subs	r3, #1
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f023 0307 	bic.w	r3, r3, #7
 8003818:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	617b      	str	r3, [r7, #20]
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01e      	beq.n	8003880 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e012      	b.n	800386e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	7819      	ldrb	r1, [r3, #0]
 8003850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	3334      	adds	r3, #52	@ 0x34
 8003858:	460a      	mov	r2, r1
 800385a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3301      	adds	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b12      	cmp	r3, #18
 8003872:	d9e9      	bls.n	8003848 <prvInitialiseNewTask+0x66>
 8003874:	e000      	b.n	8003878 <prvInitialiseNewTask+0x96>
            {
                break;
 8003876:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	2b04      	cmp	r3, #4
 8003884:	d90b      	bls.n	800389e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	613b      	str	r3, [r7, #16]
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	e7fd      	b.n	800389a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d901      	bls.n	80038a8 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038a4:	2304      	movs	r3, #4
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038b2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff f91d 	bl	8002af8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	3318      	adds	r3, #24
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f918 	bl	8002af8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	f1c3 0205 	rsb	r2, r3, #5
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	68f9      	ldr	r1, [r7, #12]
 80038e2:	69b8      	ldr	r0, [r7, #24]
 80038e4:	f001 fb02 	bl	8004eec <pxPortInitialiseStack>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003904:	b5b0      	push	{r4, r5, r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af02      	add	r7, sp, #8
 800390a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800390c:	f001 fc6a 	bl	80051e4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003910:	4b50      	ldr	r3, [pc, #320]	@ (8003a54 <prvAddNewTaskToReadyList+0x150>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a4f      	ldr	r2, [pc, #316]	@ (8003a54 <prvAddNewTaskToReadyList+0x150>)
 8003918:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800391a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a58 <prvAddNewTaskToReadyList+0x154>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003922:	4a4d      	ldr	r2, [pc, #308]	@ (8003a58 <prvAddNewTaskToReadyList+0x154>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003928:	4b4a      	ldr	r3, [pc, #296]	@ (8003a54 <prvAddNewTaskToReadyList+0x150>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003930:	f000 fe4a 	bl	80045c8 <prvInitialiseTaskLists>
 8003934:	e00d      	b.n	8003952 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003936:	4b49      	ldr	r3, [pc, #292]	@ (8003a5c <prvAddNewTaskToReadyList+0x158>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393e:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <prvAddNewTaskToReadyList+0x154>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d802      	bhi.n	8003952 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800394c:	4a42      	ldr	r2, [pc, #264]	@ (8003a58 <prvAddNewTaskToReadyList+0x154>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003952:	4b43      	ldr	r3, [pc, #268]	@ (8003a60 <prvAddNewTaskToReadyList+0x15c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a41      	ldr	r2, [pc, #260]	@ (8003a60 <prvAddNewTaskToReadyList+0x15c>)
 800395a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800395c:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <prvAddNewTaskToReadyList+0x15c>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <prvAddNewTaskToReadyList+0x94>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	f003 f93f 	bl	8006bf0 <SEGGER_SYSVIEW_OnTaskCreate>
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	461d      	mov	r5, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461c      	mov	r4, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	1ae3      	subs	r3, r4, r3
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	462b      	mov	r3, r5
 8003994:	f003 fc30 	bl	80071f8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f003 f9ac 	bl	8006cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <prvAddNewTaskToReadyList+0x160>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003a64 <prvAddNewTaskToReadyList+0x160>)
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b6:	492c      	ldr	r1, [pc, #176]	@ (8003a68 <prvAddNewTaskToReadyList+0x164>)
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	3304      	adds	r3, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	3204      	adds	r2, #4
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <prvAddNewTaskToReadyList+0x164>)
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	615a      	str	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a00:	4919      	ldr	r1, [pc, #100]	@ (8003a68 <prvAddNewTaskToReadyList+0x164>)
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a12:	1c59      	adds	r1, r3, #1
 8003a14:	4814      	ldr	r0, [pc, #80]	@ (8003a68 <prvAddNewTaskToReadyList+0x164>)
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4403      	add	r3, r0
 8003a20:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003a22:	f001 fc11 	bl	8005248 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003a26:	4b0d      	ldr	r3, [pc, #52]	@ (8003a5c <prvAddNewTaskToReadyList+0x158>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <prvAddNewTaskToReadyList+0x154>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d207      	bcs.n	8003a4c <prvAddNewTaskToReadyList+0x148>
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <prvAddNewTaskToReadyList+0x168>)
 8003a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}
 8003a54:	20000258 	.word	0x20000258
 8003a58:	20000180 	.word	0x20000180
 8003a5c:	20000264 	.word	0x20000264
 8003a60:	20000274 	.word	0x20000274
 8003a64:	20000260 	.word	0x20000260
 8003a68:	20000184 	.word	0x20000184
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d018      	beq.n	8003ab4 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8003a82:	f000 f8d1 	bl	8003c28 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003a86:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <vTaskDelay+0x68>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d00b      	beq.n	8003aa6 <vTaskDelay+0x36>
    __asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	60bb      	str	r3, [r7, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	e7fd      	b.n	8003aa2 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fef9 	bl	80048a0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003aae:	f000 f8c9 	bl	8003c44 <xTaskResumeAll>
 8003ab2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d107      	bne.n	8003aca <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8003aba:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <vTaskDelay+0x6c>)
 8003abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003aca:	20c5      	movs	r0, #197	@ 0xc5
 8003acc:	f002 ffe0 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000280 	.word	0x20000280
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	@ 0x30
 8003ae4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e011      	b.n	8003b18 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003af4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <prvCreateIdleTasks+0x88>)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	7819      	ldrb	r1, [r3, #0]
 8003afc:	1d3a      	adds	r2, r7, #4
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	460a      	mov	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003b06:	1d3a      	adds	r2, r7, #4
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b12      	cmp	r3, #18
 8003b1c:	ddea      	ble.n	8003af4 <prvCreateIdleTasks+0x14>
 8003b1e:	e000      	b.n	8003b22 <prvCreateIdleTasks+0x42>
        {
            break;
 8003b20:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	e015      	b.n	8003b54 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003b28:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <prvCreateIdleTasks+0x8c>)
 8003b2a:	61bb      	str	r3, [r7, #24]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a0f      	ldr	r2, [pc, #60]	@ (8003b70 <prvCreateIdleTasks+0x90>)
 8003b32:	4413      	add	r3, r2
 8003b34:	1d39      	adds	r1, r7, #4
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2282      	movs	r2, #130	@ 0x82
 8003b40:	69b8      	ldr	r0, [r7, #24]
 8003b42:	f7ff fe26 	bl	8003792 <xTaskCreate>
 8003b46:	6278      	str	r0, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	3301      	adds	r3, #1
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	dde6      	ble.n	8003b28 <prvCreateIdleTasks+0x48>
 8003b5a:	e000      	b.n	8003b5e <prvCreateIdleTasks+0x7e>
        {
            break;
 8003b5c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3728      	adds	r7, #40	@ 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	08007d40 	.word	0x08007d40
 8003b6c:	08004599 	.word	0x08004599
 8003b70:	2000027c 	.word	0x2000027c

08003b74 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003b7a:	f7ff ffb1 	bl	8003ae0 <prvCreateIdleTasks>
 8003b7e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d102      	bne.n	8003b8c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003b86:	f000 ff19 	bl	80049bc <xTimerCreateTimerTask>
 8003b8a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d124      	bne.n	8003bdc <vTaskStartScheduler+0x68>
    __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60bb      	str	r3, [r7, #8]
}
 8003ba4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <vTaskStartScheduler+0x9c>)
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003bae:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <vTaskStartScheduler+0xa0>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bb4:	4b18      	ldr	r3, [pc, #96]	@ (8003c18 <vTaskStartScheduler+0xa4>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003bba:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <vTaskStartScheduler+0xa8>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <vTaskStartScheduler+0xac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d102      	bne.n	8003bcc <vTaskStartScheduler+0x58>
 8003bc6:	f002 fff7 	bl	8006bb8 <SEGGER_SYSVIEW_OnIdle>
 8003bca:	e004      	b.n	8003bd6 <vTaskStartScheduler+0x62>
 8003bcc:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <vTaskStartScheduler+0xac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f003 f84f 	bl	8006c74 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003bd6:	f001 fa15 	bl	8005004 <xPortStartScheduler>
 8003bda:	e00f      	b.n	8003bfc <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d10b      	bne.n	8003bfc <vTaskStartScheduler+0x88>
    __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	607b      	str	r3, [r7, #4]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003bfc:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <vTaskStartScheduler+0xb0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003c00:	20cd      	movs	r0, #205	@ 0xcd
 8003c02:	f002 ff45 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000278 	.word	0x20000278
 8003c14:	20000264 	.word	0x20000264
 8003c18:	2000025c 	.word	0x2000025c
 8003c1c:	2000027c 	.word	0x2000027c
 8003c20:	20000180 	.word	0x20000180
 8003c24:	2000000c 	.word	0x2000000c

08003c28 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <vTaskSuspendAll+0x18>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a03      	ldr	r2, [pc, #12]	@ (8003c40 <vTaskSuspendAll+0x18>)
 8003c34:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003c36:	20cf      	movs	r0, #207	@ 0xcf
 8003c38:	f002 ff2a 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000280 	.word	0x20000280

08003c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003c52:	f001 fac7 	bl	80051e4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e44 <xTaskResumeAll+0x200>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <xTaskResumeAll+0x36>
    __asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	603b      	str	r3, [r7, #0]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003c7a:	4b72      	ldr	r3, [pc, #456]	@ (8003e44 <xTaskResumeAll+0x200>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4a70      	ldr	r2, [pc, #448]	@ (8003e44 <xTaskResumeAll+0x200>)
 8003c82:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003c84:	4b6f      	ldr	r3, [pc, #444]	@ (8003e44 <xTaskResumeAll+0x200>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f040 80ce 	bne.w	8003e2a <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e48 <xTaskResumeAll+0x204>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80c9 	beq.w	8003e2a <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c98:	e092      	b.n	8003dc0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003e4c <xTaskResumeAll+0x208>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	6a12      	ldr	r2, [r2, #32]
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	69d2      	ldr	r2, [r2, #28]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d103      	bne.n	8003cd0 <xTaskResumeAll+0x8c>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	1e5a      	subs	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	68d2      	ldr	r2, [r2, #12]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	6892      	ldr	r2, [r2, #8]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d103      	bne.n	8003d0e <xTaskResumeAll+0xca>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1e5a      	subs	r2, r3, #1
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 ffe9 	bl	8006cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	4b48      	ldr	r3, [pc, #288]	@ (8003e50 <xTaskResumeAll+0x20c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	4a46      	ldr	r2, [pc, #280]	@ (8003e50 <xTaskResumeAll+0x20c>)
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3c:	4945      	ldr	r1, [pc, #276]	@ (8003e54 <xTaskResumeAll+0x210>)
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3304      	adds	r3, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	3204      	adds	r2, #4
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	1d1a      	adds	r2, r3, #4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4a36      	ldr	r2, [pc, #216]	@ (8003e54 <xTaskResumeAll+0x210>)
 8003d7c:	441a      	add	r2, r3
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	615a      	str	r2, [r3, #20]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d86:	4933      	ldr	r1, [pc, #204]	@ (8003e54 <xTaskResumeAll+0x210>)
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d98:	1c59      	adds	r1, r3, #1
 8003d9a:	482e      	ldr	r0, [pc, #184]	@ (8003e54 <xTaskResumeAll+0x210>)
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4403      	add	r3, r0
 8003da6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dac:	4b2a      	ldr	r3, [pc, #168]	@ (8003e58 <xTaskResumeAll+0x214>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d904      	bls.n	8003dc0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003db6:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <xTaskResumeAll+0x218>)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dc0:	4b22      	ldr	r3, [pc, #136]	@ (8003e4c <xTaskResumeAll+0x208>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f47f af68 	bne.w	8003c9a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003dd0:	f000 fc78 	bl	80046c4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dd4:	4b22      	ldr	r3, [pc, #136]	@ (8003e60 <xTaskResumeAll+0x21c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003de0:	f000 f86a 	bl	8003eb8 <xTaskIncrementTick>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003dea:	4a1c      	ldr	r2, [pc, #112]	@ (8003e5c <xTaskResumeAll+0x218>)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2101      	movs	r1, #1
 8003df0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ef      	bne.n	8003de0 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <xTaskResumeAll+0x21c>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003e06:	4a15      	ldr	r2, [pc, #84]	@ (8003e5c <xTaskResumeAll+0x218>)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <xTaskResumeAll+0x214>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4b12      	ldr	r3, [pc, #72]	@ (8003e64 <xTaskResumeAll+0x220>)
 8003e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e2a:	f001 fa0d 	bl	8005248 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4619      	mov	r1, r3
 8003e32:	20d0      	movs	r0, #208	@ 0xd0
 8003e34:	f002 fe68 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003e38:	69bb      	ldr	r3, [r7, #24]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000280 	.word	0x20000280
 8003e48:	20000258 	.word	0x20000258
 8003e4c:	20000218 	.word	0x20000218
 8003e50:	20000260 	.word	0x20000260
 8003e54:	20000184 	.word	0x20000184
 8003e58:	20000180 	.word	0x20000180
 8003e5c:	2000026c 	.word	0x2000026c
 8003e60:	20000268 	.word	0x20000268
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003e6e:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <xTaskGetTickCount+0x20>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	20d1      	movs	r0, #209	@ 0xd1
 8003e78:	f002 fe46 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003e7c:	687b      	ldr	r3, [r7, #4]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2000025c 	.word	0x2000025c

08003e8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e92:	f001 fa93 	bl	80053bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003e9a:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <xTaskGetTickCountFromISR+0x28>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	20d2      	movs	r0, #210	@ 0xd2
 8003ea4:	f002 fe30 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003ea8:	683b      	ldr	r3, [r7, #0]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000025c 	.word	0x2000025c

08003eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	@ 0x28
 8003ebc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003ec2:	4b83      	ldr	r3, [pc, #524]	@ (80040d0 <xTaskIncrementTick+0x218>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f040 80f3 	bne.w	80040b2 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ecc:	4b81      	ldr	r3, [pc, #516]	@ (80040d4 <xTaskIncrementTick+0x21c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003ed4:	4a7f      	ldr	r2, [pc, #508]	@ (80040d4 <xTaskIncrementTick+0x21c>)
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d121      	bne.n	8003f24 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80040d8 <xTaskIncrementTick+0x220>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <xTaskIncrementTick+0x4a>
    __asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	607b      	str	r3, [r7, #4]
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	e7fd      	b.n	8003efe <xTaskIncrementTick+0x46>
 8003f02:	4b75      	ldr	r3, [pc, #468]	@ (80040d8 <xTaskIncrementTick+0x220>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	4b74      	ldr	r3, [pc, #464]	@ (80040dc <xTaskIncrementTick+0x224>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a72      	ldr	r2, [pc, #456]	@ (80040d8 <xTaskIncrementTick+0x220>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4a72      	ldr	r2, [pc, #456]	@ (80040dc <xTaskIncrementTick+0x224>)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b72      	ldr	r3, [pc, #456]	@ (80040e0 <xTaskIncrementTick+0x228>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4a70      	ldr	r2, [pc, #448]	@ (80040e0 <xTaskIncrementTick+0x228>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	f000 fbd0 	bl	80046c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003f24:	4b6f      	ldr	r3, [pc, #444]	@ (80040e4 <xTaskIncrementTick+0x22c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	f0c0 80ac 	bcc.w	8004088 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f30:	4b69      	ldr	r3, [pc, #420]	@ (80040d8 <xTaskIncrementTick+0x220>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80040e4 <xTaskIncrementTick+0x22c>)
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f40:	601a      	str	r2, [r3, #0]
                    break;
 8003f42:	e0a1      	b.n	8004088 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f44:	4b64      	ldr	r3, [pc, #400]	@ (80040d8 <xTaskIncrementTick+0x220>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d203      	bcs.n	8003f64 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003f5c:	4a61      	ldr	r2, [pc, #388]	@ (80040e4 <xTaskIncrementTick+0x22c>)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6013      	str	r3, [r2, #0]
                        break;
 8003f62:	e091      	b.n	8004088 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	68d2      	ldr	r2, [r2, #12]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	6892      	ldr	r2, [r2, #8]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	3304      	adds	r3, #4
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d103      	bne.n	8003f92 <xTaskIncrementTick+0xda>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2200      	movs	r2, #0
 8003f96:	615a      	str	r2, [r3, #20]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	1e5a      	subs	r2, r3, #1
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01e      	beq.n	8003fe8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	6a12      	ldr	r2, [r2, #32]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	69d2      	ldr	r2, [r2, #28]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d103      	bne.n	8003fd8 <xTaskIncrementTick+0x120>
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	1e5a      	subs	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 fe84 	bl	8006cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80040e8 <xTaskIncrementTick+0x230>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	4a3a      	ldr	r2, [pc, #232]	@ (80040e8 <xTaskIncrementTick+0x230>)
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004006:	4939      	ldr	r1, [pc, #228]	@ (80040ec <xTaskIncrementTick+0x234>)
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3304      	adds	r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	3204      	adds	r2, #4
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4a29      	ldr	r2, [pc, #164]	@ (80040ec <xTaskIncrementTick+0x234>)
 8004046:	441a      	add	r2, r3
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	615a      	str	r2, [r3, #20]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	4926      	ldr	r1, [pc, #152]	@ (80040ec <xTaskIncrementTick+0x234>)
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	4821      	ldr	r0, [pc, #132]	@ (80040ec <xTaskIncrementTick+0x234>)
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4403      	add	r3, r0
 8004070:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004076:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <xTaskIncrementTick+0x238>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	429a      	cmp	r2, r3
 800407e:	f67f af57 	bls.w	8003f30 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004086:	e753      	b.n	8003f30 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <xTaskIncrementTick+0x238>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408e:	4917      	ldr	r1, [pc, #92]	@ (80040ec <xTaskIncrementTick+0x234>)
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d901      	bls.n	80040a4 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80040a4:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <xTaskIncrementTick+0x23c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b0:	e004      	b.n	80040bc <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80040b2:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <xTaskIncrementTick+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	4a0f      	ldr	r2, [pc, #60]	@ (80040f8 <xTaskIncrementTick+0x240>)
 80040ba:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	4619      	mov	r1, r3
 80040c0:	20db      	movs	r0, #219	@ 0xdb
 80040c2:	f002 fd21 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3728      	adds	r7, #40	@ 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000280 	.word	0x20000280
 80040d4:	2000025c 	.word	0x2000025c
 80040d8:	20000210 	.word	0x20000210
 80040dc:	20000214 	.word	0x20000214
 80040e0:	20000270 	.word	0x20000270
 80040e4:	20000278 	.word	0x20000278
 80040e8:	20000260 	.word	0x20000260
 80040ec:	20000184 	.word	0x20000184
 80040f0:	20000180 	.word	0x20000180
 80040f4:	2000026c 	.word	0x2000026c
 80040f8:	20000268 	.word	0x20000268

080040fc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004102:	4b2e      	ldr	r3, [pc, #184]	@ (80041bc <vTaskSwitchContext+0xc0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800410a:	4b2d      	ldr	r3, [pc, #180]	@ (80041c0 <vTaskSwitchContext+0xc4>)
 800410c:	2201      	movs	r2, #1
 800410e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004110:	e04f      	b.n	80041b2 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8004112:	4b2b      	ldr	r3, [pc, #172]	@ (80041c0 <vTaskSwitchContext+0xc4>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004118:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <vTaskSwitchContext+0xc8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8004126:	7afb      	ldrb	r3, [r7, #11]
 8004128:	f1c3 031f 	rsb	r3, r3, #31
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	4926      	ldr	r1, [pc, #152]	@ (80041c8 <vTaskSwitchContext+0xcc>)
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <vTaskSwitchContext+0x5e>
    __asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	607b      	str	r3, [r7, #4]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <vTaskSwitchContext+0x5a>
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4a18      	ldr	r2, [pc, #96]	@ (80041c8 <vTaskSwitchContext+0xcc>)
 8004166:	4413      	add	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3308      	adds	r3, #8
 800417c:	429a      	cmp	r2, r3
 800417e:	d103      	bne.n	8004188 <vTaskSwitchContext+0x8c>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a0f      	ldr	r2, [pc, #60]	@ (80041cc <vTaskSwitchContext+0xd0>)
 8004190:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8004192:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <vTaskSwitchContext+0xd4>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <vTaskSwitchContext+0xd0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d102      	bne.n	80041a4 <vTaskSwitchContext+0xa8>
 800419e:	f002 fd0b 	bl	8006bb8 <SEGGER_SYSVIEW_OnIdle>
 80041a2:	e004      	b.n	80041ae <vTaskSwitchContext+0xb2>
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <vTaskSwitchContext+0xd0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f002 fd63 	bl	8006c74 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80041ae:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <vTaskSwitchContext+0xd0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
    }
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000280 	.word	0x20000280
 80041c0:	2000026c 	.word	0x2000026c
 80041c4:	20000260 	.word	0x20000260
 80041c8:	20000184 	.word	0x20000184
 80041cc:	20000180 	.word	0x20000180
 80041d0:	2000027c 	.word	0x2000027c

080041d4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	60fb      	str	r3, [r7, #12]
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041fc:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <vTaskPlaceOnEventList+0x4c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3318      	adds	r3, #24
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fe fc86 	bl	8002b16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800420a:	2101      	movs	r1, #1
 800420c:	6838      	ldr	r0, [r7, #0]
 800420e:	f000 fb47 	bl	80048a0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8004212:	20e1      	movs	r0, #225	@ 0xe1
 8004214:	f002 fc3c 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000180 	.word	0x20000180

08004224 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	613b      	str	r3, [r7, #16]
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	e7fd      	b.n	800424a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	4b17      	ldr	r3, [pc, #92]	@ (80042b4 <vTaskPlaceOnEventListRestricted+0x90>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	61da      	str	r2, [r3, #28]
 800425c:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <vTaskPlaceOnEventListRestricted+0x90>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	621a      	str	r2, [r3, #32]
 8004266:	4b13      	ldr	r3, [pc, #76]	@ (80042b4 <vTaskPlaceOnEventListRestricted+0x90>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	3218      	adds	r2, #24
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <vTaskPlaceOnEventListRestricted+0x90>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f103 0218 	add.w	r2, r3, #24
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <vTaskPlaceOnEventListRestricted+0x90>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	629a      	str	r2, [r3, #40]	@ 0x28
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	68b8      	ldr	r0, [r7, #8]
 80042a0:	f000 fafe 	bl	80048a0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80042a4:	20e3      	movs	r0, #227	@ 0xe3
 80042a6:	f002 fbf3 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000180 	.word	0x20000180

080042b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	@ 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60fb      	str	r3, [r7, #12]
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	6a12      	ldr	r2, [r2, #32]
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	69d2      	ldr	r2, [r2, #28]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	3318      	adds	r3, #24
 8004308:	429a      	cmp	r2, r3
 800430a:	d103      	bne.n	8004314 <xTaskRemoveFromEventList+0x5c>
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	2200      	movs	r2, #0
 8004318:	629a      	str	r2, [r3, #40]	@ 0x28
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004324:	4b4e      	ldr	r3, [pc, #312]	@ (8004460 <xTaskRemoveFromEventList+0x1a8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d164      	bne.n	80043f6 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	6a3a      	ldr	r2, [r7, #32]
 8004338:	68d2      	ldr	r2, [r2, #12]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	6892      	ldr	r2, [r2, #8]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	3304      	adds	r3, #4
 800434e:	429a      	cmp	r2, r3
 8004350:	d103      	bne.n	800435a <xTaskRemoveFromEventList+0xa2>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	2200      	movs	r2, #0
 800435e:	615a      	str	r2, [r3, #20]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	4618      	mov	r0, r3
 800436e:	f002 fcc3 	bl	8006cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	2201      	movs	r2, #1
 8004378:	409a      	lsls	r2, r3
 800437a:	4b3a      	ldr	r3, [pc, #232]	@ (8004464 <xTaskRemoveFromEventList+0x1ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	4a38      	ldr	r2, [pc, #224]	@ (8004464 <xTaskRemoveFromEventList+0x1ac>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004388:	4937      	ldr	r1, [pc, #220]	@ (8004468 <xTaskRemoveFromEventList+0x1b0>)
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3304      	adds	r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	3204      	adds	r2, #4
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4a28      	ldr	r2, [pc, #160]	@ (8004468 <xTaskRemoveFromEventList+0x1b0>)
 80043c8:	441a      	add	r2, r3
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	615a      	str	r2, [r3, #20]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d2:	4925      	ldr	r1, [pc, #148]	@ (8004468 <xTaskRemoveFromEventList+0x1b0>)
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6a3a      	ldr	r2, [r7, #32]
 80043e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	4820      	ldr	r0, [pc, #128]	@ (8004468 <xTaskRemoveFromEventList+0x1b0>)
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4403      	add	r3, r0
 80043f2:	6019      	str	r1, [r3, #0]
 80043f4:	e01b      	b.n	800442e <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043f6:	4b1d      	ldr	r3, [pc, #116]	@ (800446c <xTaskRemoveFromEventList+0x1b4>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	61da      	str	r2, [r3, #28]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	621a      	str	r2, [r3, #32]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	3218      	adds	r2, #24
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f103 0218 	add.w	r2, r3, #24
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	4a12      	ldr	r2, [pc, #72]	@ (800446c <xTaskRemoveFromEventList+0x1b4>)
 8004422:	629a      	str	r2, [r3, #40]	@ 0x28
 8004424:	4b11      	ldr	r3, [pc, #68]	@ (800446c <xTaskRemoveFromEventList+0x1b4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	4a10      	ldr	r2, [pc, #64]	@ (800446c <xTaskRemoveFromEventList+0x1b4>)
 800442c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004432:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <xTaskRemoveFromEventList+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	429a      	cmp	r2, r3
 800443a:	d905      	bls.n	8004448 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800443c:	2301      	movs	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <xTaskRemoveFromEventList+0x1bc>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e001      	b.n	800444c <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	4619      	mov	r1, r3
 8004450:	20e4      	movs	r0, #228	@ 0xe4
 8004452:	f002 fb59 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004458:	4618      	mov	r0, r3
 800445a:	3728      	adds	r7, #40	@ 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000280 	.word	0x20000280
 8004464:	20000260 	.word	0x20000260
 8004468:	20000184 	.word	0x20000184
 800446c:	20000218 	.word	0x20000218
 8004470:	20000180 	.word	0x20000180
 8004474:	2000026c 	.word	0x2000026c

08004478 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004480:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <vTaskInternalSetTimeOutState+0x28>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004488:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <vTaskInternalSetTimeOutState+0x2c>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8004490:	20e7      	movs	r0, #231	@ 0xe7
 8004492:	f002 fafd 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000270 	.word	0x20000270
 80044a4:	2000025c 	.word	0x2000025c

080044a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	613b      	str	r3, [r7, #16]
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80044ee:	f000 fe79 	bl	80051e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80044f2:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <xTaskCheckForTimeOut+0xd0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d102      	bne.n	8004512 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e026      	b.n	8004560 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b19      	ldr	r3, [pc, #100]	@ (800457c <xTaskCheckForTimeOut+0xd4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d00a      	beq.n	8004534 <xTaskCheckForTimeOut+0x8c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	429a      	cmp	r2, r3
 8004526:	d305      	bcc.n	8004534 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004528:	2301      	movs	r3, #1
 800452a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e015      	b.n	8004560 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	429a      	cmp	r2, r3
 800453c:	d20b      	bcs.n	8004556 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff94 	bl	8004478 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e004      	b.n	8004560 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004560:	f000 fe72 	bl	8005248 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	4619      	mov	r1, r3
 8004568:	20e8      	movs	r0, #232	@ 0xe8
 800456a:	f002 facd 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800456e:	69fb      	ldr	r3, [r7, #28]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2000025c 	.word	0x2000025c
 800457c:	20000270 	.word	0x20000270

08004580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004584:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <vTaskMissedYield+0x14>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800458a:	20e9      	movs	r0, #233	@ 0xe9
 800458c:	f002 fa80 	bl	8006a90 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2000026c 	.word	0x2000026c

08004598 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045a0:	f000 f852 	bl	8004648 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80045a4:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <prvIdleTask+0x28>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d9f9      	bls.n	80045a0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <prvIdleTask+0x2c>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80045bc:	e7f0      	b.n	80045a0 <prvIdleTask+0x8>
 80045be:	bf00      	nop
 80045c0:	20000184 	.word	0x20000184
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	e00c      	b.n	80045ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4a12      	ldr	r2, [pc, #72]	@ (8004628 <prvInitialiseTaskLists+0x60>)
 80045e0:	4413      	add	r3, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe fa66 	bl	8002ab4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3301      	adds	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d9ef      	bls.n	80045d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80045f4:	480d      	ldr	r0, [pc, #52]	@ (800462c <prvInitialiseTaskLists+0x64>)
 80045f6:	f7fe fa5d 	bl	8002ab4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80045fa:	480d      	ldr	r0, [pc, #52]	@ (8004630 <prvInitialiseTaskLists+0x68>)
 80045fc:	f7fe fa5a 	bl	8002ab4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004600:	480c      	ldr	r0, [pc, #48]	@ (8004634 <prvInitialiseTaskLists+0x6c>)
 8004602:	f7fe fa57 	bl	8002ab4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004606:	480c      	ldr	r0, [pc, #48]	@ (8004638 <prvInitialiseTaskLists+0x70>)
 8004608:	f7fe fa54 	bl	8002ab4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800460c:	480b      	ldr	r0, [pc, #44]	@ (800463c <prvInitialiseTaskLists+0x74>)
 800460e:	f7fe fa51 	bl	8002ab4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004612:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <prvInitialiseTaskLists+0x78>)
 8004614:	4a05      	ldr	r2, [pc, #20]	@ (800462c <prvInitialiseTaskLists+0x64>)
 8004616:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004618:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <prvInitialiseTaskLists+0x7c>)
 800461a:	4a05      	ldr	r2, [pc, #20]	@ (8004630 <prvInitialiseTaskLists+0x68>)
 800461c:	601a      	str	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000184 	.word	0x20000184
 800462c:	200001e8 	.word	0x200001e8
 8004630:	200001fc 	.word	0x200001fc
 8004634:	20000218 	.word	0x20000218
 8004638:	2000022c 	.word	0x2000022c
 800463c:	20000244 	.word	0x20000244
 8004640:	20000210 	.word	0x20000210
 8004644:	20000214 	.word	0x20000214

08004648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800464e:	e019      	b.n	8004684 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004650:	f000 fdc8 	bl	80051e4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004654:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <prvCheckTasksWaitingTermination+0x50>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe fa93 	bl	8002b8c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <prvCheckTasksWaitingTermination+0x54>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a0b      	ldr	r2, [pc, #44]	@ (800469c <prvCheckTasksWaitingTermination+0x54>)
 800466e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <prvCheckTasksWaitingTermination+0x58>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	4a0a      	ldr	r2, [pc, #40]	@ (80046a0 <prvCheckTasksWaitingTermination+0x58>)
 8004678:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800467a:	f000 fde5 	bl	8005248 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f810 	bl	80046a4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004684:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <prvCheckTasksWaitingTermination+0x58>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e1      	bne.n	8004650 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000022c 	.word	0x2000022c
 800469c:	20000258 	.word	0x20000258
 80046a0:	20000240 	.word	0x20000240

080046a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fff7 	bl	80056a4 <vPortFree>
            vPortFree( pxTCB );
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fff4 	bl	80056a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <prvResetNextTaskUnblockTime+0x30>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80046d2:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <prvResetNextTaskUnblockTime+0x34>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80046da:	e005      	b.n	80046e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046dc:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <prvResetNextTaskUnblockTime+0x30>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a04      	ldr	r2, [pc, #16]	@ (80046f8 <prvResetNextTaskUnblockTime+0x34>)
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000210 	.word	0x20000210
 80046f8:	20000278 	.word	0x20000278

080046fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <xTaskGetSchedulerState+0x3c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800470a:	2301      	movs	r3, #1
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	e008      	b.n	8004722 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004710:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <xTaskGetSchedulerState+0x40>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004718:	2302      	movs	r3, #2
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e001      	b.n	8004722 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	20f5      	movs	r0, #245	@ 0xf5
 8004728:	f002 f9ee 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800472c:	687b      	ldr	r3, [r7, #4]
    }
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000264 	.word	0x20000264
 800473c:	20000280 	.word	0x20000280

08004740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800474c:	2300      	movs	r3, #0
 800474e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 8094 	beq.w	8004880 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004758:	4b4e      	ldr	r3, [pc, #312]	@ (8004894 <xTaskPriorityDisinherit+0x154>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	429a      	cmp	r2, r3
 8004760:	d00b      	beq.n	800477a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	613b      	str	r3, [r7, #16]
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	60fb      	str	r3, [r7, #12]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479e:	1e5a      	subs	r2, r3, #1
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d067      	beq.n	8004880 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d163      	bne.n	8004880 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe f9e5 	bl	8002b8c <uxListRemove>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	2201      	movs	r2, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43da      	mvns	r2, r3
 80047d4:	4b30      	ldr	r3, [pc, #192]	@ (8004898 <xTaskPriorityDisinherit+0x158>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4013      	ands	r3, r2
 80047da:	4a2f      	ldr	r2, [pc, #188]	@ (8004898 <xTaskPriorityDisinherit+0x158>)
 80047dc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	f1c3 0205 	rsb	r2, r3, #5
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f002 fa7f 	bl	8006cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	2201      	movs	r2, #1
 8004800:	409a      	lsls	r2, r3
 8004802:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <xTaskPriorityDisinherit+0x158>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	4a23      	ldr	r2, [pc, #140]	@ (8004898 <xTaskPriorityDisinherit+0x158>)
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4922      	ldr	r1, [pc, #136]	@ (800489c <xTaskPriorityDisinherit+0x15c>)
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3304      	adds	r3, #4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	3204      	adds	r2, #4
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4a13      	ldr	r2, [pc, #76]	@ (800489c <xTaskPriorityDisinherit+0x15c>)
 8004850:	441a      	add	r2, r3
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	615a      	str	r2, [r3, #20]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485a:	4910      	ldr	r1, [pc, #64]	@ (800489c <xTaskPriorityDisinherit+0x15c>)
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800486c:	1c59      	adds	r1, r3, #1
 800486e:	480b      	ldr	r0, [pc, #44]	@ (800489c <xTaskPriorityDisinherit+0x15c>)
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4403      	add	r3, r0
 800487a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800487c:	2301      	movs	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4619      	mov	r1, r3
 8004884:	20f7      	movs	r0, #247	@ 0xf7
 8004886:	f002 f93f 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800488a:	69fb      	ldr	r3, [r7, #28]
    }
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000180 	.word	0x20000180
 8004898:	20000260 	.word	0x20000260
 800489c:	20000184 	.word	0x20000184

080048a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80048aa:	4b3d      	ldr	r3, [pc, #244]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0x100>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80048b0:	4b3c      	ldr	r3, [pc, #240]	@ (80049a4 <prvAddCurrentTaskToDelayedList+0x104>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80048b6:	4b3c      	ldr	r3, [pc, #240]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0x108>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048bc:	4b3b      	ldr	r3, [pc, #236]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe f962 	bl	8002b8c <uxListRemove>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80048ce:	4b37      	ldr	r3, [pc, #220]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	2201      	movs	r2, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43da      	mvns	r2, r3
 80048dc:	4b34      	ldr	r3, [pc, #208]	@ (80049b0 <prvAddCurrentTaskToDelayedList+0x110>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4013      	ands	r3, r2
 80048e2:	4a33      	ldr	r2, [pc, #204]	@ (80049b0 <prvAddCurrentTaskToDelayedList+0x110>)
 80048e4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d124      	bne.n	8004938 <prvAddCurrentTaskToDelayedList+0x98>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d021      	beq.n	8004938 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f4:	4b2f      	ldr	r3, [pc, #188]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0x114>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	4b2c      	ldr	r3, [pc, #176]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	609a      	str	r2, [r3, #8]
 8004902:	4b2a      	ldr	r3, [pc, #168]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	3204      	adds	r2, #4
 8004916:	605a      	str	r2, [r3, #4]
 8004918:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	609a      	str	r2, [r3, #8]
 8004922:	4b22      	ldr	r3, [pc, #136]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a23      	ldr	r2, [pc, #140]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0x114>)
 8004928:	615a      	str	r2, [r3, #20]
 800492a:	4b22      	ldr	r3, [pc, #136]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0x114>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	4a20      	ldr	r2, [pc, #128]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0x114>)
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004936:	e02e      	b.n	8004996 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004940:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	429a      	cmp	r2, r3
 800494e:	d20d      	bcs.n	800496c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004950:	4b16      	ldr	r3, [pc, #88]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2104      	movs	r1, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f002 fa10 	bl	8006d7c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800495c:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	6978      	ldr	r0, [r7, #20]
 8004966:	f7fe f8d6 	bl	8002b16 <vListInsert>
}
 800496a:	e014      	b.n	8004996 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800496c:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2104      	movs	r1, #4
 8004972:	4618      	mov	r0, r3
 8004974:	f002 fa02 	bl	8006d7c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <prvAddCurrentTaskToDelayedList+0x10c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	69b8      	ldr	r0, [r7, #24]
 8004982:	f7fe f8c8 	bl	8002b16 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0x118>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	429a      	cmp	r2, r3
 800498e:	d202      	bcs.n	8004996 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004990:	4a09      	ldr	r2, [pc, #36]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0x118>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6013      	str	r3, [r2, #0]
}
 8004996:	bf00      	nop
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	2000025c 	.word	0x2000025c
 80049a4:	20000210 	.word	0x20000210
 80049a8:	20000214 	.word	0x20000214
 80049ac:	20000180 	.word	0x20000180
 80049b0:	20000260 	.word	0x20000260
 80049b4:	20000244 	.word	0x20000244
 80049b8:	20000278 	.word	0x20000278

080049bc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80049c6:	f000 fa5b 	bl	8004e80 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80049ca:	4b15      	ldr	r3, [pc, #84]	@ (8004a20 <xTimerCreateTimerTask+0x64>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80049d2:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <xTimerCreateTimerTask+0x68>)
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	2302      	movs	r3, #2
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2300      	movs	r3, #0
 80049dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80049e0:	4911      	ldr	r1, [pc, #68]	@ (8004a28 <xTimerCreateTimerTask+0x6c>)
 80049e2:	4812      	ldr	r0, [pc, #72]	@ (8004a2c <xTimerCreateTimerTask+0x70>)
 80049e4:	f7fe fed5 	bl	8003792 <xTaskCreate>
 80049e8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	603b      	str	r3, [r7, #0]
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004a10:	f002 f87a 	bl	8006b08 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004a14:	687b      	ldr	r3, [r7, #4]
    }
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	200002b4 	.word	0x200002b4
 8004a24:	200002b8 	.word	0x200002b8
 8004a28:	08007d48 	.word	0x08007d48
 8004a2c:	08004ad5 	.word	0x08004ad5

08004a30 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a3c:	e008      	b.n	8004a50 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4413      	add	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	18d1      	adds	r1, r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f8df 	bl	8004c20 <prvInsertTimerInActiveList>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ea      	bne.n	8004a3e <prvReloadTimer+0xe>
        }
    }
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a7e:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <prvProcessExpiredTimer+0x5c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe f87d 	bl	8002b8c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff ffc3 	bl	8004a30 <prvReloadTimer>
 8004aaa:	e008      	b.n	8004abe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	4798      	blx	r3
    }
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200002ac 	.word	0x200002ac

08004ad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004adc:	f107 0308 	add.w	r3, r7, #8
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f859 	bl	8004b98 <prvGetNextExpireTime>
 8004ae6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4619      	mov	r1, r3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f805 	bl	8004afc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004af2:	f000 f8d7 	bl	8004ca4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004af6:	bf00      	nop
 8004af8:	e7f0      	b.n	8004adc <prvTimerTask+0x8>
	...

08004afc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b06:	f7ff f88f 	bl	8003c28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b0a:	f107 0308 	add.w	r3, r7, #8
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f866 	bl	8004be0 <prvSampleTimeNow>
 8004b14:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d130      	bne.n	8004b7e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <prvProcessTimerOrBlockTask+0x3c>
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d806      	bhi.n	8004b38 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b2a:	f7ff f88b 	bl	8003c44 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ff9f 	bl	8004a74 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b36:	e024      	b.n	8004b82 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b3e:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <prvProcessTimerOrBlockTask+0x90>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <prvProcessTimerOrBlockTask+0x50>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <prvProcessTimerOrBlockTask+0x52>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b50:	4b0f      	ldr	r3, [pc, #60]	@ (8004b90 <prvProcessTimerOrBlockTask+0x94>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f7fe fda5 	bl	80036ac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b62:	f7ff f86f 	bl	8003c44 <xTaskResumeAll>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004b6c:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <prvProcessTimerOrBlockTask+0x98>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	f3bf 8f6f 	isb	sy
    }
 8004b7c:	e001      	b.n	8004b82 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b7e:	f7ff f861 	bl	8003c44 <xTaskResumeAll>
    }
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200002b0 	.word	0x200002b0
 8004b90:	200002b4 	.word	0x200002b4
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8004bdc <prvGetNextExpireTime+0x44>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <prvGetNextExpireTime+0x16>
 8004baa:	2201      	movs	r2, #1
 8004bac:	e000      	b.n	8004bb0 <prvGetNextExpireTime+0x18>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bbc:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <prvGetNextExpireTime+0x44>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	e001      	b.n	8004bcc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
    }
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	200002ac 	.word	0x200002ac

08004be0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004be8:	f7ff f93e 	bl	8003e68 <xTaskGetTickCount>
 8004bec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <prvSampleTimeNow+0x3c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d205      	bcs.n	8004c04 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004bf8:	f000 f91c 	bl	8004e34 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c0a:	4a04      	ldr	r2, [pc, #16]	@ (8004c1c <prvSampleTimeNow+0x3c>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c10:	68fb      	ldr	r3, [r7, #12]
    }
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200002bc 	.word	0x200002bc

08004c20 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d812      	bhi.n	8004c6c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	1ad2      	subs	r2, r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e01b      	b.n	8004c92 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c5a:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <prvInsertTimerInActiveList+0x7c>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fd ff56 	bl	8002b16 <vListInsert>
 8004c6a:	e012      	b.n	8004c92 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d206      	bcs.n	8004c82 <prvInsertTimerInActiveList+0x62>
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e007      	b.n	8004c92 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c82:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <prvInsertTimerInActiveList+0x80>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fd ff42 	bl	8002b16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004c92:	697b      	ldr	r3, [r7, #20]
    }
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	200002b0 	.word	0x200002b0
 8004ca0:	200002ac 	.word	0x200002ac

08004ca4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004caa:	f107 0308 	add.w	r3, r7, #8
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004cb6:	e0a9      	b.n	8004e0c <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f2c0 80a6 	blt.w	8004e0c <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fd ff5b 	bl	8002b8c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cd6:	1d3b      	adds	r3, r7, #4
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ff81 	bl	8004be0 <prvSampleTimeNow>
 8004cde:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	f200 808e 	bhi.w	8004e06 <prvProcessReceivedCommands+0x162>
 8004cea:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <prvProcessReceivedCommands+0x4c>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d15 	.word	0x08004d15
 8004cf8:	08004d7d 	.word	0x08004d7d
 8004cfc:	08004d91 	.word	0x08004d91
 8004d00:	08004ddd 	.word	0x08004ddd
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d15 	.word	0x08004d15
 8004d0c:	08004d7d 	.word	0x08004d7d
 8004d10:	08004d91 	.word	0x08004d91
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	18d1      	adds	r1, r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	69f8      	ldr	r0, [r7, #28]
 8004d34:	f7ff ff74 	bl	8004c20 <prvInsertTimerInActiveList>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d065      	beq.n	8004e0a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	4413      	add	r3, r2
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4619      	mov	r1, r3
 8004d58:	69f8      	ldr	r0, [r7, #28]
 8004d5a:	f7ff fe69 	bl	8004a30 <prvReloadTimer>
 8004d5e:	e008      	b.n	8004d72 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	69f8      	ldr	r0, [r7, #28]
 8004d78:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004d7a:	e046      	b.n	8004e0a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004d8e:	e03d      	b.n	8004e0c <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	617b      	str	r3, [r7, #20]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	18d1      	adds	r1, r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	69f8      	ldr	r0, [r7, #28]
 8004dd6:	f7ff ff23 	bl	8004c20 <prvInsertTimerInActiveList>
                        break;
 8004dda:	e017      	b.n	8004e0c <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8004dea:	69f8      	ldr	r0, [r7, #28]
 8004dec:	f000 fc5a 	bl	80056a4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004df0:	e00c      	b.n	8004e0c <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004e04:	e002      	b.n	8004e0c <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <prvProcessReceivedCommands+0x168>
                        break;
 8004e0a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004e0c:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <prvProcessReceivedCommands+0x18c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f107 0108 	add.w	r1, r7, #8
 8004e14:	2200      	movs	r2, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe f908 	bl	800302c <xQueueReceive>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f47f af4a 	bne.w	8004cb8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200002b4 	.word	0x200002b4

08004e34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e3a:	e009      	b.n	8004e50 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <prvSwitchTimerLists+0x44>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004e46:	f04f 31ff 	mov.w	r1, #4294967295
 8004e4a:	6838      	ldr	r0, [r7, #0]
 8004e4c:	f7ff fe12 	bl	8004a74 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e50:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <prvSwitchTimerLists+0x44>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004e5a:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <prvSwitchTimerLists+0x44>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e60:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <prvSwitchTimerLists+0x48>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <prvSwitchTimerLists+0x44>)
 8004e66:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004e68:	4a04      	ldr	r2, [pc, #16]	@ (8004e7c <prvSwitchTimerLists+0x48>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6013      	str	r3, [r2, #0]
    }
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200002ac 	.word	0x200002ac
 8004e7c:	200002b0 	.word	0x200002b0

08004e80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004e84:	f000 f9ae 	bl	80051e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e88:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <prvCheckForValidListAndQueue+0x54>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11d      	bne.n	8004ecc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e90:	4811      	ldr	r0, [pc, #68]	@ (8004ed8 <prvCheckForValidListAndQueue+0x58>)
 8004e92:	f7fd fe0f 	bl	8002ab4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e96:	4811      	ldr	r0, [pc, #68]	@ (8004edc <prvCheckForValidListAndQueue+0x5c>)
 8004e98:	f7fd fe0c 	bl	8002ab4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004e9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <prvCheckForValidListAndQueue+0x60>)
 8004e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed8 <prvCheckForValidListAndQueue+0x58>)
 8004ea0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <prvCheckForValidListAndQueue+0x64>)
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8004edc <prvCheckForValidListAndQueue+0x5c>)
 8004ea6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	210c      	movs	r1, #12
 8004eac:	200a      	movs	r0, #10
 8004eae:	f7fd ff33 	bl	8002d18 <xQueueGenericCreate>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a07      	ldr	r2, [pc, #28]	@ (8004ed4 <prvCheckForValidListAndQueue+0x54>)
 8004eb6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <prvCheckForValidListAndQueue+0x54>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ec0:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <prvCheckForValidListAndQueue+0x54>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4908      	ldr	r1, [pc, #32]	@ (8004ee8 <prvCheckForValidListAndQueue+0x68>)
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fba0 	bl	800360c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ecc:	f000 f9bc 	bl	8005248 <vPortExitCritical>
    }
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	200002b4 	.word	0x200002b4
 8004ed8:	20000284 	.word	0x20000284
 8004edc:	20000298 	.word	0x20000298
 8004ee0:	200002ac 	.word	0x200002ac
 8004ee4:	200002b0 	.word	0x200002b0
 8004ee8:	08007d50 	.word	0x08007d50

08004eec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3b04      	subs	r3, #4
 8004efc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f50 <pxPortInitialiseStack+0x64>)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b14      	subs	r3, #20
 8004f26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b04      	subs	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f06f 0202 	mvn.w	r2, #2
 8004f3a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3b20      	subs	r3, #32
 8004f40:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004f42:	68fb      	ldr	r3, [r7, #12]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	08004f55 	.word	0x08004f55

08004f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004f5e:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <prvTaskExitError+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d00b      	beq.n	8004f80 <prvTaskExitError+0x2c>
    __asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	60fb      	str	r3, [r7, #12]
}
 8004f7a:	bf00      	nop
 8004f7c:	bf00      	nop
 8004f7e:	e7fd      	b.n	8004f7c <prvTaskExitError+0x28>
    __asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60bb      	str	r3, [r7, #8]
}
 8004f92:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f94:	bf00      	nop
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0fc      	beq.n	8004f96 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000010 	.word	0x20000010

08004fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004fb0:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <pxCurrentTCBConst2>)
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	6808      	ldr	r0, [r1, #0]
 8004fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f380 8809 	msr	PSP, r0
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	4770      	bx	lr
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst2>:
 8004fd0:	20000180 	.word	0x20000180
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004fd8:	4808      	ldr	r0, [pc, #32]	@ (8004ffc <prvPortStartFirstTask+0x24>)
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	6800      	ldr	r0, [r0, #0]
 8004fde:	f380 8808 	msr	MSP, r0
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8814 	msr	CONTROL, r0
 8004fea:	b662      	cpsie	i
 8004fec:	b661      	cpsie	f
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	df00      	svc	0
 8004ff8:	bf00      	nop
 8004ffa:	0000      	.short	0x0000
 8004ffc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop

08005004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08c      	sub	sp, #48	@ 0x30
 8005008:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800500a:	4b69      	ldr	r3, [pc, #420]	@ (80051b0 <xPortStartScheduler+0x1ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a69      	ldr	r2, [pc, #420]	@ (80051b4 <xPortStartScheduler+0x1b0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d10b      	bne.n	800502c <xPortStartScheduler+0x28>
    __asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800502c:	4b60      	ldr	r3, [pc, #384]	@ (80051b0 <xPortStartScheduler+0x1ac>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a61      	ldr	r2, [pc, #388]	@ (80051b8 <xPortStartScheduler+0x1b4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10b      	bne.n	800504e <xPortStartScheduler+0x4a>
    __asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	623b      	str	r3, [r7, #32]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800504e:	4b5b      	ldr	r3, [pc, #364]	@ (80051bc <xPortStartScheduler+0x1b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005056:	332c      	adds	r3, #44	@ 0x2c
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a59      	ldr	r2, [pc, #356]	@ (80051c0 <xPortStartScheduler+0x1bc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00b      	beq.n	8005078 <xPortStartScheduler+0x74>
    __asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	61fb      	str	r3, [r7, #28]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507a:	3338      	adds	r3, #56	@ 0x38
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a51      	ldr	r2, [pc, #324]	@ (80051c4 <xPortStartScheduler+0x1c0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <xPortStartScheduler+0x98>
    __asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	61bb      	str	r3, [r7, #24]
}
 8005096:	bf00      	nop
 8005098:	bf00      	nop
 800509a:	e7fd      	b.n	8005098 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050a0:	4b49      	ldr	r3, [pc, #292]	@ (80051c8 <xPortStartScheduler+0x1c4>)
 80050a2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	22ff      	movs	r2, #255	@ 0xff
 80050b0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <xPortStartScheduler+0x1c8>)
 80050c6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80050c8:	4b40      	ldr	r3, [pc, #256]	@ (80051cc <xPortStartScheduler+0x1c8>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <xPortStartScheduler+0xe4>
    __asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	617b      	str	r3, [r7, #20]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <xPortStartScheduler+0x11a>
    __asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	613b      	str	r3, [r7, #16]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3301      	adds	r3, #1
 8005112:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005126:	2b80      	cmp	r3, #128	@ 0x80
 8005128:	d0f1      	beq.n	800510e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d103      	bne.n	8005138 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005130:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <xPortStartScheduler+0x1cc>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e004      	b.n	8005142 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f1c3 0307 	rsb	r3, r3, #7
 800513e:	4a24      	ldr	r2, [pc, #144]	@ (80051d0 <xPortStartScheduler+0x1cc>)
 8005140:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005142:	4b23      	ldr	r3, [pc, #140]	@ (80051d0 <xPortStartScheduler+0x1cc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	4a21      	ldr	r2, [pc, #132]	@ (80051d0 <xPortStartScheduler+0x1cc>)
 800514a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800514c:	4b20      	ldr	r3, [pc, #128]	@ (80051d0 <xPortStartScheduler+0x1cc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005154:	4a1e      	ldr	r2, [pc, #120]	@ (80051d0 <xPortStartScheduler+0x1cc>)
 8005156:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005160:	4b1c      	ldr	r3, [pc, #112]	@ (80051d4 <xPortStartScheduler+0x1d0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <xPortStartScheduler+0x1d0>)
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800516a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800516c:	4b19      	ldr	r3, [pc, #100]	@ (80051d4 <xPortStartScheduler+0x1d0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a18      	ldr	r2, [pc, #96]	@ (80051d4 <xPortStartScheduler+0x1d0>)
 8005172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005176:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005178:	4b17      	ldr	r3, [pc, #92]	@ (80051d8 <xPortStartScheduler+0x1d4>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800517e:	f000 f8ed 	bl	800535c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005182:	4b16      	ldr	r3, [pc, #88]	@ (80051dc <xPortStartScheduler+0x1d8>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005188:	f000 f90c 	bl	80053a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800518c:	4b14      	ldr	r3, [pc, #80]	@ (80051e0 <xPortStartScheduler+0x1dc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a13      	ldr	r2, [pc, #76]	@ (80051e0 <xPortStartScheduler+0x1dc>)
 8005192:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005196:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005198:	f7ff ff1e 	bl	8004fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800519c:	f7fe ffae 	bl	80040fc <vTaskSwitchContext>
    prvTaskExitError();
 80051a0:	f7ff fed8 	bl	8004f54 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3730      	adds	r7, #48	@ 0x30
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	e000ed00 	.word	0xe000ed00
 80051b4:	410fc271 	.word	0x410fc271
 80051b8:	410fc270 	.word	0x410fc270
 80051bc:	e000ed08 	.word	0xe000ed08
 80051c0:	08004fb1 	.word	0x08004fb1
 80051c4:	080052a1 	.word	0x080052a1
 80051c8:	e000e400 	.word	0xe000e400
 80051cc:	200002c0 	.word	0x200002c0
 80051d0:	200002c4 	.word	0x200002c4
 80051d4:	e000ed20 	.word	0xe000ed20
 80051d8:	e000ed1c 	.word	0xe000ed1c
 80051dc:	20000010 	.word	0x20000010
 80051e0:	e000ef34 	.word	0xe000ef34

080051e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
    __asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
}
 80051fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80051fe:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <vPortEnterCritical+0x5c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a0e      	ldr	r2, [pc, #56]	@ (8005240 <vPortEnterCritical+0x5c>)
 8005206:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005208:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <vPortEnterCritical+0x5c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d110      	bne.n	8005232 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005210:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <vPortEnterCritical+0x60>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <vPortEnterCritical+0x4e>
    __asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <vPortEnterCritical+0x4a>
    }
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000010 	.word	0x20000010
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800524e:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <vPortExitCritical+0x50>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <vPortExitCritical+0x26>
    __asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	607b      	str	r3, [r7, #4]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800526e:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <vPortExitCritical+0x50>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3b01      	subs	r3, #1
 8005274:	4a08      	ldr	r2, [pc, #32]	@ (8005298 <vPortExitCritical+0x50>)
 8005276:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005278:	4b07      	ldr	r3, [pc, #28]	@ (8005298 <vPortExitCritical+0x50>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <vPortExitCritical+0x44>
 8005280:	2300      	movs	r3, #0
 8005282:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800528a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000010 	.word	0x20000010
 800529c:	00000000 	.word	0x00000000

080052a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80052a0:	f3ef 8009 	mrs	r0, PSP
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4b15      	ldr	r3, [pc, #84]	@ (8005300 <pxCurrentTCBConst>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f01e 0f10 	tst.w	lr, #16
 80052b0:	bf08      	it	eq
 80052b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	6010      	str	r0, [r2, #0]
 80052bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052c4:	f380 8811 	msr	BASEPRI, r0
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f7fe ff14 	bl	80040fc <vTaskSwitchContext>
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f380 8811 	msr	BASEPRI, r0
 80052dc:	bc09      	pop	{r0, r3}
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	6808      	ldr	r0, [r1, #0]
 80052e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e6:	f01e 0f10 	tst.w	lr, #16
 80052ea:	bf08      	it	eq
 80052ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052f0:	f380 8809 	msr	PSP, r0
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	f3af 8000 	nop.w

08005300 <pxCurrentTCBConst>:
 8005300:	20000180 	.word	0x20000180
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
    __asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005322:	f001 fb3b 	bl	800699c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005326:	f7fe fdc7 	bl	8003eb8 <xTaskIncrementTick>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005330:	f001 fb92 	bl	8006a58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005334:	4b08      	ldr	r3, [pc, #32]	@ (8005358 <SysTick_Handler+0x50>)
 8005336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e001      	b.n	8005342 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800533e:	f001 fb6f 	bl	8006a20 <SEGGER_SYSVIEW_RecordExitISR>
 8005342:	2300      	movs	r3, #0
 8005344:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f383 8811 	msr	BASEPRI, r3
}
 800534c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <vPortSetupTimerInterrupt+0x34>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <vPortSetupTimerInterrupt+0x38>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <vPortSetupTimerInterrupt+0x3c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <vPortSetupTimerInterrupt+0x40>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	099b      	lsrs	r3, r3, #6
 8005378:	4a09      	ldr	r2, [pc, #36]	@ (80053a0 <vPortSetupTimerInterrupt+0x44>)
 800537a:	3b01      	subs	r3, #1
 800537c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800537e:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <vPortSetupTimerInterrupt+0x34>)
 8005380:	2207      	movs	r2, #7
 8005382:	601a      	str	r2, [r3, #0]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	e000e010 	.word	0xe000e010
 8005394:	e000e018 	.word	0xe000e018
 8005398:	20000000 	.word	0x20000000
 800539c:	10624dd3 	.word	0x10624dd3
 80053a0:	e000e014 	.word	0xe000e014

080053a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80053a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053b4 <vPortEnableVFP+0x10>
 80053a8:	6801      	ldr	r1, [r0, #0]
 80053aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053ae:	6001      	str	r1, [r0, #0]
 80053b0:	4770      	bx	lr
 80053b2:	0000      	.short	0x0000
 80053b4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop

080053bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80053c2:	f3ef 8305 	mrs	r3, IPSR
 80053c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d915      	bls.n	80053fa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ce:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <vPortValidateInterruptPriority+0x74>)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053d8:	4b16      	ldr	r3, [pc, #88]	@ (8005434 <vPortValidateInterruptPriority+0x78>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	7afa      	ldrb	r2, [r7, #11]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d20b      	bcs.n	80053fa <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	607b      	str	r3, [r7, #4]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005438 <vPortValidateInterruptPriority+0x7c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005402:	4b0e      	ldr	r3, [pc, #56]	@ (800543c <vPortValidateInterruptPriority+0x80>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d90b      	bls.n	8005422 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	603b      	str	r3, [r7, #0]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vPortValidateInterruptPriority+0x62>
    }
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e3f0 	.word	0xe000e3f0
 8005434:	200002c0 	.word	0x200002c0
 8005438:	e000ed0c 	.word	0xe000ed0c
 800543c:	200002c4 	.word	0x200002c4

08005440 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08e      	sub	sp, #56	@ 0x38
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d022      	beq.n	8005498 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005452:	2308      	movs	r3, #8
 8005454:	43db      	mvns	r3, r3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d81b      	bhi.n	8005494 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800545c:	2208      	movs	r2, #8
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d014      	beq.n	8005498 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	f1c3 0308 	rsb	r3, r3, #8
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	43db      	mvns	r3, r3
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d804      	bhi.n	800548e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005488:	4413      	add	r3, r2
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e004      	b.n	8005498 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	e001      	b.n	8005498 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005498:	f7fe fbc6 	bl	8003c28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800549c:	4b7a      	ldr	r3, [pc, #488]	@ (8005688 <pvPortMalloc+0x248>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80054a4:	f000 f978 	bl	8005798 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f2c0 80d3 	blt.w	8005656 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80cf 	beq.w	8005656 <pvPortMalloc+0x216>
 80054b8:	4b74      	ldr	r3, [pc, #464]	@ (800568c <pvPortMalloc+0x24c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	f200 80c9 	bhi.w	8005656 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80054c4:	4b72      	ldr	r3, [pc, #456]	@ (8005690 <pvPortMalloc+0x250>)
 80054c6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80054c8:	4b71      	ldr	r3, [pc, #452]	@ (8005690 <pvPortMalloc+0x250>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80054ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d0:	4a70      	ldr	r2, [pc, #448]	@ (8005694 <pvPortMalloc+0x254>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d305      	bcc.n	80054e2 <pvPortMalloc+0xa2>
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d8:	4a6f      	ldr	r2, [pc, #444]	@ (8005698 <pvPortMalloc+0x258>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d801      	bhi.n	80054e2 <pvPortMalloc+0xa2>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <pvPortMalloc+0xa4>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d129      	bne.n	800553c <pvPortMalloc+0xfc>
    __asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	623b      	str	r3, [r7, #32]
}
 80054fa:	bf00      	nop
 80054fc:	bf00      	nop
 80054fe:	e7fd      	b.n	80054fc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005502:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800550a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550c:	4a61      	ldr	r2, [pc, #388]	@ (8005694 <pvPortMalloc+0x254>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d305      	bcc.n	800551e <pvPortMalloc+0xde>
 8005512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005514:	4a60      	ldr	r2, [pc, #384]	@ (8005698 <pvPortMalloc+0x258>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d801      	bhi.n	800551e <pvPortMalloc+0xde>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <pvPortMalloc+0xe0>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10b      	bne.n	800553c <pvPortMalloc+0xfc>
    __asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	61fb      	str	r3, [r7, #28]
}
 8005536:	bf00      	nop
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800553c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d903      	bls.n	800554e <pvPortMalloc+0x10e>
 8005546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1d8      	bne.n	8005500 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800554e:	4b4e      	ldr	r3, [pc, #312]	@ (8005688 <pvPortMalloc+0x248>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005554:	429a      	cmp	r2, r3
 8005556:	d07e      	beq.n	8005656 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2208      	movs	r2, #8
 800555e:	4413      	add	r3, r2
 8005560:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005564:	4a4b      	ldr	r2, [pc, #300]	@ (8005694 <pvPortMalloc+0x254>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d305      	bcc.n	8005576 <pvPortMalloc+0x136>
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	4a4a      	ldr	r2, [pc, #296]	@ (8005698 <pvPortMalloc+0x258>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d801      	bhi.n	8005576 <pvPortMalloc+0x136>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <pvPortMalloc+0x138>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <pvPortMalloc+0x154>
    __asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	61bb      	str	r3, [r7, #24]
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d90b      	bls.n	80055be <pvPortMalloc+0x17e>
    __asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	617b      	str	r3, [r7, #20]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	2308      	movs	r3, #8
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d924      	bls.n	8005618 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4413      	add	r3, r2
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <pvPortMalloc+0x1b8>
    __asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	613b      	str	r3, [r7, #16]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005616:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <pvPortMalloc+0x24c>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	4a1a      	ldr	r2, [pc, #104]	@ (800568c <pvPortMalloc+0x24c>)
 8005624:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <pvPortMalloc+0x24c>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b1c      	ldr	r3, [pc, #112]	@ (800569c <pvPortMalloc+0x25c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d203      	bcs.n	800563a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005632:	4b16      	ldr	r3, [pc, #88]	@ (800568c <pvPortMalloc+0x24c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a19      	ldr	r2, [pc, #100]	@ (800569c <pvPortMalloc+0x25c>)
 8005638:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800563a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800564c:	4b14      	ldr	r3, [pc, #80]	@ (80056a0 <pvPortMalloc+0x260>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a13      	ldr	r2, [pc, #76]	@ (80056a0 <pvPortMalloc+0x260>)
 8005654:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005656:	f7fe faf5 	bl	8003c44 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800565a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <pvPortMalloc+0x23c>
    __asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	60fb      	str	r3, [r7, #12]
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <pvPortMalloc+0x238>
    return pvReturn;
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800567e:	4618      	mov	r0, r3
 8005680:	3738      	adds	r7, #56	@ 0x38
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20012ed0 	.word	0x20012ed0
 800568c:	20012ed4 	.word	0x20012ed4
 8005690:	20012ec8 	.word	0x20012ec8
 8005694:	200002c8 	.word	0x200002c8
 8005698:	20012ec7 	.word	0x20012ec7
 800569c:	20012ed8 	.word	0x20012ed8
 80056a0:	20012edc 	.word	0x20012edc

080056a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d064      	beq.n	8005780 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80056b6:	2308      	movs	r3, #8
 80056b8:	425b      	negs	r3, r3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	4a30      	ldr	r2, [pc, #192]	@ (8005788 <vPortFree+0xe4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d305      	bcc.n	80056d8 <vPortFree+0x34>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	4a2f      	ldr	r2, [pc, #188]	@ (800578c <vPortFree+0xe8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d801      	bhi.n	80056d8 <vPortFree+0x34>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <vPortFree+0x36>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <vPortFree+0x52>
    __asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	617b      	str	r3, [r7, #20]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	db0b      	blt.n	8005716 <vPortFree+0x72>
    __asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	613b      	str	r3, [r7, #16]
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <vPortFree+0x92>
    __asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60fb      	str	r3, [r7, #12]
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	0fdb      	lsrs	r3, r3, #31
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01c      	beq.n	8005780 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d118      	bne.n	8005780 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800575a:	f7fe fa65 	bl	8003c28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <vPortFree+0xec>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4413      	add	r3, r2
 8005768:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <vPortFree+0xec>)
 800576a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800576c:	69b8      	ldr	r0, [r7, #24]
 800576e:	f000 f86d 	bl	800584c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005772:	4b08      	ldr	r3, [pc, #32]	@ (8005794 <vPortFree+0xf0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	4a06      	ldr	r2, [pc, #24]	@ (8005794 <vPortFree+0xf0>)
 800577a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800577c:	f7fe fa62 	bl	8003c44 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005780:	bf00      	nop
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	200002c8 	.word	0x200002c8
 800578c:	20012ec7 	.word	0x20012ec7
 8005790:	20012ed4 	.word	0x20012ed4
 8005794:	20012ee0 	.word	0x20012ee0

08005798 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800579e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80057a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80057a4:	4b24      	ldr	r3, [pc, #144]	@ (8005838 <prvHeapInit+0xa0>)
 80057a6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00c      	beq.n	80057cc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3307      	adds	r3, #7
 80057b6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005838 <prvHeapInit+0xa0>)
 80057c8:	4413      	add	r3, r2
 80057ca:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a1b      	ldr	r2, [pc, #108]	@ (800583c <prvHeapInit+0xa4>)
 80057d0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80057d2:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <prvHeapInit+0xa4>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	4413      	add	r3, r2
 80057de:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80057e0:	2208      	movs	r2, #8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a13      	ldr	r2, [pc, #76]	@ (8005840 <prvHeapInit+0xa8>)
 80057f4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80057f6:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <prvHeapInit+0xa8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80057fe:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <prvHeapInit+0xa8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005814:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <prvHeapInit+0xa8>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4a08      	ldr	r2, [pc, #32]	@ (8005844 <prvHeapInit+0xac>)
 8005822:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a07      	ldr	r2, [pc, #28]	@ (8005848 <prvHeapInit+0xb0>)
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	200002c8 	.word	0x200002c8
 800583c:	20012ec8 	.word	0x20012ec8
 8005840:	20012ed0 	.word	0x20012ed0
 8005844:	20012ed8 	.word	0x20012ed8
 8005848:	20012ed4 	.word	0x20012ed4

0800584c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005854:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <prvInsertBlockIntoFreeList+0xe4>)
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e002      	b.n	8005860 <prvInsertBlockIntoFreeList+0x14>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d8f7      	bhi.n	800585a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4a30      	ldr	r2, [pc, #192]	@ (8005930 <prvInsertBlockIntoFreeList+0xe4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d018      	beq.n	80058a4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	4a2f      	ldr	r2, [pc, #188]	@ (8005934 <prvInsertBlockIntoFreeList+0xe8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d305      	bcc.n	8005886 <prvInsertBlockIntoFreeList+0x3a>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4a2e      	ldr	r2, [pc, #184]	@ (8005938 <prvInsertBlockIntoFreeList+0xec>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d801      	bhi.n	8005886 <prvInsertBlockIntoFreeList+0x3a>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <prvInsertBlockIntoFreeList+0x3c>
 8005886:	2300      	movs	r3, #0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60fb      	str	r3, [r7, #12]
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d108      	bne.n	80058c8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	441a      	add	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	441a      	add	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d118      	bne.n	800590e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b16      	ldr	r3, [pc, #88]	@ (800593c <prvInsertBlockIntoFreeList+0xf0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d00d      	beq.n	8005904 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	441a      	add	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e008      	b.n	8005916 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005904:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <prvInsertBlockIntoFreeList+0xf0>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e003      	b.n	8005916 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d002      	beq.n	8005924 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20012ec8 	.word	0x20012ec8
 8005934:	200002c8 	.word	0x200002c8
 8005938:	20012ec7 	.word	0x20012ec7
 800593c:	20012ed0 	.word	0x20012ed0

08005940 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005944:	4803      	ldr	r0, [pc, #12]	@ (8005954 <_cbSendSystemDesc+0x14>)
 8005946:	f000 ffd3 	bl	80068f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800594a:	4803      	ldr	r0, [pc, #12]	@ (8005958 <_cbSendSystemDesc+0x18>)
 800594c:	f000 ffd0 	bl	80068f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}
 8005954:	08007d58 	.word	0x08007d58
 8005958:	08007d84 	.word	0x08007d84

0800595c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005960:	4b06      	ldr	r3, [pc, #24]	@ (800597c <SEGGER_SYSVIEW_Conf+0x20>)
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <SEGGER_SYSVIEW_Conf+0x20>)
 8005966:	6819      	ldr	r1, [r3, #0]
 8005968:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <SEGGER_SYSVIEW_Conf+0x24>)
 800596a:	4a06      	ldr	r2, [pc, #24]	@ (8005984 <SEGGER_SYSVIEW_Conf+0x28>)
 800596c:	f000 fc46 	bl	80061fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005970:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005974:	f000 fc86 	bl	8006284 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005978:	bf00      	nop
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000000 	.word	0x20000000
 8005980:	08005941 	.word	0x08005941
 8005984:	08007e40 	.word	0x08007e40

08005988 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800598e:	4b26      	ldr	r3, [pc, #152]	@ (8005a28 <_DoInit+0xa0>)
 8005990:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005992:	22a8      	movs	r2, #168	@ 0xa8
 8005994:	2100      	movs	r1, #0
 8005996:	6838      	ldr	r0, [r7, #0]
 8005998:	f001 fcfc 	bl	8007394 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2203      	movs	r2, #3
 80059a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4a20      	ldr	r2, [pc, #128]	@ (8005a2c <_DoInit+0xa4>)
 80059ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a30 <_DoInit+0xa8>)
 80059b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2200      	movs	r2, #0
 80059cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <_DoInit+0xa4>)
 80059d2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <_DoInit+0xac>)
 80059d8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2210      	movs	r2, #16
 80059de:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80059f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	e00c      	b.n	8005a16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1c3 030f 	rsb	r3, r3, #15
 8005a02:	4a0d      	ldr	r2, [pc, #52]	@ (8005a38 <_DoInit+0xb0>)
 8005a04:	5cd1      	ldrb	r1, [r2, r3]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3301      	adds	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b0f      	cmp	r3, #15
 8005a1a:	d9ef      	bls.n	80059fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005a1c:	f3bf 8f5f 	dmb	sy
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20012ee4 	.word	0x20012ee4
 8005a2c:	08007d94 	.word	0x08007d94
 8005a30:	20012f8c 	.word	0x20012f8c
 8005a34:	2001338c 	.word	0x2001338c
 8005a38:	08007e20 	.word	0x08007e20

08005a3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08c      	sub	sp, #48	@ 0x30
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005a48:	4b3e      	ldr	r3, [pc, #248]	@ (8005b44 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a4a:	623b      	str	r3, [r7, #32]
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b53      	cmp	r3, #83	@ 0x53
 8005a54:	d001      	beq.n	8005a5a <SEGGER_RTT_ReadNoLock+0x1e>
 8005a56:	f7ff ff97 	bl	8005988 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3360      	adds	r3, #96	@ 0x60
 8005a66:	4a37      	ldr	r2, [pc, #220]	@ (8005b44 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a68:	4413      	add	r3, r2
 8005a6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d92b      	bls.n	8005ae0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4293      	cmp	r3, r2
 8005a98:	bf28      	it	cs
 8005a9a:	4613      	movcs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	4413      	add	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	6939      	ldr	r1, [r7, #16]
 8005aac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005aae:	f001 fca5 	bl	80073fc <memcpy>
    NumBytesRead += NumBytesRem;
 8005ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005aca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4413      	add	r3, r2
 8005ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d101      	bne.n	8005ae0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005adc:	2300      	movs	r3, #0
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bf28      	it	cs
 8005af0:	4613      	movcs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d019      	beq.n	8005b2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	4413      	add	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	6939      	ldr	r1, [r7, #16]
 8005b08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b0a:	f001 fc77 	bl	80073fc <memcpy>
    NumBytesRead += NumBytesRem;
 8005b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3730      	adds	r7, #48	@ 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20012ee4 	.word	0x20012ee4

08005b48 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005b56:	4b3d      	ldr	r3, [pc, #244]	@ (8005c4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b53      	cmp	r3, #83	@ 0x53
 8005b62:	d001      	beq.n	8005b68 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005b64:	f7ff ff10 	bl	8005988 <_DoInit>
  SEGGER_RTT_LOCK();
 8005b68:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6c:	f04f 0120 	mov.w	r1, #32
 8005b70:	f381 8811 	msr	BASEPRI, r1
 8005b74:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b76:	4b35      	ldr	r3, [pc, #212]	@ (8005c4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005b78:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005b7e:	6939      	ldr	r1, [r7, #16]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	4613      	mov	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3304      	adds	r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	dbeb      	blt.n	8005b7e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005ba6:	e000      	b.n	8005baa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005ba8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	da3f      	bge.n	8005c34 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005bb4:	6939      	ldr	r1, [r7, #16]
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	440b      	add	r3, r1
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005bc8:	6939      	ldr	r1, [r7, #16]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	440b      	add	r3, r1
 8005bd8:	3304      	adds	r3, #4
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005bde:	6939      	ldr	r1, [r7, #16]
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	440b      	add	r3, r1
 8005bec:	3320      	adds	r3, #32
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005bf2:	6939      	ldr	r1, [r7, #16]
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4413      	add	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	440b      	add	r3, r1
 8005c00:	3328      	adds	r3, #40	@ 0x28
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005c06:	6939      	ldr	r1, [r7, #16]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	440b      	add	r3, r1
 8005c14:	3324      	adds	r3, #36	@ 0x24
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005c1a:	6939      	ldr	r1, [r7, #16]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	440b      	add	r3, r1
 8005c28:	332c      	adds	r3, #44	@ 0x2c
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005c2e:	f3bf 8f5f 	dmb	sy
 8005c32:	e002      	b.n	8005c3a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005c34:	f04f 33ff 	mov.w	r3, #4294967295
 8005c38:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005c40:	69fb      	ldr	r3, [r7, #28]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20012ee4 	.word	0x20012ee4

08005c50 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	@ 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005c5e:	4b21      	ldr	r3, [pc, #132]	@ (8005ce4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005c60:	623b      	str	r3, [r7, #32]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b53      	cmp	r3, #83	@ 0x53
 8005c6a:	d001      	beq.n	8005c70 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005c6c:	f7ff fe8c 	bl	8005988 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c70:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005c72:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d82c      	bhi.n	8005cd4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c7e:	f04f 0120 	mov.w	r1, #32
 8005c82:	f381 8811 	msr	BASEPRI, r1
 8005c86:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	4413      	add	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	3360      	adds	r3, #96	@ 0x60
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00e      	beq.n	8005cbe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005cc4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd2:	e002      	b.n	8005cda <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3728      	adds	r7, #40	@ 0x28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20012ee4 	.word	0x20012ee4

08005ce8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	60fa      	str	r2, [r7, #12]
 8005cfe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b80      	cmp	r3, #128	@ 0x80
 8005d04:	d90a      	bls.n	8005d1c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005d06:	2380      	movs	r3, #128	@ 0x80
 8005d08:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005d0a:	e007      	b.n	8005d1c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	1c53      	adds	r3, r2, #1
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1c59      	adds	r1, r3, #1
 8005d16:	60f9      	str	r1, [r7, #12]
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	1e5a      	subs	r2, r3, #1
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <_EncodeStr+0x46>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1ee      	bne.n	8005d0c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3307      	adds	r3, #7
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d66:	4b34      	ldr	r3, [pc, #208]	@ (8005e38 <_HandleIncomingPacket+0xd8>)
 8005d68:	7e1b      	ldrb	r3, [r3, #24]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	1cfb      	adds	r3, r7, #3
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4619      	mov	r1, r3
 8005d72:	f7ff fe63 	bl	8005a3c <SEGGER_RTT_ReadNoLock>
 8005d76:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d057      	beq.n	8005e2e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	2b80      	cmp	r3, #128	@ 0x80
 8005d82:	d031      	beq.n	8005de8 <_HandleIncomingPacket+0x88>
 8005d84:	2b80      	cmp	r3, #128	@ 0x80
 8005d86:	dc40      	bgt.n	8005e0a <_HandleIncomingPacket+0xaa>
 8005d88:	2b07      	cmp	r3, #7
 8005d8a:	dc15      	bgt.n	8005db8 <_HandleIncomingPacket+0x58>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dd3c      	ble.n	8005e0a <_HandleIncomingPacket+0xaa>
 8005d90:	3b01      	subs	r3, #1
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d839      	bhi.n	8005e0a <_HandleIncomingPacket+0xaa>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <_HandleIncomingPacket+0x3c>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005dbf 	.word	0x08005dbf
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcb 	.word	0x08005dcb
 8005da8:	08005dd1 	.word	0x08005dd1
 8005dac:	08005dd7 	.word	0x08005dd7
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	08005de3 	.word	0x08005de3
 8005db8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dba:	d033      	beq.n	8005e24 <_HandleIncomingPacket+0xc4>
 8005dbc:	e025      	b.n	8005e0a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005dbe:	f000 fb25 	bl	800640c <SEGGER_SYSVIEW_Start>
      break;
 8005dc2:	e034      	b.n	8005e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005dc4:	f000 fbdc 	bl	8006580 <SEGGER_SYSVIEW_Stop>
      break;
 8005dc8:	e031      	b.n	8005e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005dca:	f000 fdb5 	bl	8006938 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005dce:	e02e      	b.n	8005e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005dd0:	f000 fd7a 	bl	80068c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005dd4:	e02b      	b.n	8005e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005dd6:	f000 fbf9 	bl	80065cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005dda:	e028      	b.n	8005e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005ddc:	f001 f8e6 	bl	8006fac <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005de0:	e025      	b.n	8005e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005de2:	f001 f8c5 	bl	8006f70 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005de6:	e022      	b.n	8005e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005de8:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <_HandleIncomingPacket+0xd8>)
 8005dea:	7e1b      	ldrb	r3, [r3, #24]
 8005dec:	4618      	mov	r0, r3
 8005dee:	1cfb      	adds	r3, r7, #3
 8005df0:	2201      	movs	r2, #1
 8005df2:	4619      	mov	r1, r3
 8005df4:	f7ff fe22 	bl	8005a3c <SEGGER_RTT_ReadNoLock>
 8005df8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f82a 	bl	8006e5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005e08:	e00e      	b.n	8005e28 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	b25b      	sxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	da0c      	bge.n	8005e2c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <_HandleIncomingPacket+0xd8>)
 8005e14:	7e1b      	ldrb	r3, [r3, #24]
 8005e16:	4618      	mov	r0, r3
 8005e18:	1cfb      	adds	r3, r7, #3
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f7ff fe0d 	bl	8005a3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005e22:	e003      	b.n	8005e2c <_HandleIncomingPacket+0xcc>
      break;
 8005e24:	bf00      	nop
 8005e26:	e002      	b.n	8005e2e <_HandleIncomingPacket+0xce>
      break;
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <_HandleIncomingPacket+0xce>
      break;
 8005e2c:	bf00      	nop
    }
  }
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200197a4 	.word	0x200197a4

08005e3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08c      	sub	sp, #48	@ 0x30
 8005e40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005e42:	2301      	movs	r3, #1
 8005e44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	3301      	adds	r3, #1
 8005e4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e50:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e56:	e00b      	b.n	8005e70 <_TrySendOverflowPacket+0x34>
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005e62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e74:	d8f0      	bhi.n	8005e58 <_TrySendOverflowPacket+0x1c>
 8005e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e86:	4b25      	ldr	r3, [pc, #148]	@ (8005f1c <_TrySendOverflowPacket+0xe0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005e8c:	4b22      	ldr	r3, [pc, #136]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	623b      	str	r3, [r7, #32]
 8005e9e:	e00b      	b.n	8005eb8 <_TrySendOverflowPacket+0x7c>
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005eaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	09db      	lsrs	r3, r3, #7
 8005eb6:	623b      	str	r3, [r7, #32]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ebc:	d8f0      	bhi.n	8005ea0 <_TrySendOverflowPacket+0x64>
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005ece:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	1d3b      	adds	r3, r7, #4
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f7fa f976 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005eee:	4a0a      	ldr	r2, [pc, #40]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005ef4:	4b08      	ldr	r3, [pc, #32]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e004      	b.n	8005f0c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005f02:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a03      	ldr	r2, [pc, #12]	@ (8005f18 <_TrySendOverflowPacket+0xdc>)
 8005f0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005f0c:	693b      	ldr	r3, [r7, #16]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3730      	adds	r7, #48	@ 0x30
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	200197a4 	.word	0x200197a4
 8005f1c:	e0001004 	.word	0xe0001004

08005f20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	@ 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005f2c:	4b98      	ldr	r3, [pc, #608]	@ (8006190 <_SendPacket+0x270>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d010      	beq.n	8005f56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005f34:	4b96      	ldr	r3, [pc, #600]	@ (8006190 <_SendPacket+0x270>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 812d 	beq.w	8006198 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005f3e:	4b94      	ldr	r3, [pc, #592]	@ (8006190 <_SendPacket+0x270>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d109      	bne.n	8005f5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005f46:	f7ff ff79 	bl	8005e3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005f4a:	4b91      	ldr	r3, [pc, #580]	@ (8006190 <_SendPacket+0x270>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	f040 8124 	bne.w	800619c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005f54:	e001      	b.n	8005f5a <_SendPacket+0x3a>
    goto Send;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <_SendPacket+0x3c>
Send:
 8005f5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b1f      	cmp	r3, #31
 8005f60:	d809      	bhi.n	8005f76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005f62:	4b8b      	ldr	r3, [pc, #556]	@ (8006190 <_SendPacket+0x270>)
 8005f64:	69da      	ldr	r2, [r3, #28]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 8115 	bne.w	80061a0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b17      	cmp	r3, #23
 8005f7a:	d807      	bhi.n	8005f8c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e0c4      	b.n	8006116 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f98:	d912      	bls.n	8005fc0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	09da      	lsrs	r2, r3, #7
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	60fa      	str	r2, [r7, #12]
 8005fb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e006      	b.n	8005fce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b7e      	cmp	r3, #126	@ 0x7e
 8005fd2:	d807      	bhi.n	8005fe4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	e098      	b.n	8006116 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fea:	d212      	bcs.n	8006012 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	09da      	lsrs	r2, r3, #7
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	3a01      	subs	r2, #1
 8006004:	60fa      	str	r2, [r7, #12]
 8006006:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	e081      	b.n	8006116 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006018:	d21d      	bcs.n	8006056 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	0b9a      	lsrs	r2, r3, #14
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3b01      	subs	r3, #1
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	09db      	lsrs	r3, r3, #7
 800602e:	b2db      	uxtb	r3, r3
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	3a01      	subs	r2, #1
 8006034:	60fa      	str	r2, [r7, #12]
 8006036:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	3a01      	subs	r2, #1
 8006048:	60fa      	str	r2, [r7, #12]
 800604a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800604e:	b2da      	uxtb	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e05f      	b.n	8006116 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800605c:	d228      	bcs.n	80060b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	0d5a      	lsrs	r2, r3, #21
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3b01      	subs	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0b9b      	lsrs	r3, r3, #14
 8006072:	b2db      	uxtb	r3, r3
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	3a01      	subs	r2, #1
 8006078:	60fa      	str	r2, [r7, #12]
 800607a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800607e:	b2da      	uxtb	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	b2db      	uxtb	r3, r3
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	3a01      	subs	r2, #1
 800608e:	60fa      	str	r2, [r7, #12]
 8006090:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006094:	b2da      	uxtb	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	3a01      	subs	r2, #1
 80060a2:	60fa      	str	r2, [r7, #12]
 80060a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e032      	b.n	8006116 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	0f1a      	lsrs	r2, r3, #28
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0d5b      	lsrs	r3, r3, #21
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	3a01      	subs	r2, #1
 80060ca:	60fa      	str	r2, [r7, #12]
 80060cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	0b9b      	lsrs	r3, r3, #14
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	3a01      	subs	r2, #1
 80060e0:	60fa      	str	r2, [r7, #12]
 80060e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	09db      	lsrs	r3, r3, #7
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	3a01      	subs	r2, #1
 80060f6:	60fa      	str	r2, [r7, #12]
 80060f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	3a01      	subs	r2, #1
 800610a:	60fa      	str	r2, [r7, #12]
 800610c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006116:	4b1f      	ldr	r3, [pc, #124]	@ (8006194 <_SendPacket+0x274>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800611c:	4b1c      	ldr	r3, [pc, #112]	@ (8006190 <_SendPacket+0x270>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	627b      	str	r3, [r7, #36]	@ 0x24
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	623b      	str	r3, [r7, #32]
 800612e:	e00b      	b.n	8006148 <_SendPacket+0x228>
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	1c59      	adds	r1, r3, #1
 8006138:	6279      	str	r1, [r7, #36]	@ 0x24
 800613a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	09db      	lsrs	r3, r3, #7
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	2b7f      	cmp	r3, #127	@ 0x7f
 800614c:	d8f0      	bhi.n	8006130 <_SendPacket+0x210>
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	627a      	str	r2, [r7, #36]	@ 0x24
 8006154:	6a3a      	ldr	r2, [r7, #32]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800615e:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <_SendPacket+0x270>)
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	4618      	mov	r0, r3
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	461a      	mov	r2, r3
 800616c:	68f9      	ldr	r1, [r7, #12]
 800616e:	f7fa f82f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006172:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800617a:	4a05      	ldr	r2, [pc, #20]	@ (8006190 <_SendPacket+0x270>)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	60d3      	str	r3, [r2, #12]
 8006180:	e00f      	b.n	80061a2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006182:	4b03      	ldr	r3, [pc, #12]	@ (8006190 <_SendPacket+0x270>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	3301      	adds	r3, #1
 8006188:	b2da      	uxtb	r2, r3
 800618a:	4b01      	ldr	r3, [pc, #4]	@ (8006190 <_SendPacket+0x270>)
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e008      	b.n	80061a2 <_SendPacket+0x282>
 8006190:	200197a4 	.word	0x200197a4
 8006194:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006198:	bf00      	nop
 800619a:	e002      	b.n	80061a2 <_SendPacket+0x282>
      goto SendDone;
 800619c:	bf00      	nop
 800619e:	e000      	b.n	80061a2 <_SendPacket+0x282>
      goto SendDone;
 80061a0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80061a2:	4b14      	ldr	r3, [pc, #80]	@ (80061f4 <_SendPacket+0x2d4>)
 80061a4:	7e1b      	ldrb	r3, [r3, #24]
 80061a6:	4619      	mov	r1, r3
 80061a8:	4a13      	ldr	r2, [pc, #76]	@ (80061f8 <_SendPacket+0x2d8>)
 80061aa:	460b      	mov	r3, r1
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	440b      	add	r3, r1
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	336c      	adds	r3, #108	@ 0x6c
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b0e      	ldr	r3, [pc, #56]	@ (80061f4 <_SendPacket+0x2d4>)
 80061ba:	7e1b      	ldrb	r3, [r3, #24]
 80061bc:	4618      	mov	r0, r3
 80061be:	490e      	ldr	r1, [pc, #56]	@ (80061f8 <_SendPacket+0x2d8>)
 80061c0:	4603      	mov	r3, r0
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	4403      	add	r3, r0
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	440b      	add	r3, r1
 80061ca:	3370      	adds	r3, #112	@ 0x70
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d00b      	beq.n	80061ea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80061d2:	4b08      	ldr	r3, [pc, #32]	@ (80061f4 <_SendPacket+0x2d4>)
 80061d4:	789b      	ldrb	r3, [r3, #2]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d107      	bne.n	80061ea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80061da:	4b06      	ldr	r3, [pc, #24]	@ (80061f4 <_SendPacket+0x2d4>)
 80061dc:	2201      	movs	r2, #1
 80061de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80061e0:	f7ff fdbe 	bl	8005d60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80061e4:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <_SendPacket+0x2d4>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80061ea:	bf00      	nop
 80061ec:	3728      	adds	r7, #40	@ 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200197a4 	.word	0x200197a4
 80061f8:	20012ee4 	.word	0x20012ee4

080061fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800620a:	2300      	movs	r3, #0
 800620c:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8006210:	4917      	ldr	r1, [pc, #92]	@ (8006270 <SEGGER_SYSVIEW_Init+0x74>)
 8006212:	4818      	ldr	r0, [pc, #96]	@ (8006274 <SEGGER_SYSVIEW_Init+0x78>)
 8006214:	f7ff fc98 	bl	8005b48 <SEGGER_RTT_AllocUpBuffer>
 8006218:	4603      	mov	r3, r0
 800621a:	b2da      	uxtb	r2, r3
 800621c:	4b16      	ldr	r3, [pc, #88]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800621e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006220:	4b15      	ldr	r3, [pc, #84]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006222:	785a      	ldrb	r2, [r3, #1]
 8006224:	4b14      	ldr	r3, [pc, #80]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006226:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006228:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800622a:	7e1b      	ldrb	r3, [r3, #24]
 800622c:	4618      	mov	r0, r3
 800622e:	2300      	movs	r3, #0
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	2308      	movs	r3, #8
 8006234:	4a11      	ldr	r2, [pc, #68]	@ (800627c <SEGGER_SYSVIEW_Init+0x80>)
 8006236:	490f      	ldr	r1, [pc, #60]	@ (8006274 <SEGGER_SYSVIEW_Init+0x78>)
 8006238:	f7ff fd0a 	bl	8005c50 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800623c:	4b0e      	ldr	r3, [pc, #56]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800623e:	2200      	movs	r2, #0
 8006240:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006242:	4b0f      	ldr	r3, [pc, #60]	@ (8006280 <SEGGER_SYSVIEW_Init+0x84>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0c      	ldr	r2, [pc, #48]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006248:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800624a:	4a0b      	ldr	r2, [pc, #44]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006250:	4a09      	ldr	r2, [pc, #36]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006256:	4a08      	ldr	r2, [pc, #32]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800625c:	4a06      	ldr	r2, [pc, #24]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006262:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	2001339c 	.word	0x2001339c
 8006274:	08007da8 	.word	0x08007da8
 8006278:	200197a4 	.word	0x200197a4
 800627c:	2001979c 	.word	0x2001979c
 8006280:	e0001004 	.word	0xe0001004

08006284 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800628c:	4a04      	ldr	r2, [pc, #16]	@ (80062a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6113      	str	r3, [r2, #16]
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	200197a4 	.word	0x200197a4

080062a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062ac:	f3ef 8311 	mrs	r3, BASEPRI
 80062b0:	f04f 0120 	mov.w	r1, #32
 80062b4:	f381 8811 	msr	BASEPRI, r1
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	4808      	ldr	r0, [pc, #32]	@ (80062dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80062bc:	f7ff fd44 	bl	8005d48 <_PreparePacket>
 80062c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	68b8      	ldr	r0, [r7, #8]
 80062c8:	f7ff fe2a 	bl	8005f20 <_SendPacket>
  RECORD_END();
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f383 8811 	msr	BASEPRI, r3
}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	200197d4 	.word	0x200197d4

080062e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062ea:	f3ef 8311 	mrs	r3, BASEPRI
 80062ee:	f04f 0120 	mov.w	r1, #32
 80062f2:	f381 8811 	msr	BASEPRI, r1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	4816      	ldr	r0, [pc, #88]	@ (8006354 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80062fa:	f7ff fd25 	bl	8005d48 <_PreparePacket>
 80062fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	e00b      	b.n	8006326 <SEGGER_SYSVIEW_RecordU32+0x46>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	61f9      	str	r1, [r7, #28]
 8006318:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	09db      	lsrs	r3, r3, #7
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b7f      	cmp	r3, #127	@ 0x7f
 800632a:	d8f0      	bhi.n	800630e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	61fa      	str	r2, [r7, #28]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	6938      	ldr	r0, [r7, #16]
 8006342:	f7ff fded 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f383 8811 	msr	BASEPRI, r3
}
 800634c:	bf00      	nop
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200197d4 	.word	0x200197d4

08006358 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b08c      	sub	sp, #48	@ 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006364:	f3ef 8311 	mrs	r3, BASEPRI
 8006368:	f04f 0120 	mov.w	r1, #32
 800636c:	f381 8811 	msr	BASEPRI, r1
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	4825      	ldr	r0, [pc, #148]	@ (8006408 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006374:	f7ff fce8 	bl	8005d48 <_PreparePacket>
 8006378:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006386:	e00b      	b.n	80063a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	b2da      	uxtb	r2, r3
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006392:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	09db      	lsrs	r3, r3, #7
 800639e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a4:	d8f0      	bhi.n	8006388 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	e00b      	b.n	80063d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	1c59      	adds	r1, r3, #1
 80063c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80063ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	09db      	lsrs	r3, r3, #7
 80063d6:	623b      	str	r3, [r7, #32]
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b7f      	cmp	r3, #127	@ 0x7f
 80063dc:	d8f0      	bhi.n	80063c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80063e4:	6a3a      	ldr	r2, [r7, #32]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	69b8      	ldr	r0, [r7, #24]
 80063f4:	f7ff fd94 	bl	8005f20 <_SendPacket>
  RECORD_END();
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f383 8811 	msr	BASEPRI, r3
}
 80063fe:	bf00      	nop
 8006400:	3730      	adds	r7, #48	@ 0x30
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	200197d4 	.word	0x200197d4

0800640c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	@ 0x30
 8006410:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006412:	4b58      	ldr	r3, [pc, #352]	@ (8006574 <SEGGER_SYSVIEW_Start+0x168>)
 8006414:	2201      	movs	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006418:	f3ef 8311 	mrs	r3, BASEPRI
 800641c:	f04f 0120 	mov.w	r1, #32
 8006420:	f381 8811 	msr	BASEPRI, r1
 8006424:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006426:	4b53      	ldr	r3, [pc, #332]	@ (8006574 <SEGGER_SYSVIEW_Start+0x168>)
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	220a      	movs	r2, #10
 800642c:	4952      	ldr	r1, [pc, #328]	@ (8006578 <SEGGER_SYSVIEW_Start+0x16c>)
 800642e:	4618      	mov	r0, r3
 8006430:	f7f9 fece 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800643a:	200a      	movs	r0, #10
 800643c:	f7ff ff32 	bl	80062a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006440:	f3ef 8311 	mrs	r3, BASEPRI
 8006444:	f04f 0120 	mov.w	r1, #32
 8006448:	f381 8811 	msr	BASEPRI, r1
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	484b      	ldr	r0, [pc, #300]	@ (800657c <SEGGER_SYSVIEW_Start+0x170>)
 8006450:	f7ff fc7a 	bl	8005d48 <_PreparePacket>
 8006454:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800645e:	4b45      	ldr	r3, [pc, #276]	@ (8006574 <SEGGER_SYSVIEW_Start+0x168>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006464:	e00b      	b.n	800647e <SEGGER_SYSVIEW_Start+0x72>
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006470:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800647e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006480:	2b7f      	cmp	r3, #127	@ 0x7f
 8006482:	d8f0      	bhi.n	8006466 <SEGGER_SYSVIEW_Start+0x5a>
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800648a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006492:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	627b      	str	r3, [r7, #36]	@ 0x24
 8006498:	4b36      	ldr	r3, [pc, #216]	@ (8006574 <SEGGER_SYSVIEW_Start+0x168>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	623b      	str	r3, [r7, #32]
 800649e:	e00b      	b.n	80064b8 <SEGGER_SYSVIEW_Start+0xac>
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80064aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <SEGGER_SYSVIEW_Start+0x94>
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	4b28      	ldr	r3, [pc, #160]	@ (8006574 <SEGGER_SYSVIEW_Start+0x168>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	e00b      	b.n	80064f2 <SEGGER_SYSVIEW_Start+0xe6>
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	61f9      	str	r1, [r7, #28]
 80064e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	09db      	lsrs	r3, r3, #7
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064f6:	d8f0      	bhi.n	80064da <SEGGER_SYSVIEW_Start+0xce>
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	61fa      	str	r2, [r7, #28]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	e00b      	b.n	800652a <SEGGER_SYSVIEW_Start+0x11e>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	b2da      	uxtb	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	1c59      	adds	r1, r3, #1
 800651a:	6179      	str	r1, [r7, #20]
 800651c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	09db      	lsrs	r3, r3, #7
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b7f      	cmp	r3, #127	@ 0x7f
 800652e:	d8f0      	bhi.n	8006512 <SEGGER_SYSVIEW_Start+0x106>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	617a      	str	r2, [r7, #20]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006540:	2218      	movs	r2, #24
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fceb 	bl	8005f20 <_SendPacket>
      RECORD_END();
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006550:	4b08      	ldr	r3, [pc, #32]	@ (8006574 <SEGGER_SYSVIEW_Start+0x168>)
 8006552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006558:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <SEGGER_SYSVIEW_Start+0x168>)
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800655e:	f000 f9eb 	bl	8006938 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006562:	f000 f9b1 	bl	80068c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006566:	f000 fd21 	bl	8006fac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800656a:	bf00      	nop
 800656c:	3730      	adds	r7, #48	@ 0x30
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200197a4 	.word	0x200197a4
 8006578:	08007e34 	.word	0x08007e34
 800657c:	200197d4 	.word	0x200197d4

08006580 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006586:	f3ef 8311 	mrs	r3, BASEPRI
 800658a:	f04f 0120 	mov.w	r1, #32
 800658e:	f381 8811 	msr	BASEPRI, r1
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	480b      	ldr	r0, [pc, #44]	@ (80065c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006596:	f7ff fbd7 	bl	8005d48 <_PreparePacket>
 800659a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800659c:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80065a4:	220b      	movs	r2, #11
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6838      	ldr	r0, [r7, #0]
 80065aa:	f7ff fcb9 	bl	8005f20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80065ae:	4b06      	ldr	r3, [pc, #24]	@ (80065c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f383 8811 	msr	BASEPRI, r3
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200197d4 	.word	0x200197d4
 80065c8:	200197a4 	.word	0x200197a4

080065cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08c      	sub	sp, #48	@ 0x30
 80065d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d2:	f3ef 8311 	mrs	r3, BASEPRI
 80065d6:	f04f 0120 	mov.w	r1, #32
 80065da:	f381 8811 	msr	BASEPRI, r1
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	4845      	ldr	r0, [pc, #276]	@ (80066f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80065e2:	f7ff fbb1 	bl	8005d48 <_PreparePacket>
 80065e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f0:	4b42      	ldr	r3, [pc, #264]	@ (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f6:	e00b      	b.n	8006610 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006602:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660c:	09db      	lsrs	r3, r3, #7
 800660e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	2b7f      	cmp	r3, #127	@ 0x7f
 8006614:	d8f0      	bhi.n	80065f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800661c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	627b      	str	r3, [r7, #36]	@ 0x24
 800662a:	4b34      	ldr	r3, [pc, #208]	@ (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	e00b      	b.n	800664a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	6279      	str	r1, [r7, #36]	@ 0x24
 800663c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	2b7f      	cmp	r3, #127	@ 0x7f
 800664e:	d8f0      	bhi.n	8006632 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	627a      	str	r2, [r7, #36]	@ 0x24
 8006656:	6a3a      	ldr	r2, [r7, #32]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	4b25      	ldr	r3, [pc, #148]	@ (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	e00b      	b.n	8006684 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	61f9      	str	r1, [r7, #28]
 8006676:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	09db      	lsrs	r3, r3, #7
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b7f      	cmp	r3, #127	@ 0x7f
 8006688:	d8f0      	bhi.n	800666c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	61fa      	str	r2, [r7, #28]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	e00b      	b.n	80066bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	6179      	str	r1, [r7, #20]
 80066ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c0:	d8f0      	bhi.n	80066a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	617a      	str	r2, [r7, #20]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066d2:	2218      	movs	r2, #24
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	68b8      	ldr	r0, [r7, #8]
 80066d8:	f7ff fc22 	bl	8005f20 <_SendPacket>
  RECORD_END();
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066e2:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80066ea:	4b04      	ldr	r3, [pc, #16]	@ (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	4798      	blx	r3
  }
}
 80066f0:	bf00      	nop
 80066f2:	3730      	adds	r7, #48	@ 0x30
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	200197d4 	.word	0x200197d4
 80066fc:	200197a4 	.word	0x200197a4

08006700 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b092      	sub	sp, #72	@ 0x48
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	f04f 0120 	mov.w	r1, #32
 8006710:	f381 8811 	msr	BASEPRI, r1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	486a      	ldr	r0, [pc, #424]	@ (80068c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006718:	f7ff fb16 	bl	8005d48 <_PreparePacket>
 800671c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	647b      	str	r3, [r7, #68]	@ 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b66      	ldr	r3, [pc, #408]	@ (80068c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	643b      	str	r3, [r7, #64]	@ 0x40
 8006732:	e00b      	b.n	800674c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673a:	1c59      	adds	r1, r3, #1
 800673c:	6479      	str	r1, [r7, #68]	@ 0x44
 800673e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006748:	09db      	lsrs	r3, r3, #7
 800674a:	643b      	str	r3, [r7, #64]	@ 0x40
 800674c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800674e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006750:	d8f0      	bhi.n	8006734 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	647a      	str	r2, [r7, #68]	@ 0x44
 8006758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006760:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800676c:	e00b      	b.n	8006786 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800676e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006774:	1c59      	adds	r1, r3, #1
 8006776:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006778:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	09db      	lsrs	r3, r3, #7
 8006784:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	2b7f      	cmp	r3, #127	@ 0x7f
 800678a:	d8f0      	bhi.n	800676e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800678c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006792:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	4619      	mov	r1, r3
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff fa9f 	bl	8005ce8 <_EncodeStr>
 80067aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80067ac:	2209      	movs	r2, #9
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	6938      	ldr	r0, [r7, #16]
 80067b2:	f7ff fbb5 	bl	8005f20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b40      	ldr	r3, [pc, #256]	@ (80068c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80067ca:	e00b      	b.n	80067e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	6379      	str	r1, [r7, #52]	@ 0x34
 80067d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	09db      	lsrs	r3, r3, #7
 80067e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80067e8:	d8f0      	bhi.n	80067cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80067ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80067f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006804:	e00b      	b.n	800681e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680c:	1c59      	adds	r1, r3, #1
 800680e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006810:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	09db      	lsrs	r3, r3, #7
 800681c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006820:	2b7f      	cmp	r3, #127	@ 0x7f
 8006822:	d8f0      	bhi.n	8006806 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800682a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006832:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	623b      	str	r3, [r7, #32]
 800683e:	e00b      	b.n	8006858 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	6279      	str	r1, [r7, #36]	@ 0x24
 800684a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	09db      	lsrs	r3, r3, #7
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	2b7f      	cmp	r3, #127	@ 0x7f
 800685c:	d8f0      	bhi.n	8006840 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	627a      	str	r2, [r7, #36]	@ 0x24
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	e00b      	b.n	8006890 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	1c59      	adds	r1, r3, #1
 8006880:	61f9      	str	r1, [r7, #28]
 8006882:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	09db      	lsrs	r3, r3, #7
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	2b7f      	cmp	r3, #127	@ 0x7f
 8006894:	d8f0      	bhi.n	8006878 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	61fa      	str	r2, [r7, #28]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80068a6:	2215      	movs	r2, #21
 80068a8:	68f9      	ldr	r1, [r7, #12]
 80068aa:	6938      	ldr	r0, [r7, #16]
 80068ac:	f7ff fb38 	bl	8005f20 <_SendPacket>
  RECORD_END();
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f383 8811 	msr	BASEPRI, r3
}
 80068b6:	bf00      	nop
 80068b8:	3748      	adds	r7, #72	@ 0x48
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200197d4 	.word	0x200197d4
 80068c4:	200197a4 	.word	0x200197a4

080068c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80068cc:	4b07      	ldr	r3, [pc, #28]	@ (80068ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80068d4:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80068de:	4b03      	ldr	r3, [pc, #12]	@ (80068ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4798      	blx	r3
  }
}
 80068e6:	bf00      	nop
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200197a4 	.word	0x200197a4

080068f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068f8:	f3ef 8311 	mrs	r3, BASEPRI
 80068fc:	f04f 0120 	mov.w	r1, #32
 8006900:	f381 8811 	msr	BASEPRI, r1
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	480b      	ldr	r0, [pc, #44]	@ (8006934 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006908:	f7ff fa1e 	bl	8005d48 <_PreparePacket>
 800690c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800690e:	2280      	movs	r2, #128	@ 0x80
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	f7ff f9e8 	bl	8005ce8 <_EncodeStr>
 8006918:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800691a:	220e      	movs	r2, #14
 800691c:	68f9      	ldr	r1, [r7, #12]
 800691e:	6938      	ldr	r0, [r7, #16]
 8006920:	f7ff fafe 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f383 8811 	msr	BASEPRI, r3
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200197d4 	.word	0x200197d4

08006938 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01a      	beq.n	800697c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006946:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d015      	beq.n	800697c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006950:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4798      	blx	r3
 8006958:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800695c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800695e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	000a      	movs	r2, r1
 800696c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800696e:	4613      	mov	r3, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4621      	mov	r1, r4
 8006974:	200d      	movs	r0, #13
 8006976:	f7ff fcef 	bl	8006358 <SEGGER_SYSVIEW_RecordU32x2>
 800697a:	e006      	b.n	800698a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800697c:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4619      	mov	r1, r3
 8006982:	200c      	movs	r0, #12
 8006984:	f7ff fcac 	bl	80062e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	bd90      	pop	{r4, r7, pc}
 8006992:	bf00      	nop
 8006994:	200197a4 	.word	0x200197a4
 8006998:	e0001004 	.word	0xe0001004

0800699c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069a2:	f3ef 8311 	mrs	r3, BASEPRI
 80069a6:	f04f 0120 	mov.w	r1, #32
 80069aa:	f381 8811 	msr	BASEPRI, r1
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	4819      	ldr	r0, [pc, #100]	@ (8006a18 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80069b2:	f7ff f9c9 	bl	8005d48 <_PreparePacket>
 80069b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80069bc:	4b17      	ldr	r3, [pc, #92]	@ (8006a1c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	e00b      	b.n	80069e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	6179      	str	r1, [r7, #20]
 80069da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	09db      	lsrs	r3, r3, #7
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80069ec:	d8f0      	bhi.n	80069d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	617a      	str	r2, [r7, #20]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80069fe:	2202      	movs	r2, #2
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	68b8      	ldr	r0, [r7, #8]
 8006a04:	f7ff fa8c 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	200197d4 	.word	0x200197d4
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a26:	f3ef 8311 	mrs	r3, BASEPRI
 8006a2a:	f04f 0120 	mov.w	r1, #32
 8006a2e:	f381 8811 	msr	BASEPRI, r1
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	4807      	ldr	r0, [pc, #28]	@ (8006a54 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006a36:	f7ff f987 	bl	8005d48 <_PreparePacket>
 8006a3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6838      	ldr	r0, [r7, #0]
 8006a42:	f7ff fa6d 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f383 8811 	msr	BASEPRI, r3
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	200197d4 	.word	0x200197d4

08006a58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a62:	f04f 0120 	mov.w	r1, #32
 8006a66:	f381 8811 	msr	BASEPRI, r1
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	4807      	ldr	r0, [pc, #28]	@ (8006a8c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006a6e:	f7ff f96b 	bl	8005d48 <_PreparePacket>
 8006a72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006a74:	2212      	movs	r2, #18
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6838      	ldr	r0, [r7, #0]
 8006a7a:	f7ff fa51 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f383 8811 	msr	BASEPRI, r3
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	200197d4 	.word	0x200197d4

08006a90 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a98:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9c:	f04f 0120 	mov.w	r1, #32
 8006aa0:	f381 8811 	msr	BASEPRI, r1
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	4817      	ldr	r0, [pc, #92]	@ (8006b04 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006aa8:	f7ff f94e 	bl	8005d48 <_PreparePacket>
 8006aac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	61f9      	str	r1, [r7, #28]
 8006ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	61fa      	str	r2, [r7, #28]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006aea:	221c      	movs	r2, #28
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6938      	ldr	r0, [r7, #16]
 8006af0:	f7ff fa16 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f383 8811 	msr	BASEPRI, r3
}
 8006afa:	bf00      	nop
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	200197d4 	.word	0x200197d4

08006b08 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	@ 0x28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b12:	f3ef 8311 	mrs	r3, BASEPRI
 8006b16:	f04f 0120 	mov.w	r1, #32
 8006b1a:	f381 8811 	msr	BASEPRI, r1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	4824      	ldr	r0, [pc, #144]	@ (8006bb4 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006b22:	f7ff f911 	bl	8005d48 <_PreparePacket>
 8006b26:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	623b      	str	r3, [r7, #32]
 8006b34:	e00b      	b.n	8006b4e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	1c59      	adds	r1, r3, #1
 8006b3e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	09db      	lsrs	r3, r3, #7
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b52:	d8f0      	bhi.n	8006b36 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b5a:	6a3a      	ldr	r2, [r7, #32]
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	e00b      	b.n	8006b86 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	61f9      	str	r1, [r7, #28]
 8006b78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	09db      	lsrs	r3, r3, #7
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b8a:	d8f0      	bhi.n	8006b6e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	61fa      	str	r2, [r7, #28]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006b9c:	221c      	movs	r2, #28
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	6938      	ldr	r0, [r7, #16]
 8006ba2:	f7ff f9bd 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f383 8811 	msr	BASEPRI, r3
}
 8006bac:	bf00      	nop
 8006bae:	3728      	adds	r7, #40	@ 0x28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	200197d4 	.word	0x200197d4

08006bb8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc2:	f04f 0120 	mov.w	r1, #32
 8006bc6:	f381 8811 	msr	BASEPRI, r1
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	4807      	ldr	r0, [pc, #28]	@ (8006bec <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006bce:	f7ff f8bb 	bl	8005d48 <_PreparePacket>
 8006bd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006bd4:	2211      	movs	r2, #17
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6838      	ldr	r0, [r7, #0]
 8006bda:	f7ff f9a1 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f383 8811 	msr	BASEPRI, r3
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	200197d4 	.word	0x200197d4

08006bf0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfc:	f04f 0120 	mov.w	r1, #32
 8006c00:	f381 8811 	msr	BASEPRI, r1
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	4819      	ldr	r0, [pc, #100]	@ (8006c6c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006c08:	f7ff f89e 	bl	8005d48 <_PreparePacket>
 8006c0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c12:	4b17      	ldr	r3, [pc, #92]	@ (8006c70 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	e00b      	b.n	8006c3e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	61f9      	str	r1, [r7, #28]
 8006c30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	09db      	lsrs	r3, r3, #7
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c42:	d8f0      	bhi.n	8006c26 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	61fa      	str	r2, [r7, #28]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c54:	2208      	movs	r2, #8
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	6938      	ldr	r0, [r7, #16]
 8006c5a:	f7ff f961 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f383 8811 	msr	BASEPRI, r3
}
 8006c64:	bf00      	nop
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	200197d4 	.word	0x200197d4
 8006c70:	200197a4 	.word	0x200197a4

08006c74 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c80:	f04f 0120 	mov.w	r1, #32
 8006c84:	f381 8811 	msr	BASEPRI, r1
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	4819      	ldr	r0, [pc, #100]	@ (8006cf0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c8c:	f7ff f85c 	bl	8005d48 <_PreparePacket>
 8006c90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c96:	4b17      	ldr	r3, [pc, #92]	@ (8006cf4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	61fb      	str	r3, [r7, #28]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	e00b      	b.n	8006cc2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	61f9      	str	r1, [r7, #28]
 8006cb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	09db      	lsrs	r3, r3, #7
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cc6:	d8f0      	bhi.n	8006caa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	61fa      	str	r2, [r7, #28]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006cd8:	2204      	movs	r2, #4
 8006cda:	68f9      	ldr	r1, [r7, #12]
 8006cdc:	6938      	ldr	r0, [r7, #16]
 8006cde:	f7ff f91f 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f383 8811 	msr	BASEPRI, r3
}
 8006ce8:	bf00      	nop
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200197d4 	.word	0x200197d4
 8006cf4:	200197a4 	.word	0x200197a4

08006cf8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d00:	f3ef 8311 	mrs	r3, BASEPRI
 8006d04:	f04f 0120 	mov.w	r1, #32
 8006d08:	f381 8811 	msr	BASEPRI, r1
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	4819      	ldr	r0, [pc, #100]	@ (8006d74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d10:	f7ff f81a 	bl	8005d48 <_PreparePacket>
 8006d14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d1a:	4b17      	ldr	r3, [pc, #92]	@ (8006d78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	e00b      	b.n	8006d46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	61f9      	str	r1, [r7, #28]
 8006d38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	09db      	lsrs	r3, r3, #7
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d4a:	d8f0      	bhi.n	8006d2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	61fa      	str	r2, [r7, #28]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d5c:	2206      	movs	r2, #6
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	6938      	ldr	r0, [r7, #16]
 8006d62:	f7ff f8dd 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f383 8811 	msr	BASEPRI, r3
}
 8006d6c:	bf00      	nop
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200197d4 	.word	0x200197d4
 8006d78:	200197a4 	.word	0x200197a4

08006d7c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	@ 0x28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d86:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8a:	f04f 0120 	mov.w	r1, #32
 8006d8e:	f381 8811 	msr	BASEPRI, r1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	4827      	ldr	r0, [pc, #156]	@ (8006e34 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006d96:	f7fe ffd7 	bl	8005d48 <_PreparePacket>
 8006d9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006da0:	4b25      	ldr	r3, [pc, #148]	@ (8006e38 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	623b      	str	r3, [r7, #32]
 8006db2:	e00b      	b.n	8006dcc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	09db      	lsrs	r3, r3, #7
 8006dca:	623b      	str	r3, [r7, #32]
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd0:	d8f0      	bhi.n	8006db4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e00b      	b.n	8006e04 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	61f9      	str	r1, [r7, #28]
 8006df6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	09db      	lsrs	r3, r3, #7
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e08:	d8f0      	bhi.n	8006dec <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	61fa      	str	r2, [r7, #28]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006e1a:	2207      	movs	r2, #7
 8006e1c:	68f9      	ldr	r1, [r7, #12]
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f7ff f87e 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f383 8811 	msr	BASEPRI, r3
}
 8006e2a:	bf00      	nop
 8006e2c:	3728      	adds	r7, #40	@ 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200197d4 	.word	0x200197d4
 8006e38:	200197a4 	.word	0x200197a4

08006e3c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006e44:	4b04      	ldr	r3, [pc, #16]	@ (8006e58 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	1ad3      	subs	r3, r2, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	200197a4 	.word	0x200197a4

08006e5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08c      	sub	sp, #48	@ 0x30
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006e66:	4b40      	ldr	r3, [pc, #256]	@ (8006f68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d077      	beq.n	8006f5e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e74:	2300      	movs	r3, #0
 8006e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e78:	e008      	b.n	8006e8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	3301      	adds	r3, #1
 8006e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d3f2      	bcc.n	8006e7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e94:	e000      	b.n	8006e98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d055      	beq.n	8006f4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea2:	f04f 0120 	mov.w	r1, #32
 8006ea6:	f381 8811 	msr	BASEPRI, r1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	482f      	ldr	r0, [pc, #188]	@ (8006f6c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006eae:	f7fe ff4b 	bl	8005d48 <_PreparePacket>
 8006eb2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	e00b      	b.n	8006eda <SEGGER_SYSVIEW_SendModule+0x7e>
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	1c59      	adds	r1, r3, #1
 8006eca:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ecc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	09db      	lsrs	r3, r3, #7
 8006ed8:	623b      	str	r3, [r7, #32]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ede:	d8f0      	bhi.n	8006ec2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ee6:	6a3a      	ldr	r2, [r7, #32]
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	e00b      	b.n	8006f14 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	61f9      	str	r1, [r7, #28]
 8006f06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	09db      	lsrs	r3, r3, #7
 8006f12:	61bb      	str	r3, [r7, #24]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f18:	d8f0      	bhi.n	8006efc <SEGGER_SYSVIEW_SendModule+0xa0>
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	61fa      	str	r2, [r7, #28]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2280      	movs	r2, #128	@ 0x80
 8006f30:	4619      	mov	r1, r3
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7fe fed8 	bl	8005ce8 <_EncodeStr>
 8006f38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006f3a:	2216      	movs	r2, #22
 8006f3c:	68f9      	ldr	r1, [r7, #12]
 8006f3e:	6938      	ldr	r0, [r7, #16]
 8006f40:	f7fe ffee 	bl	8005f20 <_SendPacket>
      RECORD_END();
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d006      	beq.n	8006f5e <SEGGER_SYSVIEW_SendModule+0x102>
 8006f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4798      	blx	r3
    }
  }
}
 8006f5e:	bf00      	nop
 8006f60:	3730      	adds	r7, #48	@ 0x30
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200197cc 	.word	0x200197cc
 8006f6c:	200197d4 	.word	0x200197d4

08006f70 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f76:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00f      	beq.n	8006f9e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f2      	bne.n	8006f84 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200197cc 	.word	0x200197cc

08006fac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fb6:	f04f 0120 	mov.w	r1, #32
 8006fba:	f381 8811 	msr	BASEPRI, r1
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	4817      	ldr	r0, [pc, #92]	@ (8007020 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006fc2:	f7fe fec1 	bl	8005d48 <_PreparePacket>
 8006fc6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	e00b      	b.n	8006ff0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	6179      	str	r1, [r7, #20]
 8006fe2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	09db      	lsrs	r3, r3, #7
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ff4:	d8f0      	bhi.n	8006fd8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	617a      	str	r2, [r7, #20]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007006:	221b      	movs	r2, #27
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	68b8      	ldr	r0, [r7, #8]
 800700c:	f7fe ff88 	bl	8005f20 <_SendPacket>
  RECORD_END();
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f383 8811 	msr	BASEPRI, r3
}
 8007016:	bf00      	nop
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200197d4 	.word	0x200197d4
 8007024:	200197d0 	.word	0x200197d0

08007028 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	@ 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007030:	f3ef 8311 	mrs	r3, BASEPRI
 8007034:	f04f 0120 	mov.w	r1, #32
 8007038:	f381 8811 	msr	BASEPRI, r1
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	4827      	ldr	r0, [pc, #156]	@ (80070dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007040:	f7fe fe82 	bl	8005d48 <_PreparePacket>
 8007044:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007046:	2280      	movs	r2, #128	@ 0x80
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f7fe fe4c 	bl	8005ce8 <_EncodeStr>
 8007050:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	627b      	str	r3, [r7, #36]	@ 0x24
 8007056:	2301      	movs	r3, #1
 8007058:	623b      	str	r3, [r7, #32]
 800705a:	e00b      	b.n	8007074 <SEGGER_SYSVIEW_Warn+0x4c>
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	b2da      	uxtb	r2, r3
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	1c59      	adds	r1, r3, #1
 8007064:	6279      	str	r1, [r7, #36]	@ 0x24
 8007066:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	09db      	lsrs	r3, r3, #7
 8007072:	623b      	str	r3, [r7, #32]
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	2b7f      	cmp	r3, #127	@ 0x7f
 8007078:	d8f0      	bhi.n	800705c <SEGGER_SYSVIEW_Warn+0x34>
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	2300      	movs	r3, #0
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e00b      	b.n	80070ac <SEGGER_SYSVIEW_Warn+0x84>
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	61f9      	str	r1, [r7, #28]
 800709e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80070b0:	d8f0      	bhi.n	8007094 <SEGGER_SYSVIEW_Warn+0x6c>
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	61fa      	str	r2, [r7, #28]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80070c2:	221a      	movs	r2, #26
 80070c4:	68f9      	ldr	r1, [r7, #12]
 80070c6:	6938      	ldr	r0, [r7, #16]
 80070c8:	f7fe ff2a 	bl	8005f20 <_SendPacket>
  RECORD_END();
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f383 8811 	msr	BASEPRI, r3
}
 80070d2:	bf00      	nop
 80070d4:	3728      	adds	r7, #40	@ 0x28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200197d4 	.word	0x200197d4

080070e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80070e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	e033      	b.n	8007154 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80070ec:	491e      	ldr	r1, [pc, #120]	@ (8007168 <_cbSendTaskList+0x88>)
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	6818      	ldr	r0, [r3, #0]
 80070fc:	491a      	ldr	r1, [pc, #104]	@ (8007168 <_cbSendTaskList+0x88>)
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3304      	adds	r3, #4
 800710c:	6819      	ldr	r1, [r3, #0]
 800710e:	4c16      	ldr	r4, [pc, #88]	@ (8007168 <_cbSendTaskList+0x88>)
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4423      	add	r3, r4
 800711c:	3308      	adds	r3, #8
 800711e:	681c      	ldr	r4, [r3, #0]
 8007120:	4d11      	ldr	r5, [pc, #68]	@ (8007168 <_cbSendTaskList+0x88>)
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	442b      	add	r3, r5
 800712e:	330c      	adds	r3, #12
 8007130:	681d      	ldr	r5, [r3, #0]
 8007132:	4e0d      	ldr	r6, [pc, #52]	@ (8007168 <_cbSendTaskList+0x88>)
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4433      	add	r3, r6
 8007140:	3310      	adds	r3, #16
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	462b      	mov	r3, r5
 8007148:	4622      	mov	r2, r4
 800714a:	f000 f8bd 	bl	80072c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3301      	adds	r3, #1
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	4b05      	ldr	r3, [pc, #20]	@ (800716c <_cbSendTaskList+0x8c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	429a      	cmp	r2, r3
 800715c:	d3c6      	bcc.n	80070ec <_cbSendTaskList+0xc>
  }
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007168:	200198b8 	.word	0x200198b8
 800716c:	20019958 	.word	0x20019958

08007170 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007178:	f7fc fe88 	bl	8003e8c <xTaskGetTickCountFromISR>
 800717c:	4603      	mov	r3, r0
 800717e:	2200      	movs	r2, #0
 8007180:	469a      	mov	sl, r3
 8007182:	4693      	mov	fp, r2
 8007184:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	f04f 0a00 	mov.w	sl, #0
 8007194:	f04f 0b00 	mov.w	fp, #0
 8007198:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800719c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80071a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80071a4:	4652      	mov	r2, sl
 80071a6:	465b      	mov	r3, fp
 80071a8:	1a14      	subs	r4, r2, r0
 80071aa:	eb63 0501 	sbc.w	r5, r3, r1
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	00ab      	lsls	r3, r5, #2
 80071b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80071bc:	00a2      	lsls	r2, r4, #2
 80071be:	4614      	mov	r4, r2
 80071c0:	461d      	mov	r5, r3
 80071c2:	eb14 0800 	adds.w	r8, r4, r0
 80071c6:	eb45 0901 	adc.w	r9, r5, r1
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071de:	4690      	mov	r8, r2
 80071e0:	4699      	mov	r9, r3
 80071e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80071e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080071f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007206:	2205      	movs	r2, #5
 8007208:	492b      	ldr	r1, [pc, #172]	@ (80072b8 <SYSVIEW_AddTask+0xc0>)
 800720a:	68b8      	ldr	r0, [r7, #8]
 800720c:	f000 f8b2 	bl	8007374 <memcmp>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d04b      	beq.n	80072ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007216:	4b29      	ldr	r3, [pc, #164]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b07      	cmp	r3, #7
 800721c:	d903      	bls.n	8007226 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800721e:	4828      	ldr	r0, [pc, #160]	@ (80072c0 <SYSVIEW_AddTask+0xc8>)
 8007220:	f7ff ff02 	bl	8007028 <SEGGER_SYSVIEW_Warn>
    return;
 8007224:	e044      	b.n	80072b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007226:	4b25      	ldr	r3, [pc, #148]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4926      	ldr	r1, [pc, #152]	@ (80072c4 <SYSVIEW_AddTask+0xcc>)
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800723a:	4b20      	ldr	r3, [pc, #128]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4921      	ldr	r1, [pc, #132]	@ (80072c4 <SYSVIEW_AddTask+0xcc>)
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	3304      	adds	r3, #4
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007250:	4b1a      	ldr	r3, [pc, #104]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	491b      	ldr	r1, [pc, #108]	@ (80072c4 <SYSVIEW_AddTask+0xcc>)
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	3308      	adds	r3, #8
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007266:	4b15      	ldr	r3, [pc, #84]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4916      	ldr	r1, [pc, #88]	@ (80072c4 <SYSVIEW_AddTask+0xcc>)
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	330c      	adds	r3, #12
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800727c:	4b0f      	ldr	r3, [pc, #60]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4910      	ldr	r1, [pc, #64]	@ (80072c4 <SYSVIEW_AddTask+0xcc>)
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	3310      	adds	r3, #16
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007292:	4b0a      	ldr	r3, [pc, #40]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3301      	adds	r3, #1
 8007298:	4a08      	ldr	r2, [pc, #32]	@ (80072bc <SYSVIEW_AddTask+0xc4>)
 800729a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f80e 	bl	80072c8 <SYSVIEW_SendTaskInfo>
 80072ac:	e000      	b.n	80072b0 <SYSVIEW_AddTask+0xb8>
    return;
 80072ae:	bf00      	nop

}
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	08007db0 	.word	0x08007db0
 80072bc:	20019958 	.word	0x20019958
 80072c0:	08007db8 	.word	0x08007db8
 80072c4:	200198b8 	.word	0x200198b8

080072c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	@ 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80072d6:	f107 0314 	add.w	r3, r7, #20
 80072da:	2214      	movs	r2, #20
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 f858 	bl	8007394 <memset>
  TaskInfo.TaskID     = TaskID;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80072f8:	f107 0314 	add.w	r3, r7, #20
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff f9ff 	bl	8006700 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007302:	bf00      	nop
 8007304:	3728      	adds	r7, #40	@ 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <sniprintf>:
 800730c:	b40c      	push	{r2, r3}
 800730e:	b530      	push	{r4, r5, lr}
 8007310:	4b17      	ldr	r3, [pc, #92]	@ (8007370 <sniprintf+0x64>)
 8007312:	1e0c      	subs	r4, r1, #0
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	b09d      	sub	sp, #116	@ 0x74
 8007318:	da08      	bge.n	800732c <sniprintf+0x20>
 800731a:	238b      	movs	r3, #139	@ 0x8b
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	b01d      	add	sp, #116	@ 0x74
 8007324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007328:	b002      	add	sp, #8
 800732a:	4770      	bx	lr
 800732c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007330:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007334:	bf14      	ite	ne
 8007336:	f104 33ff 	addne.w	r3, r4, #4294967295
 800733a:	4623      	moveq	r3, r4
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007344:	9002      	str	r0, [sp, #8]
 8007346:	9006      	str	r0, [sp, #24]
 8007348:	f8ad 3016 	strh.w	r3, [sp, #22]
 800734c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800734e:	ab21      	add	r3, sp, #132	@ 0x84
 8007350:	a902      	add	r1, sp, #8
 8007352:	4628      	mov	r0, r5
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	f000 f9b3 	bl	80076c0 <_svfiprintf_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	bfbc      	itt	lt
 800735e:	238b      	movlt	r3, #139	@ 0x8b
 8007360:	602b      	strlt	r3, [r5, #0]
 8007362:	2c00      	cmp	r4, #0
 8007364:	d0dd      	beq.n	8007322 <sniprintf+0x16>
 8007366:	9b02      	ldr	r3, [sp, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e7d9      	b.n	8007322 <sniprintf+0x16>
 800736e:	bf00      	nop
 8007370:	20000014 	.word	0x20000014

08007374 <memcmp>:
 8007374:	b510      	push	{r4, lr}
 8007376:	3901      	subs	r1, #1
 8007378:	4402      	add	r2, r0
 800737a:	4290      	cmp	r0, r2
 800737c:	d101      	bne.n	8007382 <memcmp+0xe>
 800737e:	2000      	movs	r0, #0
 8007380:	e005      	b.n	800738e <memcmp+0x1a>
 8007382:	7803      	ldrb	r3, [r0, #0]
 8007384:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007388:	42a3      	cmp	r3, r4
 800738a:	d001      	beq.n	8007390 <memcmp+0x1c>
 800738c:	1b18      	subs	r0, r3, r4
 800738e:	bd10      	pop	{r4, pc}
 8007390:	3001      	adds	r0, #1
 8007392:	e7f2      	b.n	800737a <memcmp+0x6>

08007394 <memset>:
 8007394:	4402      	add	r2, r0
 8007396:	4603      	mov	r3, r0
 8007398:	4293      	cmp	r3, r2
 800739a:	d100      	bne.n	800739e <memset+0xa>
 800739c:	4770      	bx	lr
 800739e:	f803 1b01 	strb.w	r1, [r3], #1
 80073a2:	e7f9      	b.n	8007398 <memset+0x4>

080073a4 <__errno>:
 80073a4:	4b01      	ldr	r3, [pc, #4]	@ (80073ac <__errno+0x8>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000014 	.word	0x20000014

080073b0 <__libc_init_array>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4d0d      	ldr	r5, [pc, #52]	@ (80073e8 <__libc_init_array+0x38>)
 80073b4:	4c0d      	ldr	r4, [pc, #52]	@ (80073ec <__libc_init_array+0x3c>)
 80073b6:	1b64      	subs	r4, r4, r5
 80073b8:	10a4      	asrs	r4, r4, #2
 80073ba:	2600      	movs	r6, #0
 80073bc:	42a6      	cmp	r6, r4
 80073be:	d109      	bne.n	80073d4 <__libc_init_array+0x24>
 80073c0:	4d0b      	ldr	r5, [pc, #44]	@ (80073f0 <__libc_init_array+0x40>)
 80073c2:	4c0c      	ldr	r4, [pc, #48]	@ (80073f4 <__libc_init_array+0x44>)
 80073c4:	f000 fc66 	bl	8007c94 <_init>
 80073c8:	1b64      	subs	r4, r4, r5
 80073ca:	10a4      	asrs	r4, r4, #2
 80073cc:	2600      	movs	r6, #0
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	d105      	bne.n	80073de <__libc_init_array+0x2e>
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d8:	4798      	blx	r3
 80073da:	3601      	adds	r6, #1
 80073dc:	e7ee      	b.n	80073bc <__libc_init_array+0xc>
 80073de:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e2:	4798      	blx	r3
 80073e4:	3601      	adds	r6, #1
 80073e6:	e7f2      	b.n	80073ce <__libc_init_array+0x1e>
 80073e8:	08007e84 	.word	0x08007e84
 80073ec:	08007e84 	.word	0x08007e84
 80073f0:	08007e84 	.word	0x08007e84
 80073f4:	08007e88 	.word	0x08007e88

080073f8 <__retarget_lock_acquire_recursive>:
 80073f8:	4770      	bx	lr

080073fa <__retarget_lock_release_recursive>:
 80073fa:	4770      	bx	lr

080073fc <memcpy>:
 80073fc:	440a      	add	r2, r1
 80073fe:	4291      	cmp	r1, r2
 8007400:	f100 33ff 	add.w	r3, r0, #4294967295
 8007404:	d100      	bne.n	8007408 <memcpy+0xc>
 8007406:	4770      	bx	lr
 8007408:	b510      	push	{r4, lr}
 800740a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007412:	4291      	cmp	r1, r2
 8007414:	d1f9      	bne.n	800740a <memcpy+0xe>
 8007416:	bd10      	pop	{r4, pc}

08007418 <_free_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4605      	mov	r5, r0
 800741c:	2900      	cmp	r1, #0
 800741e:	d041      	beq.n	80074a4 <_free_r+0x8c>
 8007420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007424:	1f0c      	subs	r4, r1, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	bfb8      	it	lt
 800742a:	18e4      	addlt	r4, r4, r3
 800742c:	f000 f8e0 	bl	80075f0 <__malloc_lock>
 8007430:	4a1d      	ldr	r2, [pc, #116]	@ (80074a8 <_free_r+0x90>)
 8007432:	6813      	ldr	r3, [r2, #0]
 8007434:	b933      	cbnz	r3, 8007444 <_free_r+0x2c>
 8007436:	6063      	str	r3, [r4, #4]
 8007438:	6014      	str	r4, [r2, #0]
 800743a:	4628      	mov	r0, r5
 800743c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007440:	f000 b8dc 	b.w	80075fc <__malloc_unlock>
 8007444:	42a3      	cmp	r3, r4
 8007446:	d908      	bls.n	800745a <_free_r+0x42>
 8007448:	6820      	ldr	r0, [r4, #0]
 800744a:	1821      	adds	r1, r4, r0
 800744c:	428b      	cmp	r3, r1
 800744e:	bf01      	itttt	eq
 8007450:	6819      	ldreq	r1, [r3, #0]
 8007452:	685b      	ldreq	r3, [r3, #4]
 8007454:	1809      	addeq	r1, r1, r0
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	e7ed      	b.n	8007436 <_free_r+0x1e>
 800745a:	461a      	mov	r2, r3
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	b10b      	cbz	r3, 8007464 <_free_r+0x4c>
 8007460:	42a3      	cmp	r3, r4
 8007462:	d9fa      	bls.n	800745a <_free_r+0x42>
 8007464:	6811      	ldr	r1, [r2, #0]
 8007466:	1850      	adds	r0, r2, r1
 8007468:	42a0      	cmp	r0, r4
 800746a:	d10b      	bne.n	8007484 <_free_r+0x6c>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	4401      	add	r1, r0
 8007470:	1850      	adds	r0, r2, r1
 8007472:	4283      	cmp	r3, r0
 8007474:	6011      	str	r1, [r2, #0]
 8007476:	d1e0      	bne.n	800743a <_free_r+0x22>
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	6053      	str	r3, [r2, #4]
 800747e:	4408      	add	r0, r1
 8007480:	6010      	str	r0, [r2, #0]
 8007482:	e7da      	b.n	800743a <_free_r+0x22>
 8007484:	d902      	bls.n	800748c <_free_r+0x74>
 8007486:	230c      	movs	r3, #12
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	e7d6      	b.n	800743a <_free_r+0x22>
 800748c:	6820      	ldr	r0, [r4, #0]
 800748e:	1821      	adds	r1, r4, r0
 8007490:	428b      	cmp	r3, r1
 8007492:	bf04      	itt	eq
 8007494:	6819      	ldreq	r1, [r3, #0]
 8007496:	685b      	ldreq	r3, [r3, #4]
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	bf04      	itt	eq
 800749c:	1809      	addeq	r1, r1, r0
 800749e:	6021      	streq	r1, [r4, #0]
 80074a0:	6054      	str	r4, [r2, #4]
 80074a2:	e7ca      	b.n	800743a <_free_r+0x22>
 80074a4:	bd38      	pop	{r3, r4, r5, pc}
 80074a6:	bf00      	nop
 80074a8:	20019aa0 	.word	0x20019aa0

080074ac <sbrk_aligned>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	4e0f      	ldr	r6, [pc, #60]	@ (80074ec <sbrk_aligned+0x40>)
 80074b0:	460c      	mov	r4, r1
 80074b2:	6831      	ldr	r1, [r6, #0]
 80074b4:	4605      	mov	r5, r0
 80074b6:	b911      	cbnz	r1, 80074be <sbrk_aligned+0x12>
 80074b8:	f000 fba6 	bl	8007c08 <_sbrk_r>
 80074bc:	6030      	str	r0, [r6, #0]
 80074be:	4621      	mov	r1, r4
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 fba1 	bl	8007c08 <_sbrk_r>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d103      	bne.n	80074d2 <sbrk_aligned+0x26>
 80074ca:	f04f 34ff 	mov.w	r4, #4294967295
 80074ce:	4620      	mov	r0, r4
 80074d0:	bd70      	pop	{r4, r5, r6, pc}
 80074d2:	1cc4      	adds	r4, r0, #3
 80074d4:	f024 0403 	bic.w	r4, r4, #3
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d0f8      	beq.n	80074ce <sbrk_aligned+0x22>
 80074dc:	1a21      	subs	r1, r4, r0
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fb92 	bl	8007c08 <_sbrk_r>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d1f2      	bne.n	80074ce <sbrk_aligned+0x22>
 80074e8:	e7ef      	b.n	80074ca <sbrk_aligned+0x1e>
 80074ea:	bf00      	nop
 80074ec:	20019a9c 	.word	0x20019a9c

080074f0 <_malloc_r>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	1ccd      	adds	r5, r1, #3
 80074f6:	f025 0503 	bic.w	r5, r5, #3
 80074fa:	3508      	adds	r5, #8
 80074fc:	2d0c      	cmp	r5, #12
 80074fe:	bf38      	it	cc
 8007500:	250c      	movcc	r5, #12
 8007502:	2d00      	cmp	r5, #0
 8007504:	4606      	mov	r6, r0
 8007506:	db01      	blt.n	800750c <_malloc_r+0x1c>
 8007508:	42a9      	cmp	r1, r5
 800750a:	d904      	bls.n	8007516 <_malloc_r+0x26>
 800750c:	230c      	movs	r3, #12
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	2000      	movs	r0, #0
 8007512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075ec <_malloc_r+0xfc>
 800751a:	f000 f869 	bl	80075f0 <__malloc_lock>
 800751e:	f8d8 3000 	ldr.w	r3, [r8]
 8007522:	461c      	mov	r4, r3
 8007524:	bb44      	cbnz	r4, 8007578 <_malloc_r+0x88>
 8007526:	4629      	mov	r1, r5
 8007528:	4630      	mov	r0, r6
 800752a:	f7ff ffbf 	bl	80074ac <sbrk_aligned>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	4604      	mov	r4, r0
 8007532:	d158      	bne.n	80075e6 <_malloc_r+0xf6>
 8007534:	f8d8 4000 	ldr.w	r4, [r8]
 8007538:	4627      	mov	r7, r4
 800753a:	2f00      	cmp	r7, #0
 800753c:	d143      	bne.n	80075c6 <_malloc_r+0xd6>
 800753e:	2c00      	cmp	r4, #0
 8007540:	d04b      	beq.n	80075da <_malloc_r+0xea>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	4639      	mov	r1, r7
 8007546:	4630      	mov	r0, r6
 8007548:	eb04 0903 	add.w	r9, r4, r3
 800754c:	f000 fb5c 	bl	8007c08 <_sbrk_r>
 8007550:	4581      	cmp	r9, r0
 8007552:	d142      	bne.n	80075da <_malloc_r+0xea>
 8007554:	6821      	ldr	r1, [r4, #0]
 8007556:	1a6d      	subs	r5, r5, r1
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ffa6 	bl	80074ac <sbrk_aligned>
 8007560:	3001      	adds	r0, #1
 8007562:	d03a      	beq.n	80075da <_malloc_r+0xea>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	442b      	add	r3, r5
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	f8d8 3000 	ldr.w	r3, [r8]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	bb62      	cbnz	r2, 80075cc <_malloc_r+0xdc>
 8007572:	f8c8 7000 	str.w	r7, [r8]
 8007576:	e00f      	b.n	8007598 <_malloc_r+0xa8>
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	1b52      	subs	r2, r2, r5
 800757c:	d420      	bmi.n	80075c0 <_malloc_r+0xd0>
 800757e:	2a0b      	cmp	r2, #11
 8007580:	d917      	bls.n	80075b2 <_malloc_r+0xc2>
 8007582:	1961      	adds	r1, r4, r5
 8007584:	42a3      	cmp	r3, r4
 8007586:	6025      	str	r5, [r4, #0]
 8007588:	bf18      	it	ne
 800758a:	6059      	strne	r1, [r3, #4]
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	bf08      	it	eq
 8007590:	f8c8 1000 	streq.w	r1, [r8]
 8007594:	5162      	str	r2, [r4, r5]
 8007596:	604b      	str	r3, [r1, #4]
 8007598:	4630      	mov	r0, r6
 800759a:	f000 f82f 	bl	80075fc <__malloc_unlock>
 800759e:	f104 000b 	add.w	r0, r4, #11
 80075a2:	1d23      	adds	r3, r4, #4
 80075a4:	f020 0007 	bic.w	r0, r0, #7
 80075a8:	1ac2      	subs	r2, r0, r3
 80075aa:	bf1c      	itt	ne
 80075ac:	1a1b      	subne	r3, r3, r0
 80075ae:	50a3      	strne	r3, [r4, r2]
 80075b0:	e7af      	b.n	8007512 <_malloc_r+0x22>
 80075b2:	6862      	ldr	r2, [r4, #4]
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	bf0c      	ite	eq
 80075b8:	f8c8 2000 	streq.w	r2, [r8]
 80075bc:	605a      	strne	r2, [r3, #4]
 80075be:	e7eb      	b.n	8007598 <_malloc_r+0xa8>
 80075c0:	4623      	mov	r3, r4
 80075c2:	6864      	ldr	r4, [r4, #4]
 80075c4:	e7ae      	b.n	8007524 <_malloc_r+0x34>
 80075c6:	463c      	mov	r4, r7
 80075c8:	687f      	ldr	r7, [r7, #4]
 80075ca:	e7b6      	b.n	800753a <_malloc_r+0x4a>
 80075cc:	461a      	mov	r2, r3
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	d1fb      	bne.n	80075cc <_malloc_r+0xdc>
 80075d4:	2300      	movs	r3, #0
 80075d6:	6053      	str	r3, [r2, #4]
 80075d8:	e7de      	b.n	8007598 <_malloc_r+0xa8>
 80075da:	230c      	movs	r3, #12
 80075dc:	6033      	str	r3, [r6, #0]
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 f80c 	bl	80075fc <__malloc_unlock>
 80075e4:	e794      	b.n	8007510 <_malloc_r+0x20>
 80075e6:	6005      	str	r5, [r0, #0]
 80075e8:	e7d6      	b.n	8007598 <_malloc_r+0xa8>
 80075ea:	bf00      	nop
 80075ec:	20019aa0 	.word	0x20019aa0

080075f0 <__malloc_lock>:
 80075f0:	4801      	ldr	r0, [pc, #4]	@ (80075f8 <__malloc_lock+0x8>)
 80075f2:	f7ff bf01 	b.w	80073f8 <__retarget_lock_acquire_recursive>
 80075f6:	bf00      	nop
 80075f8:	20019a98 	.word	0x20019a98

080075fc <__malloc_unlock>:
 80075fc:	4801      	ldr	r0, [pc, #4]	@ (8007604 <__malloc_unlock+0x8>)
 80075fe:	f7ff befc 	b.w	80073fa <__retarget_lock_release_recursive>
 8007602:	bf00      	nop
 8007604:	20019a98 	.word	0x20019a98

08007608 <__ssputs_r>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	688e      	ldr	r6, [r1, #8]
 800760e:	461f      	mov	r7, r3
 8007610:	42be      	cmp	r6, r7
 8007612:	680b      	ldr	r3, [r1, #0]
 8007614:	4682      	mov	sl, r0
 8007616:	460c      	mov	r4, r1
 8007618:	4690      	mov	r8, r2
 800761a:	d82d      	bhi.n	8007678 <__ssputs_r+0x70>
 800761c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007620:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007624:	d026      	beq.n	8007674 <__ssputs_r+0x6c>
 8007626:	6965      	ldr	r5, [r4, #20]
 8007628:	6909      	ldr	r1, [r1, #16]
 800762a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800762e:	eba3 0901 	sub.w	r9, r3, r1
 8007632:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007636:	1c7b      	adds	r3, r7, #1
 8007638:	444b      	add	r3, r9
 800763a:	106d      	asrs	r5, r5, #1
 800763c:	429d      	cmp	r5, r3
 800763e:	bf38      	it	cc
 8007640:	461d      	movcc	r5, r3
 8007642:	0553      	lsls	r3, r2, #21
 8007644:	d527      	bpl.n	8007696 <__ssputs_r+0x8e>
 8007646:	4629      	mov	r1, r5
 8007648:	f7ff ff52 	bl	80074f0 <_malloc_r>
 800764c:	4606      	mov	r6, r0
 800764e:	b360      	cbz	r0, 80076aa <__ssputs_r+0xa2>
 8007650:	6921      	ldr	r1, [r4, #16]
 8007652:	464a      	mov	r2, r9
 8007654:	f7ff fed2 	bl	80073fc <memcpy>
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800765e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	6126      	str	r6, [r4, #16]
 8007666:	6165      	str	r5, [r4, #20]
 8007668:	444e      	add	r6, r9
 800766a:	eba5 0509 	sub.w	r5, r5, r9
 800766e:	6026      	str	r6, [r4, #0]
 8007670:	60a5      	str	r5, [r4, #8]
 8007672:	463e      	mov	r6, r7
 8007674:	42be      	cmp	r6, r7
 8007676:	d900      	bls.n	800767a <__ssputs_r+0x72>
 8007678:	463e      	mov	r6, r7
 800767a:	6820      	ldr	r0, [r4, #0]
 800767c:	4632      	mov	r2, r6
 800767e:	4641      	mov	r1, r8
 8007680:	f000 faa8 	bl	8007bd4 <memmove>
 8007684:	68a3      	ldr	r3, [r4, #8]
 8007686:	1b9b      	subs	r3, r3, r6
 8007688:	60a3      	str	r3, [r4, #8]
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	4433      	add	r3, r6
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	2000      	movs	r0, #0
 8007692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007696:	462a      	mov	r2, r5
 8007698:	f000 fac6 	bl	8007c28 <_realloc_r>
 800769c:	4606      	mov	r6, r0
 800769e:	2800      	cmp	r0, #0
 80076a0:	d1e0      	bne.n	8007664 <__ssputs_r+0x5c>
 80076a2:	6921      	ldr	r1, [r4, #16]
 80076a4:	4650      	mov	r0, sl
 80076a6:	f7ff feb7 	bl	8007418 <_free_r>
 80076aa:	230c      	movs	r3, #12
 80076ac:	f8ca 3000 	str.w	r3, [sl]
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	e7e9      	b.n	8007692 <__ssputs_r+0x8a>
	...

080076c0 <_svfiprintf_r>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	4698      	mov	r8, r3
 80076c6:	898b      	ldrh	r3, [r1, #12]
 80076c8:	061b      	lsls	r3, r3, #24
 80076ca:	b09d      	sub	sp, #116	@ 0x74
 80076cc:	4607      	mov	r7, r0
 80076ce:	460d      	mov	r5, r1
 80076d0:	4614      	mov	r4, r2
 80076d2:	d510      	bpl.n	80076f6 <_svfiprintf_r+0x36>
 80076d4:	690b      	ldr	r3, [r1, #16]
 80076d6:	b973      	cbnz	r3, 80076f6 <_svfiprintf_r+0x36>
 80076d8:	2140      	movs	r1, #64	@ 0x40
 80076da:	f7ff ff09 	bl	80074f0 <_malloc_r>
 80076de:	6028      	str	r0, [r5, #0]
 80076e0:	6128      	str	r0, [r5, #16]
 80076e2:	b930      	cbnz	r0, 80076f2 <_svfiprintf_r+0x32>
 80076e4:	230c      	movs	r3, #12
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	b01d      	add	sp, #116	@ 0x74
 80076ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f2:	2340      	movs	r3, #64	@ 0x40
 80076f4:	616b      	str	r3, [r5, #20]
 80076f6:	2300      	movs	r3, #0
 80076f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076fa:	2320      	movs	r3, #32
 80076fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007700:	f8cd 800c 	str.w	r8, [sp, #12]
 8007704:	2330      	movs	r3, #48	@ 0x30
 8007706:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078a4 <_svfiprintf_r+0x1e4>
 800770a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800770e:	f04f 0901 	mov.w	r9, #1
 8007712:	4623      	mov	r3, r4
 8007714:	469a      	mov	sl, r3
 8007716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800771a:	b10a      	cbz	r2, 8007720 <_svfiprintf_r+0x60>
 800771c:	2a25      	cmp	r2, #37	@ 0x25
 800771e:	d1f9      	bne.n	8007714 <_svfiprintf_r+0x54>
 8007720:	ebba 0b04 	subs.w	fp, sl, r4
 8007724:	d00b      	beq.n	800773e <_svfiprintf_r+0x7e>
 8007726:	465b      	mov	r3, fp
 8007728:	4622      	mov	r2, r4
 800772a:	4629      	mov	r1, r5
 800772c:	4638      	mov	r0, r7
 800772e:	f7ff ff6b 	bl	8007608 <__ssputs_r>
 8007732:	3001      	adds	r0, #1
 8007734:	f000 80a7 	beq.w	8007886 <_svfiprintf_r+0x1c6>
 8007738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800773a:	445a      	add	r2, fp
 800773c:	9209      	str	r2, [sp, #36]	@ 0x24
 800773e:	f89a 3000 	ldrb.w	r3, [sl]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 809f 	beq.w	8007886 <_svfiprintf_r+0x1c6>
 8007748:	2300      	movs	r3, #0
 800774a:	f04f 32ff 	mov.w	r2, #4294967295
 800774e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007752:	f10a 0a01 	add.w	sl, sl, #1
 8007756:	9304      	str	r3, [sp, #16]
 8007758:	9307      	str	r3, [sp, #28]
 800775a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800775e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007760:	4654      	mov	r4, sl
 8007762:	2205      	movs	r2, #5
 8007764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007768:	484e      	ldr	r0, [pc, #312]	@ (80078a4 <_svfiprintf_r+0x1e4>)
 800776a:	f7f8 fd81 	bl	8000270 <memchr>
 800776e:	9a04      	ldr	r2, [sp, #16]
 8007770:	b9d8      	cbnz	r0, 80077aa <_svfiprintf_r+0xea>
 8007772:	06d0      	lsls	r0, r2, #27
 8007774:	bf44      	itt	mi
 8007776:	2320      	movmi	r3, #32
 8007778:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800777c:	0711      	lsls	r1, r2, #28
 800777e:	bf44      	itt	mi
 8007780:	232b      	movmi	r3, #43	@ 0x2b
 8007782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007786:	f89a 3000 	ldrb.w	r3, [sl]
 800778a:	2b2a      	cmp	r3, #42	@ 0x2a
 800778c:	d015      	beq.n	80077ba <_svfiprintf_r+0xfa>
 800778e:	9a07      	ldr	r2, [sp, #28]
 8007790:	4654      	mov	r4, sl
 8007792:	2000      	movs	r0, #0
 8007794:	f04f 0c0a 	mov.w	ip, #10
 8007798:	4621      	mov	r1, r4
 800779a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800779e:	3b30      	subs	r3, #48	@ 0x30
 80077a0:	2b09      	cmp	r3, #9
 80077a2:	d94b      	bls.n	800783c <_svfiprintf_r+0x17c>
 80077a4:	b1b0      	cbz	r0, 80077d4 <_svfiprintf_r+0x114>
 80077a6:	9207      	str	r2, [sp, #28]
 80077a8:	e014      	b.n	80077d4 <_svfiprintf_r+0x114>
 80077aa:	eba0 0308 	sub.w	r3, r0, r8
 80077ae:	fa09 f303 	lsl.w	r3, r9, r3
 80077b2:	4313      	orrs	r3, r2
 80077b4:	9304      	str	r3, [sp, #16]
 80077b6:	46a2      	mov	sl, r4
 80077b8:	e7d2      	b.n	8007760 <_svfiprintf_r+0xa0>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	9103      	str	r1, [sp, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfbb      	ittet	lt
 80077c6:	425b      	neglt	r3, r3
 80077c8:	f042 0202 	orrlt.w	r2, r2, #2
 80077cc:	9307      	strge	r3, [sp, #28]
 80077ce:	9307      	strlt	r3, [sp, #28]
 80077d0:	bfb8      	it	lt
 80077d2:	9204      	strlt	r2, [sp, #16]
 80077d4:	7823      	ldrb	r3, [r4, #0]
 80077d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80077d8:	d10a      	bne.n	80077f0 <_svfiprintf_r+0x130>
 80077da:	7863      	ldrb	r3, [r4, #1]
 80077dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077de:	d132      	bne.n	8007846 <_svfiprintf_r+0x186>
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	1d1a      	adds	r2, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	9203      	str	r2, [sp, #12]
 80077e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077ec:	3402      	adds	r4, #2
 80077ee:	9305      	str	r3, [sp, #20]
 80077f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80078b4 <_svfiprintf_r+0x1f4>
 80077f4:	7821      	ldrb	r1, [r4, #0]
 80077f6:	2203      	movs	r2, #3
 80077f8:	4650      	mov	r0, sl
 80077fa:	f7f8 fd39 	bl	8000270 <memchr>
 80077fe:	b138      	cbz	r0, 8007810 <_svfiprintf_r+0x150>
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	eba0 000a 	sub.w	r0, r0, sl
 8007806:	2240      	movs	r2, #64	@ 0x40
 8007808:	4082      	lsls	r2, r0
 800780a:	4313      	orrs	r3, r2
 800780c:	3401      	adds	r4, #1
 800780e:	9304      	str	r3, [sp, #16]
 8007810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007814:	4824      	ldr	r0, [pc, #144]	@ (80078a8 <_svfiprintf_r+0x1e8>)
 8007816:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800781a:	2206      	movs	r2, #6
 800781c:	f7f8 fd28 	bl	8000270 <memchr>
 8007820:	2800      	cmp	r0, #0
 8007822:	d036      	beq.n	8007892 <_svfiprintf_r+0x1d2>
 8007824:	4b21      	ldr	r3, [pc, #132]	@ (80078ac <_svfiprintf_r+0x1ec>)
 8007826:	bb1b      	cbnz	r3, 8007870 <_svfiprintf_r+0x1b0>
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	3307      	adds	r3, #7
 800782c:	f023 0307 	bic.w	r3, r3, #7
 8007830:	3308      	adds	r3, #8
 8007832:	9303      	str	r3, [sp, #12]
 8007834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007836:	4433      	add	r3, r6
 8007838:	9309      	str	r3, [sp, #36]	@ 0x24
 800783a:	e76a      	b.n	8007712 <_svfiprintf_r+0x52>
 800783c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007840:	460c      	mov	r4, r1
 8007842:	2001      	movs	r0, #1
 8007844:	e7a8      	b.n	8007798 <_svfiprintf_r+0xd8>
 8007846:	2300      	movs	r3, #0
 8007848:	3401      	adds	r4, #1
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	4619      	mov	r1, r3
 800784e:	f04f 0c0a 	mov.w	ip, #10
 8007852:	4620      	mov	r0, r4
 8007854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007858:	3a30      	subs	r2, #48	@ 0x30
 800785a:	2a09      	cmp	r2, #9
 800785c:	d903      	bls.n	8007866 <_svfiprintf_r+0x1a6>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0c6      	beq.n	80077f0 <_svfiprintf_r+0x130>
 8007862:	9105      	str	r1, [sp, #20]
 8007864:	e7c4      	b.n	80077f0 <_svfiprintf_r+0x130>
 8007866:	fb0c 2101 	mla	r1, ip, r1, r2
 800786a:	4604      	mov	r4, r0
 800786c:	2301      	movs	r3, #1
 800786e:	e7f0      	b.n	8007852 <_svfiprintf_r+0x192>
 8007870:	ab03      	add	r3, sp, #12
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	462a      	mov	r2, r5
 8007876:	4b0e      	ldr	r3, [pc, #56]	@ (80078b0 <_svfiprintf_r+0x1f0>)
 8007878:	a904      	add	r1, sp, #16
 800787a:	4638      	mov	r0, r7
 800787c:	f3af 8000 	nop.w
 8007880:	1c42      	adds	r2, r0, #1
 8007882:	4606      	mov	r6, r0
 8007884:	d1d6      	bne.n	8007834 <_svfiprintf_r+0x174>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	065b      	lsls	r3, r3, #25
 800788a:	f53f af2d 	bmi.w	80076e8 <_svfiprintf_r+0x28>
 800788e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007890:	e72c      	b.n	80076ec <_svfiprintf_r+0x2c>
 8007892:	ab03      	add	r3, sp, #12
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	462a      	mov	r2, r5
 8007898:	4b05      	ldr	r3, [pc, #20]	@ (80078b0 <_svfiprintf_r+0x1f0>)
 800789a:	a904      	add	r1, sp, #16
 800789c:	4638      	mov	r0, r7
 800789e:	f000 f879 	bl	8007994 <_printf_i>
 80078a2:	e7ed      	b.n	8007880 <_svfiprintf_r+0x1c0>
 80078a4:	08007e48 	.word	0x08007e48
 80078a8:	08007e52 	.word	0x08007e52
 80078ac:	00000000 	.word	0x00000000
 80078b0:	08007609 	.word	0x08007609
 80078b4:	08007e4e 	.word	0x08007e4e

080078b8 <_printf_common>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	4616      	mov	r6, r2
 80078be:	4698      	mov	r8, r3
 80078c0:	688a      	ldr	r2, [r1, #8]
 80078c2:	690b      	ldr	r3, [r1, #16]
 80078c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078c8:	4293      	cmp	r3, r2
 80078ca:	bfb8      	it	lt
 80078cc:	4613      	movlt	r3, r2
 80078ce:	6033      	str	r3, [r6, #0]
 80078d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078d4:	4607      	mov	r7, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	b10a      	cbz	r2, 80078de <_printf_common+0x26>
 80078da:	3301      	adds	r3, #1
 80078dc:	6033      	str	r3, [r6, #0]
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	0699      	lsls	r1, r3, #26
 80078e2:	bf42      	ittt	mi
 80078e4:	6833      	ldrmi	r3, [r6, #0]
 80078e6:	3302      	addmi	r3, #2
 80078e8:	6033      	strmi	r3, [r6, #0]
 80078ea:	6825      	ldr	r5, [r4, #0]
 80078ec:	f015 0506 	ands.w	r5, r5, #6
 80078f0:	d106      	bne.n	8007900 <_printf_common+0x48>
 80078f2:	f104 0a19 	add.w	sl, r4, #25
 80078f6:	68e3      	ldr	r3, [r4, #12]
 80078f8:	6832      	ldr	r2, [r6, #0]
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	dc26      	bgt.n	800794e <_printf_common+0x96>
 8007900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007904:	6822      	ldr	r2, [r4, #0]
 8007906:	3b00      	subs	r3, #0
 8007908:	bf18      	it	ne
 800790a:	2301      	movne	r3, #1
 800790c:	0692      	lsls	r2, r2, #26
 800790e:	d42b      	bmi.n	8007968 <_printf_common+0xb0>
 8007910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007914:	4641      	mov	r1, r8
 8007916:	4638      	mov	r0, r7
 8007918:	47c8      	blx	r9
 800791a:	3001      	adds	r0, #1
 800791c:	d01e      	beq.n	800795c <_printf_common+0xa4>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	6922      	ldr	r2, [r4, #16]
 8007922:	f003 0306 	and.w	r3, r3, #6
 8007926:	2b04      	cmp	r3, #4
 8007928:	bf02      	ittt	eq
 800792a:	68e5      	ldreq	r5, [r4, #12]
 800792c:	6833      	ldreq	r3, [r6, #0]
 800792e:	1aed      	subeq	r5, r5, r3
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	bf0c      	ite	eq
 8007934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007938:	2500      	movne	r5, #0
 800793a:	4293      	cmp	r3, r2
 800793c:	bfc4      	itt	gt
 800793e:	1a9b      	subgt	r3, r3, r2
 8007940:	18ed      	addgt	r5, r5, r3
 8007942:	2600      	movs	r6, #0
 8007944:	341a      	adds	r4, #26
 8007946:	42b5      	cmp	r5, r6
 8007948:	d11a      	bne.n	8007980 <_printf_common+0xc8>
 800794a:	2000      	movs	r0, #0
 800794c:	e008      	b.n	8007960 <_printf_common+0xa8>
 800794e:	2301      	movs	r3, #1
 8007950:	4652      	mov	r2, sl
 8007952:	4641      	mov	r1, r8
 8007954:	4638      	mov	r0, r7
 8007956:	47c8      	blx	r9
 8007958:	3001      	adds	r0, #1
 800795a:	d103      	bne.n	8007964 <_printf_common+0xac>
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007964:	3501      	adds	r5, #1
 8007966:	e7c6      	b.n	80078f6 <_printf_common+0x3e>
 8007968:	18e1      	adds	r1, r4, r3
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	2030      	movs	r0, #48	@ 0x30
 800796e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007972:	4422      	add	r2, r4
 8007974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800797c:	3302      	adds	r3, #2
 800797e:	e7c7      	b.n	8007910 <_printf_common+0x58>
 8007980:	2301      	movs	r3, #1
 8007982:	4622      	mov	r2, r4
 8007984:	4641      	mov	r1, r8
 8007986:	4638      	mov	r0, r7
 8007988:	47c8      	blx	r9
 800798a:	3001      	adds	r0, #1
 800798c:	d0e6      	beq.n	800795c <_printf_common+0xa4>
 800798e:	3601      	adds	r6, #1
 8007990:	e7d9      	b.n	8007946 <_printf_common+0x8e>
	...

08007994 <_printf_i>:
 8007994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	7e0f      	ldrb	r7, [r1, #24]
 800799a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800799c:	2f78      	cmp	r7, #120	@ 0x78
 800799e:	4691      	mov	r9, r2
 80079a0:	4680      	mov	r8, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	469a      	mov	sl, r3
 80079a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079aa:	d807      	bhi.n	80079bc <_printf_i+0x28>
 80079ac:	2f62      	cmp	r7, #98	@ 0x62
 80079ae:	d80a      	bhi.n	80079c6 <_printf_i+0x32>
 80079b0:	2f00      	cmp	r7, #0
 80079b2:	f000 80d2 	beq.w	8007b5a <_printf_i+0x1c6>
 80079b6:	2f58      	cmp	r7, #88	@ 0x58
 80079b8:	f000 80b9 	beq.w	8007b2e <_printf_i+0x19a>
 80079bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079c4:	e03a      	b.n	8007a3c <_printf_i+0xa8>
 80079c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079ca:	2b15      	cmp	r3, #21
 80079cc:	d8f6      	bhi.n	80079bc <_printf_i+0x28>
 80079ce:	a101      	add	r1, pc, #4	@ (adr r1, 80079d4 <_printf_i+0x40>)
 80079d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a41 	.word	0x08007a41
 80079dc:	080079bd 	.word	0x080079bd
 80079e0:	080079bd 	.word	0x080079bd
 80079e4:	080079bd 	.word	0x080079bd
 80079e8:	080079bd 	.word	0x080079bd
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	080079bd 	.word	0x080079bd
 80079f4:	080079bd 	.word	0x080079bd
 80079f8:	080079bd 	.word	0x080079bd
 80079fc:	080079bd 	.word	0x080079bd
 8007a00:	08007b41 	.word	0x08007b41
 8007a04:	08007a6b 	.word	0x08007a6b
 8007a08:	08007afb 	.word	0x08007afb
 8007a0c:	080079bd 	.word	0x080079bd
 8007a10:	080079bd 	.word	0x080079bd
 8007a14:	08007b63 	.word	0x08007b63
 8007a18:	080079bd 	.word	0x080079bd
 8007a1c:	08007a6b 	.word	0x08007a6b
 8007a20:	080079bd 	.word	0x080079bd
 8007a24:	080079bd 	.word	0x080079bd
 8007a28:	08007b03 	.word	0x08007b03
 8007a2c:	6833      	ldr	r3, [r6, #0]
 8007a2e:	1d1a      	adds	r2, r3, #4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6032      	str	r2, [r6, #0]
 8007a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e09d      	b.n	8007b7c <_printf_i+0x1e8>
 8007a40:	6833      	ldr	r3, [r6, #0]
 8007a42:	6820      	ldr	r0, [r4, #0]
 8007a44:	1d19      	adds	r1, r3, #4
 8007a46:	6031      	str	r1, [r6, #0]
 8007a48:	0606      	lsls	r6, r0, #24
 8007a4a:	d501      	bpl.n	8007a50 <_printf_i+0xbc>
 8007a4c:	681d      	ldr	r5, [r3, #0]
 8007a4e:	e003      	b.n	8007a58 <_printf_i+0xc4>
 8007a50:	0645      	lsls	r5, r0, #25
 8007a52:	d5fb      	bpl.n	8007a4c <_printf_i+0xb8>
 8007a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	da03      	bge.n	8007a64 <_printf_i+0xd0>
 8007a5c:	232d      	movs	r3, #45	@ 0x2d
 8007a5e:	426d      	negs	r5, r5
 8007a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a64:	4859      	ldr	r0, [pc, #356]	@ (8007bcc <_printf_i+0x238>)
 8007a66:	230a      	movs	r3, #10
 8007a68:	e011      	b.n	8007a8e <_printf_i+0xfa>
 8007a6a:	6821      	ldr	r1, [r4, #0]
 8007a6c:	6833      	ldr	r3, [r6, #0]
 8007a6e:	0608      	lsls	r0, r1, #24
 8007a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a74:	d402      	bmi.n	8007a7c <_printf_i+0xe8>
 8007a76:	0649      	lsls	r1, r1, #25
 8007a78:	bf48      	it	mi
 8007a7a:	b2ad      	uxthmi	r5, r5
 8007a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a7e:	4853      	ldr	r0, [pc, #332]	@ (8007bcc <_printf_i+0x238>)
 8007a80:	6033      	str	r3, [r6, #0]
 8007a82:	bf14      	ite	ne
 8007a84:	230a      	movne	r3, #10
 8007a86:	2308      	moveq	r3, #8
 8007a88:	2100      	movs	r1, #0
 8007a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a8e:	6866      	ldr	r6, [r4, #4]
 8007a90:	60a6      	str	r6, [r4, #8]
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	bfa2      	ittt	ge
 8007a96:	6821      	ldrge	r1, [r4, #0]
 8007a98:	f021 0104 	bicge.w	r1, r1, #4
 8007a9c:	6021      	strge	r1, [r4, #0]
 8007a9e:	b90d      	cbnz	r5, 8007aa4 <_printf_i+0x110>
 8007aa0:	2e00      	cmp	r6, #0
 8007aa2:	d04b      	beq.n	8007b3c <_printf_i+0x1a8>
 8007aa4:	4616      	mov	r6, r2
 8007aa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007aaa:	fb03 5711 	mls	r7, r3, r1, r5
 8007aae:	5dc7      	ldrb	r7, [r0, r7]
 8007ab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ab4:	462f      	mov	r7, r5
 8007ab6:	42bb      	cmp	r3, r7
 8007ab8:	460d      	mov	r5, r1
 8007aba:	d9f4      	bls.n	8007aa6 <_printf_i+0x112>
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d10b      	bne.n	8007ad8 <_printf_i+0x144>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	07df      	lsls	r7, r3, #31
 8007ac4:	d508      	bpl.n	8007ad8 <_printf_i+0x144>
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	6861      	ldr	r1, [r4, #4]
 8007aca:	4299      	cmp	r1, r3
 8007acc:	bfde      	ittt	le
 8007ace:	2330      	movle	r3, #48	@ 0x30
 8007ad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ad4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ad8:	1b92      	subs	r2, r2, r6
 8007ada:	6122      	str	r2, [r4, #16]
 8007adc:	f8cd a000 	str.w	sl, [sp]
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	aa03      	add	r2, sp, #12
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f7ff fee6 	bl	80078b8 <_printf_common>
 8007aec:	3001      	adds	r0, #1
 8007aee:	d14a      	bne.n	8007b86 <_printf_i+0x1f2>
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	b004      	add	sp, #16
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	f043 0320 	orr.w	r3, r3, #32
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	4833      	ldr	r0, [pc, #204]	@ (8007bd0 <_printf_i+0x23c>)
 8007b04:	2778      	movs	r7, #120	@ 0x78
 8007b06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	6831      	ldr	r1, [r6, #0]
 8007b0e:	061f      	lsls	r7, r3, #24
 8007b10:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b14:	d402      	bmi.n	8007b1c <_printf_i+0x188>
 8007b16:	065f      	lsls	r7, r3, #25
 8007b18:	bf48      	it	mi
 8007b1a:	b2ad      	uxthmi	r5, r5
 8007b1c:	6031      	str	r1, [r6, #0]
 8007b1e:	07d9      	lsls	r1, r3, #31
 8007b20:	bf44      	itt	mi
 8007b22:	f043 0320 	orrmi.w	r3, r3, #32
 8007b26:	6023      	strmi	r3, [r4, #0]
 8007b28:	b11d      	cbz	r5, 8007b32 <_printf_i+0x19e>
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	e7ac      	b.n	8007a88 <_printf_i+0xf4>
 8007b2e:	4827      	ldr	r0, [pc, #156]	@ (8007bcc <_printf_i+0x238>)
 8007b30:	e7e9      	b.n	8007b06 <_printf_i+0x172>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f023 0320 	bic.w	r3, r3, #32
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	e7f6      	b.n	8007b2a <_printf_i+0x196>
 8007b3c:	4616      	mov	r6, r2
 8007b3e:	e7bd      	b.n	8007abc <_printf_i+0x128>
 8007b40:	6833      	ldr	r3, [r6, #0]
 8007b42:	6825      	ldr	r5, [r4, #0]
 8007b44:	6961      	ldr	r1, [r4, #20]
 8007b46:	1d18      	adds	r0, r3, #4
 8007b48:	6030      	str	r0, [r6, #0]
 8007b4a:	062e      	lsls	r6, r5, #24
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	d501      	bpl.n	8007b54 <_printf_i+0x1c0>
 8007b50:	6019      	str	r1, [r3, #0]
 8007b52:	e002      	b.n	8007b5a <_printf_i+0x1c6>
 8007b54:	0668      	lsls	r0, r5, #25
 8007b56:	d5fb      	bpl.n	8007b50 <_printf_i+0x1bc>
 8007b58:	8019      	strh	r1, [r3, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	4616      	mov	r6, r2
 8007b60:	e7bc      	b.n	8007adc <_printf_i+0x148>
 8007b62:	6833      	ldr	r3, [r6, #0]
 8007b64:	1d1a      	adds	r2, r3, #4
 8007b66:	6032      	str	r2, [r6, #0]
 8007b68:	681e      	ldr	r6, [r3, #0]
 8007b6a:	6862      	ldr	r2, [r4, #4]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7f8 fb7e 	bl	8000270 <memchr>
 8007b74:	b108      	cbz	r0, 8007b7a <_printf_i+0x1e6>
 8007b76:	1b80      	subs	r0, r0, r6
 8007b78:	6060      	str	r0, [r4, #4]
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	6123      	str	r3, [r4, #16]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b84:	e7aa      	b.n	8007adc <_printf_i+0x148>
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d0ad      	beq.n	8007af0 <_printf_i+0x15c>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	079b      	lsls	r3, r3, #30
 8007b98:	d413      	bmi.n	8007bc2 <_printf_i+0x22e>
 8007b9a:	68e0      	ldr	r0, [r4, #12]
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	4298      	cmp	r0, r3
 8007ba0:	bfb8      	it	lt
 8007ba2:	4618      	movlt	r0, r3
 8007ba4:	e7a6      	b.n	8007af4 <_printf_i+0x160>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4632      	mov	r2, r6
 8007baa:	4649      	mov	r1, r9
 8007bac:	4640      	mov	r0, r8
 8007bae:	47d0      	blx	sl
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d09d      	beq.n	8007af0 <_printf_i+0x15c>
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	68e3      	ldr	r3, [r4, #12]
 8007bb8:	9903      	ldr	r1, [sp, #12]
 8007bba:	1a5b      	subs	r3, r3, r1
 8007bbc:	42ab      	cmp	r3, r5
 8007bbe:	dcf2      	bgt.n	8007ba6 <_printf_i+0x212>
 8007bc0:	e7eb      	b.n	8007b9a <_printf_i+0x206>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	f104 0619 	add.w	r6, r4, #25
 8007bc8:	e7f5      	b.n	8007bb6 <_printf_i+0x222>
 8007bca:	bf00      	nop
 8007bcc:	08007e59 	.word	0x08007e59
 8007bd0:	08007e6a 	.word	0x08007e6a

08007bd4 <memmove>:
 8007bd4:	4288      	cmp	r0, r1
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	eb01 0402 	add.w	r4, r1, r2
 8007bdc:	d902      	bls.n	8007be4 <memmove+0x10>
 8007bde:	4284      	cmp	r4, r0
 8007be0:	4623      	mov	r3, r4
 8007be2:	d807      	bhi.n	8007bf4 <memmove+0x20>
 8007be4:	1e43      	subs	r3, r0, #1
 8007be6:	42a1      	cmp	r1, r4
 8007be8:	d008      	beq.n	8007bfc <memmove+0x28>
 8007bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bf2:	e7f8      	b.n	8007be6 <memmove+0x12>
 8007bf4:	4402      	add	r2, r0
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	428a      	cmp	r2, r1
 8007bfa:	d100      	bne.n	8007bfe <memmove+0x2a>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c06:	e7f7      	b.n	8007bf8 <memmove+0x24>

08007c08 <_sbrk_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d06      	ldr	r5, [pc, #24]	@ (8007c24 <_sbrk_r+0x1c>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	f7f9 f88a 	bl	8000d2c <_sbrk>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_sbrk_r+0x1a>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_sbrk_r+0x1a>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	20019a94 	.word	0x20019a94

08007c28 <_realloc_r>:
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4615      	mov	r5, r2
 8007c30:	460c      	mov	r4, r1
 8007c32:	b921      	cbnz	r1, 8007c3e <_realloc_r+0x16>
 8007c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	4611      	mov	r1, r2
 8007c3a:	f7ff bc59 	b.w	80074f0 <_malloc_r>
 8007c3e:	b92a      	cbnz	r2, 8007c4c <_realloc_r+0x24>
 8007c40:	f7ff fbea 	bl	8007418 <_free_r>
 8007c44:	2400      	movs	r4, #0
 8007c46:	4620      	mov	r0, r4
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	f000 f81a 	bl	8007c84 <_malloc_usable_size_r>
 8007c50:	4285      	cmp	r5, r0
 8007c52:	4606      	mov	r6, r0
 8007c54:	d802      	bhi.n	8007c5c <_realloc_r+0x34>
 8007c56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c5a:	d8f4      	bhi.n	8007c46 <_realloc_r+0x1e>
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f7ff fc46 	bl	80074f0 <_malloc_r>
 8007c64:	4607      	mov	r7, r0
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0ec      	beq.n	8007c44 <_realloc_r+0x1c>
 8007c6a:	42b5      	cmp	r5, r6
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4621      	mov	r1, r4
 8007c70:	bf28      	it	cs
 8007c72:	4632      	movcs	r2, r6
 8007c74:	f7ff fbc2 	bl	80073fc <memcpy>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7ff fbcc 	bl	8007418 <_free_r>
 8007c80:	463c      	mov	r4, r7
 8007c82:	e7e0      	b.n	8007c46 <_realloc_r+0x1e>

08007c84 <_malloc_usable_size_r>:
 8007c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c88:	1f18      	subs	r0, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bfbc      	itt	lt
 8007c8e:	580b      	ldrlt	r3, [r1, r0]
 8007c90:	18c0      	addlt	r0, r0, r3
 8007c92:	4770      	bx	lr

08007c94 <_init>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	bf00      	nop
 8007c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9a:	bc08      	pop	{r3}
 8007c9c:	469e      	mov	lr, r3
 8007c9e:	4770      	bx	lr

08007ca0 <_fini>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	bf00      	nop
 8007ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca6:	bc08      	pop	{r3}
 8007ca8:	469e      	mov	lr, r3
 8007caa:	4770      	bx	lr
