
App_027_Example_9.1_Experimenting_with_Event_Groups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08007ea0  08007ea0  00008ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080cc  080080cc  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  080080cc  080080cc  000090cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d4  080080d4  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d4  080080d4  000090d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080d8  080080d8  000090d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080080dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a018  2**0
                  CONTENTS
 10 .bss          00019918  20000018  20000018  0000a018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019930  20019930  0000a018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192a4  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034de  00000000  00000000  000232ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  000267d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118b  00000000  00000000  00027e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025349  00000000  00000000  00028ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8fd  00000000  00000000  0004e33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb8e2  00000000  00000000  00068c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015451b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ef0  00000000  00000000  00154560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cf  00000000  00000000  0015a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e88 	.word	0x08007e88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08007e88 	.word	0x08007e88

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eb8 	.word	0x20012eb8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fc2f 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f84b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f92b 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f8ff 	bl	8000768 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800056a:	f000 f8af 	bl	80006cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <main+0x84>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a19      	ldr	r2, [pc, #100]	@ (80005d8 <main+0x84>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 800057a:	f005 fea7 	bl	80062cc <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800057e:	f006 fbfd 	bl	8006d7c <SEGGER_SYSVIEW_Start>
  
  /* before an event group can be used, it must first be created */
  xEventGroup = xEventGroupCreate();
 8000582:	f002 fc5b 	bl	8002e3c <xEventGroupCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <main+0x88>)
 800058a:	6013      	str	r3, [r2, #0]

  /* Create the task that will start the TIM3 timeout interrupt. This will only
     run once before being deleted by itself as it won't be needed anymore */
  xTaskCreate( vTim3InterruptEnablingTask, "TIM3 INT start", 1000, NULL, configMAX_PRIORITIES - 1, NULL );
 800058c:	2300      	movs	r3, #0
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2304      	movs	r3, #4
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800059a:	4911      	ldr	r1, [pc, #68]	@ (80005e0 <main+0x8c>)
 800059c:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <main+0x90>)
 800059e:	f003 fb5c 	bl	8003c5a <xTaskCreate>

  /* create the task that waits for event bits to get set in the event group */
  xTaskCreate( vEventBitReadingTask, "Bit Reader", 1000, NULL, 2, NULL );
 80005a2:	2300      	movs	r3, #0
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2302      	movs	r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005b0:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <main+0x94>)
 80005b2:	480e      	ldr	r0, [pc, #56]	@ (80005ec <main+0x98>)
 80005b4:	f003 fb51 	bl	8003c5a <xTaskCreate>

  /* create the task that sets event bits in the event group */
  xTaskCreate( vEventBitSettingTask, "Bit Setter", 1000, NULL, 1, NULL );
 80005b8:	2300      	movs	r3, #0
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2301      	movs	r3, #1
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005c6:	490a      	ldr	r1, [pc, #40]	@ (80005f0 <main+0x9c>)
 80005c8:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <main+0xa0>)
 80005ca:	f003 fb46 	bl	8003c5a <xTaskCreate>

  /* start the scheduler */
  vTaskStartScheduler();
 80005ce:	f003 fdf5 	bl	80041bc <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80005d2:	bf00      	nop
 80005d4:	e7fd      	b.n	80005d2 <main+0x7e>
 80005d6:	bf00      	nop
 80005d8:	e0001000 	.word	0xe0001000
 80005dc:	200000c4 	.word	0x200000c4
 80005e0:	08007ea0 	.word	0x08007ea0
 80005e4:	08000919 	.word	0x08000919
 80005e8:	08007eb0 	.word	0x08007eb0
 80005ec:	0800098d 	.word	0x0800098d
 80005f0:	08007ebc 	.word	0x08007ebc
 80005f4:	08000939 	.word	0x08000939

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 fc03 	bl	8007e12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	@ (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800066c:	2332      	movs	r3, #50	@ 0x32
 800066e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000670:	2304      	movs	r3, #4
 8000672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fe91 	bl	80013a4 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 fa12 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f8f2 	bl	8001894 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 f9fb 	bl	8000ab0 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	@ 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_TIM3_Init+0x94>)
 80006ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000764 <MX_TIM3_Init+0x98>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12499;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <MX_TIM3_Init+0x94>)
 80006f0:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 80006f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_TIM3_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_TIM3_Init+0x94>)
 80006fe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_TIM3_Init+0x94>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_TIM3_Init+0x94>)
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000710:	4813      	ldr	r0, [pc, #76]	@ (8000760 <MX_TIM3_Init+0x94>)
 8000712:	f001 fb11 	bl	8001d38 <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800071c:	f000 f9c8 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_TIM3_Init+0x94>)
 800072e:	f001 fcb3 	bl	8002098 <HAL_TIM_ConfigClockSource>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 f9ba 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_TIM3_Init+0x94>)
 800074a:	f001 fedb 	bl	8002504 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000754:	f000 f9ac 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000034 	.word	0x20000034
 8000764:	40000400 	.word	0x40000400

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 ff40 	bl	8002624 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f981 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b3b      	ldr	r3, [pc, #236]	@ (80008c4 <MX_GPIO_Init+0x108>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a3a      	ldr	r2, [pc, #232]	@ (80008c4 <MX_GPIO_Init+0x108>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b38      	ldr	r3, [pc, #224]	@ (80008c4 <MX_GPIO_Init+0x108>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <MX_GPIO_Init+0x108>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a33      	ldr	r2, [pc, #204]	@ (80008c4 <MX_GPIO_Init+0x108>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <MX_GPIO_Init+0x108>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <MX_GPIO_Init+0x108>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a2c      	ldr	r2, [pc, #176]	@ (80008c4 <MX_GPIO_Init+0x108>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <MX_GPIO_Init+0x108>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_GPIO_Init+0x108>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <MX_GPIO_Init+0x108>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <MX_GPIO_Init+0x108>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000848:	481f      	ldr	r0, [pc, #124]	@ (80008c8 <MX_GPIO_Init+0x10c>)
 800084a:	f000 fd77 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084e:	2301      	movs	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	481a      	ldr	r0, [pc, #104]	@ (80008cc <MX_GPIO_Init+0x110>)
 8000862:	f000 fbcf 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000866:	2304      	movs	r3, #4
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <MX_GPIO_Init+0x114>)
 800087a:	f000 fbc3 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800087e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_GPIO_Init+0x10c>)
 8000898:	f000 fbb4 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ac:	2306      	movs	r3, #6
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <MX_GPIO_Init+0x118>)
 80008b8:	f000 fba4 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020c00 	.word	0x40020c00
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020800 	.word	0x40020800

080008d8 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	e00b      	b.n	8000900 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	18d1      	adds	r1, r2, r3
 80008ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008f2:	2201      	movs	r2, #1
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f001 fee5 	bl	80026c4 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	4413      	add	r3, r2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1ed      	bne.n	80008e8 <UART2_Print_Text+0x10>
  }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <vTim3InterruptEnablingTask>:

static void vTim3InterruptEnablingTask( void *pvParameter )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Start the TIM3 in interrupt mode.
     This is done in a task after the scheduler is started because otherwise
     the TIM3 timeout would be triggered and then its callback would try to defer the
     processing to the daemon task before the scheduler started, causing an assertion
     due to the timer queue not being properly created */
  HAL_TIM_Base_Start_IT( &htim3 );
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <vTim3InterruptEnablingTask+0x1c>)
 8000922:	f001 fa59 	bl	8001dd8 <HAL_TIM_Base_Start_IT>

  /* delete this task as it will be only required to run once at the beginning */
  vTaskDelete( NULL );
 8000926:	2000      	movs	r0, #0
 8000928:	f003 fb06 	bl	8003f38 <vTaskDelete>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000034 	.word	0x20000034

08000938 <vEventBitSettingTask>:

static void vEventBitSettingTask( void *pvParameter )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay200ms = pdMS_TO_TICKS( 200UL );
 8000940:	23c8      	movs	r3, #200	@ 0xc8
 8000942:	60fb      	str	r3, [r7, #12]

  for ( ;; )
  {
    /* delay for a short time before starting the next loop */
    vTaskDelay( xDelay200ms );
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f003 fbb7 	bl	80040b8 <vTaskDelay>

    /* print out a message to say event bit 0 is about to be set by the task,
       then set event bit 0 */
    UART2_Print_Text( &huart2, "Bit setting task - about to set bit 0\r\n" );
 800094a:	490c      	ldr	r1, [pc, #48]	@ (800097c <vEventBitSettingTask+0x44>)
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <vEventBitSettingTask+0x48>)
 800094e:	f7ff ffc3 	bl	80008d8 <UART2_Print_Text>
    xEventGroupSetBits( xEventGroup, mainFIRST_TASK_BIT );
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <vEventBitSettingTask+0x4c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2101      	movs	r1, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fb67 	bl	800302c <xEventGroupSetBits>

    /* delay for a short while before setting the other bit */
    vTaskDelay( xDelay200ms );
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f003 fbaa 	bl	80040b8 <vTaskDelay>

    /* print out a message to say event bit 1 is about to be set by the task,
       then set event bit 1 */
    UART2_Print_Text( &huart2, "Bit setting task - about to set bit 1\r\n" );
 8000964:	4908      	ldr	r1, [pc, #32]	@ (8000988 <vEventBitSettingTask+0x50>)
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <vEventBitSettingTask+0x48>)
 8000968:	f7ff ffb6 	bl	80008d8 <UART2_Print_Text>
    xEventGroupSetBits( xEventGroup, mainSECOND_TASK_BIT );
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <vEventBitSettingTask+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f002 fb5a 	bl	800302c <xEventGroupSetBits>
    vTaskDelay( xDelay200ms );
 8000978:	bf00      	nop
 800097a:	e7e3      	b.n	8000944 <vEventBitSettingTask+0xc>
 800097c:	08007ec8 	.word	0x08007ec8
 8000980:	2000007c 	.word	0x2000007c
 8000984:	200000c4 	.word	0x200000c4
 8000988:	08007ef0 	.word	0x08007ef0

0800098c <vEventBitReadingTask>:
  }
}

static void vEventBitReadingTask( void *pvParameter )
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]
  EventBits_t xEventGroupValue;
  const EventBits_t xBitsToWaitFor = ( mainISR_BIT | mainSECOND_TASK_BIT | mainFIRST_TASK_BIT );
 8000994:	2307      	movs	r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  for ( ;; )
  {
    /* block to wait for event bits to become set within the event group */
    xEventGroupValue = xEventGroupWaitBits( xEventGroup,    /* the event group to read */
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <vEventBitReadingTask+0x5c>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2201      	movs	r2, #1
 80009a6:	68f9      	ldr	r1, [r7, #12]
 80009a8:	f002 fa6a 	bl	8002e80 <xEventGroupWaitBits>
 80009ac:	60b8      	str	r0, [r7, #8]
                                                               pdTRUE for the second execution */
                                            portMAX_DELAY   /* don't time out */
                                          );

    /* print a message for each bit that was set */
    if ( ( xEventGroupValue & mainFIRST_TASK_BIT ) == mainFIRST_TASK_BIT )
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <vEventBitReadingTask+0x34>
    {
      UART2_Print_Text( &huart2, "Bit reading task - Event bit 0 was set\n\r" );
 80009b8:	490c      	ldr	r1, [pc, #48]	@ (80009ec <vEventBitReadingTask+0x60>)
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <vEventBitReadingTask+0x64>)
 80009bc:	f7ff ff8c 	bl	80008d8 <UART2_Print_Text>
    }

    if ( ( xEventGroupValue & mainSECOND_TASK_BIT ) == mainSECOND_TASK_BIT )
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <vEventBitReadingTask+0x46>
    {
      UART2_Print_Text( &huart2, "Bit reading task - Event bit 1 was set\n\r" );
 80009ca:	490a      	ldr	r1, [pc, #40]	@ (80009f4 <vEventBitReadingTask+0x68>)
 80009cc:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <vEventBitReadingTask+0x64>)
 80009ce:	f7ff ff83 	bl	80008d8 <UART2_Print_Text>
    }

    if ( ( xEventGroupValue & mainISR_BIT ) == mainISR_BIT )
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0dd      	beq.n	8000998 <vEventBitReadingTask+0xc>
    {
      UART2_Print_Text( &huart2, "Bit reading task - Event bit 2 was set\n\r" );
 80009dc:	4906      	ldr	r1, [pc, #24]	@ (80009f8 <vEventBitReadingTask+0x6c>)
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <vEventBitReadingTask+0x64>)
 80009e0:	f7ff ff7a 	bl	80008d8 <UART2_Print_Text>
    xEventGroupValue = xEventGroupWaitBits( xEventGroup,    /* the event group to read */
 80009e4:	e7d8      	b.n	8000998 <vEventBitReadingTask+0xc>
 80009e6:	bf00      	nop
 80009e8:	200000c4 	.word	0x200000c4
 80009ec:	08007f18 	.word	0x08007f18
 80009f0:	2000007c 	.word	0x2000007c
 80009f4:	08007f44 	.word	0x08007f44
 80009f8:	08007f70 	.word	0x08007f70

080009fc <vDeferredHandlingFunction>:
    }
  }
}

static void vDeferredHandlingFunction( void *pvParameter1, uint32_t ulParameter2 )
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  /* Process the event, in this case just print out a message.
     ulParameter2 is not used in this example */
  UART2_Print_Text( &huart2, ( const char * ) pvParameter1 );
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <vDeferredHandlingFunction+0x1c>)
 8000a0a:	f7ff ff65 	bl	80008d8 <UART2_Print_Text>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000007c 	.word	0x2000007c

08000a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken;

  /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE
     as it will get set to pdTRUE inside the interrupt safe API function
     if a context switch is required */
  xHigherPriorityTaskWoken = pdFALSE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]

  if ( htim->Instance == TIM3 )
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d124      	bne.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0x60>
  {
    /* used for debugging purposes (check TIM3 period via a logic analyzer) */
    HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 8000a32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a38:	f000 fc99 	bl	800136e <HAL_GPIO_TogglePin>
       in the context of the RTOS daemon task.

       Send a pointer to the interrupt's deferred handling function to the daemon task:
       - The deferred handling function's pvParameter1 parameter is used to pass the string to print.
       - The deferred handling function's ulParameter2 parameter is not used so it's just set to 0. */
    xTimerPendFunctionCallFromISR(  vDeferredHandlingFunction, /* function to be executed by the daemon task */
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a48:	f004 fede 	bl	8005808 <xTimerPendFunctionCallFromISR>
                                    0,                      /* ulParameter2 is not used */
                                    &xHigherPriorityTaskWoken  /* context switch flag updated by this FromISR() API */
                                 );

    /* set bit 2 in the event group */
    xEventGroupSetBitsFromISR( xEventGroup, mainISR_BIT, &xHigherPriorityTaskWoken );
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f107 020c 	add.w	r2, r7, #12
 8000a54:	2104      	movs	r1, #4
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fbae 	bl	80031b8 <xEventGroupSetBitsFromISR>
    
       Pass the xHigherPriorityTaskWoken value into portYIELD_FROM_ISR():
       - If xHigherPriorityTaskWoken was set to pdTRUE inside xTimerPendFunctionCallFromISR()
         or xEventGroupSetBitsFromISR, then calling portYIELD_FROM_ISR() will request a context switch.
       - If xHigherPriorityTaskWoken is still pdFALSE then calling portYIELD_FROM_ISR() will have no effect */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00a      	beq.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8000a62:	f006 fcb1 	bl	80073c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	f3bf 8f6f 	isb	sy
 8000a76:	e001      	b.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0x60>
 8000a78:	f006 fc8a 	bl	8007390 <SEGGER_SYSVIEW_RecordExitISR>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x6e>
    HAL_IncTick();
 8000a86:	f000 f9bb 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40000400 	.word	0x40000400
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	080009fd 	.word	0x080009fd
 8000aa4:	200000c4 	.word	0x200000c4
 8000aa8:	e000ed04 	.word	0xe000ed04
 8000aac:	40001000 	.word	0x40001000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 fa4d 	bl	8000f9a <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d115      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <HAL_TIM_Base_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a0c      	ldr	r2, [pc, #48]	@ (8000b58 <HAL_TIM_Base_MspInit+0x4c>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_TIM_Base_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2106      	movs	r1, #6
 8000b3e:	201d      	movs	r0, #29
 8000b40:	f000 fa36 	bl	8000fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b44:	201d      	movs	r0, #29
 8000b46:	f000 fa4f 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40000400 	.word	0x40000400
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_UART_MspInit+0x8c>)
 8000bd2:	f000 fa17 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	@ 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	@ 0x38
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c18:	f107 0210 	add.w	r2, r7, #16
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 f856 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c32:	f001 f827 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8000c36:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c38:	e004      	b.n	8000c44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3a:	f001 f823 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c46:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <HAL_InitTick+0xe8>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_InitTick+0xf0>)
 8000c56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c60:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c78:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c7a:	f001 f85d 	bl	8001d38 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d11b      	bne.n	8000cc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c8c:	4812      	ldr	r0, [pc, #72]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c8e:	f001 f8a3 	bl	8001dd8 <HAL_TIM_Base_Start_IT>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d111      	bne.n	8000cc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca0:	2036      	movs	r0, #54	@ 0x36
 8000ca2:	f000 f9a1 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d808      	bhi.n	8000cbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	2036      	movs	r0, #54	@ 0x36
 8000cb2:	f000 f97d 	bl	8000fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_InitTick+0xf4>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e002      	b.n	8000cc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3738      	adds	r7, #56	@ 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	431bde83 	.word	0x431bde83
 8000cd8:	200000c8 	.word	0x200000c8
 8000cdc:	40001000 	.word	0x40001000
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <TIM3_IRQHandler+0x10>)
 8000d22:	f001 f8c9 	bl	8001eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000034 	.word	0x20000034

08000d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <TIM6_DAC_IRQHandler+0x10>)
 8000d36:	f001 f8bf 	bl	8001eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000c8 	.word	0x200000c8

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d6c:	f7ff ffea 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d96:	f007 f845 	bl	8007e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fbdb 	bl	8000554 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000dac:	080080dc 	.word	0x080080dc
  ldr r2, =_sbss
 8000db0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000db4:	20019930 	.word	0x20019930

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f8d8 	bl	8000f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fefe 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fe64 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000110 	.word	0x20000110

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000110 	.word	0x20000110

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff4c 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc2:	f7ff ff61 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff ffb1 	bl	8000f34 <NVIC_EncodePriority>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff80 	bl	8000ee0 <__NVIC_SetPriority>
}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff54 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e16b      	b.n	80012f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 815a 	bne.w	80012f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80b4 	beq.w	80012f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b60      	ldr	r3, [pc, #384]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a5f      	ldr	r2, [pc, #380]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b5d      	ldr	r3, [pc, #372]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001314 <HAL_GPIO_Init+0x310>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	@ (8001318 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	@ (800131c <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	@ (8001320 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001324 <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	@ (800132c <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001330 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <HAL_GPIO_Init+0x330>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20a>
 800120a:	2307      	movs	r3, #7
 800120c:	e00e      	b.n	800122c <HAL_GPIO_Init+0x228>
 800120e:	2308      	movs	r3, #8
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001212:	2306      	movs	r3, #6
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x228>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	@ (8001314 <HAL_GPIO_Init+0x310>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <HAL_GPIO_Init+0x334>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a32      	ldr	r2, [pc, #200]	@ (8001338 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <HAL_GPIO_Init+0x334>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a27      	ldr	r2, [pc, #156]	@ (8001338 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae90 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001380:	887a      	ldrh	r2, [r7, #2]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	041a      	lsls	r2, r3, #16
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43d9      	mvns	r1, r3
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	400b      	ands	r3, r1
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e267      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d075      	beq.n	80014ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c2:	4b88      	ldr	r3, [pc, #544]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d00c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b85      	ldr	r3, [pc, #532]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d112      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b82      	ldr	r3, [pc, #520]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013e6:	d10b      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b7e      	ldr	r3, [pc, #504]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d05b      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d157      	bne.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e242      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x74>
 800140a:	4b76      	ldr	r3, [pc, #472]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a75      	ldr	r2, [pc, #468]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x98>
 8001422:	4b70      	ldr	r3, [pc, #448]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6f      	ldr	r2, [pc, #444]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b6d      	ldr	r3, [pc, #436]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6c      	ldr	r2, [pc, #432]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 800143c:	4b69      	ldr	r3, [pc, #420]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a68      	ldr	r2, [pc, #416]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b66      	ldr	r3, [pc, #408]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a65      	ldr	r2, [pc, #404]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fce4 	bl	8000e28 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fce0 	bl	8000e28 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	@ 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e207      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b5b      	ldr	r3, [pc, #364]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xc0>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fcd0 	bl	8000e28 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fccc 	bl	8000e28 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1f3      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b51      	ldr	r3, [pc, #324]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ba:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b44      	ldr	r3, [pc, #272]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1c7      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4937      	ldr	r1, [pc, #220]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <HAL_RCC_OscConfig+0x244>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fc85 	bl	8000e28 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fc81 	bl	8000e28 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1a8      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4925      	ldr	r1, [pc, #148]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <HAL_RCC_OscConfig+0x244>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fc64 	bl	8000e28 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fc60 	bl	8000e28 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e187      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d036      	beq.n	80015fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d016      	beq.n	80015c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_RCC_OscConfig+0x248>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fc44 	bl	8000e28 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc40 	bl	8000e28 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e167      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x200>
 80015c2:	e01b      	b.n	80015fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_RCC_OscConfig+0x248>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fc2d 	bl	8000e28 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e00e      	b.n	80015f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fc29 	bl	8000e28 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d907      	bls.n	80015f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e150      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470000 	.word	0x42470000
 80015ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ea      	bne.n	80015d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8097 	beq.w	8001738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160e:	4b81      	ldr	r3, [pc, #516]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10f      	bne.n	800163a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b7d      	ldr	r3, [pc, #500]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a7c      	ldr	r2, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b7a      	ldr	r3, [pc, #488]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b77      	ldr	r3, [pc, #476]	@ (8001818 <HAL_RCC_OscConfig+0x474>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d118      	bne.n	8001678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001646:	4b74      	ldr	r3, [pc, #464]	@ (8001818 <HAL_RCC_OscConfig+0x474>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a73      	ldr	r2, [pc, #460]	@ (8001818 <HAL_RCC_OscConfig+0x474>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001652:	f7ff fbe9 	bl	8000e28 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165a:	f7ff fbe5 	bl	8000e28 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e10c      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b6a      	ldr	r3, [pc, #424]	@ (8001818 <HAL_RCC_OscConfig+0x474>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x2ea>
 8001680:	4b64      	ldr	r3, [pc, #400]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001684:	4a63      	ldr	r2, [pc, #396]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	@ 0x70
 800168c:	e01c      	b.n	80016c8 <HAL_RCC_OscConfig+0x324>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x30c>
 8001696:	4b5f      	ldr	r3, [pc, #380]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169a:	4a5e      	ldr	r2, [pc, #376]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0x324>
 80016b0:	4b58      	ldr	r3, [pc, #352]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b4:	4a57      	ldr	r2, [pc, #348]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80016bc:	4b55      	ldr	r3, [pc, #340]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c0:	4a54      	ldr	r2, [pc, #336]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d015      	beq.n	80016fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fbaa 	bl	8000e28 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff fba6 	bl	8000e28 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0cb      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ee:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0ee      	beq.n	80016d8 <HAL_RCC_OscConfig+0x334>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb94 	bl	8000e28 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fb90 	bl	8000e28 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0b5      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171a:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1ee      	bne.n	8001704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	4a38      	ldr	r2, [pc, #224]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a1 	beq.w	8001884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001742:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d05c      	beq.n	8001808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d141      	bne.n	80017da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b31      	ldr	r3, [pc, #196]	@ (800181c <HAL_RCC_OscConfig+0x478>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fb64 	bl	8000e28 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff fb60 	bl	8000e28 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e087      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	019b      	lsls	r3, r3, #6
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	3b01      	subs	r3, #1
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	491b      	ldr	r1, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_RCC_OscConfig+0x478>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb39 	bl	8000e28 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb35 	bl	8000e28 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e05c      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x416>
 80017d8:	e054      	b.n	8001884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb22 	bl	8000e28 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb1e 	bl	8000e28 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e045      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x444>
 8001806:	e03d      	b.n	8001884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e038      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000
 800181c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x4ec>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d028      	beq.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d121      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d11a      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001858:	4293      	cmp	r3, r2
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0cc      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b68      	ldr	r3, [pc, #416]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d90c      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b65      	ldr	r3, [pc, #404]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a52      	ldr	r2, [pc, #328]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800190a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d044      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d119      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d003      	beq.n	8001952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e067      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001972:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 0203 	bic.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4934      	ldr	r1, [pc, #208]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001984:	f7ff fa50 	bl	8000e28 <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff fa4c 	bl	8000e28 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e04f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 020c 	and.w	r2, r3, #12
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1eb      	bne.n	800198c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d20c      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f8d6 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	0800808c 	.word	0x0800808c
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	20000008 	.word	0x20000008

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a64:	b094      	sub	sp, #80	@ 0x50
 8001a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a70:	2300      	movs	r3, #0
 8001a72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a78:	4b79      	ldr	r3, [pc, #484]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d00d      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	f200 80e1 	bhi.w	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x34>
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a92:	e0db      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a96:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001a98:	e0db      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9a:	4b73      	ldr	r3, [pc, #460]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a9e:	e0d8      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	2200      	movs	r2, #0
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0159      	lsls	r1, r3, #5
 8001ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae4:	0150      	lsls	r0, r2, #5
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4621      	mov	r1, r4
 8001aec:	1a51      	subs	r1, r2, r1
 8001aee:	6139      	str	r1, [r7, #16]
 8001af0:	4629      	mov	r1, r5
 8001af2:	eb63 0301 	sbc.w	r3, r3, r1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b04:	4659      	mov	r1, fp
 8001b06:	018b      	lsls	r3, r1, #6
 8001b08:	4651      	mov	r1, sl
 8001b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b0e:	4651      	mov	r1, sl
 8001b10:	018a      	lsls	r2, r1, #6
 8001b12:	4651      	mov	r1, sl
 8001b14:	ebb2 0801 	subs.w	r8, r2, r1
 8001b18:	4659      	mov	r1, fp
 8001b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b32:	4690      	mov	r8, r2
 8001b34:	4699      	mov	r9, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	eb18 0303 	adds.w	r3, r8, r3
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	462b      	mov	r3, r5
 8001b40:	eb49 0303 	adc.w	r3, r9, r3
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b52:	4629      	mov	r1, r5
 8001b54:	024b      	lsls	r3, r1, #9
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	024a      	lsls	r2, r1, #9
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b66:	2200      	movs	r2, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b70:	f7fe fb78 	bl	8000264 <__aeabi_uldivmod>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b7c:	e058      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	4611      	mov	r1, r2
 8001b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b98:	4642      	mov	r2, r8
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	0159      	lsls	r1, r3, #5
 8001ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001baa:	0150      	lsls	r0, r2, #5
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	00eb      	lsls	r3, r5, #3
 8001be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be6:	00e2      	lsls	r2, r4, #3
 8001be8:	4614      	mov	r4, r2
 8001bea:	461d      	mov	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	18e3      	adds	r3, r4, r3
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	eb45 0303 	adc.w	r3, r5, r3
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c06:	4629      	mov	r1, r5
 8001c08:	028b      	lsls	r3, r1, #10
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c10:	4621      	mov	r1, r4
 8001c12:	028a      	lsls	r2, r1, #10
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	61fa      	str	r2, [r7, #28]
 8001c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c24:	f7fe fb1e 	bl	8000264 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3750      	adds	r7, #80	@ 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	007a1200 	.word	0x007a1200

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	0800809c 	.word	0x0800809c

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb0:	f7ff ffdc 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	0800809c 	.word	0x0800809c

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e041      	b.n	8001dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fed4 	bl	8000b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 fa7e 	bl	8002278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d001      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e04e      	b.n	8001e8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a23      	ldr	r2, [pc, #140]	@ (8001e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d022      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x80>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1a:	d01d      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x80>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x80>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x80>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x80>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <HAL_TIM_Base_Start_IT+0xd4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x80>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x80>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a18      	ldr	r2, [pc, #96]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d010      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	e007      	b.n	8001e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40000800 	.word	0x40000800
 8001ea8:	40000c00 	.word	0x40000c00
 8001eac:	40010400 	.word	0x40010400
 8001eb0:	40014000 	.word	0x40014000
 8001eb4:	40001800 	.word	0x40001800

08001eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d020      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0202 	mvn.w	r2, #2
 8001eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f999 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f98b 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f99c 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d020      	beq.n	8001f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0204 	mvn.w	r2, #4
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f973 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f965 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f976 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d020      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0208 	mvn.w	r2, #8
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f94d 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f93f 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f950 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d020      	beq.n	8002000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0210 	mvn.w	r2, #16
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f927 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f919 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f92a 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0201 	mvn.w	r2, #1
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fcfc 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fae4 	bl	8002610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8fb 	bl	8002262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0220 	mvn.w	r2, #32
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fab6 	bl	80025fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_TIM_ConfigClockSource+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e0b4      	b.n	800221e <HAL_TIM_ConfigClockSource+0x186>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ec:	d03e      	beq.n	800216c <HAL_TIM_ConfigClockSource+0xd4>
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020f2:	f200 8087 	bhi.w	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020fa:	f000 8086 	beq.w	800220a <HAL_TIM_ConfigClockSource+0x172>
 80020fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002102:	d87f      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 8002104:	2b70      	cmp	r3, #112	@ 0x70
 8002106:	d01a      	beq.n	800213e <HAL_TIM_ConfigClockSource+0xa6>
 8002108:	2b70      	cmp	r3, #112	@ 0x70
 800210a:	d87b      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 800210c:	2b60      	cmp	r3, #96	@ 0x60
 800210e:	d050      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002110:	2b60      	cmp	r3, #96	@ 0x60
 8002112:	d877      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 8002114:	2b50      	cmp	r3, #80	@ 0x50
 8002116:	d03c      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0xfa>
 8002118:	2b50      	cmp	r3, #80	@ 0x50
 800211a:	d873      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 800211c:	2b40      	cmp	r3, #64	@ 0x40
 800211e:	d058      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002120:	2b40      	cmp	r3, #64	@ 0x40
 8002122:	d86f      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 8002124:	2b30      	cmp	r3, #48	@ 0x30
 8002126:	d064      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002128:	2b30      	cmp	r3, #48	@ 0x30
 800212a:	d86b      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	2b20      	cmp	r3, #32
 800212e:	d060      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002130:	2b20      	cmp	r3, #32
 8002132:	d867      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05c      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002138:	2b10      	cmp	r3, #16
 800213a:	d05a      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x15a>
 800213c:	e062      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800214e:	f000 f9b9 	bl	80024c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	609a      	str	r2, [r3, #8]
      break;
 800216a:	e04f      	b.n	800220c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800217c:	f000 f9a2 	bl	80024c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800218e:	609a      	str	r2, [r3, #8]
      break;
 8002190:	e03c      	b.n	800220c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800219e:	461a      	mov	r2, r3
 80021a0:	f000 f916 	bl	80023d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2150      	movs	r1, #80	@ 0x50
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f96f 	bl	800248e <TIM_ITRx_SetConfig>
      break;
 80021b0:	e02c      	b.n	800220c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021be:	461a      	mov	r2, r3
 80021c0:	f000 f935 	bl	800242e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2160      	movs	r1, #96	@ 0x60
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f95f 	bl	800248e <TIM_ITRx_SetConfig>
      break;
 80021d0:	e01c      	b.n	800220c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021de:	461a      	mov	r2, r3
 80021e0:	f000 f8f6 	bl	80023d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2140      	movs	r1, #64	@ 0x40
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f94f 	bl	800248e <TIM_ITRx_SetConfig>
      break;
 80021f0:	e00c      	b.n	800220c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f000 f946 	bl	800248e <TIM_ITRx_SetConfig>
      break;
 8002202:	e003      	b.n	800220c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      break;
 8002208:	e000      	b.n	800220c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800220a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a46      	ldr	r2, [pc, #280]	@ (80023a4 <TIM_Base_SetConfig+0x12c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002296:	d00f      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a43      	ldr	r2, [pc, #268]	@ (80023a8 <TIM_Base_SetConfig+0x130>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00b      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a42      	ldr	r2, [pc, #264]	@ (80023ac <TIM_Base_SetConfig+0x134>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a41      	ldr	r2, [pc, #260]	@ (80023b0 <TIM_Base_SetConfig+0x138>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a40      	ldr	r2, [pc, #256]	@ (80023b4 <TIM_Base_SetConfig+0x13c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d108      	bne.n	80022ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a35      	ldr	r2, [pc, #212]	@ (80023a4 <TIM_Base_SetConfig+0x12c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d02b      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d8:	d027      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a32      	ldr	r2, [pc, #200]	@ (80023a8 <TIM_Base_SetConfig+0x130>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d023      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <TIM_Base_SetConfig+0x134>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a30      	ldr	r2, [pc, #192]	@ (80023b0 <TIM_Base_SetConfig+0x138>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01b      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <TIM_Base_SetConfig+0x13c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d017      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2e      	ldr	r2, [pc, #184]	@ (80023b8 <TIM_Base_SetConfig+0x140>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2d      	ldr	r2, [pc, #180]	@ (80023bc <TIM_Base_SetConfig+0x144>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00f      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2c      	ldr	r2, [pc, #176]	@ (80023c0 <TIM_Base_SetConfig+0x148>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00b      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <TIM_Base_SetConfig+0x14c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2a      	ldr	r2, [pc, #168]	@ (80023c8 <TIM_Base_SetConfig+0x150>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a29      	ldr	r2, [pc, #164]	@ (80023cc <TIM_Base_SetConfig+0x154>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a10      	ldr	r2, [pc, #64]	@ (80023a4 <TIM_Base_SetConfig+0x12c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <TIM_Base_SetConfig+0x13c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d103      	bne.n	8002378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f023 0201 	bic.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
  }
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	40010400 	.word	0x40010400
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40014400 	.word	0x40014400
 80023c0:	40014800 	.word	0x40014800
 80023c4:	40001800 	.word	0x40001800
 80023c8:	40001c00 	.word	0x40001c00
 80023cc:	40002000 	.word	0x40002000

080023d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	f023 0201 	bic.w	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f023 030a 	bic.w	r3, r3, #10
 800240c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	621a      	str	r2, [r3, #32]
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800242e:	b480      	push	{r7}
 8002430:	b087      	sub	sp, #28
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f023 0210 	bic.w	r2, r3, #16
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	031b      	lsls	r3, r3, #12
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800246a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f043 0307 	orr.w	r3, r3, #7
 80024b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	021a      	lsls	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002518:	2302      	movs	r3, #2
 800251a:	e05a      	b.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d022      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002568:	d01d      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d018      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1a      	ldr	r2, [pc, #104]	@ (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00e      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a17      	ldr	r2, [pc, #92]	@ (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d004      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10c      	bne.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40000800 	.word	0x40000800
 80025ec:	40000c00 	.word	0x40000c00
 80025f0:	40010400 	.word	0x40010400
 80025f4:	40014000 	.word	0x40014000
 80025f8:	40001800 	.word	0x40001800

080025fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e042      	b.n	80026bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fa86 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	@ 0x24
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f973 	bl	8002954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800267c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800268c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800269c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	@ 0x28
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d175      	bne.n	80027d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_UART_Transmit+0x2c>
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e06e      	b.n	80027d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2221      	movs	r2, #33	@ 0x21
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002702:	f7fe fb91 	bl	8000e28 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271c:	d108      	bne.n	8002730 <HAL_UART_Transmit+0x6c>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e003      	b.n	8002738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002738:	e02e      	b.n	8002798 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	2180      	movs	r1, #128	@ 0x80
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f848 	bl	80027da <UART_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e03a      	b.n	80027d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	3302      	adds	r3, #2
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e007      	b.n	800278a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3301      	adds	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1cb      	bne.n	800273a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2140      	movs	r1, #64	@ 0x40
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f814 	bl	80027da <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e006      	b.n	80027d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ea:	e03b      	b.n	8002864 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d037      	beq.n	8002864 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f4:	f7fe fb18 	bl	8000e28 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	429a      	cmp	r2, r3
 8002802:	d302      	bcc.n	800280a <UART_WaitOnFlagUntilTimeout+0x30>
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e03a      	b.n	8002884 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d023      	beq.n	8002864 <UART_WaitOnFlagUntilTimeout+0x8a>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b80      	cmp	r3, #128	@ 0x80
 8002820:	d020      	beq.n	8002864 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	d01d      	beq.n	8002864 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d116      	bne.n	8002864 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f81d 	bl	800288c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2208      	movs	r2, #8
 8002856:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e00f      	b.n	8002884 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	429a      	cmp	r2, r3
 8002880:	d0b4      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b095      	sub	sp, #84	@ 0x54
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e5      	bne.n	8002894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3314      	adds	r3, #20
 80028ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3314      	adds	r3, #20
 80028e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e5      	bne.n	80028c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	2b01      	cmp	r3, #1
 8002902:	d119      	bne.n	8002938 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	60bb      	str	r3, [r7, #8]
   return(result);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	647b      	str	r3, [r7, #68]	@ 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002924:	61ba      	str	r2, [r7, #24]
 8002926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	6979      	ldr	r1, [r7, #20]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	613b      	str	r3, [r7, #16]
   return(result);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e5      	bne.n	8002904 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002946:	bf00      	nop
 8002948:	3754      	adds	r7, #84	@ 0x54
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b0c0      	sub	sp, #256	@ 0x100
 800295a:	af00      	add	r7, sp, #0
 800295c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	ea40 0301 	orr.w	r3, r0, r1
 800297c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	431a      	orrs	r2, r3
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	431a      	orrs	r2, r3
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029ac:	f021 010c 	bic.w	r1, r1, #12
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029ba:	430b      	orrs	r3, r1
 80029bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ce:	6999      	ldr	r1, [r3, #24]
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	ea40 0301 	orr.w	r3, r0, r1
 80029da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002c20 <UART_SetConfig+0x2cc>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d005      	beq.n	80029f4 <UART_SetConfig+0xa0>
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002c24 <UART_SetConfig+0x2d0>)
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d104      	bne.n	80029fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f4:	f7ff f95a 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 80029f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029fc:	e003      	b.n	8002a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029fe:	f7ff f941 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8002a02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a10:	f040 810c 	bne.w	8002c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a26:	4622      	mov	r2, r4
 8002a28:	462b      	mov	r3, r5
 8002a2a:	1891      	adds	r1, r2, r2
 8002a2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a2e:	415b      	adcs	r3, r3
 8002a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a36:	4621      	mov	r1, r4
 8002a38:	eb12 0801 	adds.w	r8, r2, r1
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	eb43 0901 	adc.w	r9, r3, r1
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a56:	4690      	mov	r8, r2
 8002a58:	4699      	mov	r9, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	eb18 0303 	adds.w	r3, r8, r3
 8002a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a64:	462b      	mov	r3, r5
 8002a66:	eb49 0303 	adc.w	r3, r9, r3
 8002a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a82:	460b      	mov	r3, r1
 8002a84:	18db      	adds	r3, r3, r3
 8002a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a88:	4613      	mov	r3, r2
 8002a8a:	eb42 0303 	adc.w	r3, r2, r3
 8002a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a98:	f7fd fbe4 	bl	8000264 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4b61      	ldr	r3, [pc, #388]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011c      	lsls	r4, r3, #4
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002acc:	4641      	mov	r1, r8
 8002ace:	eb12 0a01 	adds.w	sl, r2, r1
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aec:	4692      	mov	sl, r2
 8002aee:	469b      	mov	fp, r3
 8002af0:	4643      	mov	r3, r8
 8002af2:	eb1a 0303 	adds.w	r3, sl, r3
 8002af6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002afa:	464b      	mov	r3, r9
 8002afc:	eb4b 0303 	adc.w	r3, fp, r3
 8002b00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	18db      	adds	r3, r3, r3
 8002b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b1e:	4613      	mov	r3, r2
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b2e:	f7fd fb99 	bl	8000264 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	4b3b      	ldr	r3, [pc, #236]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2264      	movs	r2, #100	@ 0x64
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	1acb      	subs	r3, r1, r3
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002b50:	fba3 2302 	umull	r2, r3, r3, r2
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b5c:	441c      	add	r4, r3
 8002b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b80:	4641      	mov	r1, r8
 8002b82:	1851      	adds	r1, r2, r1
 8002b84:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b86:	4649      	mov	r1, r9
 8002b88:	414b      	adcs	r3, r1
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b98:	4659      	mov	r1, fp
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4642      	mov	r2, r8
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	eb42 0303 	adc.w	r3, r2, r3
 8002bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	18db      	adds	r3, r3, r3
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bda:	4613      	mov	r3, r2
 8002bdc:	eb42 0303 	adc.w	r3, r2, r3
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bea:	f7fd fb3b 	bl	8000264 <__aeabi_uldivmod>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	2164      	movs	r1, #100	@ 0x64
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	3332      	adds	r3, #50	@ 0x32
 8002c06:	4a08      	ldr	r2, [pc, #32]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 0207 	and.w	r2, r3, #7
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4422      	add	r2, r4
 8002c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c1c:	e106      	b.n	8002e2c <UART_SetConfig+0x4d8>
 8002c1e:	bf00      	nop
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400
 8002c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c3e:	4642      	mov	r2, r8
 8002c40:	464b      	mov	r3, r9
 8002c42:	1891      	adds	r1, r2, r2
 8002c44:	6239      	str	r1, [r7, #32]
 8002c46:	415b      	adcs	r3, r3
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4e:	4641      	mov	r1, r8
 8002c50:	1854      	adds	r4, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb43 0501 	adc.w	r5, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	00eb      	lsls	r3, r5, #3
 8002c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c66:	00e2      	lsls	r2, r4, #3
 8002c68:	4614      	mov	r4, r2
 8002c6a:	461d      	mov	r5, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	18e3      	adds	r3, r4, r3
 8002c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c74:	464b      	mov	r3, r9
 8002c76:	eb45 0303 	adc.w	r3, r5, r3
 8002c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	008b      	lsls	r3, r1, #2
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	008a      	lsls	r2, r1, #2
 8002ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cac:	f7fd fada 	bl	8000264 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4b60      	ldr	r3, [pc, #384]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	011c      	lsls	r4, r3, #4
 8002cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	61b9      	str	r1, [r7, #24]
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	1851      	adds	r1, r2, r1
 8002ce4:	6139      	str	r1, [r7, #16]
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	414b      	adcs	r3, r1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	00cb      	lsls	r3, r1, #3
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d02:	4651      	mov	r1, sl
 8002d04:	00ca      	lsls	r2, r1, #3
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d14:	464b      	mov	r3, r9
 8002d16:	460a      	mov	r2, r1
 8002d18:	eb42 0303 	adc.w	r3, r2, r3
 8002d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d38:	4649      	mov	r1, r9
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d42:	4641      	mov	r1, r8
 8002d44:	008a      	lsls	r2, r1, #2
 8002d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d4a:	f7fd fa8b 	bl	8000264 <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	4b38      	ldr	r3, [pc, #224]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002d56:	fba3 2301 	umull	r2, r3, r3, r1
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2264      	movs	r2, #100	@ 0x64
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	1acb      	subs	r3, r1, r3
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	3332      	adds	r3, #50	@ 0x32
 8002d68:	4a33      	ldr	r2, [pc, #204]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d74:	441c      	add	r4, r3
 8002d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	1891      	adds	r1, r2, r2
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	415b      	adcs	r3, r3
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d94:	4641      	mov	r1, r8
 8002d96:	1851      	adds	r1, r2, r1
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	414b      	adcs	r3, r1
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dac:	4659      	mov	r1, fp
 8002dae:	00cb      	lsls	r3, r1, #3
 8002db0:	4651      	mov	r1, sl
 8002db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db6:	4651      	mov	r1, sl
 8002db8:	00ca      	lsls	r2, r1, #3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	460a      	mov	r2, r1
 8002dca:	eb42 0303 	adc.w	r3, r2, r3
 8002dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dda:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002de8:	4649      	mov	r1, r9
 8002dea:	008b      	lsls	r3, r1, #2
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df2:	4641      	mov	r1, r8
 8002df4:	008a      	lsls	r2, r1, #2
 8002df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dfa:	f7fd fa33 	bl	8000264 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002e04:	fba3 1302 	umull	r1, r3, r3, r2
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	2164      	movs	r1, #100	@ 0x64
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	3332      	adds	r3, #50	@ 0x32
 8002e16:	4a08      	ldr	r2, [pc, #32]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4422      	add	r2, r4
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e32:	46bd      	mov	sp, r7
 8002e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e38:	51eb851f 	.word	0x51eb851f

08002e3c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002e42:	201c      	movs	r0, #28
 8002e44:	f002 ffb4 	bl	8005db0 <pvPortMalloc>
 8002e48:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f9c6 	bl	80031ec <vListInitialise>
            else
            {
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 fca2 	bl	80077ac <SEGGER_SYSVIEW_ShrinkId>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f240 1023 	movw	r0, #291	@ 0x123
 8002e70:	f004 fb02 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

            return pxEventBits;
 8002e74:	687b      	ldr	r3, [r7, #4]
        }
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b090      	sub	sp, #64	@ 0x40
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	637b      	str	r3, [r7, #52]	@ 0x34
        EventBits_t uxReturn, uxControlBits = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	63bb      	str	r3, [r7, #56]	@ 0x38
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <xEventGroupWaitBits+0x34>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ebe:	d30b      	bcc.n	8002ed8 <xEventGroupWaitBits+0x58>
    __asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61fb      	str	r3, [r7, #28]
}
 8002ed2:	bf00      	nop
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <xEventGroupWaitBits+0x54>
        configASSERT( uxBitsToWaitFor != 0 );
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10b      	bne.n	8002ef6 <xEventGroupWaitBits+0x76>
    __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	61bb      	str	r3, [r7, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	e7fd      	b.n	8002ef2 <xEventGroupWaitBits+0x72>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ef6:	f002 f859 	bl	8004fac <xTaskGetSchedulerState>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <xEventGroupWaitBits+0x86>
 8002f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <xEventGroupWaitBits+0x8a>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <xEventGroupWaitBits+0x8c>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <xEventGroupWaitBits+0xa8>
    __asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	617b      	str	r3, [r7, #20]
}
 8002f22:	bf00      	nop
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <xEventGroupWaitBits+0xa4>
        }
        #endif

        vTaskSuspendAll();
 8002f28:	f001 f9a2 	bl	8004270 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f38:	f000 f91c 	bl	8003174 <prvTestWaitCondition>
 8002f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( xWaitConditionMet != pdFALSE )
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <xEventGroupWaitBits+0xe2>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
                xTicksToWait = ( TickType_t ) 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d028      	beq.n	8002fa4 <xEventGroupWaitBits+0x124>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e020      	b.n	8002fa4 <xEventGroupWaitBits+0x124>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 8002f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <xEventGroupWaitBits+0xf2>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                xTimeoutOccurred = pdTRUE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f70:	e018      	b.n	8002fa4 <xEventGroupWaitBits+0x124>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <xEventGroupWaitBits+0x100>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <xEventGroupWaitBits+0x10e>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	1d18      	adds	r0, r3, #4
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	4313      	orrs	r3, r2
 8002f98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f001 fc74 	bl	8004888 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002fa4:	f001 f972 	bl	800428c <xTaskResumeAll>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        if( xTicksToWait != ( TickType_t ) 0 )
 8002faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d031      	beq.n	8003014 <xEventGroupWaitBits+0x194>
        {
            if( xAlreadyYielded == pdFALSE )
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <xEventGroupWaitBits+0x146>
            {
                taskYIELD_WITHIN_API();
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <xEventGroupWaitBits+0x1a8>)
 8002fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 8002fc6:	f002 f8c3 	bl	8005150 <uxTaskResetEventItemValue>
 8002fca:	63f8      	str	r0, [r7, #60]	@ 0x3c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11a      	bne.n	800300c <xEventGroupWaitBits+0x18c>
            {
                taskENTER_CRITICAL();
 8002fd6:	f002 fdbd 	bl	8005b54 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8002fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002fe6:	f000 f8c5 	bl	8003174 <prvTestWaitCondition>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <xEventGroupWaitBits+0x184>
                    {
                        if( xClearOnExit != pdFALSE )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <xEventGroupWaitBits+0x184>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003002:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8003004:	2301      	movs	r3, #1
 8003006:	633b      	str	r3, [r7, #48]	@ 0x30
                }
                taskEXIT_CRITICAL();
 8003008:	f002 fdd6 	bl	8005bb8 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800300c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );
 8003014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003016:	f240 1025 	movw	r0, #293	@ 0x125
 800301a:	f004 fa2d 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 800301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8003020:	4618      	mov	r0, r3
 8003022:	3740      	adds	r7, #64	@ 0x40
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 800302c:	b580      	push	{r7, lr}
 800302e:	b08e      	sub	sp, #56	@ 0x38
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003036:	2300      	movs	r3, #0
 8003038:	633b      	str	r3, [r7, #48]	@ 0x30
        EventGroup_t * pxEventBits = xEventGroup;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xMatchFound = pdFALSE;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <xEventGroupSetBits+0x34>
    __asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	613b      	str	r3, [r7, #16]
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <xEventGroupSetBits+0x30>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003066:	d30b      	bcc.n	8003080 <xEventGroupSetBits+0x54>
    __asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	60fb      	str	r3, [r7, #12]
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <xEventGroupSetBits+0x50>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	3304      	adds	r3, #4
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
        pxListEnd = listGET_END_MARKER( pxList );
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	3308      	adds	r3, #8
 800308a:	623b      	str	r3, [r7, #32]
        vTaskSuspendAll();
 800308c:	f001 f8f0 	bl	8004270 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8003096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	431a      	orrs	r2, r3
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 80030a2:	e03c      	b.n	800311e <xEventGroupSetBits+0xf2>
            {
                pxNext = listGET_NEXT( pxListItem );
 80030a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61fb      	str	r3, [r7, #28]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80030aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
                xMatchFound = pdFALSE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80030ba:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030c2:	61bb      	str	r3, [r7, #24]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <xEventGroupSetBits+0xb4>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <xEventGroupSetBits+0xc6>
                    {
                        xMatchFound = pdTRUE;
 80030da:	2301      	movs	r3, #1
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030de:	e008      	b.n	80030f2 <xEventGroupSetBits+0xc6>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d101      	bne.n	80030f2 <xEventGroupSetBits+0xc6>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 80030f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <xEventGroupSetBits+0xee>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <xEventGroupSetBits+0xde>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8003102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	633b      	str	r3, [r7, #48]	@ 0x30
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003112:	4619      	mov	r1, r3
 8003114:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003116:	f001 fd3d 	bl	8004b94 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	637b      	str	r3, [r7, #52]	@ 0x34
            while( pxListItem != pxListEnd )
 800311e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	429a      	cmp	r2, r3
 8003124:	d1be      	bne.n	80030a4 <xEventGroupSetBits+0x78>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312c:	43db      	mvns	r3, r3
 800312e:	401a      	ands	r2, r3
 8003130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003132:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8003134:	f001 f8aa 	bl	800428c <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	f240 1029 	movw	r0, #297	@ 0x129
 8003142:	f004 f999 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxEventBits->uxEventBits;
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003148:	681b      	ldr	r3, [r3, #0]
    }
 800314a:	4618      	mov	r0, r3
 800314c:	3738      	adds	r7, #56	@ 0x38
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
    void vEventGroupSetBitsCallback( void * pvEventGroup,
                                     uint32_t ulBitsToSet )
    {
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
        traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff64 	bl	800302c <xEventGroupSetBits>

        traceRETURN_vEventGroupSetBitsCallback();
 8003164:	f240 102b 	movw	r0, #299	@ 0x12b
 8003168:	f004 f94a 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d107      	bne.n	800319a <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8003194:	2301      	movs	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e007      	b.n	80031aa <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d101      	bne.n	80031aa <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 80031aa:	697b      	ldr	r3, [r7, #20]
    }
 80031ac:	4618      	mov	r0, r3
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <xEventGroupSetBitsFromISR>:
    #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

        BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                              const EventBits_t uxBitsToSet,
                                              BaseType_t * pxHigherPriorityTaskWoken )
        {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
            BaseType_t xReturn;

            traceENTER_xEventGroupSetBitsFromISR( xEventGroup, uxBitsToSet, pxHigherPriorityTaskWoken );

            traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
            xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	4807      	ldr	r0, [pc, #28]	@ (80031e8 <xEventGroupSetBitsFromISR+0x30>)
 80031cc:	f002 fb1c 	bl	8005808 <xTimerPendFunctionCallFromISR>
 80031d0:	6178      	str	r0, [r7, #20]

            traceRETURN_xEventGroupSetBitsFromISR( xReturn );
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f240 102d 	movw	r0, #301	@ 0x12d
 80031da:	f004 f94d 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

            return xReturn;
 80031de:	697b      	ldr	r3, [r7, #20]
        }
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	08003153 	.word	0x08003153

080031ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f103 0208 	add.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f103 0208 	add.w	r2, r3, #8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f103 0208 	add.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8003220:	f240 1019 	movw	r0, #281	@ 0x119
 8003224:	f004 f8ec 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800323e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8003242:	f004 f8dd 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 800328a:	f240 101b 	movw	r0, #283	@ 0x11b
 800328e:	f004 f8b7 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d103      	bne.n	80032ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e00c      	b.n	80032d4 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3308      	adds	r3, #8
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e002      	b.n	80032c8 <vListInsert+0x2e>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d2f6      	bcs.n	80032c2 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8003300:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8003304:	f004 f87c 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6852      	ldr	r2, [r2, #4]
 8003330:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d103      	bne.n	8003344 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	1e5a      	subs	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	f240 101d 	movw	r0, #285	@ 0x11d
 800335e:	f004 f88b 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800337a:	2301      	movs	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <xQueueGenericReset+0x30>
    __asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	60fb      	str	r3, [r7, #12]
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d05d      	beq.n	8003462 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d059      	beq.n	8003462 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b6:	2100      	movs	r1, #0
 80033b8:	fba3 2302 	umull	r2, r3, r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d000      	beq.n	80033c2 <xQueueGenericReset+0x52>
 80033c0:	2101      	movs	r1, #1
 80033c2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d14c      	bne.n	8003462 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80033c8:	f002 fbc4 	bl	8005b54 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	441a      	add	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2200      	movs	r2, #0
 80033e6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	3b01      	subs	r3, #1
 80033fa:	6939      	ldr	r1, [r7, #16]
 80033fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	441a      	add	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	22ff      	movs	r2, #255	@ 0xff
 800340c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01a      	beq.n	800345c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	3310      	adds	r3, #16
 800342a:	4618      	mov	r0, r3
 800342c:	f001 fad2 	bl	80049d4 <xTaskRemoveFromEventList>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003436:	4b18      	ldr	r3, [pc, #96]	@ (8003498 <xQueueGenericReset+0x128>)
 8003438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	e009      	b.n	800345c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	3310      	adds	r3, #16
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fecd 	bl	80031ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3324      	adds	r3, #36	@ 0x24
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fec8 	bl	80031ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800345c:	f002 fbac 	bl	8005bb8 <vPortExitCritical>
 8003460:	e001      	b.n	8003466 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <xQueueGenericReset+0x114>
    __asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60bb      	str	r3, [r7, #8]
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4619      	mov	r1, r3
 8003488:	2096      	movs	r0, #150	@ 0x96
 800348a:	f003 fff5 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800348e:	697b      	ldr	r3, [r7, #20]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	e000ed04 	.word	0xe000ed04

0800349c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02e      	beq.n	8003512 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80034b4:	2100      	movs	r1, #0
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	fba3 2302 	umull	r2, r3, r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d000      	beq.n	80034c4 <xQueueGenericCreate+0x28>
 80034c2:	2101      	movs	r1, #1
 80034c4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d123      	bne.n	8003512 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80034d2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80034d6:	d81c      	bhi.n	8003512 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	3350      	adds	r3, #80	@ 0x50
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 fc62 	bl	8005db0 <pvPortMalloc>
 80034ec:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01d      	beq.n	8003530 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3350      	adds	r3, #80	@ 0x50
 80034fc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034fe:	79fa      	ldrb	r2, [r7, #7]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f81e 	bl	800354c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003510:	e00e      	b.n	8003530 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <xQueueGenericCreate+0x94>
    __asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	613b      	str	r3, [r7, #16]
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4618      	mov	r0, r3
 8003534:	f004 f93a 	bl	80077ac <SEGGER_SYSVIEW_ShrinkId>
 8003538:	4603      	mov	r3, r0
 800353a:	4619      	mov	r1, r3
 800353c:	2098      	movs	r0, #152	@ 0x98
 800353e:	f003 ff9b 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8003542:	69fb      	ldr	r3, [r7, #28]
    }
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e002      	b.n	800356e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800357a:	2101      	movs	r1, #1
 800357c:	69b8      	ldr	r0, [r7, #24]
 800357e:	f7ff fef7 	bl	8003370 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b092      	sub	sp, #72	@ 0x48
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 80035a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <xQueueGenericSendFromISR+0x3e>
 80035c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <xQueueGenericSendFromISR+0x42>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <xQueueGenericSendFromISR+0x44>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	e7fd      	b.n	80035ee <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d103      	bne.n	8003600 <xQueueGenericSendFromISR+0x6e>
 80035f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <xQueueGenericSendFromISR+0x72>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <xQueueGenericSendFromISR+0x74>
 8003604:	2300      	movs	r3, #0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003622:	f002 fb83 	bl	8005d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8003626:	f3ef 8211 	mrs	r2, BASEPRI
 800362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	623a      	str	r2, [r7, #32]
 800363c:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 800363e:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8003640:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <xQueueGenericSendFromISR+0xc2>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d147      	bne.n	80036e4 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800365a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800366a:	f000 f93b 	bl	80038e4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800366e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d112      	bne.n	800369e <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d02e      	beq.n	80036de <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003682:	3324      	adds	r3, #36	@ 0x24
 8003684:	4618      	mov	r0, r3
 8003686:	f001 f9a5 	bl	80049d4 <xTaskRemoveFromEventList>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d026      	beq.n	80036de <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e01f      	b.n	80036de <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800369e:	f000 ff2f 	bl	8004500 <uxTaskGetNumberOfTasks>
 80036a2:	6338      	str	r0, [r7, #48]	@ 0x30
 80036a4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80036a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d917      	bls.n	80036de <xQueueGenericSendFromISR+0x14c>
 80036ae:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80036b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80036b4:	d10b      	bne.n	80036ce <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	61bb      	str	r3, [r7, #24]
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	e7fd      	b.n	80036ca <xQueueGenericSendFromISR+0x138>
 80036ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80036d2:	3301      	adds	r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	b25a      	sxtb	r2, r3
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80036de:	2301      	movs	r3, #1
 80036e0:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80036e2:	e001      	b.n	80036e8 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80036f2:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );
 80036f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f6:	4619      	mov	r1, r3
 80036f8:	20a2      	movs	r0, #162	@ 0xa2
 80036fa:	f003 febd 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80036fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003700:	4618      	mov	r0, r3
 8003702:	3748      	adds	r7, #72	@ 0x48
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	@ 0x30
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800371c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <xQueueReceive+0x32>
    __asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	623b      	str	r3, [r7, #32]
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <xQueueReceive+0x40>
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <xQueueReceive+0x44>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <xQueueReceive+0x46>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <xQueueReceive+0x62>
    __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	61fb      	str	r3, [r7, #28]
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	e7fd      	b.n	8003766 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800376a:	f001 fc1f 	bl	8004fac <xTaskGetSchedulerState>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xQueueReceive+0x72>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueReceive+0x76>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueReceive+0x78>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <xQueueReceive+0x94>
    __asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	61bb      	str	r3, [r7, #24]
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800379c:	f002 f9da 	bl	8005b54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d023      	beq.n	80037f4 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037b0:	f000 f902 	bl	80039b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00f      	beq.n	80037e4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	3310      	adds	r3, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 f903 	bl	80049d4 <xTaskRemoveFromEventList>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80037d4:	4b42      	ldr	r3, [pc, #264]	@ (80038e0 <xQueueReceive+0x1d8>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80037e4:	f002 f9e8 	bl	8005bb8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80037e8:	2101      	movs	r1, #1
 80037ea:	20a4      	movs	r0, #164	@ 0xa4
 80037ec:	f003 fe44 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e071      	b.n	80038d8 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037fa:	f002 f9dd 	bl	8005bb8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80037fe:	2100      	movs	r1, #0
 8003800:	20a4      	movs	r0, #164	@ 0xa4
 8003802:	f003 fe39 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8003806:	2300      	movs	r3, #0
 8003808:	e066      	b.n	80038d8 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fa87 	bl	8004d28 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800381a:	2301      	movs	r3, #1
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800381e:	f002 f9cb 	bl	8005bb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003822:	f000 fd25 	bl	8004270 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003826:	f002 f995 	bl	8005b54 <vPortEnterCritical>
 800382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003830:	b25b      	sxtb	r3, r3
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d103      	bne.n	8003840 <xQueueReceive+0x138>
 8003838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003846:	b25b      	sxtb	r3, r3
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d103      	bne.n	8003856 <xQueueReceive+0x14e>
 800384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003856:	f002 f9af 	bl	8005bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800385a:	1d3a      	adds	r2, r7, #4
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fa78 	bl	8004d58 <xTaskCheckForTimeOut>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d123      	bne.n	80038b6 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800386e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003870:	f000 f91a 	bl	8003aa8 <prvIsQueueEmpty>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d017      	beq.n	80038aa <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	3324      	adds	r3, #36	@ 0x24
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f000 ffd8 	bl	8004838 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800388a:	f000 f8bb 	bl	8003a04 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800388e:	f000 fcfd 	bl	800428c <xTaskResumeAll>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d181      	bne.n	800379c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <xQueueReceive+0x1d8>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	e778      	b.n	800379c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80038aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ac:	f000 f8aa 	bl	8003a04 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038b0:	f000 fcec 	bl	800428c <xTaskResumeAll>
 80038b4:	e772      	b.n	800379c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80038b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b8:	f000 f8a4 	bl	8003a04 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038bc:	f000 fce6 	bl	800428c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038c2:	f000 f8f1 	bl	8003aa8 <prvIsQueueEmpty>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f43f af67 	beq.w	800379c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80038ce:	2100      	movs	r1, #0
 80038d0:	20a4      	movs	r0, #164	@ 0xa4
 80038d2:	f003 fdd1 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80038d6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3730      	adds	r7, #48	@ 0x30
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d14d      	bne.n	80039a6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f001 fb6e 	bl	8004ff0 <xTaskPriorityDisinherit>
 8003914:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	e043      	b.n	80039a6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d119      	bne.n	8003958 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6858      	ldr	r0, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	461a      	mov	r2, r3
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	f004 fa9c 	bl	8007e6c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	441a      	add	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d32b      	bcc.n	80039a6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e026      	b.n	80039a6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68d8      	ldr	r0, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	461a      	mov	r2, r3
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	f004 fa82 	bl	8007e6c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	425b      	negs	r3, r3
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d207      	bcs.n	8003994 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	425b      	negs	r3, r3
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d105      	bne.n	80039a6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80039ae:	697b      	ldr	r3, [r7, #20]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d303      	bcc.n	80039ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68d9      	ldr	r1, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	461a      	mov	r2, r3
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	f004 fa38 	bl	8007e6c <memcpy>
    }
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003a0c:	f002 f8a2 	bl	8005b54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a16:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a18:	e011      	b.n	8003a3e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3324      	adds	r3, #36	@ 0x24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 ffd4 	bl	80049d4 <xTaskRemoveFromEventList>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003a32:	f001 f9fd 	bl	8004e30 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dce9      	bgt.n	8003a1a <prvUnlockQueue+0x16>
 8003a46:	e000      	b.n	8003a4a <prvUnlockQueue+0x46>
                    break;
 8003a48:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	22ff      	movs	r2, #255	@ 0xff
 8003a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003a52:	f002 f8b1 	bl	8005bb8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a56:	f002 f87d 	bl	8005b54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a60:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a62:	e011      	b.n	8003a88 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3310      	adds	r3, #16
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 ffaf 	bl	80049d4 <xTaskRemoveFromEventList>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a7c:	f001 f9d8 	bl	8004e30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	dce9      	bgt.n	8003a64 <prvUnlockQueue+0x60>
 8003a90:	e000      	b.n	8003a94 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a92:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	22ff      	movs	r2, #255	@ 0xff
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003a9c:	f002 f88c 	bl	8005bb8 <vPortExitCritical>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ab0:	f002 f850 	bl	8005b54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e001      	b.n	8003ac6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ac6:	f002 f877 	bl	8005bb8 <vPortExitCritical>

    return xReturn;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60fb      	str	r3, [r7, #12]
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d024      	beq.n	8003b50 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e01e      	b.n	8003b4a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003b0c:	4a18      	ldr	r2, [pc, #96]	@ (8003b70 <vQueueAddToRegistry+0x9c>)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d105      	bne.n	8003b28 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4a13      	ldr	r2, [pc, #76]	@ (8003b70 <vQueueAddToRegistry+0x9c>)
 8003b22:	4413      	add	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
                    break;
 8003b26:	e013      	b.n	8003b50 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <vQueueAddToRegistry+0x70>
 8003b2e:	4a10      	ldr	r2, [pc, #64]	@ (8003b70 <vQueueAddToRegistry+0x9c>)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003b70 <vQueueAddToRegistry+0x9c>)
 8003b40:	4413      	add	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	3301      	adds	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b07      	cmp	r3, #7
 8003b4e:	d9dd      	bls.n	8003b0c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003b62:	20b6      	movs	r0, #182	@ 0xb6
 8003b64:	f003 fc4c 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003b68:	bf00      	nop
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000114 	.word	0x20000114

08003b74 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b84:	f001 ffe6 	bl	8005b54 <vPortEnterCritical>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d103      	bne.n	8003b9e <vQueueWaitForMessageRestricted+0x2a>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ba4:	b25b      	sxtb	r3, r3
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d103      	bne.n	8003bb4 <vQueueWaitForMessageRestricted+0x40>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bb4:	f002 f800 	bl	8005bb8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3324      	adds	r3, #36	@ 0x24
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 feb9 	bl	8004940 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff ff18 	bl	8003a04 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003bd4:	20b9      	movs	r0, #185	@ 0xb9
 8003bd6:	f003 fc13 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b08a      	sub	sp, #40	@ 0x28
 8003be6:	af04      	add	r7, sp, #16
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 f8db 	bl	8005db0 <pvPortMalloc>
 8003bfa:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003c02:	205c      	movs	r0, #92	@ 0x5c
 8003c04:	f002 f8d4 	bl	8005db0 <pvPortMalloc>
 8003c08:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003c10:	225c      	movs	r2, #92	@ 0x5c
 8003c12:	2100      	movs	r1, #0
 8003c14:	6978      	ldr	r0, [r7, #20]
 8003c16:	f004 f8fc 	bl	8007e12 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c20:	e005      	b.n	8003c2e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f002 f9f6 	bl	8006014 <vPortFree>
 8003c28:	e001      	b.n	8003c2e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c34:	2300      	movs	r3, #0
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f82d 	bl	8003caa <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003c50:	697b      	ldr	r3, [r7, #20]
    }
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b088      	sub	sp, #32
 8003c5e:	af02      	add	r7, sp, #8
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff ffb3 	bl	8003be2 <prvCreateTask>
 8003c7c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003c84:	6938      	ldr	r0, [r7, #16]
 8003c86:	f000 f8a1 	bl	8003dcc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e002      	b.n	8003c96 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	20c2      	movs	r0, #194	@ 0xc2
 8003c9c:	f003 fbec 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003ca0:	697b      	ldr	r3, [r7, #20]
    }
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b088      	sub	sp, #32
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	21a5      	movs	r1, #165	@ 0xa5
 8003cc4:	f004 f8a5 	bl	8007e12 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f023 0307 	bic.w	r3, r3, #7
 8003ce0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	617b      	str	r3, [r7, #20]
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01e      	beq.n	8003d48 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e012      	b.n	8003d36 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	7819      	ldrb	r1, [r3, #0]
 8003d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3334      	adds	r3, #52	@ 0x34
 8003d20:	460a      	mov	r2, r1
 8003d22:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	3301      	adds	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2b0e      	cmp	r3, #14
 8003d3a:	d9e9      	bls.n	8003d10 <prvInitialiseNewTask+0x66>
 8003d3c:	e000      	b.n	8003d40 <prvInitialiseNewTask+0x96>
            {
                break;
 8003d3e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d90b      	bls.n	8003d66 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	613b      	str	r3, [r7, #16]
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	e7fd      	b.n	8003d62 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d901      	bls.n	8003d70 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d74:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fa55 	bl	8003230 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	3318      	adds	r3, #24
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fa50 	bl	8003230 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d94:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	f1c3 0205 	rsb	r2, r3, #5
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	69b8      	ldr	r0, [r7, #24]
 8003dac:	f001 fd52 	bl	8005854 <pxPortInitialiseStack>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003dc2:	bf00      	nop
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003dcc:	b5b0      	push	{r4, r5, r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003dd4:	f001 febe 	bl	8005b54 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003dd8:	4b50      	ldr	r3, [pc, #320]	@ (8003f1c <prvAddNewTaskToReadyList+0x150>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	4a4f      	ldr	r2, [pc, #316]	@ (8003f1c <prvAddNewTaskToReadyList+0x150>)
 8003de0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003de2:	4b4f      	ldr	r3, [pc, #316]	@ (8003f20 <prvAddNewTaskToReadyList+0x154>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003dea:	4a4d      	ldr	r2, [pc, #308]	@ (8003f20 <prvAddNewTaskToReadyList+0x154>)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003df0:	4b4a      	ldr	r3, [pc, #296]	@ (8003f1c <prvAddNewTaskToReadyList+0x150>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d110      	bne.n	8003e1a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003df8:	f001 f83e 	bl	8004e78 <prvInitialiseTaskLists>
 8003dfc:	e00d      	b.n	8003e1a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003dfe:	4b49      	ldr	r3, [pc, #292]	@ (8003f24 <prvAddNewTaskToReadyList+0x158>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e06:	4b46      	ldr	r3, [pc, #280]	@ (8003f20 <prvAddNewTaskToReadyList+0x154>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d802      	bhi.n	8003e1a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003e14:	4a42      	ldr	r2, [pc, #264]	@ (8003f20 <prvAddNewTaskToReadyList+0x154>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003e1a:	4b43      	ldr	r3, [pc, #268]	@ (8003f28 <prvAddNewTaskToReadyList+0x15c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a41      	ldr	r2, [pc, #260]	@ (8003f28 <prvAddNewTaskToReadyList+0x15c>)
 8003e22:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e24:	4b40      	ldr	r3, [pc, #256]	@ (8003f28 <prvAddNewTaskToReadyList+0x15c>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <prvAddNewTaskToReadyList+0x94>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f003 fb93 	bl	8007560 <SEGGER_SYSVIEW_OnTaskCreate>
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461c      	mov	r4, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	1ae3      	subs	r3, r4, r3
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	f003 fe84 	bl	8007b68 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f003 fc00 	bl	8007668 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	4b2e      	ldr	r3, [pc, #184]	@ (8003f2c <prvAddNewTaskToReadyList+0x160>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	4a2d      	ldr	r2, [pc, #180]	@ (8003f2c <prvAddNewTaskToReadyList+0x160>)
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7e:	492c      	ldr	r1, [pc, #176]	@ (8003f30 <prvAddNewTaskToReadyList+0x164>)
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	3204      	adds	r2, #4
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <prvAddNewTaskToReadyList+0x164>)
 8003ebe:	441a      	add	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	615a      	str	r2, [r3, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec8:	4919      	ldr	r1, [pc, #100]	@ (8003f30 <prvAddNewTaskToReadyList+0x164>)
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	4814      	ldr	r0, [pc, #80]	@ (8003f30 <prvAddNewTaskToReadyList+0x164>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4403      	add	r3, r0
 8003ee8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003eea:	f001 fe65 	bl	8005bb8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <prvAddNewTaskToReadyList+0x158>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00e      	beq.n	8003f14 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <prvAddNewTaskToReadyList+0x154>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d207      	bcs.n	8003f14 <prvAddNewTaskToReadyList+0x148>
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <prvAddNewTaskToReadyList+0x168>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f1c:	2000022c 	.word	0x2000022c
 8003f20:	20000154 	.word	0x20000154
 8003f24:	20000238 	.word	0x20000238
 8003f28:	20000248 	.word	0x20000248
 8003f2c:	20000234 	.word	0x20000234
 8003f30:	20000158 	.word	0x20000158
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8003f44:	f001 fe06 	bl	8005b54 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <vTaskDelete+0x1c>
 8003f4e:	4b50      	ldr	r3, [pc, #320]	@ (8004090 <vTaskDelete+0x158>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	e000      	b.n	8003f56 <vTaskDelete+0x1e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff f9d7 	bl	8003310 <uxListRemove>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d115      	bne.n	8003f94 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	4949      	ldr	r1, [pc, #292]	@ (8004094 <vTaskDelete+0x15c>)
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <vTaskDelete+0x5c>
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	4b43      	ldr	r3, [pc, #268]	@ (8004098 <vTaskDelete+0x160>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	4a41      	ldr	r2, [pc, #260]	@ (8004098 <vTaskDelete+0x160>)
 8003f92:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3318      	adds	r3, #24
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff f9b5 	bl	8003310 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800409c <vTaskDelete+0x164>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	4a3b      	ldr	r2, [pc, #236]	@ (800409c <vTaskDelete+0x164>)
 8003fae:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8003fb0:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <vTaskDelete+0x158>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d101      	bne.n	8003fbe <vTaskDelete+0x86>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <vTaskDelete+0x88>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8003fc2:	4b37      	ldr	r3, [pc, #220]	@ (80040a0 <vTaskDelete+0x168>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01d      	beq.n	8004006 <vTaskDelete+0xce>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <vTaskDelete+0xce>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4833      	ldr	r0, [pc, #204]	@ (80040a4 <vTaskDelete+0x16c>)
 8003fd8:	f7ff f939 	bl	800324e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003fdc:	4b32      	ldr	r3, [pc, #200]	@ (80040a8 <vTaskDelete+0x170>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	4a31      	ldr	r2, [pc, #196]	@ (80040a8 <vTaskDelete+0x170>)
 8003fe4:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 fbdf 	bl	80077ac <SEGGER_SYSVIEW_ShrinkId>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	20c3      	movs	r0, #195	@ 0xc3
 8003ff4:	f002 fe2c 	bl	8006c50 <SEGGER_SYSVIEW_RecordU32>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f003 fe1c 	bl	8007c38 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8004000:	2301      	movs	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e013      	b.n	800402e <vTaskDelete+0xf6>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8004006:	4b29      	ldr	r3, [pc, #164]	@ (80040ac <vTaskDelete+0x174>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3b01      	subs	r3, #1
 800400c:	4a27      	ldr	r2, [pc, #156]	@ (80040ac <vTaskDelete+0x174>)
 800400e:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4618      	mov	r0, r3
 8004014:	f003 fbca 	bl	80077ac <SEGGER_SYSVIEW_ShrinkId>
 8004018:	4603      	mov	r3, r0
 800401a:	4619      	mov	r1, r3
 800401c:	20c3      	movs	r0, #195	@ 0xc3
 800401e:	f002 fe17 	bl	8006c50 <SEGGER_SYSVIEW_RecordU32>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4618      	mov	r0, r3
 8004026:	f003 fe07 	bl	8007c38 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800402a:	f000 ffa3 	bl	8004f74 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800402e:	f001 fdc3 	bl	8005bb8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d002      	beq.n	800403e <vTaskDelete+0x106>
        {
            prvDeleteTCB( pxTCB );
 8004038:	6938      	ldr	r0, [r7, #16]
 800403a:	f000 ff8b 	bl	8004f54 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800403e:	4b18      	ldr	r3, [pc, #96]	@ (80040a0 <vTaskDelete+0x168>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01c      	beq.n	8004080 <vTaskDelete+0x148>
            {
                if( pxTCB == pxCurrentTCB )
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <vTaskDelete+0x158>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	429a      	cmp	r2, r3
 800404e:	d117      	bne.n	8004080 <vTaskDelete+0x148>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8004050:	4b17      	ldr	r3, [pc, #92]	@ (80040b0 <vTaskDelete+0x178>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <vTaskDelete+0x138>
    __asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60bb      	str	r3, [r7, #8]
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	e7fd      	b.n	800406c <vTaskDelete+0x134>
                    taskYIELD_WITHIN_API();
 8004070:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <vTaskDelete+0x17c>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8004080:	20c3      	movs	r0, #195	@ 0xc3
 8004082:	f003 f9bd 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000154 	.word	0x20000154
 8004094:	20000158 	.word	0x20000158
 8004098:	20000234 	.word	0x20000234
 800409c:	20000248 	.word	0x20000248
 80040a0:	20000238 	.word	0x20000238
 80040a4:	20000200 	.word	0x20000200
 80040a8:	20000214 	.word	0x20000214
 80040ac:	2000022c 	.word	0x2000022c
 80040b0:	20000254 	.word	0x20000254
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80040ca:	f000 f8d1 	bl	8004270 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80040ce:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <vTaskDelay+0x68>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d00b      	beq.n	80040ee <vTaskDelay+0x36>
    __asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60bb      	str	r3, [r7, #8]
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040ee:	2100      	movs	r1, #0
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f001 f847 	bl	8005184 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80040f6:	f000 f8c9 	bl	800428c <xTaskResumeAll>
 80040fa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <vTaskDelay+0x6c>)
 8004104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8004112:	20c5      	movs	r0, #197	@ 0xc5
 8004114:	f003 f974 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000254 	.word	0x20000254
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	@ 0x28
 800412c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800412e:	2301      	movs	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e011      	b.n	8004160 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <prvCreateIdleTasks+0x88>)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	4413      	add	r3, r2
 8004142:	7819      	ldrb	r1, [r3, #0]
 8004144:	463a      	mov	r2, r7
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	460a      	mov	r2, r1
 800414c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800414e:	463a      	mov	r2, r7
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3301      	adds	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b0e      	cmp	r3, #14
 8004164:	ddea      	ble.n	800413c <prvCreateIdleTasks+0x14>
 8004166:	e000      	b.n	800416a <prvCreateIdleTasks+0x42>
        {
            break;
 8004168:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e015      	b.n	800419c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004170:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <prvCreateIdleTasks+0x8c>)
 8004172:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a0f      	ldr	r2, [pc, #60]	@ (80041b8 <prvCreateIdleTasks+0x90>)
 800417a:	4413      	add	r3, r2
 800417c:	4639      	mov	r1, r7
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	2300      	movs	r3, #0
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	2282      	movs	r2, #130	@ 0x82
 8004188:	6938      	ldr	r0, [r7, #16]
 800418a:	f7ff fd66 	bl	8003c5a <xTaskCreate>
 800418e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	3301      	adds	r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	dde6      	ble.n	8004170 <prvCreateIdleTasks+0x48>
 80041a2:	e000      	b.n	80041a6 <prvCreateIdleTasks+0x7e>
        {
            break;
 80041a4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80041a6:	69fb      	ldr	r3, [r7, #28]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	08007fc4 	.word	0x08007fc4
 80041b4:	08004e49 	.word	0x08004e49
 80041b8:	20000250 	.word	0x20000250

080041bc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80041c2:	f7ff ffb1 	bl	8004128 <prvCreateIdleTasks>
 80041c6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80041ce:	f001 f867 	bl	80052a0 <xTimerCreateTimerTask>
 80041d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d124      	bne.n	8004224 <vTaskStartScheduler+0x68>
    __asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60bb      	str	r3, [r7, #8]
}
 80041ec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80041ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <vTaskStartScheduler+0x9c>)
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <vTaskStartScheduler+0xa0>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041fc:	4b18      	ldr	r3, [pc, #96]	@ (8004260 <vTaskStartScheduler+0xa4>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004202:	4b18      	ldr	r3, [pc, #96]	@ (8004264 <vTaskStartScheduler+0xa8>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <vTaskStartScheduler+0xac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d102      	bne.n	8004214 <vTaskStartScheduler+0x58>
 800420e:	f003 f98b 	bl	8007528 <SEGGER_SYSVIEW_OnIdle>
 8004212:	e004      	b.n	800421e <vTaskStartScheduler+0x62>
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <vTaskStartScheduler+0xac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f003 f9e3 	bl	80075e4 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800421e:	f001 fba9 	bl	8005974 <xPortStartScheduler>
 8004222:	e00f      	b.n	8004244 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d10b      	bne.n	8004244 <vTaskStartScheduler+0x88>
    __asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	607b      	str	r3, [r7, #4]
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004244:	4b09      	ldr	r3, [pc, #36]	@ (800426c <vTaskStartScheduler+0xb0>)
 8004246:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8004248:	20cd      	movs	r0, #205	@ 0xcd
 800424a:	f003 f8d9 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	2000024c 	.word	0x2000024c
 800425c:	20000238 	.word	0x20000238
 8004260:	20000230 	.word	0x20000230
 8004264:	20000250 	.word	0x20000250
 8004268:	20000154 	.word	0x20000154
 800426c:	20000010 	.word	0x20000010

08004270 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004274:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <vTaskSuspendAll+0x18>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a03      	ldr	r2, [pc, #12]	@ (8004288 <vTaskSuspendAll+0x18>)
 800427c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800427e:	20cf      	movs	r0, #207	@ 0xcf
 8004280:	f003 f8be 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004284:	bf00      	nop
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000254 	.word	0x20000254

0800428c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800429a:	f001 fc5b 	bl	8005b54 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80042a2:	4b7a      	ldr	r3, [pc, #488]	@ (800448c <xTaskResumeAll+0x200>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10b      	bne.n	80042c2 <xTaskResumeAll+0x36>
    __asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	603b      	str	r3, [r7, #0]
}
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
 80042c0:	e7fd      	b.n	80042be <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80042c2:	4b72      	ldr	r3, [pc, #456]	@ (800448c <xTaskResumeAll+0x200>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a70      	ldr	r2, [pc, #448]	@ (800448c <xTaskResumeAll+0x200>)
 80042ca:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80042cc:	4b6f      	ldr	r3, [pc, #444]	@ (800448c <xTaskResumeAll+0x200>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 80ce 	bne.w	8004472 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004490 <xTaskResumeAll+0x204>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80c9 	beq.w	8004472 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042e0:	e092      	b.n	8004408 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004494 <xTaskResumeAll+0x208>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	6a12      	ldr	r2, [r2, #32]
 80042f8:	609a      	str	r2, [r3, #8]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	69d2      	ldr	r2, [r2, #28]
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3318      	adds	r3, #24
 800430c:	429a      	cmp	r2, r3
 800430e:	d103      	bne.n	8004318 <xTaskResumeAll+0x8c>
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2200      	movs	r2, #0
 800431c:	629a      	str	r2, [r3, #40]	@ 0x28
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1e5a      	subs	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	68d2      	ldr	r2, [r2, #12]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	6892      	ldr	r2, [r2, #8]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3304      	adds	r3, #4
 800434a:	429a      	cmp	r2, r3
 800434c:	d103      	bne.n	8004356 <xTaskResumeAll+0xca>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	1e5a      	subs	r2, r3, #1
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4618      	mov	r0, r3
 800436a:	f003 f97d 	bl	8007668 <SEGGER_SYSVIEW_OnTaskStartReady>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	2201      	movs	r2, #1
 8004374:	409a      	lsls	r2, r3
 8004376:	4b48      	ldr	r3, [pc, #288]	@ (8004498 <xTaskResumeAll+0x20c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <xTaskResumeAll+0x20c>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004384:	4945      	ldr	r1, [pc, #276]	@ (800449c <xTaskResumeAll+0x210>)
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3304      	adds	r3, #4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	3204      	adds	r2, #4
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4a36      	ldr	r2, [pc, #216]	@ (800449c <xTaskResumeAll+0x210>)
 80043c4:	441a      	add	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	615a      	str	r2, [r3, #20]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ce:	4933      	ldr	r1, [pc, #204]	@ (800449c <xTaskResumeAll+0x210>)
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043e0:	1c59      	adds	r1, r3, #1
 80043e2:	482e      	ldr	r0, [pc, #184]	@ (800449c <xTaskResumeAll+0x210>)
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	4b2a      	ldr	r3, [pc, #168]	@ (80044a0 <xTaskResumeAll+0x214>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d904      	bls.n	8004408 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80043fe:	4a29      	ldr	r2, [pc, #164]	@ (80044a4 <xTaskResumeAll+0x218>)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2101      	movs	r1, #1
 8004404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004408:	4b22      	ldr	r3, [pc, #136]	@ (8004494 <xTaskResumeAll+0x208>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f af68 	bne.w	80042e2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004418:	f000 fdac 	bl	8004f74 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800441c:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <xTaskResumeAll+0x21c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d012      	beq.n	800444e <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004428:	f000 f878 	bl	800451c <xTaskIncrementTick>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004432:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <xTaskResumeAll+0x218>)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2101      	movs	r1, #1
 8004438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3b01      	subs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ef      	bne.n	8004428 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8004448:	4b17      	ldr	r3, [pc, #92]	@ (80044a8 <xTaskResumeAll+0x21c>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800444e:	4a15      	ldr	r2, [pc, #84]	@ (80044a4 <xTaskResumeAll+0x218>)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800445a:	2301      	movs	r3, #1
 800445c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800445e:	4b10      	ldr	r3, [pc, #64]	@ (80044a0 <xTaskResumeAll+0x214>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <xTaskResumeAll+0x220>)
 8004464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004472:	f001 fba1 	bl	8005bb8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	4619      	mov	r1, r3
 800447a:	20d0      	movs	r0, #208	@ 0xd0
 800447c:	f002 fffc 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8004480:	69bb      	ldr	r3, [r7, #24]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000254 	.word	0x20000254
 8004490:	2000022c 	.word	0x2000022c
 8004494:	200001ec 	.word	0x200001ec
 8004498:	20000234 	.word	0x20000234
 800449c:	20000158 	.word	0x20000158
 80044a0:	20000154 	.word	0x20000154
 80044a4:	20000240 	.word	0x20000240
 80044a8:	2000023c 	.word	0x2000023c
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <xTaskGetTickCount+0x20>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	20d1      	movs	r0, #209	@ 0xd1
 80044c0:	f002 ffda 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80044c4:	687b      	ldr	r3, [r7, #4]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000230 	.word	0x20000230

080044d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044da:	f001 fc27 	bl	8005d2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <xTaskGetTickCountFromISR+0x28>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	20d2      	movs	r0, #210	@ 0xd2
 80044ec:	f002 ffc4 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80044f0:	683b      	ldr	r3, [r7, #0]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000230 	.word	0x20000230

08004500 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8004504:	4b04      	ldr	r3, [pc, #16]	@ (8004518 <uxTaskGetNumberOfTasks+0x18>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4619      	mov	r1, r3
 800450a:	20d3      	movs	r0, #211	@ 0xd3
 800450c:	f002 ffb4 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8004510:	4b01      	ldr	r3, [pc, #4]	@ (8004518 <uxTaskGetNumberOfTasks+0x18>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	2000022c 	.word	0x2000022c

0800451c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004526:	4b83      	ldr	r3, [pc, #524]	@ (8004734 <xTaskIncrementTick+0x218>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 80f3 	bne.w	8004716 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004530:	4b81      	ldr	r3, [pc, #516]	@ (8004738 <xTaskIncrementTick+0x21c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004538:	4a7f      	ldr	r2, [pc, #508]	@ (8004738 <xTaskIncrementTick+0x21c>)
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d121      	bne.n	8004588 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004544:	4b7d      	ldr	r3, [pc, #500]	@ (800473c <xTaskIncrementTick+0x220>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <xTaskIncrementTick+0x4a>
    __asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <xTaskIncrementTick+0x46>
 8004566:	4b75      	ldr	r3, [pc, #468]	@ (800473c <xTaskIncrementTick+0x220>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	4b74      	ldr	r3, [pc, #464]	@ (8004740 <xTaskIncrementTick+0x224>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a72      	ldr	r2, [pc, #456]	@ (800473c <xTaskIncrementTick+0x220>)
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4a72      	ldr	r2, [pc, #456]	@ (8004740 <xTaskIncrementTick+0x224>)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b72      	ldr	r3, [pc, #456]	@ (8004744 <xTaskIncrementTick+0x228>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	4a70      	ldr	r2, [pc, #448]	@ (8004744 <xTaskIncrementTick+0x228>)
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	f000 fcf6 	bl	8004f74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004588:	4b6f      	ldr	r3, [pc, #444]	@ (8004748 <xTaskIncrementTick+0x22c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	429a      	cmp	r2, r3
 8004590:	f0c0 80ac 	bcc.w	80046ec <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004594:	4b69      	ldr	r3, [pc, #420]	@ (800473c <xTaskIncrementTick+0x220>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800459e:	4b6a      	ldr	r3, [pc, #424]	@ (8004748 <xTaskIncrementTick+0x22c>)
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	601a      	str	r2, [r3, #0]
                    break;
 80045a6:	e0a1      	b.n	80046ec <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045a8:	4b64      	ldr	r3, [pc, #400]	@ (800473c <xTaskIncrementTick+0x220>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80045b8:	6a3a      	ldr	r2, [r7, #32]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d203      	bcs.n	80045c8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80045c0:	4a61      	ldr	r2, [pc, #388]	@ (8004748 <xTaskIncrementTick+0x22c>)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	6013      	str	r3, [r2, #0]
                        break;
 80045c6:	e091      	b.n	80046ec <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	68d2      	ldr	r2, [r2, #12]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	6892      	ldr	r2, [r2, #8]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	3304      	adds	r3, #4
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d103      	bne.n	80045f6 <xTaskIncrementTick+0xda>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2200      	movs	r2, #0
 80045fa:	615a      	str	r2, [r3, #20]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01e      	beq.n	800464c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	6a12      	ldr	r2, [r2, #32]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	69d2      	ldr	r2, [r2, #28]
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	3318      	adds	r3, #24
 8004630:	429a      	cmp	r2, r3
 8004632:	d103      	bne.n	800463c <xTaskIncrementTick+0x120>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	@ 0x28
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	1e5a      	subs	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 f80a 	bl	8007668 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	2201      	movs	r2, #1
 800465a:	409a      	lsls	r2, r3
 800465c:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <xTaskIncrementTick+0x230>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4313      	orrs	r3, r2
 8004662:	4a3a      	ldr	r2, [pc, #232]	@ (800474c <xTaskIncrementTick+0x230>)
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466a:	4939      	ldr	r1, [pc, #228]	@ (8004750 <xTaskIncrementTick+0x234>)
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3304      	adds	r3, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	3204      	adds	r2, #4
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	1d1a      	adds	r2, r3, #4
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4a29      	ldr	r2, [pc, #164]	@ (8004750 <xTaskIncrementTick+0x234>)
 80046aa:	441a      	add	r2, r3
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	615a      	str	r2, [r3, #20]
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b4:	4926      	ldr	r1, [pc, #152]	@ (8004750 <xTaskIncrementTick+0x234>)
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	4821      	ldr	r0, [pc, #132]	@ (8004750 <xTaskIncrementTick+0x234>)
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4403      	add	r3, r0
 80046d4:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046da:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <xTaskIncrementTick+0x238>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f67f af57 	bls.w	8004594 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80046e6:	2301      	movs	r3, #1
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ea:	e753      	b.n	8004594 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80046ec:	4b19      	ldr	r3, [pc, #100]	@ (8004754 <xTaskIncrementTick+0x238>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f2:	4917      	ldr	r1, [pc, #92]	@ (8004750 <xTaskIncrementTick+0x234>)
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d901      	bls.n	8004708 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8004704:	2301      	movs	r3, #1
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004708:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <xTaskIncrementTick+0x23c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
 8004714:	e004      	b.n	8004720 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004716:	4b11      	ldr	r3, [pc, #68]	@ (800475c <xTaskIncrementTick+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a0f      	ldr	r2, [pc, #60]	@ (800475c <xTaskIncrementTick+0x240>)
 800471e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	4619      	mov	r1, r3
 8004724:	20db      	movs	r0, #219	@ 0xdb
 8004726:	f002 fea7 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	@ 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000254 	.word	0x20000254
 8004738:	20000230 	.word	0x20000230
 800473c:	200001e4 	.word	0x200001e4
 8004740:	200001e8 	.word	0x200001e8
 8004744:	20000244 	.word	0x20000244
 8004748:	2000024c 	.word	0x2000024c
 800474c:	20000234 	.word	0x20000234
 8004750:	20000158 	.word	0x20000158
 8004754:	20000154 	.word	0x20000154
 8004758:	20000240 	.word	0x20000240
 800475c:	2000023c 	.word	0x2000023c

08004760 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004766:	4b2e      	ldr	r3, [pc, #184]	@ (8004820 <vTaskSwitchContext+0xc0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800476e:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <vTaskSwitchContext+0xc4>)
 8004770:	2201      	movs	r2, #1
 8004772:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004774:	e04f      	b.n	8004816 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8004776:	4b2b      	ldr	r3, [pc, #172]	@ (8004824 <vTaskSwitchContext+0xc4>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800477c:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <vTaskSwitchContext+0xc8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800478a:	7afb      	ldrb	r3, [r7, #11]
 800478c:	f1c3 031f 	rsb	r3, r3, #31
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	4926      	ldr	r1, [pc, #152]	@ (800482c <vTaskSwitchContext+0xcc>)
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <vTaskSwitchContext+0x5e>
    __asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	607b      	str	r3, [r7, #4]
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <vTaskSwitchContext+0x5a>
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4a18      	ldr	r2, [pc, #96]	@ (800482c <vTaskSwitchContext+0xcc>)
 80047ca:	4413      	add	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	605a      	str	r2, [r3, #4]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	3308      	adds	r3, #8
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d103      	bne.n	80047ec <vTaskSwitchContext+0x8c>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004830 <vTaskSwitchContext+0xd0>)
 80047f4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80047f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <vTaskSwitchContext+0xd4>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <vTaskSwitchContext+0xd0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d102      	bne.n	8004808 <vTaskSwitchContext+0xa8>
 8004802:	f002 fe91 	bl	8007528 <SEGGER_SYSVIEW_OnIdle>
 8004806:	e004      	b.n	8004812 <vTaskSwitchContext+0xb2>
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <vTaskSwitchContext+0xd0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f002 fee9 	bl	80075e4 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004812:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <vTaskSwitchContext+0xd0>)
 8004814:	681b      	ldr	r3, [r3, #0]
    }
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000254 	.word	0x20000254
 8004824:	20000240 	.word	0x20000240
 8004828:	20000234 	.word	0x20000234
 800482c:	20000158 	.word	0x20000158
 8004830:	20000154 	.word	0x20000154
 8004834:	20000250 	.word	0x20000250

08004838 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60fb      	str	r3, [r7, #12]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004860:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <vTaskPlaceOnEventList+0x4c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3318      	adds	r3, #24
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fe fd16 	bl	800329a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800486e:	2101      	movs	r1, #1
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f000 fc87 	bl	8005184 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8004876:	20e1      	movs	r0, #225	@ 0xe1
 8004878:	f002 fdc2 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000154 	.word	0x20000154

08004888 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <vTaskPlaceOnUnorderedEventList+0x2a>
    __asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61bb      	str	r3, [r7, #24]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80048b2:	4b21      	ldr	r3, [pc, #132]	@ (8004938 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10b      	bne.n	80048d2 <vTaskPlaceOnUnorderedEventList+0x4a>
    __asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	617b      	str	r3, [r7, #20]
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80048d2:	4b1a      	ldr	r3, [pc, #104]	@ (800493c <vTaskPlaceOnUnorderedEventList+0xb4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80048dc:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	4b15      	ldr	r3, [pc, #84]	@ (800493c <vTaskPlaceOnUnorderedEventList+0xb4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	61da      	str	r2, [r3, #28]
 80048ec:	4b13      	ldr	r3, [pc, #76]	@ (800493c <vTaskPlaceOnUnorderedEventList+0xb4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	621a      	str	r2, [r3, #32]
 80048f6:	4b11      	ldr	r3, [pc, #68]	@ (800493c <vTaskPlaceOnUnorderedEventList+0xb4>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	3218      	adds	r2, #24
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	4b0e      	ldr	r3, [pc, #56]	@ (800493c <vTaskPlaceOnUnorderedEventList+0xb4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f103 0218 	add.w	r2, r3, #24
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <vTaskPlaceOnUnorderedEventList+0xb4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004920:	2101      	movs	r1, #1
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fc2e 	bl	8005184 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
 8004928:	20e2      	movs	r0, #226	@ 0xe2
 800492a:	f002 fd69 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 800492e:	bf00      	nop
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000254 	.word	0x20000254
 800493c:	20000154 	.word	0x20000154

08004940 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	613b      	str	r3, [r7, #16]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <vTaskPlaceOnEventListRestricted+0x90>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	61da      	str	r2, [r3, #28]
 8004978:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <vTaskPlaceOnEventListRestricted+0x90>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	6892      	ldr	r2, [r2, #8]
 8004980:	621a      	str	r2, [r3, #32]
 8004982:	4b13      	ldr	r3, [pc, #76]	@ (80049d0 <vTaskPlaceOnEventListRestricted+0x90>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	3218      	adds	r2, #24
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <vTaskPlaceOnEventListRestricted+0x90>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f103 0218 	add.w	r2, r3, #24
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <vTaskPlaceOnEventListRestricted+0x90>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	68b8      	ldr	r0, [r7, #8]
 80049bc:	f000 fbe2 	bl	8005184 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80049c0:	20e3      	movs	r0, #227	@ 0xe3
 80049c2:	f002 fd1d 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000154 	.word	0x20000154

080049d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	@ 0x28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60fb      	str	r3, [r7, #12]
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	6a12      	ldr	r2, [r2, #32]
 8004a10:	609a      	str	r2, [r3, #8]
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	69d2      	ldr	r2, [r2, #28]
 8004a1a:	605a      	str	r2, [r3, #4]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	3318      	adds	r3, #24
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d103      	bne.n	8004a30 <xTaskRemoveFromEventList+0x5c>
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	2200      	movs	r2, #0
 8004a34:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	1e5a      	subs	r2, r3, #1
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004a40:	4b4e      	ldr	r3, [pc, #312]	@ (8004b7c <xTaskRemoveFromEventList+0x1a8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d164      	bne.n	8004b12 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	68d2      	ldr	r2, [r2, #12]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	6892      	ldr	r2, [r2, #8]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d103      	bne.n	8004a76 <xTaskRemoveFromEventList+0xa2>
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	615a      	str	r2, [r3, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f002 fded 	bl	8007668 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	2201      	movs	r2, #1
 8004a94:	409a      	lsls	r2, r3
 8004a96:	4b3a      	ldr	r3, [pc, #232]	@ (8004b80 <xTaskRemoveFromEventList+0x1ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	4a38      	ldr	r2, [pc, #224]	@ (8004b80 <xTaskRemoveFromEventList+0x1ac>)
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa4:	4937      	ldr	r1, [pc, #220]	@ (8004b84 <xTaskRemoveFromEventList+0x1b0>)
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	3204      	adds	r2, #4
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	1d1a      	adds	r2, r3, #4
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4a28      	ldr	r2, [pc, #160]	@ (8004b84 <xTaskRemoveFromEventList+0x1b0>)
 8004ae4:	441a      	add	r2, r3
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	615a      	str	r2, [r3, #20]
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aee:	4925      	ldr	r1, [pc, #148]	@ (8004b84 <xTaskRemoveFromEventList+0x1b0>)
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b00:	1c59      	adds	r1, r3, #1
 8004b02:	4820      	ldr	r0, [pc, #128]	@ (8004b84 <xTaskRemoveFromEventList+0x1b0>)
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4403      	add	r3, r0
 8004b0e:	6019      	str	r1, [r3, #0]
 8004b10:	e01b      	b.n	8004b4a <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b12:	4b1d      	ldr	r3, [pc, #116]	@ (8004b88 <xTaskRemoveFromEventList+0x1b4>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	61da      	str	r2, [r3, #28]
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	621a      	str	r2, [r3, #32]
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	3218      	adds	r2, #24
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f103 0218 	add.w	r2, r3, #24
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	609a      	str	r2, [r3, #8]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	4a12      	ldr	r2, [pc, #72]	@ (8004b88 <xTaskRemoveFromEventList+0x1b4>)
 8004b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b40:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <xTaskRemoveFromEventList+0x1b4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a10      	ldr	r2, [pc, #64]	@ (8004b88 <xTaskRemoveFromEventList+0x1b4>)
 8004b48:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b8c <xTaskRemoveFromEventList+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d905      	bls.n	8004b64 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <xTaskRemoveFromEventList+0x1bc>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e001      	b.n	8004b68 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	20e4      	movs	r0, #228	@ 0xe4
 8004b6e:	f002 fc83 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3728      	adds	r7, #40	@ 0x28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000254 	.word	0x20000254
 8004b80:	20000234 	.word	0x20000234
 8004b84:	20000158 	.word	0x20000158
 8004b88:	200001ec 	.word	0x200001ec
 8004b8c:	20000154 	.word	0x20000154
 8004b90:	20000240 	.word	0x20000240

08004b94 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d14 <vTaskRemoveFromUnorderedEventList+0x180>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <vTaskRemoveFromUnorderedEventList+0x2a>
    __asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60fb      	str	r3, [r7, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	e7fd      	b.n	8004bba <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <vTaskRemoveFromUnorderedEventList+0x58>
    __asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60bb      	str	r3, [r7, #8]
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <vTaskRemoveFromUnorderedEventList+0x54>
    listREMOVE_ITEM( pxEventListItem );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6892      	ldr	r2, [r2, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6852      	ldr	r2, [r2, #4]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d103      	bne.n	8004c18 <vTaskRemoveFromUnorderedEventList+0x84>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	1e5a      	subs	r2, r3, #1
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d103      	bne.n	8004c56 <vTaskRemoveFromUnorderedEventList+0xc2>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f002 fcfd 	bl	8007668 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	2201      	movs	r2, #1
 8004c74:	409a      	lsls	r2, r3
 8004c76:	4b28      	ldr	r3, [pc, #160]	@ (8004d18 <vTaskRemoveFromUnorderedEventList+0x184>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	4a26      	ldr	r2, [pc, #152]	@ (8004d18 <vTaskRemoveFromUnorderedEventList+0x184>)
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c84:	4925      	ldr	r1, [pc, #148]	@ (8004d1c <vTaskRemoveFromUnorderedEventList+0x188>)
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3304      	adds	r3, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	3204      	adds	r2, #4
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	1d1a      	adds	r2, r3, #4
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a16      	ldr	r2, [pc, #88]	@ (8004d1c <vTaskRemoveFromUnorderedEventList+0x188>)
 8004cc4:	441a      	add	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	615a      	str	r2, [r3, #20]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cce:	4913      	ldr	r1, [pc, #76]	@ (8004d1c <vTaskRemoveFromUnorderedEventList+0x188>)
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ce0:	1c59      	adds	r1, r3, #1
 8004ce2:	480e      	ldr	r0, [pc, #56]	@ (8004d1c <vTaskRemoveFromUnorderedEventList+0x188>)
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4403      	add	r3, r0
 8004cee:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <vTaskRemoveFromUnorderedEventList+0x18c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d902      	bls.n	8004d04 <vTaskRemoveFromUnorderedEventList+0x170>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8004cfe:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <vTaskRemoveFromUnorderedEventList+0x190>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
        }
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
 8004d04:	20e5      	movs	r0, #229	@ 0xe5
 8004d06:	f002 fb7b 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004d0a:	bf00      	nop
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000254 	.word	0x20000254
 8004d18:	20000234 	.word	0x20000234
 8004d1c:	20000158 	.word	0x20000158
 8004d20:	20000154 	.word	0x20000154
 8004d24:	20000240 	.word	0x20000240

08004d28 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d30:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <vTaskInternalSetTimeOutState+0x28>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <vTaskInternalSetTimeOutState+0x2c>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8004d40:	20e7      	movs	r0, #231	@ 0xe7
 8004d42:	f002 fb5d 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000244 	.word	0x20000244
 8004d54:	20000230 	.word	0x20000230

08004d58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	613b      	str	r3, [r7, #16]
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	60fb      	str	r3, [r7, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	e7fd      	b.n	8004d9a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004d9e:	f000 fed9 	bl	8005b54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004da2:	4b21      	ldr	r3, [pc, #132]	@ (8004e28 <xTaskCheckForTimeOut+0xd0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d102      	bne.n	8004dc2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	e026      	b.n	8004e10 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <xTaskCheckForTimeOut+0xd4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d00a      	beq.n	8004de4 <xTaskCheckForTimeOut+0x8c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d305      	bcc.n	8004de4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e015      	b.n	8004e10 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d20b      	bcs.n	8004e06 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ff94 	bl	8004d28 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e004      	b.n	8004e10 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e10:	f000 fed2 	bl	8005bb8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4619      	mov	r1, r3
 8004e18:	20e8      	movs	r0, #232	@ 0xe8
 8004e1a:	f002 fb2d 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000230 	.word	0x20000230
 8004e2c:	20000244 	.word	0x20000244

08004e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004e34:	4b03      	ldr	r3, [pc, #12]	@ (8004e44 <vTaskMissedYield+0x14>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8004e3a:	20e9      	movs	r0, #233	@ 0xe9
 8004e3c:	f002 fae0 	bl	8007400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000240 	.word	0x20000240

08004e48 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e50:	f000 f852 	bl	8004ef8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <prvIdleTask+0x28>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d9f9      	bls.n	8004e50 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <prvIdleTask+0x2c>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004e6c:	e7f0      	b.n	8004e50 <prvIdleTask+0x8>
 8004e6e:	bf00      	nop
 8004e70:	20000158 	.word	0x20000158
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	e00c      	b.n	8004e9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4a12      	ldr	r2, [pc, #72]	@ (8004ed8 <prvInitialiseTaskLists+0x60>)
 8004e90:	4413      	add	r3, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe f9aa 	bl	80031ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d9ef      	bls.n	8004e84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ea4:	480d      	ldr	r0, [pc, #52]	@ (8004edc <prvInitialiseTaskLists+0x64>)
 8004ea6:	f7fe f9a1 	bl	80031ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004eaa:	480d      	ldr	r0, [pc, #52]	@ (8004ee0 <prvInitialiseTaskLists+0x68>)
 8004eac:	f7fe f99e 	bl	80031ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004eb0:	480c      	ldr	r0, [pc, #48]	@ (8004ee4 <prvInitialiseTaskLists+0x6c>)
 8004eb2:	f7fe f99b 	bl	80031ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004eb6:	480c      	ldr	r0, [pc, #48]	@ (8004ee8 <prvInitialiseTaskLists+0x70>)
 8004eb8:	f7fe f998 	bl	80031ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004ebc:	480b      	ldr	r0, [pc, #44]	@ (8004eec <prvInitialiseTaskLists+0x74>)
 8004ebe:	f7fe f995 	bl	80031ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <prvInitialiseTaskLists+0x78>)
 8004ec4:	4a05      	ldr	r2, [pc, #20]	@ (8004edc <prvInitialiseTaskLists+0x64>)
 8004ec6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <prvInitialiseTaskLists+0x7c>)
 8004eca:	4a05      	ldr	r2, [pc, #20]	@ (8004ee0 <prvInitialiseTaskLists+0x68>)
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000158 	.word	0x20000158
 8004edc:	200001bc 	.word	0x200001bc
 8004ee0:	200001d0 	.word	0x200001d0
 8004ee4:	200001ec 	.word	0x200001ec
 8004ee8:	20000200 	.word	0x20000200
 8004eec:	20000218 	.word	0x20000218
 8004ef0:	200001e4 	.word	0x200001e4
 8004ef4:	200001e8 	.word	0x200001e8

08004ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004efe:	e019      	b.n	8004f34 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004f00:	f000 fe28 	bl	8005b54 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f04:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <prvCheckTasksWaitingTermination+0x50>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe f9fd 	bl	8003310 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004f16:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <prvCheckTasksWaitingTermination+0x54>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f4c <prvCheckTasksWaitingTermination+0x54>)
 8004f1e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <prvCheckTasksWaitingTermination+0x58>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	4a0a      	ldr	r2, [pc, #40]	@ (8004f50 <prvCheckTasksWaitingTermination+0x58>)
 8004f28:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004f2a:	f000 fe45 	bl	8005bb8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f810 	bl	8004f54 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f34:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <prvCheckTasksWaitingTermination+0x58>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e1      	bne.n	8004f00 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000200 	.word	0x20000200
 8004f4c:	2000022c 	.word	0x2000022c
 8004f50:	20000214 	.word	0x20000214

08004f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 f857 	bl	8006014 <vPortFree>
            vPortFree( pxTCB );
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 f854 	bl	8006014 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f78:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <prvResetNextTaskUnblockTime+0x30>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004f82:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <prvResetNextTaskUnblockTime+0x34>)
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295
 8004f88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004f8a:	e005      	b.n	8004f98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f8c:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <prvResetNextTaskUnblockTime+0x30>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a04      	ldr	r2, [pc, #16]	@ (8004fa8 <prvResetNextTaskUnblockTime+0x34>)
 8004f96:	6013      	str	r3, [r2, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	200001e4 	.word	0x200001e4
 8004fa8:	2000024c 	.word	0x2000024c

08004fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <xTaskGetSchedulerState+0x3c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e008      	b.n	8004fd2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <xTaskGetSchedulerState+0x40>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	e001      	b.n	8004fd2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	20f5      	movs	r0, #245	@ 0xf5
 8004fd8:	f002 fa4e 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004fdc:	687b      	ldr	r3, [r7, #4]
    }
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000238 	.word	0x20000238
 8004fec:	20000254 	.word	0x20000254

08004ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8094 	beq.w	8005130 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005008:	4b4e      	ldr	r3, [pc, #312]	@ (8005144 <xTaskPriorityDisinherit+0x154>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	429a      	cmp	r2, r3
 8005010:	d00b      	beq.n	800502a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	613b      	str	r3, [r7, #16]
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	e7fd      	b.n	8005026 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505c:	429a      	cmp	r2, r3
 800505e:	d067      	beq.n	8005130 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005064:	2b00      	cmp	r3, #0
 8005066:	d163      	bne.n	8005130 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	3304      	adds	r3, #4
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe f94f 	bl	8003310 <uxListRemove>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	2201      	movs	r2, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43da      	mvns	r2, r3
 8005084:	4b30      	ldr	r3, [pc, #192]	@ (8005148 <xTaskPriorityDisinherit+0x158>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4013      	ands	r3, r2
 800508a:	4a2f      	ldr	r2, [pc, #188]	@ (8005148 <xTaskPriorityDisinherit+0x158>)
 800508c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	f1c3 0205 	rsb	r2, r3, #5
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 fadf 	bl	8007668 <SEGGER_SYSVIEW_OnTaskStartReady>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	2201      	movs	r2, #1
 80050b0:	409a      	lsls	r2, r3
 80050b2:	4b25      	ldr	r3, [pc, #148]	@ (8005148 <xTaskPriorityDisinherit+0x158>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	4a23      	ldr	r2, [pc, #140]	@ (8005148 <xTaskPriorityDisinherit+0x158>)
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c0:	4922      	ldr	r1, [pc, #136]	@ (800514c <xTaskPriorityDisinherit+0x15c>)
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	3304      	adds	r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	60da      	str	r2, [r3, #12]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	3204      	adds	r2, #4
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	1d1a      	adds	r2, r3, #4
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	609a      	str	r2, [r3, #8]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4a13      	ldr	r2, [pc, #76]	@ (800514c <xTaskPriorityDisinherit+0x15c>)
 8005100:	441a      	add	r2, r3
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	615a      	str	r2, [r3, #20]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	4910      	ldr	r1, [pc, #64]	@ (800514c <xTaskPriorityDisinherit+0x15c>)
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800511c:	1c59      	adds	r1, r3, #1
 800511e:	480b      	ldr	r0, [pc, #44]	@ (800514c <xTaskPriorityDisinherit+0x15c>)
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4403      	add	r3, r0
 800512a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4619      	mov	r1, r3
 8005134:	20f7      	movs	r0, #247	@ 0xf7
 8005136:	f002 f99f 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800513a:	69fb      	ldr	r3, [r7, #28]
    }
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000154 	.word	0x20000154
 8005148:	20000234 	.word	0x20000234
 800514c:	20000158 	.word	0x20000158

08005150 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <uxTaskResetEventItemValue+0x30>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 800515e:	4b08      	ldr	r3, [pc, #32]	@ (8005180 <uxTaskResetEventItemValue+0x30>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005164:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <uxTaskResetEventItemValue+0x30>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f1c2 0205 	rsb	r2, r2, #5
 800516c:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	20fd      	movs	r0, #253	@ 0xfd
 8005172:	f002 f981 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxReturn;
 8005176:	687b      	ldr	r3, [r7, #4]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000154 	.word	0x20000154

08005184 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800518e:	4b3d      	ldr	r3, [pc, #244]	@ (8005284 <prvAddCurrentTaskToDelayedList+0x100>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8005194:	4b3c      	ldr	r3, [pc, #240]	@ (8005288 <prvAddCurrentTaskToDelayedList+0x104>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800519a:	4b3c      	ldr	r3, [pc, #240]	@ (800528c <prvAddCurrentTaskToDelayedList+0x108>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe f8b2 	bl	8003310 <uxListRemove>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10b      	bne.n	80051ca <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80051b2:	4b37      	ldr	r3, [pc, #220]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	2201      	movs	r2, #1
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43da      	mvns	r2, r3
 80051c0:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <prvAddCurrentTaskToDelayedList+0x110>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4013      	ands	r3, r2
 80051c6:	4a33      	ldr	r2, [pc, #204]	@ (8005294 <prvAddCurrentTaskToDelayedList+0x110>)
 80051c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d124      	bne.n	800521c <prvAddCurrentTaskToDelayedList+0x98>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d021      	beq.n	800521c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005298 <prvAddCurrentTaskToDelayedList+0x114>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	4b2c      	ldr	r3, [pc, #176]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	6892      	ldr	r2, [r2, #8]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	4b27      	ldr	r3, [pc, #156]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	3204      	adds	r2, #4
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	4b24      	ldr	r3, [pc, #144]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1d1a      	adds	r2, r3, #4
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	4b22      	ldr	r3, [pc, #136]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a23      	ldr	r2, [pc, #140]	@ (8005298 <prvAddCurrentTaskToDelayedList+0x114>)
 800520c:	615a      	str	r2, [r3, #20]
 800520e:	4b22      	ldr	r3, [pc, #136]	@ (8005298 <prvAddCurrentTaskToDelayedList+0x114>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a20      	ldr	r2, [pc, #128]	@ (8005298 <prvAddCurrentTaskToDelayedList+0x114>)
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800521a:	e02e      	b.n	800527a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005224:	4b1a      	ldr	r3, [pc, #104]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	429a      	cmp	r2, r3
 8005232:	d20d      	bcs.n	8005250 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005234:	4b16      	ldr	r3, [pc, #88]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2104      	movs	r1, #4
 800523a:	4618      	mov	r0, r3
 800523c:	f002 fa56 	bl	80076ec <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005240:	4b13      	ldr	r3, [pc, #76]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	6978      	ldr	r0, [r7, #20]
 800524a:	f7fe f826 	bl	800329a <vListInsert>
}
 800524e:	e014      	b.n	800527a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8005250:	4b0f      	ldr	r3, [pc, #60]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2104      	movs	r1, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f002 fa48 	bl	80076ec <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <prvAddCurrentTaskToDelayedList+0x10c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	69b8      	ldr	r0, [r7, #24]
 8005266:	f7fe f818 	bl	800329a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800526a:	4b0c      	ldr	r3, [pc, #48]	@ (800529c <prvAddCurrentTaskToDelayedList+0x118>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d202      	bcs.n	800527a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8005274:	4a09      	ldr	r2, [pc, #36]	@ (800529c <prvAddCurrentTaskToDelayedList+0x118>)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6013      	str	r3, [r2, #0]
}
 800527a:	bf00      	nop
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000230 	.word	0x20000230
 8005288:	200001e4 	.word	0x200001e4
 800528c:	200001e8 	.word	0x200001e8
 8005290:	20000154 	.word	0x20000154
 8005294:	20000234 	.word	0x20000234
 8005298:	20000218 	.word	0x20000218
 800529c:	2000024c 	.word	0x2000024c

080052a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80052aa:	f000 fa77 	bl	800579c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80052ae:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <xTimerCreateTimerTask+0x64>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80052b6:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <xTimerCreateTimerTask+0x68>)
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	2302      	movs	r3, #2
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	2300      	movs	r3, #0
 80052c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80052c4:	4911      	ldr	r1, [pc, #68]	@ (800530c <xTimerCreateTimerTask+0x6c>)
 80052c6:	4812      	ldr	r0, [pc, #72]	@ (8005310 <xTimerCreateTimerTask+0x70>)
 80052c8:	f7fe fcc7 	bl	8003c5a <xTaskCreate>
 80052cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	603b      	str	r3, [r7, #0]
}
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
 80052ea:	e7fd      	b.n	80052e8 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4619      	mov	r1, r3
 80052f0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80052f4:	f002 f8c0 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80052f8:	687b      	ldr	r3, [r7, #4]
    }
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000288 	.word	0x20000288
 8005308:	2000028c 	.word	0x2000028c
 800530c:	08007fcc 	.word	0x08007fcc
 8005310:	080053b9 	.word	0x080053b9

08005314 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005320:	e008      	b.n	8005334 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	4413      	add	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	18d1      	adds	r1, r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f8df 	bl	8005504 <prvInsertTimerInActiveList>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1ea      	bne.n	8005322 <prvReloadTimer+0xe>
        }
    }
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005362:	4b14      	ldr	r3, [pc, #80]	@ (80053b4 <prvProcessExpiredTimer+0x5c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3304      	adds	r3, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd ffcd 	bl	8003310 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff ffc3 	bl	8005314 <prvReloadTimer>
 800538e:	e008      	b.n	80053a2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	4798      	blx	r3
    }
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000280 	.word	0x20000280

080053b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 f859 	bl	800547c <prvGetNextExpireTime>
 80053ca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4619      	mov	r1, r3
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f805 	bl	80053e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80053d6:	f000 f8d7 	bl	8005588 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053da:	bf00      	nop
 80053dc:	e7f0      	b.n	80053c0 <prvTimerTask+0x8>
	...

080053e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80053ea:	f7fe ff41 	bl	8004270 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f866 	bl	80054c4 <prvSampleTimeNow>
 80053f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d130      	bne.n	8005462 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <prvProcessTimerOrBlockTask+0x3c>
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	429a      	cmp	r2, r3
 800540c:	d806      	bhi.n	800541c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800540e:	f7fe ff3d 	bl	800428c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff9f 	bl	8005358 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800541a:	e024      	b.n	8005466 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005422:	4b13      	ldr	r3, [pc, #76]	@ (8005470 <prvProcessTimerOrBlockTask+0x90>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <prvProcessTimerOrBlockTask+0x50>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <prvProcessTimerOrBlockTask+0x52>
 8005430:	2300      	movs	r3, #0
 8005432:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005434:	4b0f      	ldr	r3, [pc, #60]	@ (8005474 <prvProcessTimerOrBlockTask+0x94>)
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	f7fe fb97 	bl	8003b74 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005446:	f7fe ff21 	bl	800428c <xTaskResumeAll>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8005450:	4b09      	ldr	r3, [pc, #36]	@ (8005478 <prvProcessTimerOrBlockTask+0x98>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
    }
 8005460:	e001      	b.n	8005466 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005462:	f7fe ff13 	bl	800428c <xTaskResumeAll>
    }
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000284 	.word	0x20000284
 8005474:	20000288 	.word	0x20000288
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005484:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <prvGetNextExpireTime+0x44>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <prvGetNextExpireTime+0x16>
 800548e:	2201      	movs	r2, #1
 8005490:	e000      	b.n	8005494 <prvGetNextExpireTime+0x18>
 8005492:	2200      	movs	r2, #0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054a0:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <prvGetNextExpireTime+0x44>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e001      	b.n	80054b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80054b0:	68fb      	ldr	r3, [r7, #12]
    }
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	20000280 	.word	0x20000280

080054c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80054cc:	f7fe fff0 	bl	80044b0 <xTaskGetTickCount>
 80054d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80054d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <prvSampleTimeNow+0x3c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d205      	bcs.n	80054e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80054dc:	f000 f938 	bl	8005750 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e002      	b.n	80054ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80054ee:	4a04      	ldr	r2, [pc, #16]	@ (8005500 <prvSampleTimeNow+0x3c>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80054f4:	68fb      	ldr	r3, [r7, #12]
    }
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000290 	.word	0x20000290

08005504 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d812      	bhi.n	8005550 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005538:	2301      	movs	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e01b      	b.n	8005576 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800553e:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <prvInsertTimerInActiveList+0x7c>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f7fd fea6 	bl	800329a <vListInsert>
 800554e:	e012      	b.n	8005576 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d206      	bcs.n	8005566 <prvInsertTimerInActiveList+0x62>
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e007      	b.n	8005576 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005566:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <prvInsertTimerInActiveList+0x80>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f7fd fe92 	bl	800329a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005576:	697b      	ldr	r3, [r7, #20]
    }
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000284 	.word	0x20000284
 8005584:	20000280 	.word	0x20000280

08005588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	@ 0x28
 800558c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800559a:	e0c7      	b.n	800572c <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da19      	bge.n	80055d6 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	3304      	adds	r3, #4
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	61bb      	str	r3, [r7, #24]
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055cc:	6850      	ldr	r0, [r2, #4]
 80055ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d0:	6892      	ldr	r2, [r2, #8]
 80055d2:	4611      	mov	r1, r2
 80055d4:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f2c0 80a7 	blt.w	800572c <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd fe8e 	bl	8003310 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055f4:	463b      	mov	r3, r7
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff ff64 	bl	80054c4 <prvSampleTimeNow>
 80055fc:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3b01      	subs	r3, #1
 8005602:	2b08      	cmp	r3, #8
 8005604:	f200 808f 	bhi.w	8005726 <prvProcessReceivedCommands+0x19e>
 8005608:	a201      	add	r2, pc, #4	@ (adr r2, 8005610 <prvProcessReceivedCommands+0x88>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005635 	.word	0x08005635
 8005614:	08005635 	.word	0x08005635
 8005618:	0800569d 	.word	0x0800569d
 800561c:	080056b1 	.word	0x080056b1
 8005620:	080056fd 	.word	0x080056fd
 8005624:	08005635 	.word	0x08005635
 8005628:	08005635 	.word	0x08005635
 800562c:	0800569d 	.word	0x0800569d
 8005630:	080056b1 	.word	0x080056b1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	18d1      	adds	r1, r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	6a38      	ldr	r0, [r7, #32]
 8005654:	f7ff ff56 	bl	8005504 <prvInsertTimerInActiveList>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d065      	beq.n	800572a <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	4413      	add	r3, r2
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	4619      	mov	r1, r3
 8005678:	6a38      	ldr	r0, [r7, #32]
 800567a:	f7ff fe4b 	bl	8005314 <prvReloadTimer>
 800567e:	e008      	b.n	8005692 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	6a38      	ldr	r0, [r7, #32]
 8005698:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800569a:	e046      	b.n	800572a <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80056ae:	e03d      	b.n	800572c <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <prvProcessReceivedCommands+0x160>
    __asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	617b      	str	r3, [r7, #20]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	18d1      	adds	r1, r2, r3
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	6a38      	ldr	r0, [r7, #32]
 80056f6:	f7ff ff05 	bl	8005504 <prvInsertTimerInActiveList>
                        break;
 80056fa:	e017      	b.n	800572c <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 800570a:	6a38      	ldr	r0, [r7, #32]
 800570c:	f000 fc82 	bl	8006014 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005710:	e00c      	b.n	800572c <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005724:	e002      	b.n	800572c <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <prvProcessReceivedCommands+0x1a4>
                        break;
 800572a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800572c:	4b07      	ldr	r3, [pc, #28]	@ (800574c <prvProcessReceivedCommands+0x1c4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	1d39      	adds	r1, r7, #4
 8005732:	2200      	movs	r2, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f7fd ffe7 	bl	8003708 <xQueueReceive>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	f47f af2d 	bne.w	800559c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	3728      	adds	r7, #40	@ 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000288 	.word	0x20000288

08005750 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005756:	e009      	b.n	800576c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005758:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <prvSwitchTimerLists+0x44>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005762:	f04f 31ff 	mov.w	r1, #4294967295
 8005766:	6838      	ldr	r0, [r7, #0]
 8005768:	f7ff fdf6 	bl	8005358 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800576c:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <prvSwitchTimerLists+0x44>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005776:	4b07      	ldr	r3, [pc, #28]	@ (8005794 <prvSwitchTimerLists+0x44>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800577c:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <prvSwitchTimerLists+0x48>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a04      	ldr	r2, [pc, #16]	@ (8005794 <prvSwitchTimerLists+0x44>)
 8005782:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005784:	4a04      	ldr	r2, [pc, #16]	@ (8005798 <prvSwitchTimerLists+0x48>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6013      	str	r3, [r2, #0]
    }
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000280 	.word	0x20000280
 8005798:	20000284 	.word	0x20000284

0800579c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80057a0:	f000 f9d8 	bl	8005b54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80057a4:	4b12      	ldr	r3, [pc, #72]	@ (80057f0 <prvCheckForValidListAndQueue+0x54>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d11d      	bne.n	80057e8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80057ac:	4811      	ldr	r0, [pc, #68]	@ (80057f4 <prvCheckForValidListAndQueue+0x58>)
 80057ae:	f7fd fd1d 	bl	80031ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80057b2:	4811      	ldr	r0, [pc, #68]	@ (80057f8 <prvCheckForValidListAndQueue+0x5c>)
 80057b4:	f7fd fd1a 	bl	80031ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80057b8:	4b10      	ldr	r3, [pc, #64]	@ (80057fc <prvCheckForValidListAndQueue+0x60>)
 80057ba:	4a0e      	ldr	r2, [pc, #56]	@ (80057f4 <prvCheckForValidListAndQueue+0x58>)
 80057bc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80057be:	4b10      	ldr	r3, [pc, #64]	@ (8005800 <prvCheckForValidListAndQueue+0x64>)
 80057c0:	4a0d      	ldr	r2, [pc, #52]	@ (80057f8 <prvCheckForValidListAndQueue+0x5c>)
 80057c2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80057c4:	2200      	movs	r2, #0
 80057c6:	2110      	movs	r1, #16
 80057c8:	200a      	movs	r0, #10
 80057ca:	f7fd fe67 	bl	800349c <xQueueGenericCreate>
 80057ce:	4603      	mov	r3, r0
 80057d0:	4a07      	ldr	r2, [pc, #28]	@ (80057f0 <prvCheckForValidListAndQueue+0x54>)
 80057d2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80057d4:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <prvCheckForValidListAndQueue+0x54>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057dc:	4b04      	ldr	r3, [pc, #16]	@ (80057f0 <prvCheckForValidListAndQueue+0x54>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4908      	ldr	r1, [pc, #32]	@ (8005804 <prvCheckForValidListAndQueue+0x68>)
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe f976 	bl	8003ad4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80057e8:	f000 f9e6 	bl	8005bb8 <vPortExitCritical>
    }
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000288 	.word	0x20000288
 80057f4:	20000258 	.word	0x20000258
 80057f8:	2000026c 	.word	0x2000026c
 80057fc:	20000280 	.word	0x20000280
 8005800:	20000284 	.word	0x20000284
 8005804:	08007fd4 	.word	0x08007fd4

08005808 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]

            traceENTER_xTimerPendFunctionCallFromISR( xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken );

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005816:	f06f 0301 	mvn.w	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <xTimerPendFunctionCallFromISR+0x48>)
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	f107 0114 	add.w	r1, r7, #20
 8005830:	2300      	movs	r3, #0
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	f7fd fead 	bl	8003592 <xQueueGenericSendFromISR>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
            traceRETURN_xTimerPendFunctionCallFromISR( xReturn );
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	4619      	mov	r1, r3
 800583e:	f240 1015 	movw	r0, #277	@ 0x115
 8005842:	f001 fe19 	bl	8007478 <SEGGER_SYSVIEW_RecordEndCallU32>

            return xReturn;
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8005848:	4618      	mov	r0, r3
 800584a:	3728      	adds	r7, #40	@ 0x28
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000288 	.word	0x20000288

08005854 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3b04      	subs	r3, #4
 8005864:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800586c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3b04      	subs	r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f023 0201 	bic.w	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3b04      	subs	r3, #4
 8005882:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005884:	4a0c      	ldr	r2, [pc, #48]	@ (80058b8 <pxPortInitialiseStack+0x64>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b14      	subs	r3, #20
 800588e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b04      	subs	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f06f 0202 	mvn.w	r2, #2
 80058a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3b20      	subs	r3, #32
 80058a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80058aa:	68fb      	ldr	r3, [r7, #12]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	080058bd 	.word	0x080058bd

080058bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80058c6:	4b13      	ldr	r3, [pc, #76]	@ (8005914 <prvTaskExitError+0x58>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d00b      	beq.n	80058e8 <prvTaskExitError+0x2c>
    __asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <prvTaskExitError+0x28>
    __asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60bb      	str	r3, [r7, #8]
}
 80058fa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80058fc:	bf00      	nop
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0fc      	beq.n	80058fe <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000014 	.word	0x20000014
	...

08005920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <pxCurrentTCBConst2>)
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	f380 8809 	msr	PSP, r0
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8811 	msr	BASEPRI, r0
 800593a:	4770      	bx	lr
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst2>:
 8005940:	20000154 	.word	0x20000154
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005948:	4808      	ldr	r0, [pc, #32]	@ (800596c <prvPortStartFirstTask+0x24>)
 800594a:	6800      	ldr	r0, [r0, #0]
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f380 8808 	msr	MSP, r0
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8814 	msr	CONTROL, r0
 800595a:	b662      	cpsie	i
 800595c:	b661      	cpsie	f
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	df00      	svc	0
 8005968:	bf00      	nop
 800596a:	0000      	.short	0x0000
 800596c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop

08005974 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08c      	sub	sp, #48	@ 0x30
 8005978:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800597a:	4b69      	ldr	r3, [pc, #420]	@ (8005b20 <xPortStartScheduler+0x1ac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a69      	ldr	r2, [pc, #420]	@ (8005b24 <xPortStartScheduler+0x1b0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10b      	bne.n	800599c <xPortStartScheduler+0x28>
    __asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800599c:	4b60      	ldr	r3, [pc, #384]	@ (8005b20 <xPortStartScheduler+0x1ac>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a61      	ldr	r2, [pc, #388]	@ (8005b28 <xPortStartScheduler+0x1b4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d10b      	bne.n	80059be <xPortStartScheduler+0x4a>
    __asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	623b      	str	r3, [r7, #32]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80059be:	4b5b      	ldr	r3, [pc, #364]	@ (8005b2c <xPortStartScheduler+0x1b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	332c      	adds	r3, #44	@ 0x2c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a59      	ldr	r2, [pc, #356]	@ (8005b30 <xPortStartScheduler+0x1bc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <xPortStartScheduler+0x74>
    __asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	61fb      	str	r3, [r7, #28]
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	e7fd      	b.n	80059e4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ea:	3338      	adds	r3, #56	@ 0x38
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a51      	ldr	r2, [pc, #324]	@ (8005b34 <xPortStartScheduler+0x1c0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <xPortStartScheduler+0x98>
    __asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	61bb      	str	r3, [r7, #24]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a10:	4b49      	ldr	r3, [pc, #292]	@ (8005b38 <xPortStartScheduler+0x1c4>)
 8005a12:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	22ff      	movs	r2, #255	@ 0xff
 8005a20:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	4b41      	ldr	r3, [pc, #260]	@ (8005b3c <xPortStartScheduler+0x1c8>)
 8005a36:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005a38:	4b40      	ldr	r3, [pc, #256]	@ (8005b3c <xPortStartScheduler+0x1c8>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10b      	bne.n	8005a58 <xPortStartScheduler+0xe4>
    __asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	617b      	str	r3, [r7, #20]
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d013      	beq.n	8005a8e <xPortStartScheduler+0x11a>
    __asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	613b      	str	r3, [r7, #16]
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	e7fd      	b.n	8005a7a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a96:	2b80      	cmp	r3, #128	@ 0x80
 8005a98:	d0f1      	beq.n	8005a7e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d103      	bne.n	8005aa8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005aa0:	4b27      	ldr	r3, [pc, #156]	@ (8005b40 <xPortStartScheduler+0x1cc>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e004      	b.n	8005ab2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f1c3 0307 	rsb	r3, r3, #7
 8005aae:	4a24      	ldr	r2, [pc, #144]	@ (8005b40 <xPortStartScheduler+0x1cc>)
 8005ab0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ab2:	4b23      	ldr	r3, [pc, #140]	@ (8005b40 <xPortStartScheduler+0x1cc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	4a21      	ldr	r2, [pc, #132]	@ (8005b40 <xPortStartScheduler+0x1cc>)
 8005aba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005abc:	4b20      	ldr	r3, [pc, #128]	@ (8005b40 <xPortStartScheduler+0x1cc>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b40 <xPortStartScheduler+0x1cc>)
 8005ac6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b44 <xPortStartScheduler+0x1d0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b44 <xPortStartScheduler+0x1d0>)
 8005ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ada:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005adc:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <xPortStartScheduler+0x1d0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <xPortStartScheduler+0x1d0>)
 8005ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005ae8:	4b17      	ldr	r3, [pc, #92]	@ (8005b48 <xPortStartScheduler+0x1d4>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005aee:	f000 f8ed 	bl	8005ccc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005af2:	4b16      	ldr	r3, [pc, #88]	@ (8005b4c <xPortStartScheduler+0x1d8>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005af8:	f000 f90c 	bl	8005d14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005afc:	4b14      	ldr	r3, [pc, #80]	@ (8005b50 <xPortStartScheduler+0x1dc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a13      	ldr	r2, [pc, #76]	@ (8005b50 <xPortStartScheduler+0x1dc>)
 8005b02:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b06:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005b08:	f7ff ff1e 	bl	8005948 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005b0c:	f7fe fe28 	bl	8004760 <vTaskSwitchContext>
    prvTaskExitError();
 8005b10:	f7ff fed4 	bl	80058bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3730      	adds	r7, #48	@ 0x30
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	e000ed00 	.word	0xe000ed00
 8005b24:	410fc271 	.word	0x410fc271
 8005b28:	410fc270 	.word	0x410fc270
 8005b2c:	e000ed08 	.word	0xe000ed08
 8005b30:	08005921 	.word	0x08005921
 8005b34:	08005c11 	.word	0x08005c11
 8005b38:	e000e400 	.word	0xe000e400
 8005b3c:	20000294 	.word	0x20000294
 8005b40:	20000298 	.word	0x20000298
 8005b44:	e000ed20 	.word	0xe000ed20
 8005b48:	e000ed1c 	.word	0xe000ed1c
 8005b4c:	20000014 	.word	0x20000014
 8005b50:	e000ef34 	.word	0xe000ef34

08005b54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
    __asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	607b      	str	r3, [r7, #4]
}
 8005b6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005b6e:	4b10      	ldr	r3, [pc, #64]	@ (8005bb0 <vPortEnterCritical+0x5c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	4a0e      	ldr	r2, [pc, #56]	@ (8005bb0 <vPortEnterCritical+0x5c>)
 8005b76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005b78:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <vPortEnterCritical+0x5c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d110      	bne.n	8005ba2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b80:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <vPortEnterCritical+0x60>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <vPortEnterCritical+0x4e>
    __asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	603b      	str	r3, [r7, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <vPortEnterCritical+0x4a>
    }
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000014 	.word	0x20000014
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005bbe:	4b12      	ldr	r3, [pc, #72]	@ (8005c08 <vPortExitCritical+0x50>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <vPortExitCritical+0x26>
    __asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	607b      	str	r3, [r7, #4]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005bde:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <vPortExitCritical+0x50>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	4a08      	ldr	r2, [pc, #32]	@ (8005c08 <vPortExitCritical+0x50>)
 8005be6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005be8:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <vPortExitCritical+0x50>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <vPortExitCritical+0x44>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f383 8811 	msr	BASEPRI, r3
}
 8005bfa:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20000014 	.word	0x20000014
 8005c0c:	00000000 	.word	0x00000000

08005c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005c10:	f3ef 8009 	mrs	r0, PSP
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	4b15      	ldr	r3, [pc, #84]	@ (8005c70 <pxCurrentTCBConst>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f01e 0f10 	tst.w	lr, #16
 8005c20:	bf08      	it	eq
 8005c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	6010      	str	r0, [r2, #0]
 8005c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c34:	f380 8811 	msr	BASEPRI, r0
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f7fe fd8e 	bl	8004760 <vTaskSwitchContext>
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	f380 8811 	msr	BASEPRI, r0
 8005c4c:	bc09      	pop	{r0, r3}
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	6808      	ldr	r0, [r1, #0]
 8005c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c56:	f01e 0f10 	tst.w	lr, #16
 8005c5a:	bf08      	it	eq
 8005c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c60:	f380 8809 	msr	PSP, r0
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w

08005c70 <pxCurrentTCBConst>:
 8005c70:	20000154 	.word	0x20000154
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
    __asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	607b      	str	r3, [r7, #4]
}
 8005c90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005c92:	f001 fb3b 	bl	800730c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005c96:	f7fe fc41 	bl	800451c <xTaskIncrementTick>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d006      	beq.n	8005cae <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005ca0:	f001 fb92 	bl	80073c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ca4:	4b08      	ldr	r3, [pc, #32]	@ (8005cc8 <SysTick_Handler+0x50>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	e001      	b.n	8005cb2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8005cae:	f001 fb6f 	bl	8007390 <SEGGER_SYSVIEW_RecordExitISR>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f383 8811 	msr	BASEPRI, r3
}
 8005cbc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <vPortSetupTimerInterrupt+0x38>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <vPortSetupTimerInterrupt+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8005d0c <vPortSetupTimerInterrupt+0x40>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	4a09      	ldr	r2, [pc, #36]	@ (8005d10 <vPortSetupTimerInterrupt+0x44>)
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cee:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000e010 	.word	0xe000e010
 8005d04:	e000e018 	.word	0xe000e018
 8005d08:	20000004 	.word	0x20000004
 8005d0c:	10624dd3 	.word	0x10624dd3
 8005d10:	e000e014 	.word	0xe000e014

08005d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d24 <vPortEnableVFP+0x10>
 8005d18:	6801      	ldr	r1, [r0, #0]
 8005d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d1e:	6001      	str	r1, [r0, #0]
 8005d20:	4770      	bx	lr
 8005d22:	0000      	.short	0x0000
 8005d24:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop

08005d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005d32:	f3ef 8305 	mrs	r3, IPSR
 8005d36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b0f      	cmp	r3, #15
 8005d3c:	d915      	bls.n	8005d6a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d3e:	4a18      	ldr	r2, [pc, #96]	@ (8005da0 <vPortValidateInterruptPriority+0x74>)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d48:	4b16      	ldr	r3, [pc, #88]	@ (8005da4 <vPortValidateInterruptPriority+0x78>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	7afa      	ldrb	r2, [r7, #11]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d20b      	bcs.n	8005d6a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	607b      	str	r3, [r7, #4]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005da8 <vPortValidateInterruptPriority+0x7c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d72:	4b0e      	ldr	r3, [pc, #56]	@ (8005dac <vPortValidateInterruptPriority+0x80>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d90b      	bls.n	8005d92 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	603b      	str	r3, [r7, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	e7fd      	b.n	8005d8e <vPortValidateInterruptPriority+0x62>
    }
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	e000e3f0 	.word	0xe000e3f0
 8005da4:	20000294 	.word	0x20000294
 8005da8:	e000ed0c 	.word	0xe000ed0c
 8005dac:	20000298 	.word	0x20000298

08005db0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08e      	sub	sp, #56	@ 0x38
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d022      	beq.n	8005e08 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d81b      	bhi.n	8005e04 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8005dcc:	2208      	movs	r2, #8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d014      	beq.n	8005e08 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	f1c3 0308 	rsb	r3, r3, #8
 8005de8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	43db      	mvns	r3, r3
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d804      	bhi.n	8005dfe <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df8:	4413      	add	r3, r2
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	e004      	b.n	8005e08 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	e001      	b.n	8005e08 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005e08:	f7fe fa32 	bl	8004270 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8005ff8 <pvPortMalloc+0x248>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005e14:	f000 f978 	bl	8006108 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f2c0 80d3 	blt.w	8005fc6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80cf 	beq.w	8005fc6 <pvPortMalloc+0x216>
 8005e28:	4b74      	ldr	r3, [pc, #464]	@ (8005ffc <pvPortMalloc+0x24c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	f200 80c9 	bhi.w	8005fc6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005e34:	4b72      	ldr	r3, [pc, #456]	@ (8006000 <pvPortMalloc+0x250>)
 8005e36:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005e38:	4b71      	ldr	r3, [pc, #452]	@ (8006000 <pvPortMalloc+0x250>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e40:	4a70      	ldr	r2, [pc, #448]	@ (8006004 <pvPortMalloc+0x254>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d305      	bcc.n	8005e52 <pvPortMalloc+0xa2>
 8005e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e48:	4a6f      	ldr	r2, [pc, #444]	@ (8006008 <pvPortMalloc+0x258>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d801      	bhi.n	8005e52 <pvPortMalloc+0xa2>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <pvPortMalloc+0xa4>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d129      	bne.n	8005eac <pvPortMalloc+0xfc>
    __asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	623b      	str	r3, [r7, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7c:	4a61      	ldr	r2, [pc, #388]	@ (8006004 <pvPortMalloc+0x254>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d305      	bcc.n	8005e8e <pvPortMalloc+0xde>
 8005e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e84:	4a60      	ldr	r2, [pc, #384]	@ (8006008 <pvPortMalloc+0x258>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d801      	bhi.n	8005e8e <pvPortMalloc+0xde>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <pvPortMalloc+0xe0>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <pvPortMalloc+0xfc>
    __asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	61fb      	str	r3, [r7, #28]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d903      	bls.n	8005ebe <pvPortMalloc+0x10e>
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1d8      	bne.n	8005e70 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8005ff8 <pvPortMalloc+0x248>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d07e      	beq.n	8005fc6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	4413      	add	r3, r2
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed4:	4a4b      	ldr	r2, [pc, #300]	@ (8006004 <pvPortMalloc+0x254>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d305      	bcc.n	8005ee6 <pvPortMalloc+0x136>
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	4a4a      	ldr	r2, [pc, #296]	@ (8006008 <pvPortMalloc+0x258>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d801      	bhi.n	8005ee6 <pvPortMalloc+0x136>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <pvPortMalloc+0x138>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <pvPortMalloc+0x154>
    __asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	61bb      	str	r3, [r7, #24]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d90b      	bls.n	8005f2e <pvPortMalloc+0x17e>
    __asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	617b      	str	r3, [r7, #20]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	2308      	movs	r3, #8
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d924      	bls.n	8005f88 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <pvPortMalloc+0x1b8>
    __asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f86:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f88:	4b1c      	ldr	r3, [pc, #112]	@ (8005ffc <pvPortMalloc+0x24c>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	4a1a      	ldr	r2, [pc, #104]	@ (8005ffc <pvPortMalloc+0x24c>)
 8005f94:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f96:	4b19      	ldr	r3, [pc, #100]	@ (8005ffc <pvPortMalloc+0x24c>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800600c <pvPortMalloc+0x25c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d203      	bcs.n	8005faa <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fa2:	4b16      	ldr	r3, [pc, #88]	@ (8005ffc <pvPortMalloc+0x24c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a19      	ldr	r2, [pc, #100]	@ (800600c <pvPortMalloc+0x25c>)
 8005fa8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005fbc:	4b14      	ldr	r3, [pc, #80]	@ (8006010 <pvPortMalloc+0x260>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <pvPortMalloc+0x260>)
 8005fc4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005fc6:	f7fe f961 	bl	800428c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <pvPortMalloc+0x23c>
    __asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	60fb      	str	r3, [r7, #12]
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <pvPortMalloc+0x238>
    return pvReturn;
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3738      	adds	r7, #56	@ 0x38
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20012ea4 	.word	0x20012ea4
 8005ffc:	20012ea8 	.word	0x20012ea8
 8006000:	20012e9c 	.word	0x20012e9c
 8006004:	2000029c 	.word	0x2000029c
 8006008:	20012e9b 	.word	0x20012e9b
 800600c:	20012eac 	.word	0x20012eac
 8006010:	20012eb0 	.word	0x20012eb0

08006014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d064      	beq.n	80060f0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006026:	2308      	movs	r3, #8
 8006028:	425b      	negs	r3, r3
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	4a30      	ldr	r2, [pc, #192]	@ (80060f8 <vPortFree+0xe4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d305      	bcc.n	8006048 <vPortFree+0x34>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	4a2f      	ldr	r2, [pc, #188]	@ (80060fc <vPortFree+0xe8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d801      	bhi.n	8006048 <vPortFree+0x34>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <vPortFree+0x36>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <vPortFree+0x52>
    __asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	617b      	str	r3, [r7, #20]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	db0b      	blt.n	8006086 <vPortFree+0x72>
    __asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	613b      	str	r3, [r7, #16]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <vPortFree+0x92>
    __asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	0fdb      	lsrs	r3, r3, #31
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01c      	beq.n	80060f0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d118      	bne.n	80060f0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80060ca:	f7fe f8d1 	bl	8004270 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <vPortFree+0xec>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4413      	add	r3, r2
 80060d8:	4a09      	ldr	r2, [pc, #36]	@ (8006100 <vPortFree+0xec>)
 80060da:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060dc:	69b8      	ldr	r0, [r7, #24]
 80060de:	f000 f86d 	bl	80061bc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80060e2:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <vPortFree+0xf0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a06      	ldr	r2, [pc, #24]	@ (8006104 <vPortFree+0xf0>)
 80060ea:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80060ec:	f7fe f8ce 	bl	800428c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80060f0:	bf00      	nop
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	2000029c 	.word	0x2000029c
 80060fc:	20012e9b 	.word	0x20012e9b
 8006100:	20012ea8 	.word	0x20012ea8
 8006104:	20012eb4 	.word	0x20012eb4

08006108 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800610e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8006112:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006114:	4b24      	ldr	r3, [pc, #144]	@ (80061a8 <prvHeapInit+0xa0>)
 8006116:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00c      	beq.n	800613c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3307      	adds	r3, #7
 8006126:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0307 	bic.w	r3, r3, #7
 800612e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	4a1c      	ldr	r2, [pc, #112]	@ (80061a8 <prvHeapInit+0xa0>)
 8006138:	4413      	add	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a1b      	ldr	r2, [pc, #108]	@ (80061ac <prvHeapInit+0xa4>)
 8006140:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006142:	4b1a      	ldr	r3, [pc, #104]	@ (80061ac <prvHeapInit+0xa4>)
 8006144:	2200      	movs	r2, #0
 8006146:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4413      	add	r3, r2
 800614e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006150:	2208      	movs	r2, #8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a13      	ldr	r2, [pc, #76]	@ (80061b0 <prvHeapInit+0xa8>)
 8006164:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006166:	4b12      	ldr	r3, [pc, #72]	@ (80061b0 <prvHeapInit+0xa8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2200      	movs	r2, #0
 800616c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800616e:	4b10      	ldr	r3, [pc, #64]	@ (80061b0 <prvHeapInit+0xa8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <prvHeapInit+0xa8>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4a08      	ldr	r2, [pc, #32]	@ (80061b4 <prvHeapInit+0xac>)
 8006192:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a07      	ldr	r2, [pc, #28]	@ (80061b8 <prvHeapInit+0xb0>)
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	2000029c 	.word	0x2000029c
 80061ac:	20012e9c 	.word	0x20012e9c
 80061b0:	20012ea4 	.word	0x20012ea4
 80061b4:	20012eac 	.word	0x20012eac
 80061b8:	20012ea8 	.word	0x20012ea8

080061bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80061c4:	4b36      	ldr	r3, [pc, #216]	@ (80062a0 <prvInsertBlockIntoFreeList+0xe4>)
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e002      	b.n	80061d0 <prvInsertBlockIntoFreeList+0x14>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d8f7      	bhi.n	80061ca <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4a30      	ldr	r2, [pc, #192]	@ (80062a0 <prvInsertBlockIntoFreeList+0xe4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d018      	beq.n	8006214 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	4a2f      	ldr	r2, [pc, #188]	@ (80062a4 <prvInsertBlockIntoFreeList+0xe8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d305      	bcc.n	80061f6 <prvInsertBlockIntoFreeList+0x3a>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	4a2e      	ldr	r2, [pc, #184]	@ (80062a8 <prvInsertBlockIntoFreeList+0xec>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d801      	bhi.n	80061f6 <prvInsertBlockIntoFreeList+0x3a>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x3c>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60fb      	str	r3, [r7, #12]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d108      	bne.n	8006238 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	441a      	add	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	441a      	add	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d118      	bne.n	800627e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b16      	ldr	r3, [pc, #88]	@ (80062ac <prvInsertBlockIntoFreeList+0xf0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d00d      	beq.n	8006274 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	441a      	add	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e008      	b.n	8006286 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006274:	4b0d      	ldr	r3, [pc, #52]	@ (80062ac <prvInsertBlockIntoFreeList+0xf0>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e003      	b.n	8006286 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d002      	beq.n	8006294 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20012e9c 	.word	0x20012e9c
 80062a4:	2000029c 	.word	0x2000029c
 80062a8:	20012e9b 	.word	0x20012e9b
 80062ac:	20012ea4 	.word	0x20012ea4

080062b0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80062b4:	4803      	ldr	r0, [pc, #12]	@ (80062c4 <_cbSendSystemDesc+0x14>)
 80062b6:	f000 ffd3 	bl	8007260 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80062ba:	4803      	ldr	r0, [pc, #12]	@ (80062c8 <_cbSendSystemDesc+0x18>)
 80062bc:	f000 ffd0 	bl	8007260 <SEGGER_SYSVIEW_SendSysDesc>
}
 80062c0:	bf00      	nop
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	08007fdc 	.word	0x08007fdc
 80062c8:	08008008 	.word	0x08008008

080062cc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80062d0:	4b06      	ldr	r3, [pc, #24]	@ (80062ec <SEGGER_SYSVIEW_Conf+0x20>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <SEGGER_SYSVIEW_Conf+0x20>)
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <SEGGER_SYSVIEW_Conf+0x24>)
 80062da:	4a06      	ldr	r2, [pc, #24]	@ (80062f4 <SEGGER_SYSVIEW_Conf+0x28>)
 80062dc:	f000 fc46 	bl	8006b6c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80062e0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80062e4:	f000 fc86 	bl	8006bf4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80062e8:	bf00      	nop
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20000004 	.word	0x20000004
 80062f0:	080062b1 	.word	0x080062b1
 80062f4:	080080c4 	.word	0x080080c4

080062f8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80062fe:	4b26      	ldr	r3, [pc, #152]	@ (8006398 <_DoInit+0xa0>)
 8006300:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8006302:	22a8      	movs	r2, #168	@ 0xa8
 8006304:	2100      	movs	r1, #0
 8006306:	6838      	ldr	r0, [r7, #0]
 8006308:	f001 fd83 	bl	8007e12 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2203      	movs	r2, #3
 8006310:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2203      	movs	r2, #3
 8006316:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	4a20      	ldr	r2, [pc, #128]	@ (800639c <_DoInit+0xa4>)
 800631c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	4a1f      	ldr	r2, [pc, #124]	@ (80063a0 <_DoInit+0xa8>)
 8006322:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800632a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2200      	movs	r2, #0
 8006330:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2200      	movs	r2, #0
 8006336:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2200      	movs	r2, #0
 800633c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	4a16      	ldr	r2, [pc, #88]	@ (800639c <_DoInit+0xa4>)
 8006342:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4a17      	ldr	r2, [pc, #92]	@ (80063a4 <_DoInit+0xac>)
 8006348:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2210      	movs	r2, #16
 800634e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2200      	movs	r2, #0
 8006354:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2200      	movs	r2, #0
 800635a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006362:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006366:	2300      	movs	r3, #0
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	e00c      	b.n	8006386 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f1c3 030f 	rsb	r3, r3, #15
 8006372:	4a0d      	ldr	r2, [pc, #52]	@ (80063a8 <_DoInit+0xb0>)
 8006374:	5cd1      	ldrb	r1, [r2, r3]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4413      	add	r3, r2
 800637c:	460a      	mov	r2, r1
 800637e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3301      	adds	r3, #1
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b0f      	cmp	r3, #15
 800638a:	d9ef      	bls.n	800636c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800638c:	f3bf 8f5f 	dmb	sy
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20012eb8 	.word	0x20012eb8
 800639c:	08008018 	.word	0x08008018
 80063a0:	20012f60 	.word	0x20012f60
 80063a4:	20013360 	.word	0x20013360
 80063a8:	080080a4 	.word	0x080080a4

080063ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	@ 0x30
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80063b8:	4b3e      	ldr	r3, [pc, #248]	@ (80064b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b53      	cmp	r3, #83	@ 0x53
 80063c4:	d001      	beq.n	80063ca <SEGGER_RTT_ReadNoLock+0x1e>
 80063c6:	f7ff ff97 	bl	80062f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	3360      	adds	r3, #96	@ 0x60
 80063d6:	4a37      	ldr	r2, [pc, #220]	@ (80064b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80063d8:	4413      	add	r3, r2
 80063da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80063ec:	2300      	movs	r3, #0
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80063f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d92b      	bls.n	8006450 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4293      	cmp	r3, r2
 8006408:	bf28      	it	cs
 800640a:	4613      	movcs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	4413      	add	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	6939      	ldr	r1, [r7, #16]
 800641c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800641e:	f001 fd25 	bl	8007e6c <memcpy>
    NumBytesRead += NumBytesRem;
 8006422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800642a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4413      	add	r3, r2
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800643a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006448:	429a      	cmp	r2, r3
 800644a:	d101      	bne.n	8006450 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800644c:	2300      	movs	r3, #0
 800644e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4293      	cmp	r3, r2
 800645e:	bf28      	it	cs
 8006460:	4613      	movcs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d019      	beq.n	800649e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006470:	4413      	add	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	6939      	ldr	r1, [r7, #16]
 8006478:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800647a:	f001 fcf7 	bl	8007e6c <memcpy>
    NumBytesRead += NumBytesRem;
 800647e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	4413      	add	r3, r2
 8006484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8006486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	4413      	add	r3, r2
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80064aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3730      	adds	r7, #48	@ 0x30
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20012eb8 	.word	0x20012eb8

080064b8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80064c6:	4b3d      	ldr	r3, [pc, #244]	@ (80065bc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b53      	cmp	r3, #83	@ 0x53
 80064d2:	d001      	beq.n	80064d8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80064d4:	f7ff ff10 	bl	80062f8 <_DoInit>
  SEGGER_RTT_LOCK();
 80064d8:	f3ef 8311 	mrs	r3, BASEPRI
 80064dc:	f04f 0120 	mov.w	r1, #32
 80064e0:	f381 8811 	msr	BASEPRI, r1
 80064e4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80064e6:	4b35      	ldr	r3, [pc, #212]	@ (80065bc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80064e8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80064ee:	6939      	ldr	r1, [r7, #16]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	4613      	mov	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	440b      	add	r3, r1
 80064fe:	3304      	adds	r3, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	3301      	adds	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	429a      	cmp	r2, r3
 8006514:	dbeb      	blt.n	80064ee <SEGGER_RTT_AllocUpBuffer+0x36>
 8006516:	e000      	b.n	800651a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006518:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	429a      	cmp	r2, r3
 8006522:	da3f      	bge.n	80065a4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006524:	6939      	ldr	r1, [r7, #16]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	4613      	mov	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4413      	add	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	440b      	add	r3, r1
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006538:	6939      	ldr	r1, [r7, #16]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	4613      	mov	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4413      	add	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	440b      	add	r3, r1
 8006548:	3304      	adds	r3, #4
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800654e:	6939      	ldr	r1, [r7, #16]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	4613      	mov	r3, r2
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	440b      	add	r3, r1
 800655c:	3320      	adds	r3, #32
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006562:	6939      	ldr	r1, [r7, #16]
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	440b      	add	r3, r1
 8006570:	3328      	adds	r3, #40	@ 0x28
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006576:	6939      	ldr	r1, [r7, #16]
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	440b      	add	r3, r1
 8006584:	3324      	adds	r3, #36	@ 0x24
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800658a:	6939      	ldr	r1, [r7, #16]
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	4613      	mov	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4413      	add	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	440b      	add	r3, r1
 8006598:	332c      	adds	r3, #44	@ 0x2c
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800659e:	f3bf 8f5f 	dmb	sy
 80065a2:	e002      	b.n	80065aa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80065a4:	f04f 33ff 	mov.w	r3, #4294967295
 80065a8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80065b0:	69fb      	ldr	r3, [r7, #28]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20012eb8 	.word	0x20012eb8

080065c0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	@ 0x28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80065ce:	4b21      	ldr	r3, [pc, #132]	@ (8006654 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b53      	cmp	r3, #83	@ 0x53
 80065da:	d001      	beq.n	80065e0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80065dc:	f7ff fe8c 	bl	80062f8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80065e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006654 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80065e2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d82c      	bhi.n	8006644 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80065ea:	f3ef 8311 	mrs	r3, BASEPRI
 80065ee:	f04f 0120 	mov.w	r1, #32
 80065f2:	f381 8811 	msr	BASEPRI, r1
 80065f6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4613      	mov	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	4413      	add	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	3360      	adds	r3, #96	@ 0x60
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2200      	movs	r2, #0
 8006626:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006632:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006634:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800663e:	2300      	movs	r3, #0
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
 8006642:	e002      	b.n	800664a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006644:	f04f 33ff 	mov.w	r3, #4294967295
 8006648:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800664c:	4618      	mov	r0, r3
 800664e:	3728      	adds	r7, #40	@ 0x28
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20012eb8 	.word	0x20012eb8

08006658 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	60fa      	str	r2, [r7, #12]
 800666e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b80      	cmp	r3, #128	@ 0x80
 8006674:	d90a      	bls.n	800668c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800667a:	e007      	b.n	800668c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	1c53      	adds	r3, r2, #1
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	60f9      	str	r1, [r7, #12]
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <_EncodeStr+0x46>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ee      	bne.n	800667c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3307      	adds	r3, #7
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80066d6:	4b34      	ldr	r3, [pc, #208]	@ (80067a8 <_HandleIncomingPacket+0xd8>)
 80066d8:	7e1b      	ldrb	r3, [r3, #24]
 80066da:	4618      	mov	r0, r3
 80066dc:	1cfb      	adds	r3, r7, #3
 80066de:	2201      	movs	r2, #1
 80066e0:	4619      	mov	r1, r3
 80066e2:	f7ff fe63 	bl	80063ac <SEGGER_RTT_ReadNoLock>
 80066e6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d057      	beq.n	800679e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	2b80      	cmp	r3, #128	@ 0x80
 80066f2:	d031      	beq.n	8006758 <_HandleIncomingPacket+0x88>
 80066f4:	2b80      	cmp	r3, #128	@ 0x80
 80066f6:	dc40      	bgt.n	800677a <_HandleIncomingPacket+0xaa>
 80066f8:	2b07      	cmp	r3, #7
 80066fa:	dc15      	bgt.n	8006728 <_HandleIncomingPacket+0x58>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dd3c      	ble.n	800677a <_HandleIncomingPacket+0xaa>
 8006700:	3b01      	subs	r3, #1
 8006702:	2b06      	cmp	r3, #6
 8006704:	d839      	bhi.n	800677a <_HandleIncomingPacket+0xaa>
 8006706:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <_HandleIncomingPacket+0x3c>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	0800672f 	.word	0x0800672f
 8006710:	08006735 	.word	0x08006735
 8006714:	0800673b 	.word	0x0800673b
 8006718:	08006741 	.word	0x08006741
 800671c:	08006747 	.word	0x08006747
 8006720:	0800674d 	.word	0x0800674d
 8006724:	08006753 	.word	0x08006753
 8006728:	2b7f      	cmp	r3, #127	@ 0x7f
 800672a:	d033      	beq.n	8006794 <_HandleIncomingPacket+0xc4>
 800672c:	e025      	b.n	800677a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800672e:	f000 fb25 	bl	8006d7c <SEGGER_SYSVIEW_Start>
      break;
 8006732:	e034      	b.n	800679e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006734:	f000 fbdc 	bl	8006ef0 <SEGGER_SYSVIEW_Stop>
      break;
 8006738:	e031      	b.n	800679e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800673a:	f000 fdb5 	bl	80072a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800673e:	e02e      	b.n	800679e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006740:	f000 fd7a 	bl	8007238 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006744:	e02b      	b.n	800679e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006746:	f000 fbf9 	bl	8006f3c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800674a:	e028      	b.n	800679e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800674c:	f001 f8e6 	bl	800791c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006750:	e025      	b.n	800679e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006752:	f001 f8c5 	bl	80078e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006756:	e022      	b.n	800679e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006758:	4b13      	ldr	r3, [pc, #76]	@ (80067a8 <_HandleIncomingPacket+0xd8>)
 800675a:	7e1b      	ldrb	r3, [r3, #24]
 800675c:	4618      	mov	r0, r3
 800675e:	1cfb      	adds	r3, r7, #3
 8006760:	2201      	movs	r2, #1
 8006762:	4619      	mov	r1, r3
 8006764:	f7ff fe22 	bl	80063ac <SEGGER_RTT_ReadNoLock>
 8006768:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	4618      	mov	r0, r3
 8006774:	f001 f82a 	bl	80077cc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006778:	e00e      	b.n	8006798 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	b25b      	sxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	da0c      	bge.n	800679c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006782:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <_HandleIncomingPacket+0xd8>)
 8006784:	7e1b      	ldrb	r3, [r3, #24]
 8006786:	4618      	mov	r0, r3
 8006788:	1cfb      	adds	r3, r7, #3
 800678a:	2201      	movs	r2, #1
 800678c:	4619      	mov	r1, r3
 800678e:	f7ff fe0d 	bl	80063ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006792:	e003      	b.n	800679c <_HandleIncomingPacket+0xcc>
      break;
 8006794:	bf00      	nop
 8006796:	e002      	b.n	800679e <_HandleIncomingPacket+0xce>
      break;
 8006798:	bf00      	nop
 800679a:	e000      	b.n	800679e <_HandleIncomingPacket+0xce>
      break;
 800679c:	bf00      	nop
    }
  }
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20019778 	.word	0x20019778

080067ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	@ 0x30
 80067b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80067b2:	2301      	movs	r3, #1
 80067b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	3301      	adds	r3, #1
 80067ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067c0:	4b31      	ldr	r3, [pc, #196]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c6:	e00b      	b.n	80067e0 <_TrySendOverflowPacket+0x34>
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80067d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	09db      	lsrs	r3, r3, #7
 80067de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80067e4:	d8f0      	bhi.n	80067c8 <_TrySendOverflowPacket+0x1c>
 80067e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067f6:	4b25      	ldr	r3, [pc, #148]	@ (800688c <_TrySendOverflowPacket+0xe0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80067fc:	4b22      	ldr	r3, [pc, #136]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	e00b      	b.n	8006828 <_TrySendOverflowPacket+0x7c>
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	1c59      	adds	r1, r3, #1
 8006818:	6279      	str	r1, [r7, #36]	@ 0x24
 800681a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	09db      	lsrs	r3, r3, #7
 8006826:	623b      	str	r3, [r7, #32]
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	2b7f      	cmp	r3, #127	@ 0x7f
 800682c:	d8f0      	bhi.n	8006810 <_TrySendOverflowPacket+0x64>
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	627a      	str	r2, [r7, #36]	@ 0x24
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800683e:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 8006840:	785b      	ldrb	r3, [r3, #1]
 8006842:	4618      	mov	r0, r3
 8006844:	1d3b      	adds	r3, r7, #4
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	461a      	mov	r2, r3
 800684c:	1d3b      	adds	r3, r7, #4
 800684e:	4619      	mov	r1, r3
 8006850:	f7f9 fcbe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006854:	4603      	mov	r3, r0
 8006856:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800685e:	4a0a      	ldr	r2, [pc, #40]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006864:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	3b01      	subs	r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e004      	b.n	800687c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006872:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	3301      	adds	r3, #1
 8006878:	4a03      	ldr	r2, [pc, #12]	@ (8006888 <_TrySendOverflowPacket+0xdc>)
 800687a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800687c:	693b      	ldr	r3, [r7, #16]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3730      	adds	r7, #48	@ 0x30
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20019778 	.word	0x20019778
 800688c:	e0001004 	.word	0xe0001004

08006890 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	@ 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800689c:	4b98      	ldr	r3, [pc, #608]	@ (8006b00 <_SendPacket+0x270>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d010      	beq.n	80068c6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80068a4:	4b96      	ldr	r3, [pc, #600]	@ (8006b00 <_SendPacket+0x270>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 812d 	beq.w	8006b08 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80068ae:	4b94      	ldr	r3, [pc, #592]	@ (8006b00 <_SendPacket+0x270>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d109      	bne.n	80068ca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80068b6:	f7ff ff79 	bl	80067ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80068ba:	4b91      	ldr	r3, [pc, #580]	@ (8006b00 <_SendPacket+0x270>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	f040 8124 	bne.w	8006b0c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80068c4:	e001      	b.n	80068ca <_SendPacket+0x3a>
    goto Send;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <_SendPacket+0x3c>
Send:
 80068ca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b1f      	cmp	r3, #31
 80068d0:	d809      	bhi.n	80068e6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80068d2:	4b8b      	ldr	r3, [pc, #556]	@ (8006b00 <_SendPacket+0x270>)
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 8115 	bne.w	8006b10 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b17      	cmp	r3, #23
 80068ea:	d807      	bhi.n	80068fc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	e0c4      	b.n	8006a86 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	2b7f      	cmp	r3, #127	@ 0x7f
 8006908:	d912      	bls.n	8006930 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	09da      	lsrs	r2, r3, #7
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3b01      	subs	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	3a01      	subs	r2, #1
 8006922:	60fa      	str	r2, [r7, #12]
 8006924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006928:	b2da      	uxtb	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e006      	b.n	800693e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3b01      	subs	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b7e      	cmp	r3, #126	@ 0x7e
 8006942:	d807      	bhi.n	8006954 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3b01      	subs	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	b2da      	uxtb	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	e098      	b.n	8006a86 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800695a:	d212      	bcs.n	8006982 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	09da      	lsrs	r2, r3, #7
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3b01      	subs	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	3a01      	subs	r2, #1
 8006974:	60fa      	str	r2, [r7, #12]
 8006976:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800697a:	b2da      	uxtb	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e081      	b.n	8006a86 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006988:	d21d      	bcs.n	80069c6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0b9a      	lsrs	r2, r3, #14
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3b01      	subs	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	09db      	lsrs	r3, r3, #7
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	3a01      	subs	r2, #1
 80069a4:	60fa      	str	r2, [r7, #12]
 80069a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	3a01      	subs	r2, #1
 80069b8:	60fa      	str	r2, [r7, #12]
 80069ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	e05f      	b.n	8006a86 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069cc:	d228      	bcs.n	8006a20 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0d5a      	lsrs	r2, r3, #21
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0b9b      	lsrs	r3, r3, #14
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	3a01      	subs	r2, #1
 80069e8:	60fa      	str	r2, [r7, #12]
 80069ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	09db      	lsrs	r3, r3, #7
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	3a01      	subs	r2, #1
 80069fe:	60fa      	str	r2, [r7, #12]
 8006a00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	3a01      	subs	r2, #1
 8006a12:	60fa      	str	r2, [r7, #12]
 8006a14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e032      	b.n	8006a86 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0f1a      	lsrs	r2, r3, #28
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	0d5b      	lsrs	r3, r3, #21
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	3a01      	subs	r2, #1
 8006a3a:	60fa      	str	r2, [r7, #12]
 8006a3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	0b9b      	lsrs	r3, r3, #14
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	60fa      	str	r2, [r7, #12]
 8006a52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	3a01      	subs	r2, #1
 8006a66:	60fa      	str	r2, [r7, #12]
 8006a68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	3a01      	subs	r2, #1
 8006a7a:	60fa      	str	r2, [r7, #12]
 8006a7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006a86:	4b1f      	ldr	r3, [pc, #124]	@ (8006b04 <_SendPacket+0x274>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b00 <_SendPacket+0x270>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	e00b      	b.n	8006ab8 <_SendPacket+0x228>
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	1c59      	adds	r1, r3, #1
 8006aa8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	09db      	lsrs	r3, r3, #7
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	2b7f      	cmp	r3, #127	@ 0x7f
 8006abc:	d8f0      	bhi.n	8006aa0 <_SendPacket+0x210>
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ac4:	6a3a      	ldr	r2, [r7, #32]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006ace:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <_SendPacket+0x270>)
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	68f9      	ldr	r1, [r7, #12]
 8006ade:	f7f9 fb77 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006ae2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006aea:	4a05      	ldr	r2, [pc, #20]	@ (8006b00 <_SendPacket+0x270>)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	60d3      	str	r3, [r2, #12]
 8006af0:	e00f      	b.n	8006b12 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006af2:	4b03      	ldr	r3, [pc, #12]	@ (8006b00 <_SendPacket+0x270>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	4b01      	ldr	r3, [pc, #4]	@ (8006b00 <_SendPacket+0x270>)
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e008      	b.n	8006b12 <_SendPacket+0x282>
 8006b00:	20019778 	.word	0x20019778
 8006b04:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006b08:	bf00      	nop
 8006b0a:	e002      	b.n	8006b12 <_SendPacket+0x282>
      goto SendDone;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <_SendPacket+0x282>
      goto SendDone;
 8006b10:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006b12:	4b14      	ldr	r3, [pc, #80]	@ (8006b64 <_SendPacket+0x2d4>)
 8006b14:	7e1b      	ldrb	r3, [r3, #24]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4a13      	ldr	r2, [pc, #76]	@ (8006b68 <_SendPacket+0x2d8>)
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	440b      	add	r3, r1
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	4413      	add	r3, r2
 8006b24:	336c      	adds	r3, #108	@ 0x6c
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b0e      	ldr	r3, [pc, #56]	@ (8006b64 <_SendPacket+0x2d4>)
 8006b2a:	7e1b      	ldrb	r3, [r3, #24]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	490e      	ldr	r1, [pc, #56]	@ (8006b68 <_SendPacket+0x2d8>)
 8006b30:	4603      	mov	r3, r0
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	4403      	add	r3, r0
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	440b      	add	r3, r1
 8006b3a:	3370      	adds	r3, #112	@ 0x70
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d00b      	beq.n	8006b5a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006b42:	4b08      	ldr	r3, [pc, #32]	@ (8006b64 <_SendPacket+0x2d4>)
 8006b44:	789b      	ldrb	r3, [r3, #2]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d107      	bne.n	8006b5a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006b4a:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <_SendPacket+0x2d4>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006b50:	f7ff fdbe 	bl	80066d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006b54:	4b03      	ldr	r3, [pc, #12]	@ (8006b64 <_SendPacket+0x2d4>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006b5a:	bf00      	nop
 8006b5c:	3728      	adds	r7, #40	@ 0x28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20019778 	.word	0x20019778
 8006b68:	20012eb8 	.word	0x20012eb8

08006b6c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8006b80:	4917      	ldr	r1, [pc, #92]	@ (8006be0 <SEGGER_SYSVIEW_Init+0x74>)
 8006b82:	4818      	ldr	r0, [pc, #96]	@ (8006be4 <SEGGER_SYSVIEW_Init+0x78>)
 8006b84:	f7ff fc98 	bl	80064b8 <SEGGER_RTT_AllocUpBuffer>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	4b16      	ldr	r3, [pc, #88]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b8e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006b90:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b92:	785a      	ldrb	r2, [r3, #1]
 8006b94:	4b14      	ldr	r3, [pc, #80]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b96:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b98:	4b13      	ldr	r3, [pc, #76]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b9a:	7e1b      	ldrb	r3, [r3, #24]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	4a11      	ldr	r2, [pc, #68]	@ (8006bec <SEGGER_SYSVIEW_Init+0x80>)
 8006ba6:	490f      	ldr	r1, [pc, #60]	@ (8006be4 <SEGGER_SYSVIEW_Init+0x78>)
 8006ba8:	f7ff fd0a 	bl	80065c0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006bac:	4b0e      	ldr	r3, [pc, #56]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf0 <SEGGER_SYSVIEW_Init+0x84>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bb8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006bba:	4a0b      	ldr	r2, [pc, #44]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006bc0:	4a09      	ldr	r2, [pc, #36]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006bc6:	4a08      	ldr	r2, [pc, #32]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006bcc:	4a06      	ldr	r2, [pc, #24]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006bd2:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20013370 	.word	0x20013370
 8006be4:	0800802c 	.word	0x0800802c
 8006be8:	20019778 	.word	0x20019778
 8006bec:	20019770 	.word	0x20019770
 8006bf0:	e0001004 	.word	0xe0001004

08006bf4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006bfc:	4a04      	ldr	r2, [pc, #16]	@ (8006c10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6113      	str	r3, [r2, #16]
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20019778 	.word	0x20019778

08006c14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c20:	f04f 0120 	mov.w	r1, #32
 8006c24:	f381 8811 	msr	BASEPRI, r1
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	4808      	ldr	r0, [pc, #32]	@ (8006c4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006c2c:	f7ff fd44 	bl	80066b8 <_PreparePacket>
 8006c30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	68b8      	ldr	r0, [r7, #8]
 8006c38:	f7ff fe2a 	bl	8006890 <_SendPacket>
  RECORD_END();
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f383 8811 	msr	BASEPRI, r3
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200197a8 	.word	0x200197a8

08006c50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c5e:	f04f 0120 	mov.w	r1, #32
 8006c62:	f381 8811 	msr	BASEPRI, r1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	4816      	ldr	r0, [pc, #88]	@ (8006cc4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006c6a:	f7ff fd25 	bl	80066b8 <_PreparePacket>
 8006c6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	e00b      	b.n	8006c96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	1c59      	adds	r1, r3, #1
 8006c86:	61f9      	str	r1, [r7, #28]
 8006c88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	09db      	lsrs	r3, r3, #7
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c9a:	d8f0      	bhi.n	8006c7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	61fa      	str	r2, [r7, #28]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	6938      	ldr	r0, [r7, #16]
 8006cb2:	f7ff fded 	bl	8006890 <_SendPacket>
  RECORD_END();
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f383 8811 	msr	BASEPRI, r3
}
 8006cbc:	bf00      	nop
 8006cbe:	3720      	adds	r7, #32
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	200197a8 	.word	0x200197a8

08006cc8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08c      	sub	sp, #48	@ 0x30
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd8:	f04f 0120 	mov.w	r1, #32
 8006cdc:	f381 8811 	msr	BASEPRI, r1
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	4825      	ldr	r0, [pc, #148]	@ (8006d78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006ce4:	f7ff fce8 	bl	80066b8 <_PreparePacket>
 8006ce8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cf6:	e00b      	b.n	8006d10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0c:	09db      	lsrs	r3, r3, #7
 8006d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d14:	d8f0      	bhi.n	8006cf8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	623b      	str	r3, [r7, #32]
 8006d2e:	e00b      	b.n	8006d48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	623b      	str	r3, [r7, #32]
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d4c:	d8f0      	bhi.n	8006d30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	6979      	ldr	r1, [r7, #20]
 8006d62:	69b8      	ldr	r0, [r7, #24]
 8006d64:	f7ff fd94 	bl	8006890 <_SendPacket>
  RECORD_END();
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
}
 8006d6e:	bf00      	nop
 8006d70:	3730      	adds	r7, #48	@ 0x30
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200197a8 	.word	0x200197a8

08006d7c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08c      	sub	sp, #48	@ 0x30
 8006d80:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006d82:	4b58      	ldr	r3, [pc, #352]	@ (8006ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006d88:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8c:	f04f 0120 	mov.w	r1, #32
 8006d90:	f381 8811 	msr	BASEPRI, r1
 8006d94:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006d96:	4b53      	ldr	r3, [pc, #332]	@ (8006ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8006d98:	785b      	ldrb	r3, [r3, #1]
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	4952      	ldr	r1, [pc, #328]	@ (8006ee8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7f9 fa16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006daa:	200a      	movs	r0, #10
 8006dac:	f7ff ff32 	bl	8006c14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006db0:	f3ef 8311 	mrs	r3, BASEPRI
 8006db4:	f04f 0120 	mov.w	r1, #32
 8006db8:	f381 8811 	msr	BASEPRI, r1
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	484b      	ldr	r0, [pc, #300]	@ (8006eec <SEGGER_SYSVIEW_Start+0x170>)
 8006dc0:	f7ff fc7a 	bl	80066b8 <_PreparePacket>
 8006dc4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dce:	4b45      	ldr	r3, [pc, #276]	@ (8006ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dd4:	e00b      	b.n	8006dee <SEGGER_SYSVIEW_Start+0x72>
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	1c59      	adds	r1, r3, #1
 8006dde:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006de0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	09db      	lsrs	r3, r3, #7
 8006dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006df2:	d8f0      	bhi.n	8006dd6 <SEGGER_SYSVIEW_Start+0x5a>
 8006df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e08:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	e00b      	b.n	8006e28 <SEGGER_SYSVIEW_Start+0xac>
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	1c59      	adds	r1, r3, #1
 8006e18:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	09db      	lsrs	r3, r3, #7
 8006e26:	623b      	str	r3, [r7, #32]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e2c:	d8f0      	bhi.n	8006e10 <SEGGER_SYSVIEW_Start+0x94>
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	4b28      	ldr	r3, [pc, #160]	@ (8006ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e00b      	b.n	8006e62 <SEGGER_SYSVIEW_Start+0xe6>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	1c59      	adds	r1, r3, #1
 8006e52:	61f9      	str	r1, [r7, #28]
 8006e54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	09db      	lsrs	r3, r3, #7
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e66:	d8f0      	bhi.n	8006e4a <SEGGER_SYSVIEW_Start+0xce>
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	61fa      	str	r2, [r7, #28]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	e00b      	b.n	8006e9a <SEGGER_SYSVIEW_Start+0x11e>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	1c59      	adds	r1, r3, #1
 8006e8a:	6179      	str	r1, [r7, #20]
 8006e8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	09db      	lsrs	r3, r3, #7
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e9e:	d8f0      	bhi.n	8006e82 <SEGGER_SYSVIEW_Start+0x106>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	617a      	str	r2, [r7, #20]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006eb0:	2218      	movs	r2, #24
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fceb 	bl	8006890 <_SendPacket>
      RECORD_END();
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ec0:	4b08      	ldr	r3, [pc, #32]	@ (8006ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006ec8:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006ece:	f000 f9eb 	bl	80072a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006ed2:	f000 f9b1 	bl	8007238 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006ed6:	f000 fd21 	bl	800791c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006eda:	bf00      	nop
 8006edc:	3730      	adds	r7, #48	@ 0x30
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20019778 	.word	0x20019778
 8006ee8:	080080b8 	.word	0x080080b8
 8006eec:	200197a8 	.word	0x200197a8

08006ef0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8006efa:	f04f 0120 	mov.w	r1, #32
 8006efe:	f381 8811 	msr	BASEPRI, r1
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	480b      	ldr	r0, [pc, #44]	@ (8006f34 <SEGGER_SYSVIEW_Stop+0x44>)
 8006f06:	f7ff fbd7 	bl	80066b8 <_PreparePacket>
 8006f0a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <SEGGER_SYSVIEW_Stop+0x48>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d007      	beq.n	8006f24 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006f14:	220b      	movs	r2, #11
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6838      	ldr	r0, [r7, #0]
 8006f1a:	f7ff fcb9 	bl	8006890 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006f1e:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <SEGGER_SYSVIEW_Stop+0x48>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f383 8811 	msr	BASEPRI, r3
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	200197a8 	.word	0x200197a8
 8006f38:	20019778 	.word	0x20019778

08006f3c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08c      	sub	sp, #48	@ 0x30
 8006f40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f42:	f3ef 8311 	mrs	r3, BASEPRI
 8006f46:	f04f 0120 	mov.w	r1, #32
 8006f4a:	f381 8811 	msr	BASEPRI, r1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	4845      	ldr	r0, [pc, #276]	@ (8007068 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006f52:	f7ff fbb1 	bl	80066b8 <_PreparePacket>
 8006f56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f60:	4b42      	ldr	r3, [pc, #264]	@ (800706c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f66:	e00b      	b.n	8006f80 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	09db      	lsrs	r3, r3, #7
 8006f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f84:	d8f0      	bhi.n	8006f68 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f9a:	4b34      	ldr	r3, [pc, #208]	@ (800706c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	623b      	str	r3, [r7, #32]
 8006fa0:	e00b      	b.n	8006fba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	6279      	str	r1, [r7, #36]	@ 0x24
 8006fac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	09db      	lsrs	r3, r3, #7
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fbe:	d8f0      	bhi.n	8006fa2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fc6:	6a3a      	ldr	r2, [r7, #32]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	4b25      	ldr	r3, [pc, #148]	@ (800706c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e00b      	b.n	8006ff4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	1c59      	adds	r1, r3, #1
 8006fe4:	61f9      	str	r1, [r7, #28]
 8006fe6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	09db      	lsrs	r3, r3, #7
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ff8:	d8f0      	bhi.n	8006fdc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	61fa      	str	r2, [r7, #28]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	e00b      	b.n	800702c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	6179      	str	r1, [r7, #20]
 800701e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	09db      	lsrs	r3, r3, #7
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007030:	d8f0      	bhi.n	8007014 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	617a      	str	r2, [r7, #20]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007042:	2218      	movs	r2, #24
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	68b8      	ldr	r0, [r7, #8]
 8007048:	f7ff fc22 	bl	8006890 <_SendPacket>
  RECORD_END();
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007052:	4b06      	ldr	r3, [pc, #24]	@ (800706c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800705a:	4b04      	ldr	r3, [pc, #16]	@ (800706c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	4798      	blx	r3
  }
}
 8007060:	bf00      	nop
 8007062:	3730      	adds	r7, #48	@ 0x30
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200197a8 	.word	0x200197a8
 800706c:	20019778 	.word	0x20019778

08007070 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b092      	sub	sp, #72	@ 0x48
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007078:	f3ef 8311 	mrs	r3, BASEPRI
 800707c:	f04f 0120 	mov.w	r1, #32
 8007080:	f381 8811 	msr	BASEPRI, r1
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	486a      	ldr	r0, [pc, #424]	@ (8007230 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007088:	f7ff fb16 	bl	80066b8 <_PreparePacket>
 800708c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	647b      	str	r3, [r7, #68]	@ 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b66      	ldr	r3, [pc, #408]	@ (8007234 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a2:	e00b      	b.n	80070bc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80070a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	6479      	str	r1, [r7, #68]	@ 0x44
 80070ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b8:	09db      	lsrs	r3, r3, #7
 80070ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80070bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070be:	2b7f      	cmp	r3, #127	@ 0x7f
 80070c0:	d8f0      	bhi.n	80070a4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80070c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80070c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070dc:	e00b      	b.n	80070f6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e4:	1c59      	adds	r1, r3, #1
 80070e6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80070e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f2:	09db      	lsrs	r3, r3, #7
 80070f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80070fa:	d8f0      	bhi.n	80070de <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80070fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007102:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800710a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	4619      	mov	r1, r3
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff fa9f 	bl	8006658 <_EncodeStr>
 800711a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800711c:	2209      	movs	r2, #9
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	6938      	ldr	r0, [r7, #16]
 8007122:	f7ff fbb5 	bl	8006890 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	4b40      	ldr	r3, [pc, #256]	@ (8007234 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	633b      	str	r3, [r7, #48]	@ 0x30
 800713a:	e00b      	b.n	8007154 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	6379      	str	r1, [r7, #52]	@ 0x34
 8007146:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	09db      	lsrs	r3, r3, #7
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	2b7f      	cmp	r3, #127	@ 0x7f
 8007158:	d8f0      	bhi.n	800713c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800715a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	637a      	str	r2, [r7, #52]	@ 0x34
 8007160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007168:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007174:	e00b      	b.n	800718e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007178:	b2da      	uxtb	r2, r3
 800717a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717c:	1c59      	adds	r1, r3, #1
 800717e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007180:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	09db      	lsrs	r3, r3, #7
 800718c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	2b7f      	cmp	r3, #127	@ 0x7f
 8007192:	d8f0      	bhi.n	8007176 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800719a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	e00b      	b.n	80071c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	1c59      	adds	r1, r3, #1
 80071b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80071ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	09db      	lsrs	r3, r3, #7
 80071c6:	623b      	str	r3, [r7, #32]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80071cc:	d8f0      	bhi.n	80071b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	2300      	movs	r3, #0
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	e00b      	b.n	8007200 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	1c59      	adds	r1, r3, #1
 80071f0:	61f9      	str	r1, [r7, #28]
 80071f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	09db      	lsrs	r3, r3, #7
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b7f      	cmp	r3, #127	@ 0x7f
 8007204:	d8f0      	bhi.n	80071e8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	61fa      	str	r2, [r7, #28]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007216:	2215      	movs	r2, #21
 8007218:	68f9      	ldr	r1, [r7, #12]
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f7ff fb38 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f383 8811 	msr	BASEPRI, r3
}
 8007226:	bf00      	nop
 8007228:	3748      	adds	r7, #72	@ 0x48
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	200197a8 	.word	0x200197a8
 8007234:	20019778 	.word	0x20019778

08007238 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800723c:	4b07      	ldr	r3, [pc, #28]	@ (800725c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007244:	4b05      	ldr	r3, [pc, #20]	@ (800725c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800724e:	4b03      	ldr	r3, [pc, #12]	@ (800725c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4798      	blx	r3
  }
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20019778 	.word	0x20019778

08007260 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007268:	f3ef 8311 	mrs	r3, BASEPRI
 800726c:	f04f 0120 	mov.w	r1, #32
 8007270:	f381 8811 	msr	BASEPRI, r1
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	480b      	ldr	r0, [pc, #44]	@ (80072a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007278:	f7ff fa1e 	bl	80066b8 <_PreparePacket>
 800727c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800727e:	2280      	movs	r2, #128	@ 0x80
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	6938      	ldr	r0, [r7, #16]
 8007284:	f7ff f9e8 	bl	8006658 <_EncodeStr>
 8007288:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800728a:	220e      	movs	r2, #14
 800728c:	68f9      	ldr	r1, [r7, #12]
 800728e:	6938      	ldr	r0, [r7, #16]
 8007290:	f7ff fafe 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f383 8811 	msr	BASEPRI, r3
}
 800729a:	bf00      	nop
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	200197a8 	.word	0x200197a8

080072a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80072a8:	b590      	push	{r4, r7, lr}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80072ae:	4b15      	ldr	r3, [pc, #84]	@ (8007304 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01a      	beq.n	80072ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80072b6:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d015      	beq.n	80072ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80072c0:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4798      	blx	r3
 80072c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80072cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80072ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	000a      	movs	r2, r1
 80072dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80072de:	4613      	mov	r3, r2
 80072e0:	461a      	mov	r2, r3
 80072e2:	4621      	mov	r1, r4
 80072e4:	200d      	movs	r0, #13
 80072e6:	f7ff fcef 	bl	8006cc8 <SEGGER_SYSVIEW_RecordU32x2>
 80072ea:	e006      	b.n	80072fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	200c      	movs	r0, #12
 80072f4:	f7ff fcac 	bl	8006c50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd90      	pop	{r4, r7, pc}
 8007302:	bf00      	nop
 8007304:	20019778 	.word	0x20019778
 8007308:	e0001004 	.word	0xe0001004

0800730c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007312:	f3ef 8311 	mrs	r3, BASEPRI
 8007316:	f04f 0120 	mov.w	r1, #32
 800731a:	f381 8811 	msr	BASEPRI, r1
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	4819      	ldr	r0, [pc, #100]	@ (8007388 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007322:	f7ff f9c9 	bl	80066b8 <_PreparePacket>
 8007326:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800732c:	4b17      	ldr	r3, [pc, #92]	@ (800738c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007334:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	e00b      	b.n	8007358 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1c59      	adds	r1, r3, #1
 8007348:	6179      	str	r1, [r7, #20]
 800734a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	09db      	lsrs	r3, r3, #7
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b7f      	cmp	r3, #127	@ 0x7f
 800735c:	d8f0      	bhi.n	8007340 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	617a      	str	r2, [r7, #20]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800736e:	2202      	movs	r2, #2
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	68b8      	ldr	r0, [r7, #8]
 8007374:	f7ff fa8c 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f383 8811 	msr	BASEPRI, r3
}
 800737e:	bf00      	nop
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200197a8 	.word	0x200197a8
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007396:	f3ef 8311 	mrs	r3, BASEPRI
 800739a:	f04f 0120 	mov.w	r1, #32
 800739e:	f381 8811 	msr	BASEPRI, r1
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	4807      	ldr	r0, [pc, #28]	@ (80073c4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80073a6:	f7ff f987 	bl	80066b8 <_PreparePacket>
 80073aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80073ac:	2203      	movs	r2, #3
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6838      	ldr	r0, [r7, #0]
 80073b2:	f7ff fa6d 	bl	8006890 <_SendPacket>
  RECORD_END();
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f383 8811 	msr	BASEPRI, r3
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	200197a8 	.word	0x200197a8

080073c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80073ce:	f3ef 8311 	mrs	r3, BASEPRI
 80073d2:	f04f 0120 	mov.w	r1, #32
 80073d6:	f381 8811 	msr	BASEPRI, r1
 80073da:	607b      	str	r3, [r7, #4]
 80073dc:	4807      	ldr	r0, [pc, #28]	@ (80073fc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80073de:	f7ff f96b 	bl	80066b8 <_PreparePacket>
 80073e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80073e4:	2212      	movs	r2, #18
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6838      	ldr	r0, [r7, #0]
 80073ea:	f7ff fa51 	bl	8006890 <_SendPacket>
  RECORD_END();
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f383 8811 	msr	BASEPRI, r3
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	200197a8 	.word	0x200197a8

08007400 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007408:	f3ef 8311 	mrs	r3, BASEPRI
 800740c:	f04f 0120 	mov.w	r1, #32
 8007410:	f381 8811 	msr	BASEPRI, r1
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	4817      	ldr	r0, [pc, #92]	@ (8007474 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8007418:	f7ff f94e 	bl	80066b8 <_PreparePacket>
 800741c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	61fb      	str	r3, [r7, #28]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	e00b      	b.n	8007444 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	1c59      	adds	r1, r3, #1
 8007434:	61f9      	str	r1, [r7, #28]
 8007436:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	09db      	lsrs	r3, r3, #7
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b7f      	cmp	r3, #127	@ 0x7f
 8007448:	d8f0      	bhi.n	800742c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	61fa      	str	r2, [r7, #28]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800745a:	221c      	movs	r2, #28
 800745c:	68f9      	ldr	r1, [r7, #12]
 800745e:	6938      	ldr	r0, [r7, #16]
 8007460:	f7ff fa16 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f383 8811 	msr	BASEPRI, r3
}
 800746a:	bf00      	nop
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200197a8 	.word	0x200197a8

08007478 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	@ 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007482:	f3ef 8311 	mrs	r3, BASEPRI
 8007486:	f04f 0120 	mov.w	r1, #32
 800748a:	f381 8811 	msr	BASEPRI, r1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	4824      	ldr	r0, [pc, #144]	@ (8007524 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8007492:	f7ff f911 	bl	80066b8 <_PreparePacket>
 8007496:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	623b      	str	r3, [r7, #32]
 80074a4:	e00b      	b.n	80074be <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	1c59      	adds	r1, r3, #1
 80074ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80074b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	09db      	lsrs	r3, r3, #7
 80074bc:	623b      	str	r3, [r7, #32]
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80074c2:	d8f0      	bhi.n	80074a6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80074ca:	6a3a      	ldr	r2, [r7, #32]
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e00b      	b.n	80074f6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	1c59      	adds	r1, r3, #1
 80074e6:	61f9      	str	r1, [r7, #28]
 80074e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074ec:	b2d2      	uxtb	r2, r2
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	09db      	lsrs	r3, r3, #7
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80074fa:	d8f0      	bhi.n	80074de <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	61fa      	str	r2, [r7, #28]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800750c:	221c      	movs	r2, #28
 800750e:	68f9      	ldr	r1, [r7, #12]
 8007510:	6938      	ldr	r0, [r7, #16]
 8007512:	f7ff f9bd 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f383 8811 	msr	BASEPRI, r3
}
 800751c:	bf00      	nop
 800751e:	3728      	adds	r7, #40	@ 0x28
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	200197a8 	.word	0x200197a8

08007528 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800752e:	f3ef 8311 	mrs	r3, BASEPRI
 8007532:	f04f 0120 	mov.w	r1, #32
 8007536:	f381 8811 	msr	BASEPRI, r1
 800753a:	607b      	str	r3, [r7, #4]
 800753c:	4807      	ldr	r0, [pc, #28]	@ (800755c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800753e:	f7ff f8bb 	bl	80066b8 <_PreparePacket>
 8007542:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007544:	2211      	movs	r2, #17
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6838      	ldr	r0, [r7, #0]
 800754a:	f7ff f9a1 	bl	8006890 <_SendPacket>
  RECORD_END();
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f383 8811 	msr	BASEPRI, r3
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	200197a8 	.word	0x200197a8

08007560 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007568:	f3ef 8311 	mrs	r3, BASEPRI
 800756c:	f04f 0120 	mov.w	r1, #32
 8007570:	f381 8811 	msr	BASEPRI, r1
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	4819      	ldr	r0, [pc, #100]	@ (80075dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007578:	f7ff f89e 	bl	80066b8 <_PreparePacket>
 800757c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007582:	4b17      	ldr	r3, [pc, #92]	@ (80075e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	e00b      	b.n	80075ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	b2da      	uxtb	r2, r3
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	1c59      	adds	r1, r3, #1
 800759e:	61f9      	str	r1, [r7, #28]
 80075a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	09db      	lsrs	r3, r3, #7
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80075b2:	d8f0      	bhi.n	8007596 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	61fa      	str	r2, [r7, #28]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80075c4:	2208      	movs	r2, #8
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	6938      	ldr	r0, [r7, #16]
 80075ca:	f7ff f961 	bl	8006890 <_SendPacket>
  RECORD_END();
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f383 8811 	msr	BASEPRI, r3
}
 80075d4:	bf00      	nop
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	200197a8 	.word	0x200197a8
 80075e0:	20019778 	.word	0x20019778

080075e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075ec:	f3ef 8311 	mrs	r3, BASEPRI
 80075f0:	f04f 0120 	mov.w	r1, #32
 80075f4:	f381 8811 	msr	BASEPRI, r1
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	4819      	ldr	r0, [pc, #100]	@ (8007660 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075fc:	f7ff f85c 	bl	80066b8 <_PreparePacket>
 8007600:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007606:	4b17      	ldr	r3, [pc, #92]	@ (8007664 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	61fb      	str	r3, [r7, #28]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e00b      	b.n	8007632 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	1c59      	adds	r1, r3, #1
 8007622:	61f9      	str	r1, [r7, #28]
 8007624:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	09db      	lsrs	r3, r3, #7
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b7f      	cmp	r3, #127	@ 0x7f
 8007636:	d8f0      	bhi.n	800761a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	61fa      	str	r2, [r7, #28]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007648:	2204      	movs	r2, #4
 800764a:	68f9      	ldr	r1, [r7, #12]
 800764c:	6938      	ldr	r0, [r7, #16]
 800764e:	f7ff f91f 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f383 8811 	msr	BASEPRI, r3
}
 8007658:	bf00      	nop
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	200197a8 	.word	0x200197a8
 8007664:	20019778 	.word	0x20019778

08007668 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007670:	f3ef 8311 	mrs	r3, BASEPRI
 8007674:	f04f 0120 	mov.w	r1, #32
 8007678:	f381 8811 	msr	BASEPRI, r1
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	4819      	ldr	r0, [pc, #100]	@ (80076e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007680:	f7ff f81a 	bl	80066b8 <_PreparePacket>
 8007684:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800768a:	4b17      	ldr	r3, [pc, #92]	@ (80076e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e00b      	b.n	80076b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	1c59      	adds	r1, r3, #1
 80076a6:	61f9      	str	r1, [r7, #28]
 80076a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	09db      	lsrs	r3, r3, #7
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80076ba:	d8f0      	bhi.n	800769e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	61fa      	str	r2, [r7, #28]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	b2d2      	uxtb	r2, r2
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80076cc:	2206      	movs	r2, #6
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	6938      	ldr	r0, [r7, #16]
 80076d2:	f7ff f8dd 	bl	8006890 <_SendPacket>
  RECORD_END();
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f383 8811 	msr	BASEPRI, r3
}
 80076dc:	bf00      	nop
 80076de:	3720      	adds	r7, #32
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	200197a8 	.word	0x200197a8
 80076e8:	20019778 	.word	0x20019778

080076ec <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	@ 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80076f6:	f3ef 8311 	mrs	r3, BASEPRI
 80076fa:	f04f 0120 	mov.w	r1, #32
 80076fe:	f381 8811 	msr	BASEPRI, r1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	4827      	ldr	r0, [pc, #156]	@ (80077a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007706:	f7fe ffd7 	bl	80066b8 <_PreparePacket>
 800770a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007710:	4b25      	ldr	r3, [pc, #148]	@ (80077a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	623b      	str	r3, [r7, #32]
 8007722:	e00b      	b.n	800773c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772a:	1c59      	adds	r1, r3, #1
 800772c:	6279      	str	r1, [r7, #36]	@ 0x24
 800772e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	09db      	lsrs	r3, r3, #7
 800773a:	623b      	str	r3, [r7, #32]
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007740:	d8f0      	bhi.n	8007724 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	627a      	str	r2, [r7, #36]	@ 0x24
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	e00b      	b.n	8007774 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	b2da      	uxtb	r2, r3
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	1c59      	adds	r1, r3, #1
 8007764:	61f9      	str	r1, [r7, #28]
 8007766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	09db      	lsrs	r3, r3, #7
 8007772:	61bb      	str	r3, [r7, #24]
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b7f      	cmp	r3, #127	@ 0x7f
 8007778:	d8f0      	bhi.n	800775c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	61fa      	str	r2, [r7, #28]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800778a:	2207      	movs	r2, #7
 800778c:	68f9      	ldr	r1, [r7, #12]
 800778e:	6938      	ldr	r0, [r7, #16]
 8007790:	f7ff f87e 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f383 8811 	msr	BASEPRI, r3
}
 800779a:	bf00      	nop
 800779c:	3728      	adds	r7, #40	@ 0x28
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	200197a8 	.word	0x200197a8
 80077a8:	20019778 	.word	0x20019778

080077ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80077b4:	4b04      	ldr	r3, [pc, #16]	@ (80077c8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	1ad3      	subs	r3, r2, r3
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	20019778 	.word	0x20019778

080077cc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	@ 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	4603      	mov	r3, r0
 80077d4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80077d6:	4b40      	ldr	r3, [pc, #256]	@ (80078d8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d077      	beq.n	80078ce <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80077de:	4b3e      	ldr	r3, [pc, #248]	@ (80078d8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80077e4:	2300      	movs	r3, #0
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077e8:	e008      	b.n	80077fc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80077ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80077f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f8:	3301      	adds	r3, #1
 80077fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007800:	429a      	cmp	r2, r3
 8007802:	d3f2      	bcc.n	80077ea <SEGGER_SYSVIEW_SendModule+0x1e>
 8007804:	e000      	b.n	8007808 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007806:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d055      	beq.n	80078ba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800780e:	f3ef 8311 	mrs	r3, BASEPRI
 8007812:	f04f 0120 	mov.w	r1, #32
 8007816:	f381 8811 	msr	BASEPRI, r1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	482f      	ldr	r0, [pc, #188]	@ (80078dc <SEGGER_SYSVIEW_SendModule+0x110>)
 800781e:	f7fe ff4b 	bl	80066b8 <_PreparePacket>
 8007822:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	623b      	str	r3, [r7, #32]
 8007830:	e00b      	b.n	800784a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007838:	1c59      	adds	r1, r3, #1
 800783a:	6279      	str	r1, [r7, #36]	@ 0x24
 800783c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	09db      	lsrs	r3, r3, #7
 8007848:	623b      	str	r3, [r7, #32]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	2b7f      	cmp	r3, #127	@ 0x7f
 800784e:	d8f0      	bhi.n	8007832 <SEGGER_SYSVIEW_SendModule+0x66>
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	627a      	str	r2, [r7, #36]	@ 0x24
 8007856:	6a3a      	ldr	r2, [r7, #32]
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	61fb      	str	r3, [r7, #28]
 8007864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	61bb      	str	r3, [r7, #24]
 800786a:	e00b      	b.n	8007884 <SEGGER_SYSVIEW_SendModule+0xb8>
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	b2da      	uxtb	r2, r3
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	1c59      	adds	r1, r3, #1
 8007874:	61f9      	str	r1, [r7, #28]
 8007876:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	09db      	lsrs	r3, r3, #7
 8007882:	61bb      	str	r3, [r7, #24]
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b7f      	cmp	r3, #127	@ 0x7f
 8007888:	d8f0      	bhi.n	800786c <SEGGER_SYSVIEW_SendModule+0xa0>
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	61fa      	str	r2, [r7, #28]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800789a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2280      	movs	r2, #128	@ 0x80
 80078a0:	4619      	mov	r1, r3
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7fe fed8 	bl	8006658 <_EncodeStr>
 80078a8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80078aa:	2216      	movs	r2, #22
 80078ac:	68f9      	ldr	r1, [r7, #12]
 80078ae:	6938      	ldr	r0, [r7, #16]
 80078b0:	f7fe ffee 	bl	8006890 <_SendPacket>
      RECORD_END();
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80078ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d006      	beq.n	80078ce <SEGGER_SYSVIEW_SendModule+0x102>
 80078c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80078c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4798      	blx	r3
    }
  }
}
 80078ce:	bf00      	nop
 80078d0:	3730      	adds	r7, #48	@ 0x30
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200197a0 	.word	0x200197a0
 80078dc:	200197a8 	.word	0x200197a8

080078e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80078e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00f      	beq.n	800790e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80078ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007918 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f2      	bne.n	80078f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	200197a0 	.word	0x200197a0

0800791c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007922:	f3ef 8311 	mrs	r3, BASEPRI
 8007926:	f04f 0120 	mov.w	r1, #32
 800792a:	f381 8811 	msr	BASEPRI, r1
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	4817      	ldr	r0, [pc, #92]	@ (8007990 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007932:	f7fe fec1 	bl	80066b8 <_PreparePacket>
 8007936:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	4b14      	ldr	r3, [pc, #80]	@ (8007994 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	e00b      	b.n	8007960 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	b2da      	uxtb	r2, r3
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	1c59      	adds	r1, r3, #1
 8007950:	6179      	str	r1, [r7, #20]
 8007952:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	09db      	lsrs	r3, r3, #7
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b7f      	cmp	r3, #127	@ 0x7f
 8007964:	d8f0      	bhi.n	8007948 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	617a      	str	r2, [r7, #20]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007976:	221b      	movs	r2, #27
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	68b8      	ldr	r0, [r7, #8]
 800797c:	f7fe ff88 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f383 8811 	msr	BASEPRI, r3
}
 8007986:	bf00      	nop
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	200197a8 	.word	0x200197a8
 8007994:	200197a4 	.word	0x200197a4

08007998 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	@ 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079a0:	f3ef 8311 	mrs	r3, BASEPRI
 80079a4:	f04f 0120 	mov.w	r1, #32
 80079a8:	f381 8811 	msr	BASEPRI, r1
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	4827      	ldr	r0, [pc, #156]	@ (8007a4c <SEGGER_SYSVIEW_Warn+0xb4>)
 80079b0:	f7fe fe82 	bl	80066b8 <_PreparePacket>
 80079b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079b6:	2280      	movs	r2, #128	@ 0x80
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f7fe fe4c 	bl	8006658 <_EncodeStr>
 80079c0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079c6:	2301      	movs	r3, #1
 80079c8:	623b      	str	r3, [r7, #32]
 80079ca:	e00b      	b.n	80079e4 <SEGGER_SYSVIEW_Warn+0x4c>
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80079d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	09db      	lsrs	r3, r3, #7
 80079e2:	623b      	str	r3, [r7, #32]
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80079e8:	d8f0      	bhi.n	80079cc <SEGGER_SYSVIEW_Warn+0x34>
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80079f0:	6a3a      	ldr	r2, [r7, #32]
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	61fb      	str	r3, [r7, #28]
 80079fe:	2300      	movs	r3, #0
 8007a00:	61bb      	str	r3, [r7, #24]
 8007a02:	e00b      	b.n	8007a1c <SEGGER_SYSVIEW_Warn+0x84>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	1c59      	adds	r1, r3, #1
 8007a0c:	61f9      	str	r1, [r7, #28]
 8007a0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	09db      	lsrs	r3, r3, #7
 8007a1a:	61bb      	str	r3, [r7, #24]
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a20:	d8f0      	bhi.n	8007a04 <SEGGER_SYSVIEW_Warn+0x6c>
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	61fa      	str	r2, [r7, #28]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007a32:	221a      	movs	r2, #26
 8007a34:	68f9      	ldr	r1, [r7, #12]
 8007a36:	6938      	ldr	r0, [r7, #16]
 8007a38:	f7fe ff2a 	bl	8006890 <_SendPacket>
  RECORD_END();
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f383 8811 	msr	BASEPRI, r3
}
 8007a42:	bf00      	nop
 8007a44:	3728      	adds	r7, #40	@ 0x28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	200197a8 	.word	0x200197a8

08007a50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007a56:	2300      	movs	r3, #0
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	e033      	b.n	8007ac4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007a5c:	491e      	ldr	r1, [pc, #120]	@ (8007ad8 <_cbSendTaskList+0x88>)
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	491a      	ldr	r1, [pc, #104]	@ (8007ad8 <_cbSendTaskList+0x88>)
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	4c16      	ldr	r4, [pc, #88]	@ (8007ad8 <_cbSendTaskList+0x88>)
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4423      	add	r3, r4
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	681c      	ldr	r4, [r3, #0]
 8007a90:	4d11      	ldr	r5, [pc, #68]	@ (8007ad8 <_cbSendTaskList+0x88>)
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	442b      	add	r3, r5
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	681d      	ldr	r5, [r3, #0]
 8007aa2:	4e0d      	ldr	r6, [pc, #52]	@ (8007ad8 <_cbSendTaskList+0x88>)
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4433      	add	r3, r6
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	462b      	mov	r3, r5
 8007ab8:	4622      	mov	r2, r4
 8007aba:	f000 f979 	bl	8007db0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	607b      	str	r3, [r7, #4]
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <_cbSendTaskList+0x8c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d3c6      	bcc.n	8007a5c <_cbSendTaskList+0xc>
  }
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad8:	2001988c 	.word	0x2001988c
 8007adc:	2001992c 	.word	0x2001992c

08007ae0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007ae8:	f7fc fcf4 	bl	80044d4 <xTaskGetTickCountFromISR>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2200      	movs	r2, #0
 8007af0:	469a      	mov	sl, r3
 8007af2:	4693      	mov	fp, r2
 8007af4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	f04f 0a00 	mov.w	sl, #0
 8007b04:	f04f 0b00 	mov.w	fp, #0
 8007b08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007b0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007b10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007b14:	4652      	mov	r2, sl
 8007b16:	465b      	mov	r3, fp
 8007b18:	1a14      	subs	r4, r2, r0
 8007b1a:	eb63 0501 	sbc.w	r5, r3, r1
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	f04f 0300 	mov.w	r3, #0
 8007b26:	00ab      	lsls	r3, r5, #2
 8007b28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007b2c:	00a2      	lsls	r2, r4, #2
 8007b2e:	4614      	mov	r4, r2
 8007b30:	461d      	mov	r5, r3
 8007b32:	eb14 0800 	adds.w	r8, r4, r0
 8007b36:	eb45 0901 	adc.w	r9, r5, r1
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b4e:	4690      	mov	r8, r2
 8007b50:	4699      	mov	r9, r3
 8007b52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007b56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007b68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007b76:	2205      	movs	r2, #5
 8007b78:	492b      	ldr	r1, [pc, #172]	@ (8007c28 <SYSVIEW_AddTask+0xc0>)
 8007b7a:	68b8      	ldr	r0, [r7, #8]
 8007b7c:	f000 f939 	bl	8007df2 <memcmp>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d04b      	beq.n	8007c1e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007b86:	4b29      	ldr	r3, [pc, #164]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b07      	cmp	r3, #7
 8007b8c:	d903      	bls.n	8007b96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007b8e:	4828      	ldr	r0, [pc, #160]	@ (8007c30 <SYSVIEW_AddTask+0xc8>)
 8007b90:	f7ff ff02 	bl	8007998 <SEGGER_SYSVIEW_Warn>
    return;
 8007b94:	e044      	b.n	8007c20 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007b96:	4b25      	ldr	r3, [pc, #148]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4926      	ldr	r1, [pc, #152]	@ (8007c34 <SYSVIEW_AddTask+0xcc>)
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007baa:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4921      	ldr	r1, [pc, #132]	@ (8007c34 <SYSVIEW_AddTask+0xcc>)
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	3304      	adds	r3, #4
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	491b      	ldr	r1, [pc, #108]	@ (8007c34 <SYSVIEW_AddTask+0xcc>)
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007bd6:	4b15      	ldr	r3, [pc, #84]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4916      	ldr	r1, [pc, #88]	@ (8007c34 <SYSVIEW_AddTask+0xcc>)
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	330c      	adds	r3, #12
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8007bec:	4b0f      	ldr	r3, [pc, #60]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4910      	ldr	r1, [pc, #64]	@ (8007c34 <SYSVIEW_AddTask+0xcc>)
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3310      	adds	r3, #16
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007c02:	4b0a      	ldr	r3, [pc, #40]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	4a08      	ldr	r2, [pc, #32]	@ (8007c2c <SYSVIEW_AddTask+0xc4>)
 8007c0a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f8ca 	bl	8007db0 <SYSVIEW_SendTaskInfo>
 8007c1c:	e000      	b.n	8007c20 <SYSVIEW_AddTask+0xb8>
    return;
 8007c1e:	bf00      	nop

}
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	08008034 	.word	0x08008034
 8007c2c:	2001992c 	.word	0x2001992c
 8007c30:	0800803c 	.word	0x0800803c
 8007c34:	2001988c 	.word	0x2001988c

08007c38 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8007c40:	4b59      	ldr	r3, [pc, #356]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80ab 	beq.w	8007da0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e00d      	b.n	8007c6c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8007c50:	4956      	ldr	r1, [pc, #344]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d008      	beq.n	8007c78 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d3ec      	bcc.n	8007c50 <SYSVIEW_DeleteTask+0x18>
 8007c76:	e000      	b.n	8007c7a <SYSVIEW_DeleteTask+0x42>
      break;
 8007c78:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8007c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d111      	bne.n	8007caa <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4a46      	ldr	r2, [pc, #280]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007c92:	4413      	add	r3, r2
 8007c94:	2214      	movs	r2, #20
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 f8ba 	bl	8007e12 <memset>
    _NumTasks--;
 8007c9e:	4b42      	ldr	r3, [pc, #264]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	4a40      	ldr	r2, [pc, #256]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	e07b      	b.n	8007da2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8007caa:	4b3f      	ldr	r3, [pc, #252]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d276      	bcs.n	8007da2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8007cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	1e5a      	subs	r2, r3, #1
 8007cba:	493c      	ldr	r1, [pc, #240]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	6819      	ldr	r1, [r3, #0]
 8007cc8:	4838      	ldr	r0, [pc, #224]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4403      	add	r3, r0
 8007cd6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8007cd8:	4b33      	ldr	r3, [pc, #204]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	1e5a      	subs	r2, r3, #1
 8007cde:	4933      	ldr	r1, [pc, #204]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	3304      	adds	r3, #4
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	482f      	ldr	r0, [pc, #188]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4403      	add	r3, r0
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8007d00:	4b29      	ldr	r3, [pc, #164]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	1e5a      	subs	r2, r3, #1
 8007d06:	4929      	ldr	r1, [pc, #164]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	3308      	adds	r3, #8
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	4825      	ldr	r0, [pc, #148]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4403      	add	r3, r0
 8007d24:	3308      	adds	r3, #8
 8007d26:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8007d28:	4b1f      	ldr	r3, [pc, #124]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	1e5a      	subs	r2, r3, #1
 8007d2e:	491f      	ldr	r1, [pc, #124]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	6819      	ldr	r1, [r3, #0]
 8007d3e:	481b      	ldr	r0, [pc, #108]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4403      	add	r3, r0
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8007d50:	4b15      	ldr	r3, [pc, #84]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	1e5a      	subs	r2, r3, #1
 8007d56:	4915      	ldr	r1, [pc, #84]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	3310      	adds	r3, #16
 8007d64:	6819      	ldr	r1, [r3, #0]
 8007d66:	4811      	ldr	r0, [pc, #68]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4403      	add	r3, r0
 8007d74:	3310      	adds	r3, #16
 8007d76:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8007d78:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	1e5a      	subs	r2, r3, #1
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4a09      	ldr	r2, [pc, #36]	@ (8007dac <SYSVIEW_DeleteTask+0x174>)
 8007d88:	4413      	add	r3, r2
 8007d8a:	2214      	movs	r2, #20
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f83f 	bl	8007e12 <memset>
    _NumTasks--;
 8007d94:	4b04      	ldr	r3, [pc, #16]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	4a03      	ldr	r2, [pc, #12]	@ (8007da8 <SYSVIEW_DeleteTask+0x170>)
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	e000      	b.n	8007da2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8007da0:	bf00      	nop
  }
}
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	2001992c 	.word	0x2001992c
 8007dac:	2001988c 	.word	0x2001988c

08007db0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	@ 0x28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	2214      	movs	r2, #20
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f823 	bl	8007e12 <memset>
  TaskInfo.TaskID     = TaskID;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff f943 	bl	8007070 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007dea:	bf00      	nop
 8007dec:	3728      	adds	r7, #40	@ 0x28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <memcmp>:
 8007df2:	b510      	push	{r4, lr}
 8007df4:	3901      	subs	r1, #1
 8007df6:	4402      	add	r2, r0
 8007df8:	4290      	cmp	r0, r2
 8007dfa:	d101      	bne.n	8007e00 <memcmp+0xe>
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e005      	b.n	8007e0c <memcmp+0x1a>
 8007e00:	7803      	ldrb	r3, [r0, #0]
 8007e02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	d001      	beq.n	8007e0e <memcmp+0x1c>
 8007e0a:	1b18      	subs	r0, r3, r4
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	3001      	adds	r0, #1
 8007e10:	e7f2      	b.n	8007df8 <memcmp+0x6>

08007e12 <memset>:
 8007e12:	4402      	add	r2, r0
 8007e14:	4603      	mov	r3, r0
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d100      	bne.n	8007e1c <memset+0xa>
 8007e1a:	4770      	bx	lr
 8007e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e20:	e7f9      	b.n	8007e16 <memset+0x4>
	...

08007e24 <__libc_init_array>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4d0d      	ldr	r5, [pc, #52]	@ (8007e5c <__libc_init_array+0x38>)
 8007e28:	4c0d      	ldr	r4, [pc, #52]	@ (8007e60 <__libc_init_array+0x3c>)
 8007e2a:	1b64      	subs	r4, r4, r5
 8007e2c:	10a4      	asrs	r4, r4, #2
 8007e2e:	2600      	movs	r6, #0
 8007e30:	42a6      	cmp	r6, r4
 8007e32:	d109      	bne.n	8007e48 <__libc_init_array+0x24>
 8007e34:	4d0b      	ldr	r5, [pc, #44]	@ (8007e64 <__libc_init_array+0x40>)
 8007e36:	4c0c      	ldr	r4, [pc, #48]	@ (8007e68 <__libc_init_array+0x44>)
 8007e38:	f000 f826 	bl	8007e88 <_init>
 8007e3c:	1b64      	subs	r4, r4, r5
 8007e3e:	10a4      	asrs	r4, r4, #2
 8007e40:	2600      	movs	r6, #0
 8007e42:	42a6      	cmp	r6, r4
 8007e44:	d105      	bne.n	8007e52 <__libc_init_array+0x2e>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4c:	4798      	blx	r3
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7ee      	b.n	8007e30 <__libc_init_array+0xc>
 8007e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e56:	4798      	blx	r3
 8007e58:	3601      	adds	r6, #1
 8007e5a:	e7f2      	b.n	8007e42 <__libc_init_array+0x1e>
 8007e5c:	080080d4 	.word	0x080080d4
 8007e60:	080080d4 	.word	0x080080d4
 8007e64:	080080d4 	.word	0x080080d4
 8007e68:	080080d8 	.word	0x080080d8

08007e6c <memcpy>:
 8007e6c:	440a      	add	r2, r1
 8007e6e:	4291      	cmp	r1, r2
 8007e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e74:	d100      	bne.n	8007e78 <memcpy+0xc>
 8007e76:	4770      	bx	lr
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e82:	4291      	cmp	r1, r2
 8007e84:	d1f9      	bne.n	8007e7a <memcpy+0xe>
 8007e86:	bd10      	pop	{r4, pc}

08007e88 <_init>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr

08007e94 <_fini>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	bf00      	nop
 8007e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9a:	bc08      	pop	{r3}
 8007e9c:	469e      	mov	lr, r3
 8007e9e:	4770      	bx	lr
