
App_010_Example_4.7_Defining_Idle_Task_Hook_Function.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007220  08007220  00008220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007230  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00019a28  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019a94  20019a94  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017af4  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000320d  00000000  00000000  00020b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  00023da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e4  00000000  00000000  00025368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025135  00000000  00000000  0002644c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a4d  00000000  00000000  0004b581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb0e1  00000000  00000000  00064fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001500af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006058  00000000  00000000  001500f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d0  00000000  00000000  0015614c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007078 	.word	0x08007078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007078 	.word	0x08007078

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed4 	.word	0x20012ed4
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb4b 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f837 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8c9 	bl	80007a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f89d 	bl	8000750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <main+0x64>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <main+0x64>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000622:	f004 fba1 	bl	8004d68 <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 8000626:	f005 f8f7 	bl	8005818 <SEGGER_SYSVIEW_Start>

  /* create the first task with a priority of 1 */
  xTaskCreate( vTaskFunction, /* pointer to the function that implements the task */
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <main+0x68>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2200      	movs	r2, #0
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063a:	490c      	ldr	r1, [pc, #48]	@ (800066c <main+0x6c>)
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <main+0x70>)
 800063e:	f002 fd6e 	bl	800311e <xTaskCreate>
               ( void* ) pcTextForTask1, /* pass the text to be printed into the task using the task parameter */
               1,        /* this task will run at priority 1 */
               NULL );   /* this example does not use the task handle */

  /* create the second task at a higher priority of 2 */
  xTaskCreate( vTaskFunction, "Task 2", 1000, ( void* ) pcTextForTask2, 2, NULL );
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <main+0x74>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	2202      	movs	r2, #2
 800064c:	9200      	str	r2, [sp, #0]
 800064e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000652:	4909      	ldr	r1, [pc, #36]	@ (8000678 <main+0x78>)
 8000654:	4806      	ldr	r0, [pc, #24]	@ (8000670 <main+0x70>)
 8000656:	f002 fd62 	bl	800311e <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 800065a:	f002 ff51 	bl	8003500 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0x5e>
 8000662:	bf00      	nop
 8000664:	e0001000 	.word	0xe0001000
 8000668:	20000000 	.word	0x20000000
 800066c:	080070b8 	.word	0x080070b8
 8000670:	08000905 	.word	0x08000905
 8000674:	20000004 	.word	0x20000004
 8000678:	080070c0 	.word	0x080070c0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 f874 	bl	8006778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	@ (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f0:	2332      	movs	r3, #50	@ 0x32
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fda7 	bl	8001254 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 f93e 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f808 	bl	8001744 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 f927 	bl	800098c <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	@ 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f001 fcd0 	bl	800212c <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f8fb 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000088 	.word	0x20000088
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b3c      	ldr	r3, [pc, #240]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a3b      	ldr	r2, [pc, #236]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b39      	ldr	r3, [pc, #228]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b35      	ldr	r3, [pc, #212]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a34      	ldr	r2, [pc, #208]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b32      	ldr	r3, [pc, #200]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a2d      	ldr	r2, [pc, #180]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a26      	ldr	r2, [pc, #152]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_GPIO_Init+0x10c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000830:	4820      	ldr	r0, [pc, #128]	@ (80008b4 <MX_GPIO_Init+0x110>)
 8000832:	f000 fcf5 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000836:	2301      	movs	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	481b      	ldr	r0, [pc, #108]	@ (80008b8 <MX_GPIO_Init+0x114>)
 800084c:	f000 fb4c 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000850:	2304      	movs	r3, #4
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4816      	ldr	r0, [pc, #88]	@ (80008bc <MX_GPIO_Init+0x118>)
 8000864:	f000 fb40 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000868:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <MX_GPIO_Init+0x110>)
 8000882:	f000 fb31 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000886:	2380      	movs	r3, #128	@ 0x80
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000896:	2306      	movs	r3, #6
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <MX_GPIO_Init+0x11c>)
 80008a2:	f000 fb21 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40020800 	.word	0x40020800

080008c4 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string untill null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	e00b      	b.n	80008ec <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	18d1      	adds	r1, r2, r3
 80008da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008de:	2201      	movs	r2, #1
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f001 fc73 	bl	80021cc <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	3301      	adds	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1ed      	bne.n	80008d4 <UART2_Print_Text+0x10>
  }
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <vTaskFunction>:


void vTaskFunction( void *pvParameters )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* string to print out is passed in via the parameter.
     Cast this to a character pointer to obtain the string the task should print out*/
  const char *pcTaskName = ( const char* ) pvParameters;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60fb      	str	r3, [r7, #12]

  /* get 250 milliseconds in Ticks used for delay */
  const TickType_t xDelay250ms = pdMS_TO_TICKS( 250 );
 8000910:	23fa      	movs	r3, #250	@ 0xfa
 8000912:	60bb      	str	r3, [r7, #8]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* get ulIdleCycleCount in string format */
    sprintf( ulIdleCycleCountString, "ulIdleCycleCount = %lu\n\r", ulIdleCycleCount );
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <vTaskFunction+0x38>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4909      	ldr	r1, [pc, #36]	@ (8000940 <vTaskFunction+0x3c>)
 800091c:	4809      	ldr	r0, [pc, #36]	@ (8000944 <vTaskFunction+0x40>)
 800091e:	f005 fefb 	bl	8006718 <siprintf>

    /* print out the name of the current task and the number of times
        ulIdleCycleCount has been incremented by the Idle Hook function */
    UART2_Print_Text( &huart2, pcTaskName );
 8000922:	68f9      	ldr	r1, [r7, #12]
 8000924:	4808      	ldr	r0, [pc, #32]	@ (8000948 <vTaskFunction+0x44>)
 8000926:	f7ff ffcd 	bl	80008c4 <UART2_Print_Text>
    UART2_Print_Text( &huart2, ulIdleCycleCountString );
 800092a:	4906      	ldr	r1, [pc, #24]	@ (8000944 <vTaskFunction+0x40>)
 800092c:	4806      	ldr	r0, [pc, #24]	@ (8000948 <vTaskFunction+0x44>)
 800092e:	f7ff ffc9 	bl	80008c4 <UART2_Print_Text>
    /* Delay for a period.
       This time a call to vTaskDelay() is used which places the task into Blocked state
       until the delay period has expired. The parameter takes a time specified in 'ticks',
       and the pdMS_TO_TICKS() macro is used (where the xDelay250ms constant is declared)
       to convert 250 milliseconds into an equivalent time in ticks */
    vTaskDelay( xDelay250ms );
 8000932:	68b8      	ldr	r0, [r7, #8]
 8000934:	f002 fd62 	bl	80033fc <vTaskDelay>
    sprintf( ulIdleCycleCountString, "ulIdleCycleCount = %lu\n\r", ulIdleCycleCount );
 8000938:	bf00      	nop
 800093a:	e7eb      	b.n	8000914 <vTaskFunction+0x10>
 800093c:	200000d0 	.word	0x200000d0
 8000940:	080070c8 	.word	0x080070c8
 8000944:	200000d4 	.word	0x200000d4
 8000948:	20000088 	.word	0x20000088

0800094c <vApplicationIdleHook>:
}

/* Idle hook functions MUST be called vApplicationIdleHook(), take no parameters
   and return void */
void vApplicationIdleHook( void )
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* this hook function does nothing but increment a counter */
  ulIdleCycleCount++;
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <vApplicationIdleHook+0x18>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	4a03      	ldr	r2, [pc, #12]	@ (8000964 <vApplicationIdleHook+0x18>)
 8000958:	6013      	str	r3, [r2, #0]
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	200000d0 	.word	0x200000d0

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 f9b3 	bl	8000ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40001000 	.word	0x40001000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fa51 	bl	8000e7e <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a42:	230c      	movs	r3, #12
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f000 fa43 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	@ 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <HAL_InitTick+0xe4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a32      	ldr	r2, [pc, #200]	@ (8000b5c <HAL_InitTick+0xe4>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <HAL_InitTick+0xe4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa4:	f107 0210 	add.w	r2, r7, #16
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f868 	bl	8001b84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000abe:	f001 f839 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac6:	f001 f835 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000aca:	4603      	mov	r3, r0
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ad2:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	0c9b      	lsrs	r3, r3, #18
 8000ada:	3b01      	subs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <HAL_InitTick+0xec>)
 8000ae0:	4a21      	ldr	r2, [pc, #132]	@ (8000b68 <HAL_InitTick+0xf0>)
 8000ae2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <HAL_InitTick+0xec>)
 8000ae6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aec:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <HAL_InitTick+0xec>)
 8000aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_InitTick+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_InitTick+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_InitTick+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b04:	4817      	ldr	r0, [pc, #92]	@ (8000b64 <HAL_InitTick+0xec>)
 8000b06:	f001 f86f 	bl	8001be8 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d11b      	bne.n	8000b50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b18:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <HAL_InitTick+0xec>)
 8000b1a:	f001 f8bf 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d111      	bne.n	8000b50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b2c:	2036      	movs	r0, #54	@ 0x36
 8000b2e:	f000 f9cd 	bl	8000ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d808      	bhi.n	8000b4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2036      	movs	r0, #54	@ 0x36
 8000b3e:	f000 f9a9 	bl	8000e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_InitTick+0xf4>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e002      	b.n	8000b50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3738      	adds	r7, #56	@ 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	200000f4 	.word	0x200000f4
 8000b68:	40001000 	.word	0x40001000
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <TIM6_DAC_IRQHandler+0x10>)
 8000bae:	f001 f8e5 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000f4 	.word	0x200000f4

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f005 fdcc 	bl	8006788 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20020000 	.word	0x20020000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	2000013c 	.word	0x2000013c
 8000c24:	20019a98 	.word	0x20019a98

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f005 fd8b 	bl	8006794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fcbf 	bl	8000600 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c90:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 8000c94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c98:	20019a94 	.word	0x20019a94

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f8d8 	bl	8000e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fed2 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe60 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000010 	.word	0x20000010
 8000d08:	20000140 	.word	0x20000140

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000140 	.word	0x20000140

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	@ (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	@ (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	@ (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	@ 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff4c 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea6:	f7ff ff61 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f7ff ffb1 	bl	8000e18 <NVIC_EncodePriority>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff80 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff54 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e16b      	b.n	80011dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 815a 	bne.w	80011d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b4 	beq.w	80011d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b60      	ldr	r3, [pc, #384]	@ (80011f4 <HAL_GPIO_Init+0x30c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	4a5f      	ldr	r2, [pc, #380]	@ (80011f4 <HAL_GPIO_Init+0x30c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107c:	6453      	str	r3, [r2, #68]	@ 0x44
 800107e:	4b5d      	ldr	r3, [pc, #372]	@ (80011f4 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a5b      	ldr	r2, [pc, #364]	@ (80011f8 <HAL_GPIO_Init+0x310>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a52      	ldr	r2, [pc, #328]	@ (80011fc <HAL_GPIO_Init+0x314>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	@ (8001200 <HAL_GPIO_Init+0x318>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	@ (8001204 <HAL_GPIO_Init+0x31c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001208 <HAL_GPIO_Init+0x320>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	@ (800120c <HAL_GPIO_Init+0x324>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001210 <HAL_GPIO_Init+0x328>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001214 <HAL_GPIO_Init+0x32c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001218 <HAL_GPIO_Init+0x330>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20a>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f2:	2308      	movs	r3, #8
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	@ (80011f8 <HAL_GPIO_Init+0x310>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b3b      	ldr	r3, [pc, #236]	@ (800121c <HAL_GPIO_Init+0x334>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a32      	ldr	r2, [pc, #200]	@ (800121c <HAL_GPIO_Init+0x334>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b30      	ldr	r3, [pc, #192]	@ (800121c <HAL_GPIO_Init+0x334>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a27      	ldr	r2, [pc, #156]	@ (800121c <HAL_GPIO_Init+0x334>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <HAL_GPIO_Init+0x334>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <HAL_GPIO_Init+0x334>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_GPIO_Init+0x334>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a12      	ldr	r2, [pc, #72]	@ (800121c <HAL_GPIO_Init+0x334>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae90 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	@ 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e267      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	4b88      	ldr	r3, [pc, #544]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b85      	ldr	r3, [pc, #532]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b82      	ldr	r3, [pc, #520]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b7e      	ldr	r3, [pc, #504]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e242      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4b76      	ldr	r3, [pc, #472]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a75      	ldr	r2, [pc, #468]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4b70      	ldr	r3, [pc, #448]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4b69      	ldr	r3, [pc, #420]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a68      	ldr	r2, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b66      	ldr	r3, [pc, #408]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a65      	ldr	r2, [pc, #404]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcfe 	bl	8000d0c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcfa 	bl	8000d0c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e207      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b5b      	ldr	r3, [pc, #364]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fcea 	bl	8000d0c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fce6 	bl	8000d0c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f3      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b51      	ldr	r3, [pc, #324]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	4b4a      	ldr	r3, [pc, #296]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b44      	ldr	r3, [pc, #272]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b41      	ldr	r3, [pc, #260]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4937      	ldr	r1, [pc, #220]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <HAL_RCC_OscConfig+0x244>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc9f 	bl	8000d0c <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc9b 	bl	8000d0c <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a8      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4925      	ldr	r1, [pc, #148]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <HAL_RCC_OscConfig+0x244>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc7e 	bl	8000d0c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc7a 	bl	8000d0c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e187      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_RCC_OscConfig+0x248>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fc5e 	bl	8000d0c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc5a 	bl	8000d0c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e167      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_RCC_OscConfig+0x248>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc47 	bl	8000d0c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc43 	bl	8000d0c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d907      	bls.n	80014a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e150      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 8001494:	40023800 	.word	0x40023800
 8001498:	42470000 	.word	0x42470000
 800149c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ea      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8097 	beq.w	80015e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b81      	ldr	r3, [pc, #516]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b7d      	ldr	r3, [pc, #500]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a7c      	ldr	r2, [pc, #496]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b7a      	ldr	r3, [pc, #488]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b77      	ldr	r3, [pc, #476]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b74      	ldr	r3, [pc, #464]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fc03 	bl	8000d0c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff fbff 	bl	8000d0c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b6a      	ldr	r3, [pc, #424]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ea>
 8001530:	4b64      	ldr	r3, [pc, #400]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001534:	4a63      	ldr	r2, [pc, #396]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	@ 0x70
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x30c>
 8001546:	4b5f      	ldr	r3, [pc, #380]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	@ 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	@ 0x70
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 8001560:	4b58      	ldr	r3, [pc, #352]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001564:	4a57      	ldr	r2, [pc, #348]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	@ 0x70
 800156c:	4b55      	ldr	r3, [pc, #340]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	4a54      	ldr	r2, [pc, #336]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d015      	beq.n	80015ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fbc4 	bl	8000d0c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fbc0 	bl	8000d0c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0cb      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b49      	ldr	r3, [pc, #292]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ee      	beq.n	8001588 <HAL_RCC_OscConfig+0x334>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fbae 	bl	8000d0c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fbaa 	bl	8000d0c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b5      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ee      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	4a38      	ldr	r2, [pc, #224]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a1 	beq.w	8001734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f2:	4b34      	ldr	r3, [pc, #208]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d05c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d141      	bne.n	800168a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb7e 	bl	8000d0c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb7a 	bl	8000d0c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e087      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	491b      	ldr	r1, [pc, #108]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_RCC_OscConfig+0x478>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb53 	bl	8000d0c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb4f 	bl	8000d0c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e05c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x416>
 8001688:	e054      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb3c 	bl	8000d0c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb38 	bl	8000d0c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x444>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e038      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x4ec>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d028      	beq.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d121      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11a      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa6a 	bl	8000d0c <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa66 	bl	8000d0c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	@ (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f8c4 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	080071ac 	.word	0x080071ac
 8001908:	20000008 	.word	0x20000008
 800190c:	2000000c 	.word	0x2000000c

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	@ 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b73      	ldr	r3, [pc, #460]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800194c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001958:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	024b      	lsls	r3, r1, #9
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	024a      	lsls	r2, r1, #9
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a20:	f7fe fc76 	bl	8000310 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fc1c 	bl	8000310 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	@ 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	@ (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	080071bc 	.word	0x080071bc

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	@ (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080071bc 	.word	0x080071bc

08001b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	220f      	movs	r2, #15
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_RCC_GetClockConfig+0x60>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0207 	and.w	r2, r3, #7
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f839 	bl	8001c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9c0 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04e      	b.n	8001d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cde:	d01d      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	@ (8001d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	@ (8001d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d111      	bne.n	8001d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d010      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	e007      	b.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40010400 	.word	0x40010400
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40001800 	.word	0x40001800

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d020      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0202 	mvn.w	r2, #2
 8001db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8d2 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8c4 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8d5 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d020      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8ac 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89e 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8af 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d020      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01b      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0208 	mvn.w	r2, #8
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f886 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f878 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f889 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0210 	mvn.w	r2, #16
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f860 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f852 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f863 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0201 	mvn.w	r2, #1
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fd40 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f906 	bl	8002118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f834 	bl	8001f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00c      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0220 	mvn.w	r2, #32
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8d8 	bl	8002104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a46      	ldr	r2, [pc, #280]	@ (80020d8 <TIM_Base_SetConfig+0x12c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fca:	d00f      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a43      	ldr	r2, [pc, #268]	@ (80020dc <TIM_Base_SetConfig+0x130>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a42      	ldr	r2, [pc, #264]	@ (80020e0 <TIM_Base_SetConfig+0x134>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a41      	ldr	r2, [pc, #260]	@ (80020e4 <TIM_Base_SetConfig+0x138>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	@ (80020e8 <TIM_Base_SetConfig+0x13c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a35      	ldr	r2, [pc, #212]	@ (80020d8 <TIM_Base_SetConfig+0x12c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200c:	d027      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a32      	ldr	r2, [pc, #200]	@ (80020dc <TIM_Base_SetConfig+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d023      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a31      	ldr	r2, [pc, #196]	@ (80020e0 <TIM_Base_SetConfig+0x134>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a30      	ldr	r2, [pc, #192]	@ (80020e4 <TIM_Base_SetConfig+0x138>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2f      	ldr	r2, [pc, #188]	@ (80020e8 <TIM_Base_SetConfig+0x13c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d017      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2e      	ldr	r2, [pc, #184]	@ (80020ec <TIM_Base_SetConfig+0x140>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2d      	ldr	r2, [pc, #180]	@ (80020f0 <TIM_Base_SetConfig+0x144>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2c      	ldr	r2, [pc, #176]	@ (80020f4 <TIM_Base_SetConfig+0x148>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2b      	ldr	r2, [pc, #172]	@ (80020f8 <TIM_Base_SetConfig+0x14c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2a      	ldr	r2, [pc, #168]	@ (80020fc <TIM_Base_SetConfig+0x150>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a29      	ldr	r2, [pc, #164]	@ (8002100 <TIM_Base_SetConfig+0x154>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a10      	ldr	r2, [pc, #64]	@ (80020d8 <TIM_Base_SetConfig+0x12c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <TIM_Base_SetConfig+0x13c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d103      	bne.n	80020ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f023 0201 	bic.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]
  }
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40000c00 	.word	0x40000c00
 80020e8:	40010400 	.word	0x40010400
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40014400 	.word	0x40014400
 80020f4:	40014800 	.word	0x40014800
 80020f8:	40001800 	.word	0x40001800
 80020fc:	40001c00 	.word	0x40001c00
 8002100:	40002000 	.word	0x40002000

08002104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e042      	b.n	80021c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fc48 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	@ 0x24
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800216e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f973 	bl	800245c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d175      	bne.n	80022d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_UART_Transmit+0x2c>
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e06e      	b.n	80022da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2221      	movs	r2, #33	@ 0x21
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800220a:	f7fe fd7f 	bl	8000d0c <HAL_GetTick>
 800220e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002224:	d108      	bne.n	8002238 <HAL_UART_Transmit+0x6c>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	e003      	b.n	8002240 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002240:	e02e      	b.n	80022a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2200      	movs	r2, #0
 800224a:	2180      	movs	r1, #128	@ 0x80
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f848 	bl	80022e2 <UART_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e03a      	b.n	80022da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	3302      	adds	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	e007      	b.n	8002292 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3301      	adds	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1cb      	bne.n	8002242 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2200      	movs	r2, #0
 80022b2:	2140      	movs	r1, #64	@ 0x40
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f814 	bl	80022e2 <UART_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e006      	b.n	80022da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f2:	e03b      	b.n	800236c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d037      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7fe fd06 	bl	8000d0c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <UART_WaitOnFlagUntilTimeout+0x30>
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e03a      	b.n	800238c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d023      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b80      	cmp	r3, #128	@ 0x80
 8002328:	d020      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x8a>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b40      	cmp	r3, #64	@ 0x40
 800232e:	d01d      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b08      	cmp	r3, #8
 800233c:	d116      	bne.n	800236c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f81d 	bl	8002394 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2208      	movs	r2, #8
 800235e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e00f      	b.n	800238c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	429a      	cmp	r2, r3
 8002388:	d0b4      	beq.n	80022f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002394:	b480      	push	{r7}
 8002396:	b095      	sub	sp, #84	@ 0x54
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a6:	e853 3f00 	ldrex	r3, [r3]
 80023aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023c4:	e841 2300 	strex	r3, r2, [r1]
 80023c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e5      	bne.n	800239c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3314      	adds	r3, #20
 80023d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	e853 3f00 	ldrex	r3, [r3]
 80023de:	61fb      	str	r3, [r7, #28]
   return(result);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023f8:	e841 2300 	strex	r3, r2, [r1]
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	2b01      	cmp	r3, #1
 800240a:	d119      	bne.n	8002440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	60bb      	str	r3, [r7, #8]
   return(result);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f023 0310 	bic.w	r3, r3, #16
 8002422:	647b      	str	r3, [r7, #68]	@ 0x44
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800242c:	61ba      	str	r2, [r7, #24]
 800242e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	6979      	ldr	r1, [r7, #20]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	e841 2300 	strex	r3, r2, [r1]
 8002438:	613b      	str	r3, [r7, #16]
   return(result);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800244e:	bf00      	nop
 8002450:	3754      	adds	r7, #84	@ 0x54
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800245c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002460:	b0c0      	sub	sp, #256	@ 0x100
 8002462:	af00      	add	r7, sp, #0
 8002464:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	ea40 0301 	orr.w	r3, r0, r1
 8002484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	431a      	orrs	r2, r3
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	431a      	orrs	r2, r3
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024b4:	f021 010c 	bic.w	r1, r1, #12
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024c2:	430b      	orrs	r3, r1
 80024c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d6:	6999      	ldr	r1, [r3, #24]
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	ea40 0301 	orr.w	r3, r0, r1
 80024e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002728 <UART_SetConfig+0x2cc>)
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d005      	beq.n	80024fc <UART_SetConfig+0xa0>
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b8d      	ldr	r3, [pc, #564]	@ (800272c <UART_SetConfig+0x2d0>)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d104      	bne.n	8002506 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024fc:	f7ff fb2e 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002500:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002504:	e003      	b.n	800250e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002506:	f7ff fb15 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 800250a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002518:	f040 810c 	bne.w	8002734 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800251c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002520:	2200      	movs	r2, #0
 8002522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002526:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800252a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800252e:	4622      	mov	r2, r4
 8002530:	462b      	mov	r3, r5
 8002532:	1891      	adds	r1, r2, r2
 8002534:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002536:	415b      	adcs	r3, r3
 8002538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800253a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800253e:	4621      	mov	r1, r4
 8002540:	eb12 0801 	adds.w	r8, r2, r1
 8002544:	4629      	mov	r1, r5
 8002546:	eb43 0901 	adc.w	r9, r3, r1
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800255a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800255e:	4690      	mov	r8, r2
 8002560:	4699      	mov	r9, r3
 8002562:	4623      	mov	r3, r4
 8002564:	eb18 0303 	adds.w	r3, r8, r3
 8002568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800256c:	462b      	mov	r3, r5
 800256e:	eb49 0303 	adc.w	r3, r9, r3
 8002572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002582:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800258a:	460b      	mov	r3, r1
 800258c:	18db      	adds	r3, r3, r3
 800258e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002590:	4613      	mov	r3, r2
 8002592:	eb42 0303 	adc.w	r3, r2, r3
 8002596:	657b      	str	r3, [r7, #84]	@ 0x54
 8002598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800259c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025a0:	f7fd feb6 	bl	8000310 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4b61      	ldr	r3, [pc, #388]	@ (8002730 <UART_SetConfig+0x2d4>)
 80025aa:	fba3 2302 	umull	r2, r3, r3, r2
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	011c      	lsls	r4, r3, #4
 80025b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025b6:	2200      	movs	r2, #0
 80025b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025c4:	4642      	mov	r2, r8
 80025c6:	464b      	mov	r3, r9
 80025c8:	1891      	adds	r1, r2, r2
 80025ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025cc:	415b      	adcs	r3, r3
 80025ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025d4:	4641      	mov	r1, r8
 80025d6:	eb12 0a01 	adds.w	sl, r2, r1
 80025da:	4649      	mov	r1, r9
 80025dc:	eb43 0b01 	adc.w	fp, r3, r1
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025f4:	4692      	mov	sl, r2
 80025f6:	469b      	mov	fp, r3
 80025f8:	4643      	mov	r3, r8
 80025fa:	eb1a 0303 	adds.w	r3, sl, r3
 80025fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002602:	464b      	mov	r3, r9
 8002604:	eb4b 0303 	adc.w	r3, fp, r3
 8002608:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002618:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800261c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002620:	460b      	mov	r3, r1
 8002622:	18db      	adds	r3, r3, r3
 8002624:	643b      	str	r3, [r7, #64]	@ 0x40
 8002626:	4613      	mov	r3, r2
 8002628:	eb42 0303 	adc.w	r3, r2, r3
 800262c:	647b      	str	r3, [r7, #68]	@ 0x44
 800262e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002632:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002636:	f7fd fe6b 	bl	8000310 <__aeabi_uldivmod>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4611      	mov	r1, r2
 8002640:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <UART_SetConfig+0x2d4>)
 8002642:	fba3 2301 	umull	r2, r3, r3, r1
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2264      	movs	r2, #100	@ 0x64
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	1acb      	subs	r3, r1, r3
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002656:	4b36      	ldr	r3, [pc, #216]	@ (8002730 <UART_SetConfig+0x2d4>)
 8002658:	fba3 2302 	umull	r2, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002664:	441c      	add	r4, r3
 8002666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266a:	2200      	movs	r2, #0
 800266c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002670:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002678:	4642      	mov	r2, r8
 800267a:	464b      	mov	r3, r9
 800267c:	1891      	adds	r1, r2, r2
 800267e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002680:	415b      	adcs	r3, r3
 8002682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002688:	4641      	mov	r1, r8
 800268a:	1851      	adds	r1, r2, r1
 800268c:	6339      	str	r1, [r7, #48]	@ 0x30
 800268e:	4649      	mov	r1, r9
 8002690:	414b      	adcs	r3, r1
 8002692:	637b      	str	r3, [r7, #52]	@ 0x34
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026a0:	4659      	mov	r1, fp
 80026a2:	00cb      	lsls	r3, r1, #3
 80026a4:	4651      	mov	r1, sl
 80026a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026aa:	4651      	mov	r1, sl
 80026ac:	00ca      	lsls	r2, r1, #3
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	4642      	mov	r2, r8
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026bc:	464b      	mov	r3, r9
 80026be:	460a      	mov	r2, r1
 80026c0:	eb42 0303 	adc.w	r3, r2, r3
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026dc:	460b      	mov	r3, r1
 80026de:	18db      	adds	r3, r3, r3
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e2:	4613      	mov	r3, r2
 80026e4:	eb42 0303 	adc.w	r3, r2, r3
 80026e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80026f2:	f7fd fe0d 	bl	8000310 <__aeabi_uldivmod>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <UART_SetConfig+0x2d4>)
 80026fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	2164      	movs	r1, #100	@ 0x64
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	3332      	adds	r3, #50	@ 0x32
 800270e:	4a08      	ldr	r2, [pc, #32]	@ (8002730 <UART_SetConfig+0x2d4>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	f003 0207 	and.w	r2, r3, #7
 800271a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4422      	add	r2, r4
 8002722:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002724:	e106      	b.n	8002934 <UART_SetConfig+0x4d8>
 8002726:	bf00      	nop
 8002728:	40011000 	.word	0x40011000
 800272c:	40011400 	.word	0x40011400
 8002730:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002738:	2200      	movs	r2, #0
 800273a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800273e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002742:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002746:	4642      	mov	r2, r8
 8002748:	464b      	mov	r3, r9
 800274a:	1891      	adds	r1, r2, r2
 800274c:	6239      	str	r1, [r7, #32]
 800274e:	415b      	adcs	r3, r3
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
 8002752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002756:	4641      	mov	r1, r8
 8002758:	1854      	adds	r4, r2, r1
 800275a:	4649      	mov	r1, r9
 800275c:	eb43 0501 	adc.w	r5, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	00eb      	lsls	r3, r5, #3
 800276a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4643      	mov	r3, r8
 8002776:	18e3      	adds	r3, r4, r3
 8002778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800277c:	464b      	mov	r3, r9
 800277e:	eb45 0303 	adc.w	r3, r5, r3
 8002782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027a2:	4629      	mov	r1, r5
 80027a4:	008b      	lsls	r3, r1, #2
 80027a6:	4621      	mov	r1, r4
 80027a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ac:	4621      	mov	r1, r4
 80027ae:	008a      	lsls	r2, r1, #2
 80027b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027b4:	f7fd fdac 	bl	8000310 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4b60      	ldr	r3, [pc, #384]	@ (8002940 <UART_SetConfig+0x4e4>)
 80027be:	fba3 2302 	umull	r2, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	011c      	lsls	r4, r3, #4
 80027c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027d8:	4642      	mov	r2, r8
 80027da:	464b      	mov	r3, r9
 80027dc:	1891      	adds	r1, r2, r2
 80027de:	61b9      	str	r1, [r7, #24]
 80027e0:	415b      	adcs	r3, r3
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e8:	4641      	mov	r1, r8
 80027ea:	1851      	adds	r1, r2, r1
 80027ec:	6139      	str	r1, [r7, #16]
 80027ee:	4649      	mov	r1, r9
 80027f0:	414b      	adcs	r3, r1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002800:	4659      	mov	r1, fp
 8002802:	00cb      	lsls	r3, r1, #3
 8002804:	4651      	mov	r1, sl
 8002806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280a:	4651      	mov	r1, sl
 800280c:	00ca      	lsls	r2, r1, #3
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	4603      	mov	r3, r0
 8002814:	4642      	mov	r2, r8
 8002816:	189b      	adds	r3, r3, r2
 8002818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800281c:	464b      	mov	r3, r9
 800281e:	460a      	mov	r2, r1
 8002820:	eb42 0303 	adc.w	r3, r2, r3
 8002824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002832:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002840:	4649      	mov	r1, r9
 8002842:	008b      	lsls	r3, r1, #2
 8002844:	4641      	mov	r1, r8
 8002846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800284a:	4641      	mov	r1, r8
 800284c:	008a      	lsls	r2, r1, #2
 800284e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002852:	f7fd fd5d 	bl	8000310 <__aeabi_uldivmod>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4611      	mov	r1, r2
 800285c:	4b38      	ldr	r3, [pc, #224]	@ (8002940 <UART_SetConfig+0x4e4>)
 800285e:	fba3 2301 	umull	r2, r3, r3, r1
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2264      	movs	r2, #100	@ 0x64
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	1acb      	subs	r3, r1, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	@ 0x32
 8002870:	4a33      	ldr	r2, [pc, #204]	@ (8002940 <UART_SetConfig+0x4e4>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800287c:	441c      	add	r4, r3
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	673b      	str	r3, [r7, #112]	@ 0x70
 8002886:	677a      	str	r2, [r7, #116]	@ 0x74
 8002888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800288c:	4642      	mov	r2, r8
 800288e:	464b      	mov	r3, r9
 8002890:	1891      	adds	r1, r2, r2
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	415b      	adcs	r3, r3
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800289c:	4641      	mov	r1, r8
 800289e:	1851      	adds	r1, r2, r1
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	4649      	mov	r1, r9
 80028a4:	414b      	adcs	r3, r1
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028b4:	4659      	mov	r1, fp
 80028b6:	00cb      	lsls	r3, r1, #3
 80028b8:	4651      	mov	r1, sl
 80028ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028be:	4651      	mov	r1, sl
 80028c0:	00ca      	lsls	r2, r1, #3
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	4642      	mov	r2, r8
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028ce:	464b      	mov	r3, r9
 80028d0:	460a      	mov	r2, r1
 80028d2:	eb42 0303 	adc.w	r3, r2, r3
 80028d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80028e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80028f0:	4649      	mov	r1, r9
 80028f2:	008b      	lsls	r3, r1, #2
 80028f4:	4641      	mov	r1, r8
 80028f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028fa:	4641      	mov	r1, r8
 80028fc:	008a      	lsls	r2, r1, #2
 80028fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002902:	f7fd fd05 	bl	8000310 <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <UART_SetConfig+0x4e4>)
 800290c:	fba3 1302 	umull	r1, r3, r3, r2
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	2164      	movs	r1, #100	@ 0x64
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	3332      	adds	r3, #50	@ 0x32
 800291e:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <UART_SetConfig+0x4e4>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	f003 020f 	and.w	r2, r3, #15
 800292a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4422      	add	r2, r4
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800293a:	46bd      	mov	sp, r7
 800293c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002940:	51eb851f 	.word	0x51eb851f

08002944 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0208 	add.w	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f103 0208 	add.w	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f103 0208 	add.w	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002978:	f240 1019 	movw	r0, #281	@ 0x119
 800297c:	f003 fa8e 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002996:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800299a:	f003 fa7f 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d103      	bne.n	80029c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e00c      	b.n	80029e0 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3308      	adds	r3, #8
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e002      	b.n	80029d4 <vListInsert+0x2e>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d2f6      	bcs.n	80029ce <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002a0c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002a10:	f003 fa44 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6892      	ldr	r2, [r2, #8]
 8002a32:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6852      	ldr	r2, [r2, #4]
 8002a3c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d103      	bne.n	8002a50 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1e5a      	subs	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f240 101d 	movw	r0, #285	@ 0x11d
 8002a6a:	f003 fa53 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002a86:	2301      	movs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d05d      	beq.n	8002b6e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d059      	beq.n	8002b6e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d000      	beq.n	8002ace <xQueueGenericReset+0x52>
 8002acc:	2101      	movs	r1, #1
 8002ace:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d14c      	bne.n	8002b6e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002ad4:	f001 ff9e 	bl	8004a14 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	6939      	ldr	r1, [r7, #16]
 8002ae2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	441a      	add	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2200      	movs	r2, #0
 8002af2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	3b01      	subs	r3, #1
 8002b06:	6939      	ldr	r1, [r7, #16]
 8002b08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	441a      	add	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	22ff      	movs	r2, #255	@ 0xff
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	22ff      	movs	r2, #255	@ 0xff
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d114      	bne.n	8002b54 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	3310      	adds	r3, #16
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f884 	bl	8003c44 <xTaskRemoveFromEventList>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d012      	beq.n	8002b68 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <xQueueGenericReset+0x128>)
 8002b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	e009      	b.n	8002b68 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	3310      	adds	r3, #16
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fef3 	bl	8002944 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	3324      	adds	r3, #36	@ 0x24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff feee 	bl	8002944 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002b68:	f001 ff86 	bl	8004a78 <vPortExitCritical>
 8002b6c:	e001      	b.n	8002b72 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <xQueueGenericReset+0x114>
    __asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	60bb      	str	r3, [r7, #8]
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	4619      	mov	r1, r3
 8002b94:	2096      	movs	r0, #150	@ 0x96
 8002b96:	f003 f9bd 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002b9a:	697b      	ldr	r3, [r7, #20]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d02e      	beq.n	8002c1e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d000      	beq.n	8002bd0 <xQueueGenericCreate+0x28>
 8002bce:	2101      	movs	r1, #1
 8002bd0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d123      	bne.n	8002c1e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002bde:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002be2:	d81c      	bhi.n	8002c1e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	3350      	adds	r3, #80	@ 0x50
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 f83c 	bl	8004c70 <pvPortMalloc>
 8002bf8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01d      	beq.n	8002c3c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3350      	adds	r3, #80	@ 0x50
 8002c08:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c0a:	79fa      	ldrb	r2, [r7, #7]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f81e 	bl	8002c58 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c1c:	e00e      	b.n	8002c3c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <xQueueGenericCreate+0x94>
    __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	613b      	str	r3, [r7, #16]
}
 8002c36:	bf00      	nop
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fb02 	bl	8006248 <SEGGER_SYSVIEW_ShrinkId>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4619      	mov	r1, r3
 8002c48:	2098      	movs	r0, #152	@ 0x98
 8002c4a:	f003 f963 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
    }
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e002      	b.n	8002c7a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c86:	2101      	movs	r1, #1
 8002c88:	69b8      	ldr	r0, [r7, #24]
 8002c8a:	f7ff fef7 	bl	8002a7c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	@ 0x30
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <xQueueReceive+0x32>
    __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	623b      	str	r3, [r7, #32]
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <xQueueReceive+0x40>
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <xQueueReceive+0x44>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <xQueueReceive+0x46>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <xQueueReceive+0x62>
    __asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	61fb      	str	r3, [r7, #28]
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	e7fd      	b.n	8002cfe <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d02:	f001 f9c3 	bl	800408c <xTaskGetSchedulerState>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <xQueueReceive+0x72>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <xQueueReceive+0x76>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueReceive+0x78>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <xQueueReceive+0x94>
    __asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61bb      	str	r3, [r7, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d34:	f001 fe6e 	bl	8004a14 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d48:	f000 f898 	bl	8002e7c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	1e5a      	subs	r2, r3, #1
 8002d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00f      	beq.n	8002d7c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	3310      	adds	r3, #16
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 ff6f 	bl	8003c44 <xTaskRemoveFromEventList>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002d6c:	4b42      	ldr	r3, [pc, #264]	@ (8002e78 <xQueueReceive+0x1d8>)
 8002d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002d7c:	f001 fe7c 	bl	8004a78 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002d80:	2101      	movs	r1, #1
 8002d82:	20a4      	movs	r0, #164	@ 0xa4
 8002d84:	f003 f8c6 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e071      	b.n	8002e70 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002d92:	f001 fe71 	bl	8004a78 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002d96:	2100      	movs	r1, #0
 8002d98:	20a4      	movs	r0, #164	@ 0xa4
 8002d9a:	f003 f8bb 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e066      	b.n	8002e70 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 f829 	bl	8003e04 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002db6:	f001 fe5f 	bl	8004a78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002dba:	f000 fbfb 	bl	80035b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002dbe:	f001 fe29 	bl	8004a14 <vPortEnterCritical>
 8002dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d103      	bne.n	8002dd8 <xQueueReceive+0x138>
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d103      	bne.n	8002dee <xQueueReceive+0x14e>
 8002de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dee:	f001 fe43 	bl	8004a78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002df2:	1d3a      	adds	r2, r7, #4
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 f81a 	bl	8003e34 <xTaskCheckForTimeOut>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d123      	bne.n	8002e4e <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e08:	f000 f8b0 	bl	8002f6c <prvIsQueueEmpty>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d017      	beq.n	8002e42 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e14:	3324      	adds	r3, #36	@ 0x24
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fea0 	bl	8003b60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e22:	f000 f851 	bl	8002ec8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e26:	f000 fbd3 	bl	80035d0 <xTaskResumeAll>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d181      	bne.n	8002d34 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002e30:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <xQueueReceive+0x1d8>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	e778      	b.n	8002d34 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e44:	f000 f840 	bl	8002ec8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e48:	f000 fbc2 	bl	80035d0 <xTaskResumeAll>
 8002e4c:	e772      	b.n	8002d34 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e50:	f000 f83a 	bl	8002ec8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e54:	f000 fbbc 	bl	80035d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e5a:	f000 f887 	bl	8002f6c <prvIsQueueEmpty>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f43f af67 	beq.w	8002d34 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002e66:	2100      	movs	r1, #0
 8002e68:	20a4      	movs	r0, #164	@ 0xa4
 8002e6a:	f003 f853 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002e6e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3730      	adds	r7, #48	@ 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	441a      	add	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d303      	bcc.n	8002eb0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f003 fc90 	bl	80067e0 <memcpy>
    }
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ed0:	f001 fda0 	bl	8004a14 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eda:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002edc:	e011      	b.n	8002f02 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3324      	adds	r3, #36	@ 0x24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 feaa 	bl	8003c44 <xTaskRemoveFromEventList>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002ef6:	f001 f809 	bl	8003f0c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	dce9      	bgt.n	8002ede <prvUnlockQueue+0x16>
 8002f0a:	e000      	b.n	8002f0e <prvUnlockQueue+0x46>
                    break;
 8002f0c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	22ff      	movs	r2, #255	@ 0xff
 8002f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002f16:	f001 fdaf 	bl	8004a78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f1a:	f001 fd7b 	bl	8004a14 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f24:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f26:	e011      	b.n	8002f4c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3310      	adds	r3, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fe85 	bl	8003c44 <xTaskRemoveFromEventList>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f40:	f000 ffe4 	bl	8003f0c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dce9      	bgt.n	8002f28 <prvUnlockQueue+0x60>
 8002f54:	e000      	b.n	8002f58 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f56:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	22ff      	movs	r2, #255	@ 0xff
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002f60:	f001 fd8a 	bl	8004a78 <vPortExitCritical>
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f74:	f001 fd4e 	bl	8004a14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e001      	b.n	8002f8a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f8a:	f001 fd75 	bl	8004a78 <vPortExitCritical>

    return xReturn;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	60fb      	str	r3, [r7, #12]
}
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d024      	beq.n	8003014 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e01e      	b.n	800300e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002fd0:	4a18      	ldr	r2, [pc, #96]	@ (8003034 <vQueueAddToRegistry+0x9c>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d105      	bne.n	8002fec <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4a13      	ldr	r2, [pc, #76]	@ (8003034 <vQueueAddToRegistry+0x9c>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
                    break;
 8002fea:	e013      	b.n	8003014 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <vQueueAddToRegistry+0x70>
 8002ff2:	4a10      	ldr	r2, [pc, #64]	@ (8003034 <vQueueAddToRegistry+0x9c>)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4a0c      	ldr	r2, [pc, #48]	@ (8003034 <vQueueAddToRegistry+0x9c>)
 8003004:	4413      	add	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3301      	adds	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b07      	cmp	r3, #7
 8003012:	d9dd      	bls.n	8002fd0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003026:	20b6      	movs	r0, #182	@ 0xb6
 8003028:	f002 ff38 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800302c:	bf00      	nop
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000144 	.word	0x20000144

08003038 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003048:	f001 fce4 	bl	8004a14 <vPortEnterCritical>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003052:	b25b      	sxtb	r3, r3
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d103      	bne.n	8003062 <vQueueWaitForMessageRestricted+0x2a>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003068:	b25b      	sxtb	r3, r3
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d103      	bne.n	8003078 <vQueueWaitForMessageRestricted+0x40>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003078:	f001 fcfe 	bl	8004a78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3324      	adds	r3, #36	@ 0x24
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fd8f 	bl	8003bb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff18 	bl	8002ec8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003098:	20b9      	movs	r0, #185	@ 0xb9
 800309a:	f002 feff 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b08a      	sub	sp, #40	@ 0x28
 80030aa:	af04      	add	r7, sp, #16
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 fdd9 	bl	8004c70 <pvPortMalloc>
 80030be:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d013      	beq.n	80030ee <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80030c6:	2058      	movs	r0, #88	@ 0x58
 80030c8:	f001 fdd2 	bl	8004c70 <pvPortMalloc>
 80030cc:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80030d4:	2258      	movs	r2, #88	@ 0x58
 80030d6:	2100      	movs	r1, #0
 80030d8:	6978      	ldr	r0, [r7, #20]
 80030da:	f003 fb4d 	bl	8006778 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80030e4:	e005      	b.n	80030f2 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80030e6:	6938      	ldr	r0, [r7, #16]
 80030e8:	f001 fe16 	bl	8004d18 <vPortFree>
 80030ec:	e001      	b.n	80030f2 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030f8:	2300      	movs	r3, #0
 80030fa:	9303      	str	r3, [sp, #12]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	9302      	str	r3, [sp, #8]
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f82d 	bl	800316e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003114:	697b      	ldr	r3, [r7, #20]
    }
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800311e:	b580      	push	{r7, lr}
 8003120:	b088      	sub	sp, #32
 8003122:	af02      	add	r7, sp, #8
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff ffb3 	bl	80030a6 <prvCreateTask>
 8003140:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003148:	6938      	ldr	r0, [r7, #16]
 800314a:	f000 f8a1 	bl	8003290 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800314e:	2301      	movs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e002      	b.n	800315a <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4619      	mov	r1, r3
 800315e:	20c2      	movs	r0, #194	@ 0xc2
 8003160:	f002 fed8 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003164:	697b      	ldr	r3, [r7, #20]
    }
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b088      	sub	sp, #32
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	461a      	mov	r2, r3
 8003186:	21a5      	movs	r1, #165	@ 0xa5
 8003188:	f003 faf6 	bl	8006778 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800318c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003196:	3b01      	subs	r3, #1
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f023 0307 	bic.w	r3, r3, #7
 80031a4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	617b      	str	r3, [r7, #20]
}
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01e      	beq.n	800320c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e012      	b.n	80031fa <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	7819      	ldrb	r1, [r3, #0]
 80031dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	3334      	adds	r3, #52	@ 0x34
 80031e4:	460a      	mov	r2, r1
 80031e6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	d9e9      	bls.n	80031d4 <prvInitialiseNewTask+0x66>
 8003200:	e000      	b.n	8003204 <prvInitialiseNewTask+0x96>
            {
                break;
 8003202:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	2b04      	cmp	r3, #4
 8003210:	d90b      	bls.n	800322a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	613b      	str	r3, [r7, #16]
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	e7fd      	b.n	8003226 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	2b04      	cmp	r3, #4
 800322e:	d901      	bls.n	8003234 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003230:	2304      	movs	r3, #4
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003238:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800323e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	3304      	adds	r3, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fb9f 	bl	8002988 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	3318      	adds	r3, #24
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fb9a 	bl	8002988 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003258:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	f1c3 0205 	rsb	r2, r3, #5
 8003260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003262:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003268:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	69b8      	ldr	r0, [r7, #24]
 8003270:	f001 fa54 	bl	800471c <pxPortInitialiseStack>
 8003274:	4602      	mov	r2, r0
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003284:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003286:	bf00      	nop
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af02      	add	r7, sp, #8
 8003296:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003298:	f001 fbbc 	bl	8004a14 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800329c:	4b50      	ldr	r3, [pc, #320]	@ (80033e0 <prvAddNewTaskToReadyList+0x150>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a4f      	ldr	r2, [pc, #316]	@ (80033e0 <prvAddNewTaskToReadyList+0x150>)
 80032a4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80032a6:	4b4f      	ldr	r3, [pc, #316]	@ (80033e4 <prvAddNewTaskToReadyList+0x154>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80032ae:	4a4d      	ldr	r2, [pc, #308]	@ (80033e4 <prvAddNewTaskToReadyList+0x154>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032b4:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <prvAddNewTaskToReadyList+0x150>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d110      	bne.n	80032de <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80032bc:	f000 fe4c 	bl	8003f58 <prvInitialiseTaskLists>
 80032c0:	e00d      	b.n	80032de <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80032c2:	4b49      	ldr	r3, [pc, #292]	@ (80033e8 <prvAddNewTaskToReadyList+0x158>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ca:	4b46      	ldr	r3, [pc, #280]	@ (80033e4 <prvAddNewTaskToReadyList+0x154>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d802      	bhi.n	80032de <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80032d8:	4a42      	ldr	r2, [pc, #264]	@ (80033e4 <prvAddNewTaskToReadyList+0x154>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80032de:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <prvAddNewTaskToReadyList+0x15c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a41      	ldr	r2, [pc, #260]	@ (80033ec <prvAddNewTaskToReadyList+0x15c>)
 80032e6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032e8:	4b40      	ldr	r3, [pc, #256]	@ (80033ec <prvAddNewTaskToReadyList+0x15c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <prvAddNewTaskToReadyList+0x94>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fe7f 	bl	8005ffc <SEGGER_SYSVIEW_OnTaskCreate>
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	461d      	mov	r5, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461c      	mov	r4, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	1ae3      	subs	r3, r4, r3
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	462b      	mov	r3, r5
 8003320:	f003 f970 	bl	8006604 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	f002 feec 	bl	8006104 <SEGGER_SYSVIEW_OnTaskStartReady>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	4b2e      	ldr	r3, [pc, #184]	@ (80033f0 <prvAddNewTaskToReadyList+0x160>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4313      	orrs	r3, r2
 800333a:	4a2d      	ldr	r2, [pc, #180]	@ (80033f0 <prvAddNewTaskToReadyList+0x160>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003342:	492c      	ldr	r1, [pc, #176]	@ (80033f4 <prvAddNewTaskToReadyList+0x164>)
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3304      	adds	r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	3204      	adds	r2, #4
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1d1a      	adds	r2, r3, #4
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <prvAddNewTaskToReadyList+0x164>)
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	615a      	str	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338c:	4919      	ldr	r1, [pc, #100]	@ (80033f4 <prvAddNewTaskToReadyList+0x164>)
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800339e:	1c59      	adds	r1, r3, #1
 80033a0:	4814      	ldr	r0, [pc, #80]	@ (80033f4 <prvAddNewTaskToReadyList+0x164>)
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4403      	add	r3, r0
 80033ac:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80033ae:	f001 fb63 	bl	8004a78 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80033b2:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <prvAddNewTaskToReadyList+0x158>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80033ba:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <prvAddNewTaskToReadyList+0x154>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <prvAddNewTaskToReadyList+0x148>
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <prvAddNewTaskToReadyList+0x168>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bdb0      	pop	{r4, r5, r7, pc}
 80033e0:	2000025c 	.word	0x2000025c
 80033e4:	20000184 	.word	0x20000184
 80033e8:	20000268 	.word	0x20000268
 80033ec:	20000278 	.word	0x20000278
 80033f0:	20000264 	.word	0x20000264
 80033f4:	20000188 	.word	0x20000188
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d018      	beq.n	8003440 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800340e:	f000 f8d1 	bl	80035b4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003412:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <vTaskDelay+0x68>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d00b      	beq.n	8003432 <vTaskDelay+0x36>
    __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60bb      	str	r3, [r7, #8]
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	e7fd      	b.n	800342e <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003432:	2100      	movs	r1, #0
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fe4b 	bl	80040d0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800343a:	f000 f8c9 	bl	80035d0 <xTaskResumeAll>
 800343e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <vTaskDelay+0x6c>)
 8003448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003456:	20c5      	movs	r0, #197	@ 0xc5
 8003458:	f002 fd20 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000284 	.word	0x20000284
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e011      	b.n	80034a4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003480:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <prvCreateIdleTasks+0x88>)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	4413      	add	r3, r2
 8003486:	7819      	ldrb	r1, [r3, #0]
 8003488:	1d3a      	adds	r2, r7, #4
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	4413      	add	r3, r2
 800348e:	460a      	mov	r2, r1
 8003490:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003492:	1d3a      	adds	r2, r7, #4
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3301      	adds	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	ddea      	ble.n	8003480 <prvCreateIdleTasks+0x14>
 80034aa:	e000      	b.n	80034ae <prvCreateIdleTasks+0x42>
        {
            break;
 80034ac:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e015      	b.n	80034e0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80034b4:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <prvCreateIdleTasks+0x8c>)
 80034b6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4a0f      	ldr	r2, [pc, #60]	@ (80034fc <prvCreateIdleTasks+0x90>)
 80034be:	4413      	add	r3, r2
 80034c0:	1d39      	adds	r1, r7, #4
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	2300      	movs	r3, #0
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	2282      	movs	r2, #130	@ 0x82
 80034cc:	6938      	ldr	r0, [r7, #16]
 80034ce:	f7ff fe26 	bl	800311e <xTaskCreate>
 80034d2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3301      	adds	r3, #1
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dde6      	ble.n	80034b4 <prvCreateIdleTasks+0x48>
 80034e6:	e000      	b.n	80034ea <prvCreateIdleTasks+0x7e>
        {
            break;
 80034e8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80034ea:	69fb      	ldr	r3, [r7, #28]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	080070e4 	.word	0x080070e4
 80034f8:	08003f25 	.word	0x08003f25
 80034fc:	20000280 	.word	0x20000280

08003500 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003506:	f7ff ffb1 	bl	800346c <prvCreateIdleTasks>
 800350a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003512:	f000 fe6b 	bl	80041ec <xTimerCreateTimerTask>
 8003516:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d124      	bne.n	8003568 <vTaskStartScheduler+0x68>
    __asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60bb      	str	r3, [r7, #8]
}
 8003530:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003532:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <vTaskStartScheduler+0x9c>)
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800353a:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <vTaskStartScheduler+0xa0>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003540:	4b18      	ldr	r3, [pc, #96]	@ (80035a4 <vTaskStartScheduler+0xa4>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003546:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <vTaskStartScheduler+0xa8>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <vTaskStartScheduler+0xac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d102      	bne.n	8003558 <vTaskStartScheduler+0x58>
 8003552:	f002 fd37 	bl	8005fc4 <SEGGER_SYSVIEW_OnIdle>
 8003556:	e004      	b.n	8003562 <vTaskStartScheduler+0x62>
 8003558:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <vTaskStartScheduler+0xac>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f002 fd8f 	bl	8006080 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003562:	f001 f967 	bl	8004834 <xPortStartScheduler>
 8003566:	e00f      	b.n	8003588 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d10b      	bne.n	8003588 <vTaskStartScheduler+0x88>
    __asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	607b      	str	r3, [r7, #4]
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003588:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <vTaskStartScheduler+0xb0>)
 800358a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800358c:	20cd      	movs	r0, #205	@ 0xcd
 800358e:	f002 fc85 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000027c 	.word	0x2000027c
 80035a0:	20000268 	.word	0x20000268
 80035a4:	20000260 	.word	0x20000260
 80035a8:	20000280 	.word	0x20000280
 80035ac:	20000184 	.word	0x20000184
 80035b0:	20000014 	.word	0x20000014

080035b4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80035b8:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <vTaskSuspendAll+0x18>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	4a03      	ldr	r2, [pc, #12]	@ (80035cc <vTaskSuspendAll+0x18>)
 80035c0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80035c2:	20cf      	movs	r0, #207	@ 0xcf
 80035c4:	f002 fc6a 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000284 	.word	0x20000284

080035d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80035de:	f001 fa19 	bl	8004a14 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80035e6:	4b7a      	ldr	r3, [pc, #488]	@ (80037d0 <xTaskResumeAll+0x200>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <xTaskResumeAll+0x36>
    __asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	603b      	str	r3, [r7, #0]
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	e7fd      	b.n	8003602 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003606:	4b72      	ldr	r3, [pc, #456]	@ (80037d0 <xTaskResumeAll+0x200>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3b01      	subs	r3, #1
 800360c:	4a70      	ldr	r2, [pc, #448]	@ (80037d0 <xTaskResumeAll+0x200>)
 800360e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003610:	4b6f      	ldr	r3, [pc, #444]	@ (80037d0 <xTaskResumeAll+0x200>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f040 80ce 	bne.w	80037b6 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800361a:	4b6e      	ldr	r3, [pc, #440]	@ (80037d4 <xTaskResumeAll+0x204>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80c9 	beq.w	80037b6 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003624:	e092      	b.n	800374c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003626:	4b6c      	ldr	r3, [pc, #432]	@ (80037d8 <xTaskResumeAll+0x208>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	6a12      	ldr	r2, [r2, #32]
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	69d2      	ldr	r2, [r2, #28]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3318      	adds	r3, #24
 8003650:	429a      	cmp	r2, r3
 8003652:	d103      	bne.n	800365c <xTaskResumeAll+0x8c>
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2200      	movs	r2, #0
 8003660:	629a      	str	r2, [r3, #40]	@ 0x28
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1e5a      	subs	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	6892      	ldr	r2, [r2, #8]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	429a      	cmp	r2, r3
 8003690:	d103      	bne.n	800369a <xTaskResumeAll+0xca>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2200      	movs	r2, #0
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 fd29 	bl	8006104 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	4b48      	ldr	r3, [pc, #288]	@ (80037dc <xTaskResumeAll+0x20c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	4a46      	ldr	r2, [pc, #280]	@ (80037dc <xTaskResumeAll+0x20c>)
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c8:	4945      	ldr	r1, [pc, #276]	@ (80037e0 <xTaskResumeAll+0x210>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	3304      	adds	r3, #4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	3204      	adds	r2, #4
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	1d1a      	adds	r2, r3, #4
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4a36      	ldr	r2, [pc, #216]	@ (80037e0 <xTaskResumeAll+0x210>)
 8003708:	441a      	add	r2, r3
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	615a      	str	r2, [r3, #20]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003712:	4933      	ldr	r1, [pc, #204]	@ (80037e0 <xTaskResumeAll+0x210>)
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003724:	1c59      	adds	r1, r3, #1
 8003726:	482e      	ldr	r0, [pc, #184]	@ (80037e0 <xTaskResumeAll+0x210>)
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4403      	add	r3, r0
 8003732:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003738:	4b2a      	ldr	r3, [pc, #168]	@ (80037e4 <xTaskResumeAll+0x214>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	429a      	cmp	r2, r3
 8003740:	d904      	bls.n	800374c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003742:	4a29      	ldr	r2, [pc, #164]	@ (80037e8 <xTaskResumeAll+0x218>)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2101      	movs	r1, #1
 8003748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800374c:	4b22      	ldr	r3, [pc, #136]	@ (80037d8 <xTaskResumeAll+0x208>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af68 	bne.w	8003626 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800375c:	f000 fc7a 	bl	8004054 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003760:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <xTaskResumeAll+0x21c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800376c:	f000 f86a 	bl	8003844 <xTaskIncrementTick>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003776:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <xTaskResumeAll+0x218>)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2101      	movs	r1, #1
 800377c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3b01      	subs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ef      	bne.n	800376c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 800378c:	4b17      	ldr	r3, [pc, #92]	@ (80037ec <xTaskResumeAll+0x21c>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003792:	4a15      	ldr	r2, [pc, #84]	@ (80037e8 <xTaskResumeAll+0x218>)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <xTaskResumeAll+0x214>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <xTaskResumeAll+0x220>)
 80037a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80037b6:	f001 f95f 	bl	8004a78 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4619      	mov	r1, r3
 80037be:	20d0      	movs	r0, #208	@ 0xd0
 80037c0:	f002 fba8 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80037c4:	69bb      	ldr	r3, [r7, #24]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000284 	.word	0x20000284
 80037d4:	2000025c 	.word	0x2000025c
 80037d8:	2000021c 	.word	0x2000021c
 80037dc:	20000264 	.word	0x20000264
 80037e0:	20000188 	.word	0x20000188
 80037e4:	20000184 	.word	0x20000184
 80037e8:	20000270 	.word	0x20000270
 80037ec:	2000026c 	.word	0x2000026c
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <xTaskGetTickCount+0x20>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	20d1      	movs	r0, #209	@ 0xd1
 8003804:	f002 fb86 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003808:	687b      	ldr	r3, [r7, #4]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000260 	.word	0x20000260

08003818 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800381e:	f001 f9e5 	bl	8004bec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <xTaskGetTickCountFromISR+0x28>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	20d2      	movs	r0, #210	@ 0xd2
 8003830:	f002 fb70 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003834:	683b      	ldr	r3, [r7, #0]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000260 	.word	0x20000260

08003844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	@ 0x28
 8003848:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800384e:	4b83      	ldr	r3, [pc, #524]	@ (8003a5c <xTaskIncrementTick+0x218>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 80f3 	bne.w	8003a3e <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003858:	4b81      	ldr	r3, [pc, #516]	@ (8003a60 <xTaskIncrementTick+0x21c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003860:	4a7f      	ldr	r2, [pc, #508]	@ (8003a60 <xTaskIncrementTick+0x21c>)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d121      	bne.n	80038b0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800386c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a64 <xTaskIncrementTick+0x220>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <xTaskIncrementTick+0x4a>
    __asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	607b      	str	r3, [r7, #4]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <xTaskIncrementTick+0x46>
 800388e:	4b75      	ldr	r3, [pc, #468]	@ (8003a64 <xTaskIncrementTick+0x220>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	4b74      	ldr	r3, [pc, #464]	@ (8003a68 <xTaskIncrementTick+0x224>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a72      	ldr	r2, [pc, #456]	@ (8003a64 <xTaskIncrementTick+0x220>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4a72      	ldr	r2, [pc, #456]	@ (8003a68 <xTaskIncrementTick+0x224>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b72      	ldr	r3, [pc, #456]	@ (8003a6c <xTaskIncrementTick+0x228>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	4a70      	ldr	r2, [pc, #448]	@ (8003a6c <xTaskIncrementTick+0x228>)
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	f000 fbd2 	bl	8004054 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80038b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a70 <xTaskIncrementTick+0x22c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	f0c0 80ac 	bcc.w	8003a14 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038bc:	4b69      	ldr	r3, [pc, #420]	@ (8003a64 <xTaskIncrementTick+0x220>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80038c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a70 <xTaskIncrementTick+0x22c>)
 80038c8:	f04f 32ff 	mov.w	r2, #4294967295
 80038cc:	601a      	str	r2, [r3, #0]
                    break;
 80038ce:	e0a1      	b.n	8003a14 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038d0:	4b64      	ldr	r3, [pc, #400]	@ (8003a64 <xTaskIncrementTick+0x220>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d203      	bcs.n	80038f0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80038e8:	4a61      	ldr	r2, [pc, #388]	@ (8003a70 <xTaskIncrementTick+0x22c>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	6013      	str	r3, [r2, #0]
                        break;
 80038ee:	e091      	b.n	8003a14 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	6892      	ldr	r2, [r2, #8]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	3304      	adds	r3, #4
 8003912:	429a      	cmp	r2, r3
 8003914:	d103      	bne.n	800391e <xTaskIncrementTick+0xda>
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2200      	movs	r2, #0
 8003922:	615a      	str	r2, [r3, #20]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1e5a      	subs	r2, r3, #1
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01e      	beq.n	8003974 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	6a12      	ldr	r2, [r2, #32]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	69d2      	ldr	r2, [r2, #28]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	3318      	adds	r3, #24
 8003958:	429a      	cmp	r2, r3
 800395a:	d103      	bne.n	8003964 <xTaskIncrementTick+0x120>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2200      	movs	r2, #0
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4618      	mov	r0, r3
 8003978:	f002 fbc4 	bl	8006104 <SEGGER_SYSVIEW_OnTaskStartReady>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	2201      	movs	r2, #1
 8003982:	409a      	lsls	r2, r3
 8003984:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <xTaskIncrementTick+0x230>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a74 <xTaskIncrementTick+0x230>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003992:	4939      	ldr	r1, [pc, #228]	@ (8003a78 <xTaskIncrementTick+0x234>)
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3304      	adds	r3, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	3204      	adds	r2, #4
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a29      	ldr	r2, [pc, #164]	@ (8003a78 <xTaskIncrementTick+0x234>)
 80039d2:	441a      	add	r2, r3
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	615a      	str	r2, [r3, #20]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039dc:	4926      	ldr	r1, [pc, #152]	@ (8003a78 <xTaskIncrementTick+0x234>)
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039ee:	1c59      	adds	r1, r3, #1
 80039f0:	4821      	ldr	r0, [pc, #132]	@ (8003a78 <xTaskIncrementTick+0x234>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4403      	add	r3, r0
 80039fc:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a02:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <xTaskIncrementTick+0x238>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	f67f af57 	bls.w	80038bc <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a12:	e753      	b.n	80038bc <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <xTaskIncrementTick+0x238>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1a:	4917      	ldr	r1, [pc, #92]	@ (8003a78 <xTaskIncrementTick+0x234>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d901      	bls.n	8003a30 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003a30:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <xTaskIncrementTick+0x23c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3c:	e004      	b.n	8003a48 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <xTaskIncrementTick+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	4a0f      	ldr	r2, [pc, #60]	@ (8003a84 <xTaskIncrementTick+0x240>)
 8003a46:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	20db      	movs	r0, #219	@ 0xdb
 8003a4e:	f002 fa61 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	@ 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000284 	.word	0x20000284
 8003a60:	20000260 	.word	0x20000260
 8003a64:	20000214 	.word	0x20000214
 8003a68:	20000218 	.word	0x20000218
 8003a6c:	20000274 	.word	0x20000274
 8003a70:	2000027c 	.word	0x2000027c
 8003a74:	20000264 	.word	0x20000264
 8003a78:	20000188 	.word	0x20000188
 8003a7c:	20000184 	.word	0x20000184
 8003a80:	20000270 	.word	0x20000270
 8003a84:	2000026c 	.word	0x2000026c

08003a88 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <vTaskSwitchContext+0xc0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003a96:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <vTaskSwitchContext+0xc4>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003a9c:	e04f      	b.n	8003b3e <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <vTaskSwitchContext+0xc4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <vTaskSwitchContext+0xc8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
 8003ab4:	f1c3 031f 	rsb	r3, r3, #31
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	4926      	ldr	r1, [pc, #152]	@ (8003b54 <vTaskSwitchContext+0xcc>)
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <vTaskSwitchContext+0x5e>
    __asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	607b      	str	r3, [r7, #4]
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	e7fd      	b.n	8003ae2 <vTaskSwitchContext+0x5a>
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <vTaskSwitchContext+0xcc>)
 8003af2:	4413      	add	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3308      	adds	r3, #8
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d103      	bne.n	8003b14 <vTaskSwitchContext+0x8c>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003b58 <vTaskSwitchContext+0xd0>)
 8003b1c:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <vTaskSwitchContext+0xd4>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <vTaskSwitchContext+0xd0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d102      	bne.n	8003b30 <vTaskSwitchContext+0xa8>
 8003b2a:	f002 fa4b 	bl	8005fc4 <SEGGER_SYSVIEW_OnIdle>
 8003b2e:	e004      	b.n	8003b3a <vTaskSwitchContext+0xb2>
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <vTaskSwitchContext+0xd0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f002 faa3 	bl	8006080 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003b3a:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <vTaskSwitchContext+0xd0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
    }
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000284 	.word	0x20000284
 8003b4c:	20000270 	.word	0x20000270
 8003b50:	20000264 	.word	0x20000264
 8003b54:	20000188 	.word	0x20000188
 8003b58:	20000184 	.word	0x20000184
 8003b5c:	20000280 	.word	0x20000280

08003b60 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b88:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <vTaskPlaceOnEventList+0x4c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3318      	adds	r3, #24
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fe ff08 	bl	80029a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b96:	2101      	movs	r1, #1
 8003b98:	6838      	ldr	r0, [r7, #0]
 8003b9a:	f000 fa99 	bl	80040d0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003b9e:	20e1      	movs	r0, #225	@ 0xe1
 8003ba0:	f002 f97c 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000184 	.word	0x20000184

08003bb0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	613b      	str	r3, [r7, #16]
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	4b17      	ldr	r3, [pc, #92]	@ (8003c40 <vTaskPlaceOnEventListRestricted+0x90>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	61da      	str	r2, [r3, #28]
 8003be8:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <vTaskPlaceOnEventListRestricted+0x90>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	6892      	ldr	r2, [r2, #8]
 8003bf0:	621a      	str	r2, [r3, #32]
 8003bf2:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <vTaskPlaceOnEventListRestricted+0x90>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	3218      	adds	r2, #24
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <vTaskPlaceOnEventListRestricted+0x90>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f103 0218 	add.w	r2, r3, #24
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <vTaskPlaceOnEventListRestricted+0x90>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	68b8      	ldr	r0, [r7, #8]
 8003c2c:	f000 fa50 	bl	80040d0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003c30:	20e3      	movs	r0, #227	@ 0xe3
 8003c32:	f002 f933 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000184 	.word	0x20000184

08003c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60fb      	str	r3, [r7, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	6a12      	ldr	r2, [r2, #32]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	69d2      	ldr	r2, [r2, #28]
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	3318      	adds	r3, #24
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d103      	bne.n	8003ca0 <xTaskRemoveFromEventList+0x5c>
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	1e5a      	subs	r2, r3, #1
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8003dec <xTaskRemoveFromEventList+0x1a8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d164      	bne.n	8003d82 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	6a3a      	ldr	r2, [r7, #32]
 8003cc4:	68d2      	ldr	r2, [r2, #12]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	6892      	ldr	r2, [r2, #8]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d103      	bne.n	8003ce6 <xTaskRemoveFromEventList+0xa2>
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 fa03 	bl	8006104 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	4b3a      	ldr	r3, [pc, #232]	@ (8003df0 <xTaskRemoveFromEventList+0x1ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <xTaskRemoveFromEventList+0x1ac>)
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d14:	4937      	ldr	r1, [pc, #220]	@ (8003df4 <xTaskRemoveFromEventList+0x1b0>)
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3304      	adds	r3, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	6a3a      	ldr	r2, [r7, #32]
 8003d3a:	3204      	adds	r2, #4
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	1d1a      	adds	r2, r3, #4
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a28      	ldr	r2, [pc, #160]	@ (8003df4 <xTaskRemoveFromEventList+0x1b0>)
 8003d54:	441a      	add	r2, r3
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	615a      	str	r2, [r3, #20]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5e:	4925      	ldr	r1, [pc, #148]	@ (8003df4 <xTaskRemoveFromEventList+0x1b0>)
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d70:	1c59      	adds	r1, r3, #1
 8003d72:	4820      	ldr	r0, [pc, #128]	@ (8003df4 <xTaskRemoveFromEventList+0x1b0>)
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4403      	add	r3, r0
 8003d7e:	6019      	str	r1, [r3, #0]
 8003d80:	e01b      	b.n	8003dba <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d82:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <xTaskRemoveFromEventList+0x1b4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	61da      	str	r2, [r3, #28]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	621a      	str	r2, [r3, #32]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	3218      	adds	r2, #24
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f103 0218 	add.w	r2, r3, #24
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	4a12      	ldr	r2, [pc, #72]	@ (8003df8 <xTaskRemoveFromEventList+0x1b4>)
 8003dae:	629a      	str	r2, [r3, #40]	@ 0x28
 8003db0:	4b11      	ldr	r3, [pc, #68]	@ (8003df8 <xTaskRemoveFromEventList+0x1b4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <xTaskRemoveFromEventList+0x1b4>)
 8003db8:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <xTaskRemoveFromEventList+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d905      	bls.n	8003dd4 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <xTaskRemoveFromEventList+0x1bc>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e001      	b.n	8003dd8 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	4619      	mov	r1, r3
 8003ddc:	20e4      	movs	r0, #228	@ 0xe4
 8003dde:	f002 f899 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3728      	adds	r7, #40	@ 0x28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000284 	.word	0x20000284
 8003df0:	20000264 	.word	0x20000264
 8003df4:	20000188 	.word	0x20000188
 8003df8:	2000021c 	.word	0x2000021c
 8003dfc:	20000184 	.word	0x20000184
 8003e00:	20000270 	.word	0x20000270

08003e04 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e0c:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <vTaskInternalSetTimeOutState+0x28>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <vTaskInternalSetTimeOutState+0x2c>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003e1c:	20e7      	movs	r0, #231	@ 0xe7
 8003e1e:	f002 f83d 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000274 	.word	0x20000274
 8003e30:	20000260 	.word	0x20000260

08003e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	613b      	str	r3, [r7, #16]
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	60fb      	str	r3, [r7, #12]
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	e7fd      	b.n	8003e76 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003e7a:	f000 fdcb 	bl	8004a14 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e7e:	4b21      	ldr	r3, [pc, #132]	@ (8003f04 <xTaskCheckForTimeOut+0xd0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d102      	bne.n	8003e9e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	e026      	b.n	8003eec <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <xTaskCheckForTimeOut+0xd4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d00a      	beq.n	8003ec0 <xTaskCheckForTimeOut+0x8c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d305      	bcc.n	8003ec0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e015      	b.n	8003eec <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20b      	bcs.n	8003ee2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad2      	subs	r2, r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ff94 	bl	8003e04 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e004      	b.n	8003eec <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003eec:	f000 fdc4 	bl	8004a78 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	20e8      	movs	r0, #232	@ 0xe8
 8003ef6:	f002 f80d 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003efa:	69fb      	ldr	r3, [r7, #28]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000260 	.word	0x20000260
 8003f08:	20000274 	.word	0x20000274

08003f0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003f10:	4b03      	ldr	r3, [pc, #12]	@ (8003f20 <vTaskMissedYield+0x14>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003f16:	20e9      	movs	r0, #233	@ 0xe9
 8003f18:	f001 ffc0 	bl	8005e9c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000270 	.word	0x20000270

08003f24 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003f2c:	f000 f854 	bl	8003fd8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003f30:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <prvIdleTask+0x2c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d907      	bls.n	8003f48 <prvIdleTask+0x24>
            {
                taskYIELD();
 8003f38:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <prvIdleTask+0x30>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
        #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */

        #if ( configUSE_IDLE_HOOK == 1 )
        {
            /* Call the user defined function from within the idle task. */
            vApplicationIdleHook();
 8003f48:	f7fc fd00 	bl	800094c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003f4c:	e7ee      	b.n	8003f2c <prvIdleTask+0x8>
 8003f4e:	bf00      	nop
 8003f50:	20000188 	.word	0x20000188
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	e00c      	b.n	8003f7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <prvInitialiseTaskLists+0x60>)
 8003f70:	4413      	add	r3, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fce6 	bl	8002944 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d9ef      	bls.n	8003f64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f84:	480d      	ldr	r0, [pc, #52]	@ (8003fbc <prvInitialiseTaskLists+0x64>)
 8003f86:	f7fe fcdd 	bl	8002944 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f8a:	480d      	ldr	r0, [pc, #52]	@ (8003fc0 <prvInitialiseTaskLists+0x68>)
 8003f8c:	f7fe fcda 	bl	8002944 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f90:	480c      	ldr	r0, [pc, #48]	@ (8003fc4 <prvInitialiseTaskLists+0x6c>)
 8003f92:	f7fe fcd7 	bl	8002944 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003f96:	480c      	ldr	r0, [pc, #48]	@ (8003fc8 <prvInitialiseTaskLists+0x70>)
 8003f98:	f7fe fcd4 	bl	8002944 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003f9c:	480b      	ldr	r0, [pc, #44]	@ (8003fcc <prvInitialiseTaskLists+0x74>)
 8003f9e:	f7fe fcd1 	bl	8002944 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <prvInitialiseTaskLists+0x78>)
 8003fa4:	4a05      	ldr	r2, [pc, #20]	@ (8003fbc <prvInitialiseTaskLists+0x64>)
 8003fa6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <prvInitialiseTaskLists+0x7c>)
 8003faa:	4a05      	ldr	r2, [pc, #20]	@ (8003fc0 <prvInitialiseTaskLists+0x68>)
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000188 	.word	0x20000188
 8003fbc:	200001ec 	.word	0x200001ec
 8003fc0:	20000200 	.word	0x20000200
 8003fc4:	2000021c 	.word	0x2000021c
 8003fc8:	20000230 	.word	0x20000230
 8003fcc:	20000248 	.word	0x20000248
 8003fd0:	20000214 	.word	0x20000214
 8003fd4:	20000218 	.word	0x20000218

08003fd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fde:	e019      	b.n	8004014 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003fe0:	f000 fd18 	bl	8004a14 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fe4:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <prvCheckTasksWaitingTermination+0x50>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fd13 	bl	8002a1c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800402c <prvCheckTasksWaitingTermination+0x54>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800402c <prvCheckTasksWaitingTermination+0x54>)
 8003ffe:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004000:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <prvCheckTasksWaitingTermination+0x58>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	4a0a      	ldr	r2, [pc, #40]	@ (8004030 <prvCheckTasksWaitingTermination+0x58>)
 8004008:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800400a:	f000 fd35 	bl	8004a78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f810 	bl	8004034 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004014:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <prvCheckTasksWaitingTermination+0x58>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e1      	bne.n	8003fe0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000230 	.word	0x20000230
 800402c:	2000025c 	.word	0x2000025c
 8004030:	20000244 	.word	0x20000244

08004034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fe69 	bl	8004d18 <vPortFree>
            vPortFree( pxTCB );
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fe66 	bl	8004d18 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004058:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <prvResetNextTaskUnblockTime+0x30>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004062:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <prvResetNextTaskUnblockTime+0x34>)
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800406a:	e005      	b.n	8004078 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800406c:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <prvResetNextTaskUnblockTime+0x30>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <prvResetNextTaskUnblockTime+0x34>)
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000214 	.word	0x20000214
 8004088:	2000027c 	.word	0x2000027c

0800408c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <xTaskGetSchedulerState+0x3c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800409a:	2301      	movs	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	e008      	b.n	80040b2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80040a0:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <xTaskGetSchedulerState+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80040a8:	2302      	movs	r3, #2
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e001      	b.n	80040b2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4619      	mov	r1, r3
 80040b6:	20f5      	movs	r0, #245	@ 0xf5
 80040b8:	f001 ff2c 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80040bc:	687b      	ldr	r3, [r7, #4]
    }
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000268 	.word	0x20000268
 80040cc:	20000284 	.word	0x20000284

080040d0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80040da:	4b3d      	ldr	r3, [pc, #244]	@ (80041d0 <prvAddCurrentTaskToDelayedList+0x100>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80040e0:	4b3c      	ldr	r3, [pc, #240]	@ (80041d4 <prvAddCurrentTaskToDelayedList+0x104>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80040e6:	4b3c      	ldr	r3, [pc, #240]	@ (80041d8 <prvAddCurrentTaskToDelayedList+0x108>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ec:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fc92 	bl	8002a1c <uxListRemove>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80040fe:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	2201      	movs	r2, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43da      	mvns	r2, r3
 800410c:	4b34      	ldr	r3, [pc, #208]	@ (80041e0 <prvAddCurrentTaskToDelayedList+0x110>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4013      	ands	r3, r2
 8004112:	4a33      	ldr	r2, [pc, #204]	@ (80041e0 <prvAddCurrentTaskToDelayedList+0x110>)
 8004114:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d124      	bne.n	8004168 <prvAddCurrentTaskToDelayedList+0x98>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d021      	beq.n	8004168 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004124:	4b2f      	ldr	r3, [pc, #188]	@ (80041e4 <prvAddCurrentTaskToDelayedList+0x114>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	4b2c      	ldr	r3, [pc, #176]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	4b2a      	ldr	r3, [pc, #168]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	6892      	ldr	r2, [r2, #8]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	4b27      	ldr	r3, [pc, #156]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	3204      	adds	r2, #4
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1d1a      	adds	r2, r3, #4
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a23      	ldr	r2, [pc, #140]	@ (80041e4 <prvAddCurrentTaskToDelayedList+0x114>)
 8004158:	615a      	str	r2, [r3, #20]
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <prvAddCurrentTaskToDelayedList+0x114>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	4a20      	ldr	r2, [pc, #128]	@ (80041e4 <prvAddCurrentTaskToDelayedList+0x114>)
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004166:	e02e      	b.n	80041c6 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004170:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	429a      	cmp	r2, r3
 800417e:	d20d      	bcs.n	800419c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004180:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2104      	movs	r1, #4
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fffe 	bl	8006188 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800418c:	4b13      	ldr	r3, [pc, #76]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f7fe fc06 	bl	80029a6 <vListInsert>
}
 800419a:	e014      	b.n	80041c6 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800419c:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2104      	movs	r1, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fff0 	bl	8006188 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <prvAddCurrentTaskToDelayedList+0x10c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	69b8      	ldr	r0, [r7, #24]
 80041b2:	f7fe fbf8 	bl	80029a6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80041b6:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <prvAddCurrentTaskToDelayedList+0x118>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d202      	bcs.n	80041c6 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 80041c0:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <prvAddCurrentTaskToDelayedList+0x118>)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6013      	str	r3, [r2, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000260 	.word	0x20000260
 80041d4:	20000214 	.word	0x20000214
 80041d8:	20000218 	.word	0x20000218
 80041dc:	20000184 	.word	0x20000184
 80041e0:	20000264 	.word	0x20000264
 80041e4:	20000248 	.word	0x20000248
 80041e8:	2000027c 	.word	0x2000027c

080041ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80041f6:	f000 fa5b 	bl	80046b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80041fa:	4b15      	ldr	r3, [pc, #84]	@ (8004250 <xTimerCreateTimerTask+0x64>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004202:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <xTimerCreateTimerTask+0x68>)
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	2302      	movs	r3, #2
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004210:	4911      	ldr	r1, [pc, #68]	@ (8004258 <xTimerCreateTimerTask+0x6c>)
 8004212:	4812      	ldr	r0, [pc, #72]	@ (800425c <xTimerCreateTimerTask+0x70>)
 8004214:	f7fe ff83 	bl	800311e <xTaskCreate>
 8004218:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	603b      	str	r3, [r7, #0]
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4619      	mov	r1, r3
 800423c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004240:	f001 fe68 	bl	8005f14 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004244:	687b      	ldr	r3, [r7, #4]
    }
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200002b8 	.word	0x200002b8
 8004254:	200002bc 	.word	0x200002bc
 8004258:	080070ec 	.word	0x080070ec
 800425c:	08004305 	.word	0x08004305

08004260 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800426c:	e008      	b.n	8004280 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4413      	add	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	18d1      	adds	r1, r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f8df 	bl	8004450 <prvInsertTimerInActiveList>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ea      	bne.n	800426e <prvReloadTimer+0xe>
        }
    }
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ae:	4b14      	ldr	r3, [pc, #80]	@ (8004300 <prvProcessExpiredTimer+0x5c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fbad 	bl	8002a1c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff ffc3 	bl	8004260 <prvReloadTimer>
 80042da:	e008      	b.n	80042ee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	4798      	blx	r3
    }
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200002b0 	.word	0x200002b0

08004304 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800430c:	f107 0308 	add.w	r3, r7, #8
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f859 	bl	80043c8 <prvGetNextExpireTime>
 8004316:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4619      	mov	r1, r3
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f805 	bl	800432c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004322:	f000 f8d7 	bl	80044d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004326:	bf00      	nop
 8004328:	e7f0      	b.n	800430c <prvTimerTask+0x8>
	...

0800432c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004336:	f7ff f93d 	bl	80035b4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800433a:	f107 0308 	add.w	r3, r7, #8
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f866 	bl	8004410 <prvSampleTimeNow>
 8004344:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d130      	bne.n	80043ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <prvProcessTimerOrBlockTask+0x3c>
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	429a      	cmp	r2, r3
 8004358:	d806      	bhi.n	8004368 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800435a:	f7ff f939 	bl	80035d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff9f 	bl	80042a4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004366:	e024      	b.n	80043b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800436e:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <prvProcessTimerOrBlockTask+0x90>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <prvProcessTimerOrBlockTask+0x50>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <prvProcessTimerOrBlockTask+0x52>
 800437c:	2300      	movs	r3, #0
 800437e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004380:	4b0f      	ldr	r3, [pc, #60]	@ (80043c0 <prvProcessTimerOrBlockTask+0x94>)
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	4619      	mov	r1, r3
 800438e:	f7fe fe53 	bl	8003038 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004392:	f7ff f91d 	bl	80035d0 <xTaskResumeAll>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800439c:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <prvProcessTimerOrBlockTask+0x98>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	f3bf 8f6f 	isb	sy
    }
 80043ac:	e001      	b.n	80043b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80043ae:	f7ff f90f 	bl	80035d0 <xTaskResumeAll>
    }
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	200002b4 	.word	0x200002b4
 80043c0:	200002b8 	.word	0x200002b8
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043d0:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <prvGetNextExpireTime+0x44>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <prvGetNextExpireTime+0x16>
 80043da:	2201      	movs	r2, #1
 80043dc:	e000      	b.n	80043e0 <prvGetNextExpireTime+0x18>
 80043de:	2200      	movs	r2, #0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d105      	bne.n	80043f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043ec:	4b07      	ldr	r3, [pc, #28]	@ (800440c <prvGetNextExpireTime+0x44>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e001      	b.n	80043fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80043fc:	68fb      	ldr	r3, [r7, #12]
    }
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200002b0 	.word	0x200002b0

08004410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004418:	f7ff f9ec 	bl	80037f4 <xTaskGetTickCount>
 800441c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800441e:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <prvSampleTimeNow+0x3c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	429a      	cmp	r2, r3
 8004426:	d205      	bcs.n	8004434 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004428:	f000 f91c 	bl	8004664 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e002      	b.n	800443a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800443a:	4a04      	ldr	r2, [pc, #16]	@ (800444c <prvSampleTimeNow+0x3c>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004440:	68fb      	ldr	r3, [r7, #12]
    }
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200002c0 	.word	0x200002c0

08004450 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d812      	bhi.n	800449c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e01b      	b.n	80044c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <prvInsertTimerInActiveList+0x7c>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3304      	adds	r3, #4
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f7fe fa86 	bl	80029a6 <vListInsert>
 800449a:	e012      	b.n	80044c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d206      	bcs.n	80044b2 <prvInsertTimerInActiveList+0x62>
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d302      	bcc.n	80044b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e007      	b.n	80044c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044b2:	4b07      	ldr	r3, [pc, #28]	@ (80044d0 <prvInsertTimerInActiveList+0x80>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7fe fa72 	bl	80029a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80044c2:	697b      	ldr	r3, [r7, #20]
    }
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200002b4 	.word	0x200002b4
 80044d0:	200002b0 	.word	0x200002b0

080044d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80044e6:	e0a9      	b.n	800463c <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f2c0 80a6 	blt.w	800463c <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fa8b 	bl	8002a1c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004506:	1d3b      	adds	r3, r7, #4
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff81 	bl	8004410 <prvSampleTimeNow>
 800450e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3b01      	subs	r3, #1
 8004514:	2b08      	cmp	r3, #8
 8004516:	f200 808e 	bhi.w	8004636 <prvProcessReceivedCommands+0x162>
 800451a:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <prvProcessReceivedCommands+0x4c>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004545 	.word	0x08004545
 8004524:	08004545 	.word	0x08004545
 8004528:	080045ad 	.word	0x080045ad
 800452c:	080045c1 	.word	0x080045c1
 8004530:	0800460d 	.word	0x0800460d
 8004534:	08004545 	.word	0x08004545
 8004538:	08004545 	.word	0x08004545
 800453c:	080045ad 	.word	0x080045ad
 8004540:	080045c1 	.word	0x080045c1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	18d1      	adds	r1, r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	69f8      	ldr	r0, [r7, #28]
 8004564:	f7ff ff74 	bl	8004450 <prvInsertTimerInActiveList>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d065      	beq.n	800463a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	4413      	add	r3, r2
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4619      	mov	r1, r3
 8004588:	69f8      	ldr	r0, [r7, #28]
 800458a:	f7ff fe69 	bl	8004260 <prvReloadTimer>
 800458e:	e008      	b.n	80045a2 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	69f8      	ldr	r0, [r7, #28]
 80045a8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80045aa:	e046      	b.n	800463a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80045be:	e03d      	b.n	800463c <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <prvProcessReceivedCommands+0x124>
    __asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	617b      	str	r3, [r7, #20]
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	18d1      	adds	r1, r2, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	69f8      	ldr	r0, [r7, #28]
 8004606:	f7ff ff23 	bl	8004450 <prvInsertTimerInActiveList>
                        break;
 800460a:	e017      	b.n	800463c <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800461a:	69f8      	ldr	r0, [r7, #28]
 800461c:	f000 fb7c 	bl	8004d18 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004620:	e00c      	b.n	800463c <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	b2da      	uxtb	r2, r3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004634:	e002      	b.n	800463c <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004636:	bf00      	nop
 8004638:	e000      	b.n	800463c <prvProcessReceivedCommands+0x168>
                        break;
 800463a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <prvProcessReceivedCommands+0x18c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f107 0108 	add.w	r1, r7, #8
 8004644:	2200      	movs	r2, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fb2a 	bl	8002ca0 <xQueueReceive>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	f47f af4a 	bne.w	80044e8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200002b8 	.word	0x200002b8

08004664 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800466a:	e009      	b.n	8004680 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800466c:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <prvSwitchTimerLists+0x44>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004676:	f04f 31ff 	mov.w	r1, #4294967295
 800467a:	6838      	ldr	r0, [r7, #0]
 800467c:	f7ff fe12 	bl	80042a4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004680:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <prvSwitchTimerLists+0x44>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800468a:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <prvSwitchTimerLists+0x44>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <prvSwitchTimerLists+0x48>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a04      	ldr	r2, [pc, #16]	@ (80046a8 <prvSwitchTimerLists+0x44>)
 8004696:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004698:	4a04      	ldr	r2, [pc, #16]	@ (80046ac <prvSwitchTimerLists+0x48>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6013      	str	r3, [r2, #0]
    }
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	200002b0 	.word	0x200002b0
 80046ac:	200002b4 	.word	0x200002b4

080046b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80046b4:	f000 f9ae 	bl	8004a14 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80046b8:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <prvCheckForValidListAndQueue+0x54>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d11d      	bne.n	80046fc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80046c0:	4811      	ldr	r0, [pc, #68]	@ (8004708 <prvCheckForValidListAndQueue+0x58>)
 80046c2:	f7fe f93f 	bl	8002944 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80046c6:	4811      	ldr	r0, [pc, #68]	@ (800470c <prvCheckForValidListAndQueue+0x5c>)
 80046c8:	f7fe f93c 	bl	8002944 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80046cc:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <prvCheckForValidListAndQueue+0x60>)
 80046ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004708 <prvCheckForValidListAndQueue+0x58>)
 80046d0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80046d2:	4b10      	ldr	r3, [pc, #64]	@ (8004714 <prvCheckForValidListAndQueue+0x64>)
 80046d4:	4a0d      	ldr	r2, [pc, #52]	@ (800470c <prvCheckForValidListAndQueue+0x5c>)
 80046d6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80046d8:	2200      	movs	r2, #0
 80046da:	210c      	movs	r1, #12
 80046dc:	200a      	movs	r0, #10
 80046de:	f7fe fa63 	bl	8002ba8 <xQueueGenericCreate>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4a07      	ldr	r2, [pc, #28]	@ (8004704 <prvCheckForValidListAndQueue+0x54>)
 80046e6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80046e8:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <prvCheckForValidListAndQueue+0x54>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <prvCheckForValidListAndQueue+0x54>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4908      	ldr	r1, [pc, #32]	@ (8004718 <prvCheckForValidListAndQueue+0x68>)
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fc4e 	bl	8002f98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80046fc:	f000 f9bc 	bl	8004a78 <vPortExitCritical>
    }
 8004700:	bf00      	nop
 8004702:	bd80      	pop	{r7, pc}
 8004704:	200002b8 	.word	0x200002b8
 8004708:	20000288 	.word	0x20000288
 800470c:	2000029c 	.word	0x2000029c
 8004710:	200002b0 	.word	0x200002b0
 8004714:	200002b4 	.word	0x200002b4
 8004718:	080070f4 	.word	0x080070f4

0800471c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3b04      	subs	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004734:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3b04      	subs	r3, #4
 800473a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b04      	subs	r3, #4
 800474a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800474c:	4a0c      	ldr	r2, [pc, #48]	@ (8004780 <pxPortInitialiseStack+0x64>)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b14      	subs	r3, #20
 8004756:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b04      	subs	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f06f 0202 	mvn.w	r2, #2
 800476a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3b20      	subs	r3, #32
 8004770:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004772:	68fb      	ldr	r3, [r7, #12]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	08004785 	.word	0x08004785

08004784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800478e:	4b13      	ldr	r3, [pc, #76]	@ (80047dc <prvTaskExitError+0x58>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d00b      	beq.n	80047b0 <prvTaskExitError+0x2c>
    __asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60fb      	str	r3, [r7, #12]
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <prvTaskExitError+0x28>
    __asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60bb      	str	r3, [r7, #8]
}
 80047c2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80047c4:	bf00      	nop
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0fc      	beq.n	80047c6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000018 	.word	0x20000018

080047e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80047e0:	4b07      	ldr	r3, [pc, #28]	@ (8004800 <pxCurrentTCBConst2>)
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6808      	ldr	r0, [r1, #0]
 80047e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	f380 8809 	msr	PSP, r0
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f380 8811 	msr	BASEPRI, r0
 80047fa:	4770      	bx	lr
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst2>:
 8004800:	20000184 	.word	0x20000184
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004808:	4808      	ldr	r0, [pc, #32]	@ (800482c <prvPortStartFirstTask+0x24>)
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	6800      	ldr	r0, [r0, #0]
 800480e:	f380 8808 	msr	MSP, r0
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f380 8814 	msr	CONTROL, r0
 800481a:	b662      	cpsie	i
 800481c:	b661      	cpsie	f
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	df00      	svc	0
 8004828:	bf00      	nop
 800482a:	0000      	.short	0x0000
 800482c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop

08004834 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08c      	sub	sp, #48	@ 0x30
 8004838:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800483a:	4b69      	ldr	r3, [pc, #420]	@ (80049e0 <xPortStartScheduler+0x1ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a69      	ldr	r2, [pc, #420]	@ (80049e4 <xPortStartScheduler+0x1b0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10b      	bne.n	800485c <xPortStartScheduler+0x28>
    __asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800485c:	4b60      	ldr	r3, [pc, #384]	@ (80049e0 <xPortStartScheduler+0x1ac>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a61      	ldr	r2, [pc, #388]	@ (80049e8 <xPortStartScheduler+0x1b4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10b      	bne.n	800487e <xPortStartScheduler+0x4a>
    __asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	623b      	str	r3, [r7, #32]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800487e:	4b5b      	ldr	r3, [pc, #364]	@ (80049ec <xPortStartScheduler+0x1b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	332c      	adds	r3, #44	@ 0x2c
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a59      	ldr	r2, [pc, #356]	@ (80049f0 <xPortStartScheduler+0x1bc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00b      	beq.n	80048a8 <xPortStartScheduler+0x74>
    __asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61fb      	str	r3, [r7, #28]
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80048a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048aa:	3338      	adds	r3, #56	@ 0x38
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a51      	ldr	r2, [pc, #324]	@ (80049f4 <xPortStartScheduler+0x1c0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <xPortStartScheduler+0x98>
    __asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	61bb      	str	r3, [r7, #24]
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048d0:	4b49      	ldr	r3, [pc, #292]	@ (80049f8 <xPortStartScheduler+0x1c4>)
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	22ff      	movs	r2, #255	@ 0xff
 80048e0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	4b41      	ldr	r3, [pc, #260]	@ (80049fc <xPortStartScheduler+0x1c8>)
 80048f6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80048f8:	4b40      	ldr	r3, [pc, #256]	@ (80049fc <xPortStartScheduler+0x1c8>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xPortStartScheduler+0xe4>
    __asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	617b      	str	r3, [r7, #20]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004922:	2b00      	cmp	r3, #0
 8004924:	d013      	beq.n	800494e <xPortStartScheduler+0x11a>
    __asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	613b      	str	r3, [r7, #16]
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	e7fd      	b.n	800493a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3301      	adds	r3, #1
 8004942:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004956:	2b80      	cmp	r3, #128	@ 0x80
 8004958:	d0f1      	beq.n	800493e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d103      	bne.n	8004968 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004960:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <xPortStartScheduler+0x1cc>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e004      	b.n	8004972 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f1c3 0307 	rsb	r3, r3, #7
 800496e:	4a24      	ldr	r2, [pc, #144]	@ (8004a00 <xPortStartScheduler+0x1cc>)
 8004970:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004972:	4b23      	ldr	r3, [pc, #140]	@ (8004a00 <xPortStartScheduler+0x1cc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	4a21      	ldr	r2, [pc, #132]	@ (8004a00 <xPortStartScheduler+0x1cc>)
 800497a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800497c:	4b20      	ldr	r3, [pc, #128]	@ (8004a00 <xPortStartScheduler+0x1cc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004984:	4a1e      	ldr	r2, [pc, #120]	@ (8004a00 <xPortStartScheduler+0x1cc>)
 8004986:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004990:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <xPortStartScheduler+0x1d0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <xPortStartScheduler+0x1d0>)
 8004996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800499a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <xPortStartScheduler+0x1d0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <xPortStartScheduler+0x1d0>)
 80049a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80049a8:	4b17      	ldr	r3, [pc, #92]	@ (8004a08 <xPortStartScheduler+0x1d4>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049ae:	f000 f8ed 	bl	8004b8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80049b2:	4b16      	ldr	r3, [pc, #88]	@ (8004a0c <xPortStartScheduler+0x1d8>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049b8:	f000 f90c 	bl	8004bd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <xPortStartScheduler+0x1dc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a13      	ldr	r2, [pc, #76]	@ (8004a10 <xPortStartScheduler+0x1dc>)
 80049c2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049c6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80049c8:	f7ff ff1e 	bl	8004808 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049cc:	f7ff f85c 	bl	8003a88 <vTaskSwitchContext>
    prvTaskExitError();
 80049d0:	f7ff fed8 	bl	8004784 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3730      	adds	r7, #48	@ 0x30
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	e000ed00 	.word	0xe000ed00
 80049e4:	410fc271 	.word	0x410fc271
 80049e8:	410fc270 	.word	0x410fc270
 80049ec:	e000ed08 	.word	0xe000ed08
 80049f0:	080047e1 	.word	0x080047e1
 80049f4:	08004ad1 	.word	0x08004ad1
 80049f8:	e000e400 	.word	0xe000e400
 80049fc:	200002c4 	.word	0x200002c4
 8004a00:	200002c8 	.word	0x200002c8
 8004a04:	e000ed20 	.word	0xe000ed20
 8004a08:	e000ed1c 	.word	0xe000ed1c
 8004a0c:	20000018 	.word	0x20000018
 8004a10:	e000ef34 	.word	0xe000ef34

08004a14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
    __asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	607b      	str	r3, [r7, #4]
}
 8004a2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004a2e:	4b10      	ldr	r3, [pc, #64]	@ (8004a70 <vPortEnterCritical+0x5c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3301      	adds	r3, #1
 8004a34:	4a0e      	ldr	r2, [pc, #56]	@ (8004a70 <vPortEnterCritical+0x5c>)
 8004a36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004a38:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <vPortEnterCritical+0x5c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d110      	bne.n	8004a62 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a40:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <vPortEnterCritical+0x60>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <vPortEnterCritical+0x4e>
    __asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	603b      	str	r3, [r7, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <vPortEnterCritical+0x4a>
    }
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000018 	.word	0x20000018
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ac8 <vPortExitCritical+0x50>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <vPortExitCritical+0x26>
    __asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	607b      	str	r3, [r7, #4]
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <vPortExitCritical+0x50>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	4a08      	ldr	r2, [pc, #32]	@ (8004ac8 <vPortExitCritical+0x50>)
 8004aa6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004aa8:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <vPortExitCritical+0x50>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <vPortExitCritical+0x44>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004aba:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20000018 	.word	0x20000018
 8004acc:	00000000 	.word	0x00000000

08004ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004ad0:	f3ef 8009 	mrs	r0, PSP
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4b15      	ldr	r3, [pc, #84]	@ (8004b30 <pxCurrentTCBConst>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f01e 0f10 	tst.w	lr, #16
 8004ae0:	bf08      	it	eq
 8004ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004af4:	f380 8811 	msr	BASEPRI, r0
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f7fe ffc2 	bl	8003a88 <vTaskSwitchContext>
 8004b04:	f04f 0000 	mov.w	r0, #0
 8004b08:	f380 8811 	msr	BASEPRI, r0
 8004b0c:	bc09      	pop	{r0, r3}
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6808      	ldr	r0, [r1, #0]
 8004b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b16:	f01e 0f10 	tst.w	lr, #16
 8004b1a:	bf08      	it	eq
 8004b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b20:	f380 8809 	msr	PSP, r0
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst>:
 8004b30:	20000184 	.word	0x20000184
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
    __asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	607b      	str	r3, [r7, #4]
}
 8004b50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004b52:	f001 f929 	bl	8005da8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b56:	f7fe fe75 	bl	8003844 <xTaskIncrementTick>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004b60:	f001 f980 	bl	8005e64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b64:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <SysTick_Handler+0x50>)
 8004b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e001      	b.n	8004b72 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8004b6e:	f001 f95d 	bl	8005e2c <SEGGER_SYSVIEW_RecordExitISR>
 8004b72:	2300      	movs	r3, #0
 8004b74:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f383 8811 	msr	BASEPRI, r3
}
 8004b7c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <vPortSetupTimerInterrupt+0x38>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <vPortSetupTimerInterrupt+0x3c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bcc <vPortSetupTimerInterrupt+0x40>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	4a09      	ldr	r2, [pc, #36]	@ (8004bd0 <vPortSetupTimerInterrupt+0x44>)
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bae:	4b04      	ldr	r3, [pc, #16]	@ (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010
 8004bc4:	e000e018 	.word	0xe000e018
 8004bc8:	20000008 	.word	0x20000008
 8004bcc:	10624dd3 	.word	0x10624dd3
 8004bd0:	e000e014 	.word	0xe000e014

08004bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004be4 <vPortEnableVFP+0x10>
 8004bd8:	6801      	ldr	r1, [r0, #0]
 8004bda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bde:	6001      	str	r1, [r0, #0]
 8004be0:	4770      	bx	lr
 8004be2:	0000      	.short	0x0000
 8004be4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop

08004bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004bf2:	f3ef 8305 	mrs	r3, IPSR
 8004bf6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b0f      	cmp	r3, #15
 8004bfc:	d915      	bls.n	8004c2a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bfe:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <vPortValidateInterruptPriority+0x74>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c08:	4b16      	ldr	r3, [pc, #88]	@ (8004c64 <vPortValidateInterruptPriority+0x78>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	7afa      	ldrb	r2, [r7, #11]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d20b      	bcs.n	8004c2a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	607b      	str	r3, [r7, #4]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c68 <vPortValidateInterruptPriority+0x7c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c32:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <vPortValidateInterruptPriority+0x80>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d90b      	bls.n	8004c52 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	603b      	str	r3, [r7, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vPortValidateInterruptPriority+0x62>
    }
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	e000e3f0 	.word	0xe000e3f0
 8004c64:	200002c4 	.word	0x200002c4
 8004c68:	e000ed0c 	.word	0xe000ed0c
 8004c6c:	200002c8 	.word	0x200002c8

08004c70 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d205      	bcs.n	8004ca0 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	e001      	b.n	8004ca4 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8004ca4:	f7fe fc86 	bl	80035b4 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8004ca8:	4b17      	ldr	r3, [pc, #92]	@ (8004d08 <pvPortMalloc+0x98>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004cb0:	4b16      	ldr	r3, [pc, #88]	@ (8004d0c <pvPortMalloc+0x9c>)
 8004cb2:	f023 0307 	bic.w	r3, r3, #7
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <pvPortMalloc+0x98>)
 8004cba:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01a      	beq.n	8004cf8 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004cc2:	4b13      	ldr	r3, [pc, #76]	@ (8004d10 <pvPortMalloc+0xa0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004cca:	4a12      	ldr	r2, [pc, #72]	@ (8004d14 <pvPortMalloc+0xa4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d813      	bhi.n	8004cf8 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d10 <pvPortMalloc+0xa0>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	441a      	add	r2, r3
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <pvPortMalloc+0xa0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d90b      	bls.n	8004cf8 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8004ce0:	4b09      	ldr	r3, [pc, #36]	@ (8004d08 <pvPortMalloc+0x98>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <pvPortMalloc+0xa0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8004cec:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <pvPortMalloc+0xa0>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4a06      	ldr	r2, [pc, #24]	@ (8004d10 <pvPortMalloc+0xa0>)
 8004cf6:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004cf8:	f7fe fc6a 	bl	80035d0 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20012ed0 	.word	0x20012ed0
 8004d0c:	200002d3 	.word	0x200002d3
 8004d10:	20012ecc 	.word	0x20012ecc
 8004d14:	00012bf7 	.word	0x00012bf7

08004d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <vPortFree+0x26>
    __asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60fb      	str	r3, [r7, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <vPortFree+0x22>
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d50:	4803      	ldr	r0, [pc, #12]	@ (8004d60 <_cbSendSystemDesc+0x14>)
 8004d52:	f000 ffd3 	bl	8005cfc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d56:	4803      	ldr	r0, [pc, #12]	@ (8004d64 <_cbSendSystemDesc+0x18>)
 8004d58:	f000 ffd0 	bl	8005cfc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d5c:	bf00      	nop
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	080070fc 	.word	0x080070fc
 8004d64:	08007128 	.word	0x08007128

08004d68 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <SEGGER_SYSVIEW_Conf+0x24>)
 8004d76:	4a06      	ldr	r2, [pc, #24]	@ (8004d90 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d78:	f000 fc46 	bl	8005608 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d7c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004d80:	f000 fc86 	bl	8005690 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d84:	bf00      	nop
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000008 	.word	0x20000008
 8004d8c:	08004d4d 	.word	0x08004d4d
 8004d90:	080071e4 	.word	0x080071e4

08004d94 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d9a:	4b26      	ldr	r3, [pc, #152]	@ (8004e34 <_DoInit+0xa0>)
 8004d9c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d9e:	22a8      	movs	r2, #168	@ 0xa8
 8004da0:	2100      	movs	r1, #0
 8004da2:	6838      	ldr	r0, [r7, #0]
 8004da4:	f001 fce8 	bl	8006778 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2203      	movs	r2, #3
 8004dac:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2203      	movs	r2, #3
 8004db2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	4a20      	ldr	r2, [pc, #128]	@ (8004e38 <_DoInit+0xa4>)
 8004db8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e3c <_DoInit+0xa8>)
 8004dbe:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dc6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	@ (8004e38 <_DoInit+0xa4>)
 8004dde:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4a17      	ldr	r2, [pc, #92]	@ (8004e40 <_DoInit+0xac>)
 8004de4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2210      	movs	r2, #16
 8004dea:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dfe:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	e00c      	b.n	8004e22 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1c3 030f 	rsb	r3, r3, #15
 8004e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e44 <_DoInit+0xb0>)
 8004e10:	5cd1      	ldrb	r1, [r2, r3]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4413      	add	r3, r2
 8004e18:	460a      	mov	r2, r1
 8004e1a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b0f      	cmp	r3, #15
 8004e26:	d9ef      	bls.n	8004e08 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e28:	f3bf 8f5f 	dmb	sy
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20012ed4 	.word	0x20012ed4
 8004e38:	08007138 	.word	0x08007138
 8004e3c:	20012f7c 	.word	0x20012f7c
 8004e40:	2001337c 	.word	0x2001337c
 8004e44:	080071c4 	.word	0x080071c4

08004e48 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	@ 0x30
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e54:	4b3e      	ldr	r3, [pc, #248]	@ (8004f50 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e56:	623b      	str	r3, [r7, #32]
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b53      	cmp	r3, #83	@ 0x53
 8004e60:	d001      	beq.n	8004e66 <SEGGER_RTT_ReadNoLock+0x1e>
 8004e62:	f7ff ff97 	bl	8004d94 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	3360      	adds	r3, #96	@ 0x60
 8004e72:	4a37      	ldr	r2, [pc, #220]	@ (8004f50 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e74:	4413      	add	r3, r2
 8004e76:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d92b      	bls.n	8004eec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bf28      	it	cs
 8004ea6:	4613      	movcs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	4413      	add	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	6939      	ldr	r1, [r7, #16]
 8004eb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004eba:	f001 fc91 	bl	80067e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ed6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4413      	add	r3, r2
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d101      	bne.n	8004eec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	bf28      	it	cs
 8004efc:	4613      	movcs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d019      	beq.n	8004f3a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0c:	4413      	add	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	6939      	ldr	r1, [r7, #16]
 8004f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f16:	f001 fc63 	bl	80067e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	4413      	add	r3, r2
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f44:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	@ 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20012ed4 	.word	0x20012ed4

08004f54 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f62:	4b3d      	ldr	r3, [pc, #244]	@ (8005058 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b53      	cmp	r3, #83	@ 0x53
 8004f6e:	d001      	beq.n	8004f74 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f70:	f7ff ff10 	bl	8004d94 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f74:	f3ef 8311 	mrs	r3, BASEPRI
 8004f78:	f04f 0120 	mov.w	r1, #32
 8004f7c:	f381 8811 	msr	BASEPRI, r1
 8004f80:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f82:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f84:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f8a:	6939      	ldr	r1, [r7, #16]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	4613      	mov	r3, r2
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	440b      	add	r3, r1
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	dbeb      	blt.n	8004f8a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004fb2:	e000      	b.n	8004fb6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004fb4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	da3f      	bge.n	8005040 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004fc0:	6939      	ldr	r1, [r7, #16]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004fd4:	6939      	ldr	r1, [r7, #16]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004fea:	6939      	ldr	r1, [r7, #16]
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3320      	adds	r3, #32
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004ffe:	6939      	ldr	r1, [r7, #16]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	440b      	add	r3, r1
 800500c:	3328      	adds	r3, #40	@ 0x28
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005012:	6939      	ldr	r1, [r7, #16]
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	4613      	mov	r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	3324      	adds	r3, #36	@ 0x24
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	440b      	add	r3, r1
 8005034:	332c      	adds	r3, #44	@ 0x2c
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800503a:	f3bf 8f5f 	dmb	sy
 800503e:	e002      	b.n	8005046 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005040:	f04f 33ff 	mov.w	r3, #4294967295
 8005044:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800504c:	69fb      	ldr	r3, [r7, #28]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20012ed4 	.word	0x20012ed4

0800505c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	@ 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b53      	cmp	r3, #83	@ 0x53
 8005076:	d001      	beq.n	800507c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005078:	f7ff fe8c 	bl	8004d94 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800507e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d82c      	bhi.n	80050e0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005086:	f3ef 8311 	mrs	r3, BASEPRI
 800508a:	f04f 0120 	mov.w	r1, #32
 800508e:	f381 8811 	msr	BASEPRI, r1
 8005092:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4613      	mov	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	3360      	adds	r3, #96	@ 0x60
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2200      	movs	r2, #0
 80050c8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ce:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050d0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050de:	e002      	b.n	80050e6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80050e0:	f04f 33ff 	mov.w	r3, #4294967295
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3728      	adds	r7, #40	@ 0x28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20012ed4 	.word	0x20012ed4

080050f4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	60fa      	str	r2, [r7, #12]
 800510a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b80      	cmp	r3, #128	@ 0x80
 8005110:	d90a      	bls.n	8005128 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005112:	2380      	movs	r3, #128	@ 0x80
 8005114:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005116:	e007      	b.n	8005128 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	1c53      	adds	r3, r2, #1
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	60f9      	str	r1, [r7, #12]
 8005124:	7812      	ldrb	r2, [r2, #0]
 8005126:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <_EncodeStr+0x46>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ee      	bne.n	8005118 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b2da      	uxtb	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005146:	68fb      	ldr	r3, [r7, #12]
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3307      	adds	r3, #7
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005172:	4b34      	ldr	r3, [pc, #208]	@ (8005244 <_HandleIncomingPacket+0xd8>)
 8005174:	7e1b      	ldrb	r3, [r3, #24]
 8005176:	4618      	mov	r0, r3
 8005178:	1cfb      	adds	r3, r7, #3
 800517a:	2201      	movs	r2, #1
 800517c:	4619      	mov	r1, r3
 800517e:	f7ff fe63 	bl	8004e48 <SEGGER_RTT_ReadNoLock>
 8005182:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d057      	beq.n	800523a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	2b80      	cmp	r3, #128	@ 0x80
 800518e:	d031      	beq.n	80051f4 <_HandleIncomingPacket+0x88>
 8005190:	2b80      	cmp	r3, #128	@ 0x80
 8005192:	dc40      	bgt.n	8005216 <_HandleIncomingPacket+0xaa>
 8005194:	2b07      	cmp	r3, #7
 8005196:	dc15      	bgt.n	80051c4 <_HandleIncomingPacket+0x58>
 8005198:	2b00      	cmp	r3, #0
 800519a:	dd3c      	ble.n	8005216 <_HandleIncomingPacket+0xaa>
 800519c:	3b01      	subs	r3, #1
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d839      	bhi.n	8005216 <_HandleIncomingPacket+0xaa>
 80051a2:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <_HandleIncomingPacket+0x3c>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051cb 	.word	0x080051cb
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051d7 	.word	0x080051d7
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051ef 	.word	0x080051ef
 80051c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051c6:	d033      	beq.n	8005230 <_HandleIncomingPacket+0xc4>
 80051c8:	e025      	b.n	8005216 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80051ca:	f000 fb25 	bl	8005818 <SEGGER_SYSVIEW_Start>
      break;
 80051ce:	e034      	b.n	800523a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80051d0:	f000 fbdc 	bl	800598c <SEGGER_SYSVIEW_Stop>
      break;
 80051d4:	e031      	b.n	800523a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80051d6:	f000 fdb5 	bl	8005d44 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80051da:	e02e      	b.n	800523a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80051dc:	f000 fd7a 	bl	8005cd4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80051e0:	e02b      	b.n	800523a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80051e2:	f000 fbf9 	bl	80059d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80051e6:	e028      	b.n	800523a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80051e8:	f001 f8e6 	bl	80063b8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80051ec:	e025      	b.n	800523a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80051ee:	f001 f8c5 	bl	800637c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80051f2:	e022      	b.n	800523a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051f4:	4b13      	ldr	r3, [pc, #76]	@ (8005244 <_HandleIncomingPacket+0xd8>)
 80051f6:	7e1b      	ldrb	r3, [r3, #24]
 80051f8:	4618      	mov	r0, r3
 80051fa:	1cfb      	adds	r3, r7, #3
 80051fc:	2201      	movs	r2, #1
 80051fe:	4619      	mov	r1, r3
 8005200:	f7ff fe22 	bl	8004e48 <SEGGER_RTT_ReadNoLock>
 8005204:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	4618      	mov	r0, r3
 8005210:	f001 f82a 	bl	8006268 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005214:	e00e      	b.n	8005234 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	b25b      	sxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	da0c      	bge.n	8005238 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800521e:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <_HandleIncomingPacket+0xd8>)
 8005220:	7e1b      	ldrb	r3, [r3, #24]
 8005222:	4618      	mov	r0, r3
 8005224:	1cfb      	adds	r3, r7, #3
 8005226:	2201      	movs	r2, #1
 8005228:	4619      	mov	r1, r3
 800522a:	f7ff fe0d 	bl	8004e48 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800522e:	e003      	b.n	8005238 <_HandleIncomingPacket+0xcc>
      break;
 8005230:	bf00      	nop
 8005232:	e002      	b.n	800523a <_HandleIncomingPacket+0xce>
      break;
 8005234:	bf00      	nop
 8005236:	e000      	b.n	800523a <_HandleIncomingPacket+0xce>
      break;
 8005238:	bf00      	nop
    }
  }
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20019794 	.word	0x20019794

08005248 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b08c      	sub	sp, #48	@ 0x30
 800524c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800524e:	2301      	movs	r3, #1
 8005250:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	3301      	adds	r3, #1
 8005256:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800525c:	4b31      	ldr	r3, [pc, #196]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	e00b      	b.n	800527c <_TrySendOverflowPacket+0x34>
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	b2da      	uxtb	r2, r3
 8005268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526a:	1c59      	adds	r1, r3, #1
 800526c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800526e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	09db      	lsrs	r3, r3, #7
 800527a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005280:	d8f0      	bhi.n	8005264 <_TrySendOverflowPacket+0x1c>
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005292:	4b25      	ldr	r3, [pc, #148]	@ (8005328 <_TrySendOverflowPacket+0xe0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005298:	4b22      	ldr	r3, [pc, #136]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	e00b      	b.n	80052c4 <_TrySendOverflowPacket+0x7c>
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	1c59      	adds	r1, r3, #1
 80052b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80052b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	09db      	lsrs	r3, r3, #7
 80052c2:	623b      	str	r3, [r7, #32]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80052c8:	d8f0      	bhi.n	80052ac <_TrySendOverflowPacket+0x64>
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80052da:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	4618      	mov	r0, r3
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	f7fa ff70 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052f0:	4603      	mov	r3, r0
 80052f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005300:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	3b01      	subs	r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e004      	b.n	8005318 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800530e:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	3301      	adds	r3, #1
 8005314:	4a03      	ldr	r2, [pc, #12]	@ (8005324 <_TrySendOverflowPacket+0xdc>)
 8005316:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005318:	693b      	ldr	r3, [r7, #16]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3730      	adds	r7, #48	@ 0x30
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20019794 	.word	0x20019794
 8005328:	e0001004 	.word	0xe0001004

0800532c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	@ 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005338:	4b98      	ldr	r3, [pc, #608]	@ (800559c <_SendPacket+0x270>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d010      	beq.n	8005362 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005340:	4b96      	ldr	r3, [pc, #600]	@ (800559c <_SendPacket+0x270>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 812d 	beq.w	80055a4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800534a:	4b94      	ldr	r3, [pc, #592]	@ (800559c <_SendPacket+0x270>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d109      	bne.n	8005366 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005352:	f7ff ff79 	bl	8005248 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005356:	4b91      	ldr	r3, [pc, #580]	@ (800559c <_SendPacket+0x270>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b01      	cmp	r3, #1
 800535c:	f040 8124 	bne.w	80055a8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005360:	e001      	b.n	8005366 <_SendPacket+0x3a>
    goto Send;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <_SendPacket+0x3c>
Send:
 8005366:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b1f      	cmp	r3, #31
 800536c:	d809      	bhi.n	8005382 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800536e:	4b8b      	ldr	r3, [pc, #556]	@ (800559c <_SendPacket+0x270>)
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	f040 8115 	bne.w	80055ac <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b17      	cmp	r3, #23
 8005386:	d807      	bhi.n	8005398 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3b01      	subs	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e0c4      	b.n	8005522 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80053a4:	d912      	bls.n	80053cc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	09da      	lsrs	r2, r3, #7
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	3a01      	subs	r2, #1
 80053be:	60fa      	str	r2, [r7, #12]
 80053c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e006      	b.n	80053da <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80053de:	d807      	bhi.n	80053f0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e098      	b.n	8005522 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053f6:	d212      	bcs.n	800541e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	09da      	lsrs	r2, r3, #7
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3b01      	subs	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	3a01      	subs	r2, #1
 8005410:	60fa      	str	r2, [r7, #12]
 8005412:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005416:	b2da      	uxtb	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e081      	b.n	8005522 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005424:	d21d      	bcs.n	8005462 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0b9a      	lsrs	r2, r3, #14
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b01      	subs	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	09db      	lsrs	r3, r3, #7
 800543a:	b2db      	uxtb	r3, r3
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	3a01      	subs	r2, #1
 8005440:	60fa      	str	r2, [r7, #12]
 8005442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	3a01      	subs	r2, #1
 8005454:	60fa      	str	r2, [r7, #12]
 8005456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e05f      	b.n	8005522 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005468:	d228      	bcs.n	80054bc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0d5a      	lsrs	r2, r3, #21
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3b01      	subs	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	0b9b      	lsrs	r3, r3, #14
 800547e:	b2db      	uxtb	r3, r3
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	3a01      	subs	r2, #1
 8005484:	60fa      	str	r2, [r7, #12]
 8005486:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	b2db      	uxtb	r3, r3
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	3a01      	subs	r2, #1
 800549a:	60fa      	str	r2, [r7, #12]
 800549c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	3a01      	subs	r2, #1
 80054ae:	60fa      	str	r2, [r7, #12]
 80054b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e032      	b.n	8005522 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	0f1a      	lsrs	r2, r3, #28
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0d5b      	lsrs	r3, r3, #21
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	3a01      	subs	r2, #1
 80054d6:	60fa      	str	r2, [r7, #12]
 80054d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0b9b      	lsrs	r3, r3, #14
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	3a01      	subs	r2, #1
 80054ec:	60fa      	str	r2, [r7, #12]
 80054ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	3a01      	subs	r2, #1
 8005502:	60fa      	str	r2, [r7, #12]
 8005504:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	3a01      	subs	r2, #1
 8005516:	60fa      	str	r2, [r7, #12]
 8005518:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005522:	4b1f      	ldr	r3, [pc, #124]	@ (80055a0 <_SendPacket+0x274>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005528:	4b1c      	ldr	r3, [pc, #112]	@ (800559c <_SendPacket+0x270>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	e00b      	b.n	8005554 <_SendPacket+0x228>
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	6279      	str	r1, [r7, #36]	@ 0x24
 8005546:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	09db      	lsrs	r3, r3, #7
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b7f      	cmp	r3, #127	@ 0x7f
 8005558:	d8f0      	bhi.n	800553c <_SendPacket+0x210>
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <_SendPacket+0x270>)
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	4618      	mov	r0, r3
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	461a      	mov	r2, r3
 8005578:	68f9      	ldr	r1, [r7, #12]
 800557a:	f7fa fe29 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800557e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005586:	4a05      	ldr	r2, [pc, #20]	@ (800559c <_SendPacket+0x270>)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	60d3      	str	r3, [r2, #12]
 800558c:	e00f      	b.n	80055ae <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800558e:	4b03      	ldr	r3, [pc, #12]	@ (800559c <_SendPacket+0x270>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4b01      	ldr	r3, [pc, #4]	@ (800559c <_SendPacket+0x270>)
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e008      	b.n	80055ae <_SendPacket+0x282>
 800559c:	20019794 	.word	0x20019794
 80055a0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <_SendPacket+0x282>
      goto SendDone;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <_SendPacket+0x282>
      goto SendDone;
 80055ac:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055ae:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <_SendPacket+0x2d4>)
 80055b0:	7e1b      	ldrb	r3, [r3, #24]
 80055b2:	4619      	mov	r1, r3
 80055b4:	4a13      	ldr	r2, [pc, #76]	@ (8005604 <_SendPacket+0x2d8>)
 80055b6:	460b      	mov	r3, r1
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	440b      	add	r3, r1
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	336c      	adds	r3, #108	@ 0x6c
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005600 <_SendPacket+0x2d4>)
 80055c6:	7e1b      	ldrb	r3, [r3, #24]
 80055c8:	4618      	mov	r0, r3
 80055ca:	490e      	ldr	r1, [pc, #56]	@ (8005604 <_SendPacket+0x2d8>)
 80055cc:	4603      	mov	r3, r0
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4403      	add	r3, r0
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	440b      	add	r3, r1
 80055d6:	3370      	adds	r3, #112	@ 0x70
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d00b      	beq.n	80055f6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055de:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <_SendPacket+0x2d4>)
 80055e0:	789b      	ldrb	r3, [r3, #2]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <_SendPacket+0x2d4>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055ec:	f7ff fdbe 	bl	800516c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055f0:	4b03      	ldr	r3, [pc, #12]	@ (8005600 <_SendPacket+0x2d4>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055f6:	bf00      	nop
 80055f8:	3728      	adds	r7, #40	@ 0x28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20019794 	.word	0x20019794
 8005604:	20012ed4 	.word	0x20012ed4

08005608 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005616:	2300      	movs	r3, #0
 8005618:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800561c:	4917      	ldr	r1, [pc, #92]	@ (800567c <SEGGER_SYSVIEW_Init+0x74>)
 800561e:	4818      	ldr	r0, [pc, #96]	@ (8005680 <SEGGER_SYSVIEW_Init+0x78>)
 8005620:	f7ff fc98 	bl	8004f54 <SEGGER_RTT_AllocUpBuffer>
 8005624:	4603      	mov	r3, r0
 8005626:	b2da      	uxtb	r2, r3
 8005628:	4b16      	ldr	r3, [pc, #88]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 800562a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800562c:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 800562e:	785a      	ldrb	r2, [r3, #1]
 8005630:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 8005632:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005634:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 8005636:	7e1b      	ldrb	r3, [r3, #24]
 8005638:	4618      	mov	r0, r3
 800563a:	2300      	movs	r3, #0
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	2308      	movs	r3, #8
 8005640:	4a11      	ldr	r2, [pc, #68]	@ (8005688 <SEGGER_SYSVIEW_Init+0x80>)
 8005642:	490f      	ldr	r1, [pc, #60]	@ (8005680 <SEGGER_SYSVIEW_Init+0x78>)
 8005644:	f7ff fd0a 	bl	800505c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005648:	4b0e      	ldr	r3, [pc, #56]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800564e:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <SEGGER_SYSVIEW_Init+0x84>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a0c      	ldr	r2, [pc, #48]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 8005654:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005656:	4a0b      	ldr	r2, [pc, #44]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800565c:	4a09      	ldr	r2, [pc, #36]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005662:	4a08      	ldr	r2, [pc, #32]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005668:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800566e:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <SEGGER_SYSVIEW_Init+0x7c>)
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2001338c 	.word	0x2001338c
 8005680:	0800714c 	.word	0x0800714c
 8005684:	20019794 	.word	0x20019794
 8005688:	2001978c 	.word	0x2001978c
 800568c:	e0001004 	.word	0xe0001004

08005690 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005698:	4a04      	ldr	r2, [pc, #16]	@ (80056ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6113      	str	r3, [r2, #16]
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20019794 	.word	0x20019794

080056b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056b8:	f3ef 8311 	mrs	r3, BASEPRI
 80056bc:	f04f 0120 	mov.w	r1, #32
 80056c0:	f381 8811 	msr	BASEPRI, r1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	4808      	ldr	r0, [pc, #32]	@ (80056e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80056c8:	f7ff fd44 	bl	8005154 <_PreparePacket>
 80056cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68b8      	ldr	r0, [r7, #8]
 80056d4:	f7ff fe2a 	bl	800532c <_SendPacket>
  RECORD_END();
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f383 8811 	msr	BASEPRI, r3
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200197c4 	.word	0x200197c4

080056ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056f6:	f3ef 8311 	mrs	r3, BASEPRI
 80056fa:	f04f 0120 	mov.w	r1, #32
 80056fe:	f381 8811 	msr	BASEPRI, r1
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	4816      	ldr	r0, [pc, #88]	@ (8005760 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005706:	f7ff fd25 	bl	8005154 <_PreparePacket>
 800570a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e00b      	b.n	8005732 <SEGGER_SYSVIEW_RecordU32+0x46>
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	61f9      	str	r1, [r7, #28]
 8005724:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	09db      	lsrs	r3, r3, #7
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b7f      	cmp	r3, #127	@ 0x7f
 8005736:	d8f0      	bhi.n	800571a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	61fa      	str	r2, [r7, #28]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	6938      	ldr	r0, [r7, #16]
 800574e:	f7ff fded 	bl	800532c <_SendPacket>
  RECORD_END();
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f383 8811 	msr	BASEPRI, r3
}
 8005758:	bf00      	nop
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200197c4 	.word	0x200197c4

08005764 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	@ 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005770:	f3ef 8311 	mrs	r3, BASEPRI
 8005774:	f04f 0120 	mov.w	r1, #32
 8005778:	f381 8811 	msr	BASEPRI, r1
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	4825      	ldr	r0, [pc, #148]	@ (8005814 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005780:	f7ff fce8 	bl	8005154 <_PreparePacket>
 8005784:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005792:	e00b      	b.n	80057ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	b2da      	uxtb	r2, r3
 8005798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800579e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a8:	09db      	lsrs	r3, r3, #7
 80057aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b0:	d8f0      	bhi.n	8005794 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80057b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	e00b      	b.n	80057e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80057d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	09db      	lsrs	r3, r3, #7
 80057e2:	623b      	str	r3, [r7, #32]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80057e8:	d8f0      	bhi.n	80057cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	69b8      	ldr	r0, [r7, #24]
 8005800:	f7ff fd94 	bl	800532c <_SendPacket>
  RECORD_END();
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f383 8811 	msr	BASEPRI, r3
}
 800580a:	bf00      	nop
 800580c:	3730      	adds	r7, #48	@ 0x30
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	200197c4 	.word	0x200197c4

08005818 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	@ 0x30
 800581c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800581e:	4b58      	ldr	r3, [pc, #352]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 8005820:	2201      	movs	r2, #1
 8005822:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005824:	f3ef 8311 	mrs	r3, BASEPRI
 8005828:	f04f 0120 	mov.w	r1, #32
 800582c:	f381 8811 	msr	BASEPRI, r1
 8005830:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005832:	4b53      	ldr	r3, [pc, #332]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	220a      	movs	r2, #10
 8005838:	4952      	ldr	r1, [pc, #328]	@ (8005984 <SEGGER_SYSVIEW_Start+0x16c>)
 800583a:	4618      	mov	r0, r3
 800583c:	f7fa fcc8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005846:	200a      	movs	r0, #10
 8005848:	f7ff ff32 	bl	80056b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800584c:	f3ef 8311 	mrs	r3, BASEPRI
 8005850:	f04f 0120 	mov.w	r1, #32
 8005854:	f381 8811 	msr	BASEPRI, r1
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	484b      	ldr	r0, [pc, #300]	@ (8005988 <SEGGER_SYSVIEW_Start+0x170>)
 800585c:	f7ff fc7a 	bl	8005154 <_PreparePacket>
 8005860:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	4b45      	ldr	r3, [pc, #276]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005870:	e00b      	b.n	800588a <SEGGER_SYSVIEW_Start+0x72>
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800587c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	2b7f      	cmp	r3, #127	@ 0x7f
 800588e:	d8f0      	bhi.n	8005872 <SEGGER_SYSVIEW_Start+0x5a>
 8005890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a4:	4b36      	ldr	r3, [pc, #216]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	e00b      	b.n	80058c4 <SEGGER_SYSVIEW_Start+0xac>
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80058b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	09db      	lsrs	r3, r3, #7
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80058c8:	d8f0      	bhi.n	80058ac <SEGGER_SYSVIEW_Start+0x94>
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	4b28      	ldr	r3, [pc, #160]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e00b      	b.n	80058fe <SEGGER_SYSVIEW_Start+0xe6>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	61f9      	str	r1, [r7, #28]
 80058f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	09db      	lsrs	r3, r3, #7
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b7f      	cmp	r3, #127	@ 0x7f
 8005902:	d8f0      	bhi.n	80058e6 <SEGGER_SYSVIEW_Start+0xce>
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	61fa      	str	r2, [r7, #28]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	e00b      	b.n	8005936 <SEGGER_SYSVIEW_Start+0x11e>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	6179      	str	r1, [r7, #20]
 8005928:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	09db      	lsrs	r3, r3, #7
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b7f      	cmp	r3, #127	@ 0x7f
 800593a:	d8f0      	bhi.n	800591e <SEGGER_SYSVIEW_Start+0x106>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	617a      	str	r2, [r7, #20]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800594c:	2218      	movs	r2, #24
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fceb 	bl	800532c <_SendPacket>
      RECORD_END();
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800595c:	4b08      	ldr	r3, [pc, #32]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800596a:	f000 f9eb 	bl	8005d44 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800596e:	f000 f9b1 	bl	8005cd4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005972:	f000 fd21 	bl	80063b8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005976:	bf00      	nop
 8005978:	3730      	adds	r7, #48	@ 0x30
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20019794 	.word	0x20019794
 8005984:	080071d8 	.word	0x080071d8
 8005988:	200197c4 	.word	0x200197c4

0800598c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005992:	f3ef 8311 	mrs	r3, BASEPRI
 8005996:	f04f 0120 	mov.w	r1, #32
 800599a:	f381 8811 	msr	BASEPRI, r1
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	480b      	ldr	r0, [pc, #44]	@ (80059d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80059a2:	f7ff fbd7 	bl	8005154 <_PreparePacket>
 80059a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80059a8:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80059b0:	220b      	movs	r2, #11
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6838      	ldr	r0, [r7, #0]
 80059b6:	f7ff fcb9 	bl	800532c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80059ba:	4b06      	ldr	r3, [pc, #24]	@ (80059d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f383 8811 	msr	BASEPRI, r3
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200197c4 	.word	0x200197c4
 80059d4:	20019794 	.word	0x20019794

080059d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	@ 0x30
 80059dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059de:	f3ef 8311 	mrs	r3, BASEPRI
 80059e2:	f04f 0120 	mov.w	r1, #32
 80059e6:	f381 8811 	msr	BASEPRI, r1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	4845      	ldr	r0, [pc, #276]	@ (8005b04 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80059ee:	f7ff fbb1 	bl	8005154 <_PreparePacket>
 80059f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059fc:	4b42      	ldr	r3, [pc, #264]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a02:	e00b      	b.n	8005a1c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	1c59      	adds	r1, r3, #1
 8005a0c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	09db      	lsrs	r3, r3, #7
 8005a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a20:	d8f0      	bhi.n	8005a04 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a36:	4b34      	ldr	r3, [pc, #208]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	e00b      	b.n	8005a56 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	1c59      	adds	r1, r3, #1
 8005a46:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	623b      	str	r3, [r7, #32]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a5a:	d8f0      	bhi.n	8005a3e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	4b25      	ldr	r3, [pc, #148]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	e00b      	b.n	8005a90 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	61f9      	str	r1, [r7, #28]
 8005a82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	09db      	lsrs	r3, r3, #7
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a94:	d8f0      	bhi.n	8005a78 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	61fa      	str	r2, [r7, #28]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e00b      	b.n	8005ac8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	6179      	str	r1, [r7, #20]
 8005aba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	09db      	lsrs	r3, r3, #7
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005acc:	d8f0      	bhi.n	8005ab0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	617a      	str	r2, [r7, #20]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ade:	2218      	movs	r2, #24
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f7ff fc22 	bl	800532c <_SendPacket>
  RECORD_END();
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005af6:	4b04      	ldr	r3, [pc, #16]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	4798      	blx	r3
  }
}
 8005afc:	bf00      	nop
 8005afe:	3730      	adds	r7, #48	@ 0x30
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	200197c4 	.word	0x200197c4
 8005b08:	20019794 	.word	0x20019794

08005b0c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b092      	sub	sp, #72	@ 0x48
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005b14:	f3ef 8311 	mrs	r3, BASEPRI
 8005b18:	f04f 0120 	mov.w	r1, #32
 8005b1c:	f381 8811 	msr	BASEPRI, r1
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	486a      	ldr	r0, [pc, #424]	@ (8005ccc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b24:	f7ff fb16 	bl	8005154 <_PreparePacket>
 8005b28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b66      	ldr	r3, [pc, #408]	@ (8005cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b3e:	e00b      	b.n	8005b58 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b46:	1c59      	adds	r1, r3, #1
 8005b48:	6479      	str	r1, [r7, #68]	@ 0x44
 8005b4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b54:	09db      	lsrs	r3, r3, #7
 8005b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b5c:	d8f0      	bhi.n	8005b40 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b78:	e00b      	b.n	8005b92 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005b84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b96:	d8f0      	bhi.n	8005b7a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fa9f 	bl	80050f4 <_EncodeStr>
 8005bb6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005bb8:	2209      	movs	r2, #9
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	6938      	ldr	r0, [r7, #16]
 8005bbe:	f7ff fbb5 	bl	800532c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b40      	ldr	r3, [pc, #256]	@ (8005cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bd6:	e00b      	b.n	8005bf0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	6379      	str	r1, [r7, #52]	@ 0x34
 8005be2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	09db      	lsrs	r3, r3, #7
 8005bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf4:	d8f0      	bhi.n	8005bd8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	637a      	str	r2, [r7, #52]	@ 0x34
 8005bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c10:	e00b      	b.n	8005c2a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	09db      	lsrs	r3, r3, #7
 8005c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c2e:	d8f0      	bhi.n	8005c12 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	e00b      	b.n	8005c64 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	09db      	lsrs	r3, r3, #7
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c68:	d8f0      	bhi.n	8005c4c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	61f9      	str	r1, [r7, #28]
 8005c8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	61fa      	str	r2, [r7, #28]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005cb2:	2215      	movs	r2, #21
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	6938      	ldr	r0, [r7, #16]
 8005cb8:	f7ff fb38 	bl	800532c <_SendPacket>
  RECORD_END();
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f383 8811 	msr	BASEPRI, r3
}
 8005cc2:	bf00      	nop
 8005cc4:	3748      	adds	r7, #72	@ 0x48
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200197c4 	.word	0x200197c4
 8005cd0:	20019794 	.word	0x20019794

08005cd4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005cd8:	4b07      	ldr	r3, [pc, #28]	@ (8005cf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ce0:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005cea:	4b03      	ldr	r3, [pc, #12]	@ (8005cf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4798      	blx	r3
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20019794 	.word	0x20019794

08005cfc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d04:	f3ef 8311 	mrs	r3, BASEPRI
 8005d08:	f04f 0120 	mov.w	r1, #32
 8005d0c:	f381 8811 	msr	BASEPRI, r1
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	480b      	ldr	r0, [pc, #44]	@ (8005d40 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005d14:	f7ff fa1e 	bl	8005154 <_PreparePacket>
 8005d18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d1a:	2280      	movs	r2, #128	@ 0x80
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	6938      	ldr	r0, [r7, #16]
 8005d20:	f7ff f9e8 	bl	80050f4 <_EncodeStr>
 8005d24:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005d26:	220e      	movs	r2, #14
 8005d28:	68f9      	ldr	r1, [r7, #12]
 8005d2a:	6938      	ldr	r0, [r7, #16]
 8005d2c:	f7ff fafe 	bl	800532c <_SendPacket>
  RECORD_END();
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f383 8811 	msr	BASEPRI, r3
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	200197c4 	.word	0x200197c4

08005d44 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d4a:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01a      	beq.n	8005d88 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d52:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d015      	beq.n	8005d88 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d5c:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4798      	blx	r3
 8005d64:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d68:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	000a      	movs	r2, r1
 8005d78:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4621      	mov	r1, r4
 8005d80:	200d      	movs	r0, #13
 8005d82:	f7ff fcef 	bl	8005764 <SEGGER_SYSVIEW_RecordU32x2>
 8005d86:	e006      	b.n	8005d96 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d88:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	200c      	movs	r0, #12
 8005d90:	f7ff fcac 	bl	80056ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20019794 	.word	0x20019794
 8005da4:	e0001004 	.word	0xe0001004

08005da8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dae:	f3ef 8311 	mrs	r3, BASEPRI
 8005db2:	f04f 0120 	mov.w	r1, #32
 8005db6:	f381 8811 	msr	BASEPRI, r1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	4819      	ldr	r0, [pc, #100]	@ (8005e24 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005dbe:	f7ff f9c9 	bl	8005154 <_PreparePacket>
 8005dc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005dc8:	4b17      	ldr	r3, [pc, #92]	@ (8005e28 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	e00b      	b.n	8005df4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	6179      	str	r1, [r7, #20]
 8005de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	617a      	str	r2, [r7, #20]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	68b8      	ldr	r0, [r7, #8]
 8005e10:	f7ff fa8c 	bl	800532c <_SendPacket>
  RECORD_END();
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f383 8811 	msr	BASEPRI, r3
}
 8005e1a:	bf00      	nop
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200197c4 	.word	0x200197c4
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e32:	f3ef 8311 	mrs	r3, BASEPRI
 8005e36:	f04f 0120 	mov.w	r1, #32
 8005e3a:	f381 8811 	msr	BASEPRI, r1
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	4807      	ldr	r0, [pc, #28]	@ (8005e60 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e42:	f7ff f987 	bl	8005154 <_PreparePacket>
 8005e46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e48:	2203      	movs	r2, #3
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f7ff fa6d 	bl	800532c <_SendPacket>
  RECORD_END();
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f383 8811 	msr	BASEPRI, r3
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200197c4 	.word	0x200197c4

08005e64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6e:	f04f 0120 	mov.w	r1, #32
 8005e72:	f381 8811 	msr	BASEPRI, r1
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	4807      	ldr	r0, [pc, #28]	@ (8005e98 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e7a:	f7ff f96b 	bl	8005154 <_PreparePacket>
 8005e7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e80:	2212      	movs	r2, #18
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6838      	ldr	r0, [r7, #0]
 8005e86:	f7ff fa51 	bl	800532c <_SendPacket>
  RECORD_END();
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f383 8811 	msr	BASEPRI, r3
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200197c4 	.word	0x200197c4

08005e9c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea8:	f04f 0120 	mov.w	r1, #32
 8005eac:	f381 8811 	msr	BASEPRI, r1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	4817      	ldr	r0, [pc, #92]	@ (8005f10 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005eb4:	f7ff f94e 	bl	8005154 <_PreparePacket>
 8005eb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	e00b      	b.n	8005ee0 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	61f9      	str	r1, [r7, #28]
 8005ed2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	09db      	lsrs	r3, r3, #7
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ee4:	d8f0      	bhi.n	8005ec8 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	61fa      	str	r2, [r7, #28]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005ef6:	221c      	movs	r2, #28
 8005ef8:	68f9      	ldr	r1, [r7, #12]
 8005efa:	6938      	ldr	r0, [r7, #16]
 8005efc:	f7ff fa16 	bl	800532c <_SendPacket>
  RECORD_END();
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f383 8811 	msr	BASEPRI, r3
}
 8005f06:	bf00      	nop
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200197c4 	.word	0x200197c4

08005f14 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f22:	f04f 0120 	mov.w	r1, #32
 8005f26:	f381 8811 	msr	BASEPRI, r1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	4824      	ldr	r0, [pc, #144]	@ (8005fc0 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005f2e:	f7ff f911 	bl	8005154 <_PreparePacket>
 8005f32:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	623b      	str	r3, [r7, #32]
 8005f40:	e00b      	b.n	8005f5a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	1c59      	adds	r1, r3, #1
 8005f4a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	09db      	lsrs	r3, r3, #7
 8005f58:	623b      	str	r3, [r7, #32]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f5e:	d8f0      	bhi.n	8005f42 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f66:	6a3a      	ldr	r2, [r7, #32]
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e00b      	b.n	8005f92 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	1c59      	adds	r1, r3, #1
 8005f82:	61f9      	str	r1, [r7, #28]
 8005f84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	09db      	lsrs	r3, r3, #7
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f96:	d8f0      	bhi.n	8005f7a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	61fa      	str	r2, [r7, #28]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005fa8:	221c      	movs	r2, #28
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	6938      	ldr	r0, [r7, #16]
 8005fae:	f7ff f9bd 	bl	800532c <_SendPacket>
  RECORD_END();
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f383 8811 	msr	BASEPRI, r3
}
 8005fb8:	bf00      	nop
 8005fba:	3728      	adds	r7, #40	@ 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	200197c4 	.word	0x200197c4

08005fc4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fca:	f3ef 8311 	mrs	r3, BASEPRI
 8005fce:	f04f 0120 	mov.w	r1, #32
 8005fd2:	f381 8811 	msr	BASEPRI, r1
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	4807      	ldr	r0, [pc, #28]	@ (8005ff8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005fda:	f7ff f8bb 	bl	8005154 <_PreparePacket>
 8005fde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005fe0:	2211      	movs	r2, #17
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6838      	ldr	r0, [r7, #0]
 8005fe6:	f7ff f9a1 	bl	800532c <_SendPacket>
  RECORD_END();
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f383 8811 	msr	BASEPRI, r3
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200197c4 	.word	0x200197c4

08005ffc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006004:	f3ef 8311 	mrs	r3, BASEPRI
 8006008:	f04f 0120 	mov.w	r1, #32
 800600c:	f381 8811 	msr	BASEPRI, r1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	4819      	ldr	r0, [pc, #100]	@ (8006078 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006014:	f7ff f89e 	bl	8005154 <_PreparePacket>
 8006018:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800601e:	4b17      	ldr	r3, [pc, #92]	@ (800607c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	e00b      	b.n	800604a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	1c59      	adds	r1, r3, #1
 800603a:	61f9      	str	r1, [r7, #28]
 800603c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	09db      	lsrs	r3, r3, #7
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b7f      	cmp	r3, #127	@ 0x7f
 800604e:	d8f0      	bhi.n	8006032 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006060:	2208      	movs	r2, #8
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	6938      	ldr	r0, [r7, #16]
 8006066:	f7ff f961 	bl	800532c <_SendPacket>
  RECORD_END();
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f383 8811 	msr	BASEPRI, r3
}
 8006070:	bf00      	nop
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	200197c4 	.word	0x200197c4
 800607c:	20019794 	.word	0x20019794

08006080 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006088:	f3ef 8311 	mrs	r3, BASEPRI
 800608c:	f04f 0120 	mov.w	r1, #32
 8006090:	f381 8811 	msr	BASEPRI, r1
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	4819      	ldr	r0, [pc, #100]	@ (80060fc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006098:	f7ff f85c 	bl	8005154 <_PreparePacket>
 800609c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060a2:	4b17      	ldr	r3, [pc, #92]	@ (8006100 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	e00b      	b.n	80060ce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	1c59      	adds	r1, r3, #1
 80060be:	61f9      	str	r1, [r7, #28]
 80060c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	09db      	lsrs	r3, r3, #7
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060d2:	d8f0      	bhi.n	80060b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	61fa      	str	r2, [r7, #28]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80060e4:	2204      	movs	r2, #4
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	6938      	ldr	r0, [r7, #16]
 80060ea:	f7ff f91f 	bl	800532c <_SendPacket>
  RECORD_END();
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f383 8811 	msr	BASEPRI, r3
}
 80060f4:	bf00      	nop
 80060f6:	3720      	adds	r7, #32
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200197c4 	.word	0x200197c4
 8006100:	20019794 	.word	0x20019794

08006104 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800610c:	f3ef 8311 	mrs	r3, BASEPRI
 8006110:	f04f 0120 	mov.w	r1, #32
 8006114:	f381 8811 	msr	BASEPRI, r1
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	4819      	ldr	r0, [pc, #100]	@ (8006180 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800611c:	f7ff f81a 	bl	8005154 <_PreparePacket>
 8006120:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006126:	4b17      	ldr	r3, [pc, #92]	@ (8006184 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	e00b      	b.n	8006152 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	1c59      	adds	r1, r3, #1
 8006142:	61f9      	str	r1, [r7, #28]
 8006144:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	09db      	lsrs	r3, r3, #7
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b7f      	cmp	r3, #127	@ 0x7f
 8006156:	d8f0      	bhi.n	800613a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	61fa      	str	r2, [r7, #28]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006168:	2206      	movs	r2, #6
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	6938      	ldr	r0, [r7, #16]
 800616e:	f7ff f8dd 	bl	800532c <_SendPacket>
  RECORD_END();
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f383 8811 	msr	BASEPRI, r3
}
 8006178:	bf00      	nop
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	200197c4 	.word	0x200197c4
 8006184:	20019794 	.word	0x20019794

08006188 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	@ 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006192:	f3ef 8311 	mrs	r3, BASEPRI
 8006196:	f04f 0120 	mov.w	r1, #32
 800619a:	f381 8811 	msr	BASEPRI, r1
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	4827      	ldr	r0, [pc, #156]	@ (8006240 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80061a2:	f7fe ffd7 	bl	8005154 <_PreparePacket>
 80061a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061ac:	4b25      	ldr	r3, [pc, #148]	@ (8006244 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	623b      	str	r3, [r7, #32]
 80061be:	e00b      	b.n	80061d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	1c59      	adds	r1, r3, #1
 80061c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80061ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	09db      	lsrs	r3, r3, #7
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2b7f      	cmp	r3, #127	@ 0x7f
 80061dc:	d8f0      	bhi.n	80061c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80061e4:	6a3a      	ldr	r2, [r7, #32]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	e00b      	b.n	8006210 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	61f9      	str	r1, [r7, #28]
 8006202:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	09db      	lsrs	r3, r3, #7
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b7f      	cmp	r3, #127	@ 0x7f
 8006214:	d8f0      	bhi.n	80061f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	61fa      	str	r2, [r7, #28]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006226:	2207      	movs	r2, #7
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	6938      	ldr	r0, [r7, #16]
 800622c:	f7ff f87e 	bl	800532c <_SendPacket>
  RECORD_END();
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f383 8811 	msr	BASEPRI, r3
}
 8006236:	bf00      	nop
 8006238:	3728      	adds	r7, #40	@ 0x28
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	200197c4 	.word	0x200197c4
 8006244:	20019794 	.word	0x20019794

08006248 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006250:	4b04      	ldr	r3, [pc, #16]	@ (8006264 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	1ad3      	subs	r3, r2, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	20019794 	.word	0x20019794

08006268 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006268:	b580      	push	{r7, lr}
 800626a:	b08c      	sub	sp, #48	@ 0x30
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006272:	4b40      	ldr	r3, [pc, #256]	@ (8006374 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d077      	beq.n	800636a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800627a:	4b3e      	ldr	r3, [pc, #248]	@ (8006374 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006280:	2300      	movs	r3, #0
 8006282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006284:	e008      	b.n	8006298 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	3301      	adds	r3, #1
 8006296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800629c:	429a      	cmp	r2, r3
 800629e:	d3f2      	bcc.n	8006286 <SEGGER_SYSVIEW_SendModule+0x1e>
 80062a0:	e000      	b.n	80062a4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80062a2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80062a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d055      	beq.n	8006356 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062aa:	f3ef 8311 	mrs	r3, BASEPRI
 80062ae:	f04f 0120 	mov.w	r1, #32
 80062b2:	f381 8811 	msr	BASEPRI, r1
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	482f      	ldr	r0, [pc, #188]	@ (8006378 <SEGGER_SYSVIEW_SendModule+0x110>)
 80062ba:	f7fe ff4b 	bl	8005154 <_PreparePacket>
 80062be:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	623b      	str	r3, [r7, #32]
 80062cc:	e00b      	b.n	80062e6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	1c59      	adds	r1, r3, #1
 80062d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80062d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	09db      	lsrs	r3, r3, #7
 80062e4:	623b      	str	r3, [r7, #32]
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ea:	d8f0      	bhi.n	80062ce <SEGGER_SYSVIEW_SendModule+0x66>
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80062f2:	6a3a      	ldr	r2, [r7, #32]
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	61f9      	str	r1, [r7, #28]
 8006312:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b7f      	cmp	r3, #127	@ 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	61fa      	str	r2, [r7, #28]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2280      	movs	r2, #128	@ 0x80
 800633c:	4619      	mov	r1, r3
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7fe fed8 	bl	80050f4 <_EncodeStr>
 8006344:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006346:	2216      	movs	r2, #22
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	6938      	ldr	r0, [r7, #16]
 800634c:	f7fe ffee 	bl	800532c <_SendPacket>
      RECORD_END();
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d006      	beq.n	800636a <SEGGER_SYSVIEW_SendModule+0x102>
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4798      	blx	r3
    }
  }
}
 800636a:	bf00      	nop
 800636c:	3730      	adds	r7, #48	@ 0x30
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200197bc 	.word	0x200197bc
 8006378:	200197c4 	.word	0x200197c4

0800637c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006382:	4b0c      	ldr	r3, [pc, #48]	@ (80063b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00f      	beq.n	80063aa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f2      	bne.n	8006390 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200197bc 	.word	0x200197bc

080063b8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	f04f 0120 	mov.w	r1, #32
 80063c6:	f381 8811 	msr	BASEPRI, r1
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	4817      	ldr	r0, [pc, #92]	@ (800642c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80063ce:	f7fe fec1 	bl	8005154 <_PreparePacket>
 80063d2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	e00b      	b.n	80063fc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	6179      	str	r1, [r7, #20]
 80063ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	09db      	lsrs	r3, r3, #7
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006400:	d8f0      	bhi.n	80063e4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	617a      	str	r2, [r7, #20]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006412:	221b      	movs	r2, #27
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	68b8      	ldr	r0, [r7, #8]
 8006418:	f7fe ff88 	bl	800532c <_SendPacket>
  RECORD_END();
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f383 8811 	msr	BASEPRI, r3
}
 8006422:	bf00      	nop
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200197c4 	.word	0x200197c4
 8006430:	200197c0 	.word	0x200197c0

08006434 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	@ 0x28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800643c:	f3ef 8311 	mrs	r3, BASEPRI
 8006440:	f04f 0120 	mov.w	r1, #32
 8006444:	f381 8811 	msr	BASEPRI, r1
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	4827      	ldr	r0, [pc, #156]	@ (80064e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800644c:	f7fe fe82 	bl	8005154 <_PreparePacket>
 8006450:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006452:	2280      	movs	r2, #128	@ 0x80
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f7fe fe4c 	bl	80050f4 <_EncodeStr>
 800645c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	2301      	movs	r3, #1
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	e00b      	b.n	8006480 <SEGGER_SYSVIEW_Warn+0x4c>
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	6279      	str	r1, [r7, #36]	@ 0x24
 8006472:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	09db      	lsrs	r3, r3, #7
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b7f      	cmp	r3, #127	@ 0x7f
 8006484:	d8f0      	bhi.n	8006468 <SEGGER_SYSVIEW_Warn+0x34>
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	627a      	str	r2, [r7, #36]	@ 0x24
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	2300      	movs	r3, #0
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e00b      	b.n	80064b8 <SEGGER_SYSVIEW_Warn+0x84>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	61f9      	str	r1, [r7, #28]
 80064aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <SEGGER_SYSVIEW_Warn+0x6c>
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	61fa      	str	r2, [r7, #28]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80064ce:	221a      	movs	r2, #26
 80064d0:	68f9      	ldr	r1, [r7, #12]
 80064d2:	6938      	ldr	r0, [r7, #16]
 80064d4:	f7fe ff2a 	bl	800532c <_SendPacket>
  RECORD_END();
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f383 8811 	msr	BASEPRI, r3
}
 80064de:	bf00      	nop
 80064e0:	3728      	adds	r7, #40	@ 0x28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200197c4 	.word	0x200197c4

080064ec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80064ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	e033      	b.n	8006560 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80064f8:	491e      	ldr	r1, [pc, #120]	@ (8006574 <_cbSendTaskList+0x88>)
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	491a      	ldr	r1, [pc, #104]	@ (8006574 <_cbSendTaskList+0x88>)
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	3304      	adds	r3, #4
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	4c16      	ldr	r4, [pc, #88]	@ (8006574 <_cbSendTaskList+0x88>)
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4423      	add	r3, r4
 8006528:	3308      	adds	r3, #8
 800652a:	681c      	ldr	r4, [r3, #0]
 800652c:	4d11      	ldr	r5, [pc, #68]	@ (8006574 <_cbSendTaskList+0x88>)
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	442b      	add	r3, r5
 800653a:	330c      	adds	r3, #12
 800653c:	681d      	ldr	r5, [r3, #0]
 800653e:	4e0d      	ldr	r6, [pc, #52]	@ (8006574 <_cbSendTaskList+0x88>)
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4433      	add	r3, r6
 800654c:	3310      	adds	r3, #16
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	462b      	mov	r3, r5
 8006554:	4622      	mov	r2, r4
 8006556:	f000 f8bd 	bl	80066d4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3301      	adds	r3, #1
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	4b05      	ldr	r3, [pc, #20]	@ (8006578 <_cbSendTaskList+0x8c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	429a      	cmp	r2, r3
 8006568:	d3c6      	bcc.n	80064f8 <_cbSendTaskList+0xc>
  }
}
 800656a:	bf00      	nop
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006574:	200198a8 	.word	0x200198a8
 8006578:	20019948 	.word	0x20019948

0800657c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006584:	f7fd f948 	bl	8003818 <xTaskGetTickCountFromISR>
 8006588:	4603      	mov	r3, r0
 800658a:	2200      	movs	r2, #0
 800658c:	469a      	mov	sl, r3
 800658e:	4693      	mov	fp, r2
 8006590:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	f04f 0a00 	mov.w	sl, #0
 80065a0:	f04f 0b00 	mov.w	fp, #0
 80065a4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80065a8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80065ac:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80065b0:	4652      	mov	r2, sl
 80065b2:	465b      	mov	r3, fp
 80065b4:	1a14      	subs	r4, r2, r0
 80065b6:	eb63 0501 	sbc.w	r5, r3, r1
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	00ab      	lsls	r3, r5, #2
 80065c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80065c8:	00a2      	lsls	r2, r4, #2
 80065ca:	4614      	mov	r4, r2
 80065cc:	461d      	mov	r5, r3
 80065ce:	eb14 0800 	adds.w	r8, r4, r0
 80065d2:	eb45 0901 	adc.w	r9, r5, r1
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ea:	4690      	mov	r8, r2
 80065ec:	4699      	mov	r9, r3
 80065ee:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80065f2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80065f6:	4610      	mov	r0, r2
 80065f8:	4619      	mov	r1, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006604 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af02      	add	r7, sp, #8
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006612:	2205      	movs	r2, #5
 8006614:	492b      	ldr	r1, [pc, #172]	@ (80066c4 <SYSVIEW_AddTask+0xc0>)
 8006616:	68b8      	ldr	r0, [r7, #8]
 8006618:	f000 f89e 	bl	8006758 <memcmp>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04b      	beq.n	80066ba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006622:	4b29      	ldr	r3, [pc, #164]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b07      	cmp	r3, #7
 8006628:	d903      	bls.n	8006632 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800662a:	4828      	ldr	r0, [pc, #160]	@ (80066cc <SYSVIEW_AddTask+0xc8>)
 800662c:	f7ff ff02 	bl	8006434 <SEGGER_SYSVIEW_Warn>
    return;
 8006630:	e044      	b.n	80066bc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006632:	4b25      	ldr	r3, [pc, #148]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4926      	ldr	r1, [pc, #152]	@ (80066d0 <SYSVIEW_AddTask+0xcc>)
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006646:	4b20      	ldr	r3, [pc, #128]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4921      	ldr	r1, [pc, #132]	@ (80066d0 <SYSVIEW_AddTask+0xcc>)
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	3304      	adds	r3, #4
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800665c:	4b1a      	ldr	r3, [pc, #104]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	491b      	ldr	r1, [pc, #108]	@ (80066d0 <SYSVIEW_AddTask+0xcc>)
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3308      	adds	r3, #8
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006672:	4b15      	ldr	r3, [pc, #84]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4916      	ldr	r1, [pc, #88]	@ (80066d0 <SYSVIEW_AddTask+0xcc>)
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	330c      	adds	r3, #12
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006688:	4b0f      	ldr	r3, [pc, #60]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4910      	ldr	r1, [pc, #64]	@ (80066d0 <SYSVIEW_AddTask+0xcc>)
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3310      	adds	r3, #16
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800669e:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	4a08      	ldr	r2, [pc, #32]	@ (80066c8 <SYSVIEW_AddTask+0xc4>)
 80066a6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f80e 	bl	80066d4 <SYSVIEW_SendTaskInfo>
 80066b8:	e000      	b.n	80066bc <SYSVIEW_AddTask+0xb8>
    return;
 80066ba:	bf00      	nop

}
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	08007154 	.word	0x08007154
 80066c8:	20019948 	.word	0x20019948
 80066cc:	0800715c 	.word	0x0800715c
 80066d0:	200198a8 	.word	0x200198a8

080066d4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	@ 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80066e2:	f107 0314 	add.w	r3, r7, #20
 80066e6:	2214      	movs	r2, #20
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f844 	bl	8006778 <memset>
  TaskInfo.TaskID     = TaskID;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006704:	f107 0314 	add.w	r3, r7, #20
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff f9ff 	bl	8005b0c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800670e:	bf00      	nop
 8006710:	3728      	adds	r7, #40	@ 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <siprintf>:
 8006718:	b40e      	push	{r1, r2, r3}
 800671a:	b500      	push	{lr}
 800671c:	b09c      	sub	sp, #112	@ 0x70
 800671e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006720:	9002      	str	r0, [sp, #8]
 8006722:	9006      	str	r0, [sp, #24]
 8006724:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006728:	4809      	ldr	r0, [pc, #36]	@ (8006750 <siprintf+0x38>)
 800672a:	9107      	str	r1, [sp, #28]
 800672c:	9104      	str	r1, [sp, #16]
 800672e:	4909      	ldr	r1, [pc, #36]	@ (8006754 <siprintf+0x3c>)
 8006730:	f853 2b04 	ldr.w	r2, [r3], #4
 8006734:	9105      	str	r1, [sp, #20]
 8006736:	6800      	ldr	r0, [r0, #0]
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	a902      	add	r1, sp, #8
 800673c:	f000 f9b2 	bl	8006aa4 <_svfiprintf_r>
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	b01c      	add	sp, #112	@ 0x70
 8006748:	f85d eb04 	ldr.w	lr, [sp], #4
 800674c:	b003      	add	sp, #12
 800674e:	4770      	bx	lr
 8006750:	2000001c 	.word	0x2000001c
 8006754:	ffff0208 	.word	0xffff0208

08006758 <memcmp>:
 8006758:	b510      	push	{r4, lr}
 800675a:	3901      	subs	r1, #1
 800675c:	4402      	add	r2, r0
 800675e:	4290      	cmp	r0, r2
 8006760:	d101      	bne.n	8006766 <memcmp+0xe>
 8006762:	2000      	movs	r0, #0
 8006764:	e005      	b.n	8006772 <memcmp+0x1a>
 8006766:	7803      	ldrb	r3, [r0, #0]
 8006768:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800676c:	42a3      	cmp	r3, r4
 800676e:	d001      	beq.n	8006774 <memcmp+0x1c>
 8006770:	1b18      	subs	r0, r3, r4
 8006772:	bd10      	pop	{r4, pc}
 8006774:	3001      	adds	r0, #1
 8006776:	e7f2      	b.n	800675e <memcmp+0x6>

08006778 <memset>:
 8006778:	4402      	add	r2, r0
 800677a:	4603      	mov	r3, r0
 800677c:	4293      	cmp	r3, r2
 800677e:	d100      	bne.n	8006782 <memset+0xa>
 8006780:	4770      	bx	lr
 8006782:	f803 1b01 	strb.w	r1, [r3], #1
 8006786:	e7f9      	b.n	800677c <memset+0x4>

08006788 <__errno>:
 8006788:	4b01      	ldr	r3, [pc, #4]	@ (8006790 <__errno+0x8>)
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	2000001c 	.word	0x2000001c

08006794 <__libc_init_array>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4d0d      	ldr	r5, [pc, #52]	@ (80067cc <__libc_init_array+0x38>)
 8006798:	4c0d      	ldr	r4, [pc, #52]	@ (80067d0 <__libc_init_array+0x3c>)
 800679a:	1b64      	subs	r4, r4, r5
 800679c:	10a4      	asrs	r4, r4, #2
 800679e:	2600      	movs	r6, #0
 80067a0:	42a6      	cmp	r6, r4
 80067a2:	d109      	bne.n	80067b8 <__libc_init_array+0x24>
 80067a4:	4d0b      	ldr	r5, [pc, #44]	@ (80067d4 <__libc_init_array+0x40>)
 80067a6:	4c0c      	ldr	r4, [pc, #48]	@ (80067d8 <__libc_init_array+0x44>)
 80067a8:	f000 fc66 	bl	8007078 <_init>
 80067ac:	1b64      	subs	r4, r4, r5
 80067ae:	10a4      	asrs	r4, r4, #2
 80067b0:	2600      	movs	r6, #0
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	d105      	bne.n	80067c2 <__libc_init_array+0x2e>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067bc:	4798      	blx	r3
 80067be:	3601      	adds	r6, #1
 80067c0:	e7ee      	b.n	80067a0 <__libc_init_array+0xc>
 80067c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c6:	4798      	blx	r3
 80067c8:	3601      	adds	r6, #1
 80067ca:	e7f2      	b.n	80067b2 <__libc_init_array+0x1e>
 80067cc:	08007228 	.word	0x08007228
 80067d0:	08007228 	.word	0x08007228
 80067d4:	08007228 	.word	0x08007228
 80067d8:	0800722c 	.word	0x0800722c

080067dc <__retarget_lock_acquire_recursive>:
 80067dc:	4770      	bx	lr

080067de <__retarget_lock_release_recursive>:
 80067de:	4770      	bx	lr

080067e0 <memcpy>:
 80067e0:	440a      	add	r2, r1
 80067e2:	4291      	cmp	r1, r2
 80067e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e8:	d100      	bne.n	80067ec <memcpy+0xc>
 80067ea:	4770      	bx	lr
 80067ec:	b510      	push	{r4, lr}
 80067ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f6:	4291      	cmp	r1, r2
 80067f8:	d1f9      	bne.n	80067ee <memcpy+0xe>
 80067fa:	bd10      	pop	{r4, pc}

080067fc <_free_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4605      	mov	r5, r0
 8006800:	2900      	cmp	r1, #0
 8006802:	d041      	beq.n	8006888 <_free_r+0x8c>
 8006804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006808:	1f0c      	subs	r4, r1, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	bfb8      	it	lt
 800680e:	18e4      	addlt	r4, r4, r3
 8006810:	f000 f8e0 	bl	80069d4 <__malloc_lock>
 8006814:	4a1d      	ldr	r2, [pc, #116]	@ (800688c <_free_r+0x90>)
 8006816:	6813      	ldr	r3, [r2, #0]
 8006818:	b933      	cbnz	r3, 8006828 <_free_r+0x2c>
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	6014      	str	r4, [r2, #0]
 800681e:	4628      	mov	r0, r5
 8006820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006824:	f000 b8dc 	b.w	80069e0 <__malloc_unlock>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d908      	bls.n	800683e <_free_r+0x42>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	1821      	adds	r1, r4, r0
 8006830:	428b      	cmp	r3, r1
 8006832:	bf01      	itttt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	1809      	addeq	r1, r1, r0
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	e7ed      	b.n	800681a <_free_r+0x1e>
 800683e:	461a      	mov	r2, r3
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b10b      	cbz	r3, 8006848 <_free_r+0x4c>
 8006844:	42a3      	cmp	r3, r4
 8006846:	d9fa      	bls.n	800683e <_free_r+0x42>
 8006848:	6811      	ldr	r1, [r2, #0]
 800684a:	1850      	adds	r0, r2, r1
 800684c:	42a0      	cmp	r0, r4
 800684e:	d10b      	bne.n	8006868 <_free_r+0x6c>
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	4401      	add	r1, r0
 8006854:	1850      	adds	r0, r2, r1
 8006856:	4283      	cmp	r3, r0
 8006858:	6011      	str	r1, [r2, #0]
 800685a:	d1e0      	bne.n	800681e <_free_r+0x22>
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	6053      	str	r3, [r2, #4]
 8006862:	4408      	add	r0, r1
 8006864:	6010      	str	r0, [r2, #0]
 8006866:	e7da      	b.n	800681e <_free_r+0x22>
 8006868:	d902      	bls.n	8006870 <_free_r+0x74>
 800686a:	230c      	movs	r3, #12
 800686c:	602b      	str	r3, [r5, #0]
 800686e:	e7d6      	b.n	800681e <_free_r+0x22>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	1821      	adds	r1, r4, r0
 8006874:	428b      	cmp	r3, r1
 8006876:	bf04      	itt	eq
 8006878:	6819      	ldreq	r1, [r3, #0]
 800687a:	685b      	ldreq	r3, [r3, #4]
 800687c:	6063      	str	r3, [r4, #4]
 800687e:	bf04      	itt	eq
 8006880:	1809      	addeq	r1, r1, r0
 8006882:	6021      	streq	r1, [r4, #0]
 8006884:	6054      	str	r4, [r2, #4]
 8006886:	e7ca      	b.n	800681e <_free_r+0x22>
 8006888:	bd38      	pop	{r3, r4, r5, pc}
 800688a:	bf00      	nop
 800688c:	20019a90 	.word	0x20019a90

08006890 <sbrk_aligned>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4e0f      	ldr	r6, [pc, #60]	@ (80068d0 <sbrk_aligned+0x40>)
 8006894:	460c      	mov	r4, r1
 8006896:	6831      	ldr	r1, [r6, #0]
 8006898:	4605      	mov	r5, r0
 800689a:	b911      	cbnz	r1, 80068a2 <sbrk_aligned+0x12>
 800689c:	f000 fba6 	bl	8006fec <_sbrk_r>
 80068a0:	6030      	str	r0, [r6, #0]
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 fba1 	bl	8006fec <_sbrk_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d103      	bne.n	80068b6 <sbrk_aligned+0x26>
 80068ae:	f04f 34ff 	mov.w	r4, #4294967295
 80068b2:	4620      	mov	r0, r4
 80068b4:	bd70      	pop	{r4, r5, r6, pc}
 80068b6:	1cc4      	adds	r4, r0, #3
 80068b8:	f024 0403 	bic.w	r4, r4, #3
 80068bc:	42a0      	cmp	r0, r4
 80068be:	d0f8      	beq.n	80068b2 <sbrk_aligned+0x22>
 80068c0:	1a21      	subs	r1, r4, r0
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 fb92 	bl	8006fec <_sbrk_r>
 80068c8:	3001      	adds	r0, #1
 80068ca:	d1f2      	bne.n	80068b2 <sbrk_aligned+0x22>
 80068cc:	e7ef      	b.n	80068ae <sbrk_aligned+0x1e>
 80068ce:	bf00      	nop
 80068d0:	20019a8c 	.word	0x20019a8c

080068d4 <_malloc_r>:
 80068d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d8:	1ccd      	adds	r5, r1, #3
 80068da:	f025 0503 	bic.w	r5, r5, #3
 80068de:	3508      	adds	r5, #8
 80068e0:	2d0c      	cmp	r5, #12
 80068e2:	bf38      	it	cc
 80068e4:	250c      	movcc	r5, #12
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	4606      	mov	r6, r0
 80068ea:	db01      	blt.n	80068f0 <_malloc_r+0x1c>
 80068ec:	42a9      	cmp	r1, r5
 80068ee:	d904      	bls.n	80068fa <_malloc_r+0x26>
 80068f0:	230c      	movs	r3, #12
 80068f2:	6033      	str	r3, [r6, #0]
 80068f4:	2000      	movs	r0, #0
 80068f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069d0 <_malloc_r+0xfc>
 80068fe:	f000 f869 	bl	80069d4 <__malloc_lock>
 8006902:	f8d8 3000 	ldr.w	r3, [r8]
 8006906:	461c      	mov	r4, r3
 8006908:	bb44      	cbnz	r4, 800695c <_malloc_r+0x88>
 800690a:	4629      	mov	r1, r5
 800690c:	4630      	mov	r0, r6
 800690e:	f7ff ffbf 	bl	8006890 <sbrk_aligned>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	4604      	mov	r4, r0
 8006916:	d158      	bne.n	80069ca <_malloc_r+0xf6>
 8006918:	f8d8 4000 	ldr.w	r4, [r8]
 800691c:	4627      	mov	r7, r4
 800691e:	2f00      	cmp	r7, #0
 8006920:	d143      	bne.n	80069aa <_malloc_r+0xd6>
 8006922:	2c00      	cmp	r4, #0
 8006924:	d04b      	beq.n	80069be <_malloc_r+0xea>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	4639      	mov	r1, r7
 800692a:	4630      	mov	r0, r6
 800692c:	eb04 0903 	add.w	r9, r4, r3
 8006930:	f000 fb5c 	bl	8006fec <_sbrk_r>
 8006934:	4581      	cmp	r9, r0
 8006936:	d142      	bne.n	80069be <_malloc_r+0xea>
 8006938:	6821      	ldr	r1, [r4, #0]
 800693a:	1a6d      	subs	r5, r5, r1
 800693c:	4629      	mov	r1, r5
 800693e:	4630      	mov	r0, r6
 8006940:	f7ff ffa6 	bl	8006890 <sbrk_aligned>
 8006944:	3001      	adds	r0, #1
 8006946:	d03a      	beq.n	80069be <_malloc_r+0xea>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	442b      	add	r3, r5
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	f8d8 3000 	ldr.w	r3, [r8]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	bb62      	cbnz	r2, 80069b0 <_malloc_r+0xdc>
 8006956:	f8c8 7000 	str.w	r7, [r8]
 800695a:	e00f      	b.n	800697c <_malloc_r+0xa8>
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	1b52      	subs	r2, r2, r5
 8006960:	d420      	bmi.n	80069a4 <_malloc_r+0xd0>
 8006962:	2a0b      	cmp	r2, #11
 8006964:	d917      	bls.n	8006996 <_malloc_r+0xc2>
 8006966:	1961      	adds	r1, r4, r5
 8006968:	42a3      	cmp	r3, r4
 800696a:	6025      	str	r5, [r4, #0]
 800696c:	bf18      	it	ne
 800696e:	6059      	strne	r1, [r3, #4]
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	bf08      	it	eq
 8006974:	f8c8 1000 	streq.w	r1, [r8]
 8006978:	5162      	str	r2, [r4, r5]
 800697a:	604b      	str	r3, [r1, #4]
 800697c:	4630      	mov	r0, r6
 800697e:	f000 f82f 	bl	80069e0 <__malloc_unlock>
 8006982:	f104 000b 	add.w	r0, r4, #11
 8006986:	1d23      	adds	r3, r4, #4
 8006988:	f020 0007 	bic.w	r0, r0, #7
 800698c:	1ac2      	subs	r2, r0, r3
 800698e:	bf1c      	itt	ne
 8006990:	1a1b      	subne	r3, r3, r0
 8006992:	50a3      	strne	r3, [r4, r2]
 8006994:	e7af      	b.n	80068f6 <_malloc_r+0x22>
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	42a3      	cmp	r3, r4
 800699a:	bf0c      	ite	eq
 800699c:	f8c8 2000 	streq.w	r2, [r8]
 80069a0:	605a      	strne	r2, [r3, #4]
 80069a2:	e7eb      	b.n	800697c <_malloc_r+0xa8>
 80069a4:	4623      	mov	r3, r4
 80069a6:	6864      	ldr	r4, [r4, #4]
 80069a8:	e7ae      	b.n	8006908 <_malloc_r+0x34>
 80069aa:	463c      	mov	r4, r7
 80069ac:	687f      	ldr	r7, [r7, #4]
 80069ae:	e7b6      	b.n	800691e <_malloc_r+0x4a>
 80069b0:	461a      	mov	r2, r3
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	d1fb      	bne.n	80069b0 <_malloc_r+0xdc>
 80069b8:	2300      	movs	r3, #0
 80069ba:	6053      	str	r3, [r2, #4]
 80069bc:	e7de      	b.n	800697c <_malloc_r+0xa8>
 80069be:	230c      	movs	r3, #12
 80069c0:	6033      	str	r3, [r6, #0]
 80069c2:	4630      	mov	r0, r6
 80069c4:	f000 f80c 	bl	80069e0 <__malloc_unlock>
 80069c8:	e794      	b.n	80068f4 <_malloc_r+0x20>
 80069ca:	6005      	str	r5, [r0, #0]
 80069cc:	e7d6      	b.n	800697c <_malloc_r+0xa8>
 80069ce:	bf00      	nop
 80069d0:	20019a90 	.word	0x20019a90

080069d4 <__malloc_lock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__malloc_lock+0x8>)
 80069d6:	f7ff bf01 	b.w	80067dc <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	20019a88 	.word	0x20019a88

080069e0 <__malloc_unlock>:
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <__malloc_unlock+0x8>)
 80069e2:	f7ff befc 	b.w	80067de <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	20019a88 	.word	0x20019a88

080069ec <__ssputs_r>:
 80069ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	688e      	ldr	r6, [r1, #8]
 80069f2:	461f      	mov	r7, r3
 80069f4:	42be      	cmp	r6, r7
 80069f6:	680b      	ldr	r3, [r1, #0]
 80069f8:	4682      	mov	sl, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	4690      	mov	r8, r2
 80069fe:	d82d      	bhi.n	8006a5c <__ssputs_r+0x70>
 8006a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a08:	d026      	beq.n	8006a58 <__ssputs_r+0x6c>
 8006a0a:	6965      	ldr	r5, [r4, #20]
 8006a0c:	6909      	ldr	r1, [r1, #16]
 8006a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a12:	eba3 0901 	sub.w	r9, r3, r1
 8006a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a1a:	1c7b      	adds	r3, r7, #1
 8006a1c:	444b      	add	r3, r9
 8006a1e:	106d      	asrs	r5, r5, #1
 8006a20:	429d      	cmp	r5, r3
 8006a22:	bf38      	it	cc
 8006a24:	461d      	movcc	r5, r3
 8006a26:	0553      	lsls	r3, r2, #21
 8006a28:	d527      	bpl.n	8006a7a <__ssputs_r+0x8e>
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	f7ff ff52 	bl	80068d4 <_malloc_r>
 8006a30:	4606      	mov	r6, r0
 8006a32:	b360      	cbz	r0, 8006a8e <__ssputs_r+0xa2>
 8006a34:	6921      	ldr	r1, [r4, #16]
 8006a36:	464a      	mov	r2, r9
 8006a38:	f7ff fed2 	bl	80067e0 <memcpy>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	6126      	str	r6, [r4, #16]
 8006a4a:	6165      	str	r5, [r4, #20]
 8006a4c:	444e      	add	r6, r9
 8006a4e:	eba5 0509 	sub.w	r5, r5, r9
 8006a52:	6026      	str	r6, [r4, #0]
 8006a54:	60a5      	str	r5, [r4, #8]
 8006a56:	463e      	mov	r6, r7
 8006a58:	42be      	cmp	r6, r7
 8006a5a:	d900      	bls.n	8006a5e <__ssputs_r+0x72>
 8006a5c:	463e      	mov	r6, r7
 8006a5e:	6820      	ldr	r0, [r4, #0]
 8006a60:	4632      	mov	r2, r6
 8006a62:	4641      	mov	r1, r8
 8006a64:	f000 faa8 	bl	8006fb8 <memmove>
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	1b9b      	subs	r3, r3, r6
 8006a6c:	60a3      	str	r3, [r4, #8]
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	4433      	add	r3, r6
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	2000      	movs	r0, #0
 8006a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7a:	462a      	mov	r2, r5
 8006a7c:	f000 fac6 	bl	800700c <_realloc_r>
 8006a80:	4606      	mov	r6, r0
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d1e0      	bne.n	8006a48 <__ssputs_r+0x5c>
 8006a86:	6921      	ldr	r1, [r4, #16]
 8006a88:	4650      	mov	r0, sl
 8006a8a:	f7ff feb7 	bl	80067fc <_free_r>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	f8ca 3000 	str.w	r3, [sl]
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	e7e9      	b.n	8006a76 <__ssputs_r+0x8a>
	...

08006aa4 <_svfiprintf_r>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	898b      	ldrh	r3, [r1, #12]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	b09d      	sub	sp, #116	@ 0x74
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	d510      	bpl.n	8006ada <_svfiprintf_r+0x36>
 8006ab8:	690b      	ldr	r3, [r1, #16]
 8006aba:	b973      	cbnz	r3, 8006ada <_svfiprintf_r+0x36>
 8006abc:	2140      	movs	r1, #64	@ 0x40
 8006abe:	f7ff ff09 	bl	80068d4 <_malloc_r>
 8006ac2:	6028      	str	r0, [r5, #0]
 8006ac4:	6128      	str	r0, [r5, #16]
 8006ac6:	b930      	cbnz	r0, 8006ad6 <_svfiprintf_r+0x32>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	b01d      	add	sp, #116	@ 0x74
 8006ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad6:	2340      	movs	r3, #64	@ 0x40
 8006ad8:	616b      	str	r3, [r5, #20]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ade:	2320      	movs	r3, #32
 8006ae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae8:	2330      	movs	r3, #48	@ 0x30
 8006aea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c88 <_svfiprintf_r+0x1e4>
 8006aee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006af2:	f04f 0901 	mov.w	r9, #1
 8006af6:	4623      	mov	r3, r4
 8006af8:	469a      	mov	sl, r3
 8006afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afe:	b10a      	cbz	r2, 8006b04 <_svfiprintf_r+0x60>
 8006b00:	2a25      	cmp	r2, #37	@ 0x25
 8006b02:	d1f9      	bne.n	8006af8 <_svfiprintf_r+0x54>
 8006b04:	ebba 0b04 	subs.w	fp, sl, r4
 8006b08:	d00b      	beq.n	8006b22 <_svfiprintf_r+0x7e>
 8006b0a:	465b      	mov	r3, fp
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ff6b 	bl	80069ec <__ssputs_r>
 8006b16:	3001      	adds	r0, #1
 8006b18:	f000 80a7 	beq.w	8006c6a <_svfiprintf_r+0x1c6>
 8006b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b1e:	445a      	add	r2, fp
 8006b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b22:	f89a 3000 	ldrb.w	r3, [sl]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 809f 	beq.w	8006c6a <_svfiprintf_r+0x1c6>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b36:	f10a 0a01 	add.w	sl, sl, #1
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	9307      	str	r3, [sp, #28]
 8006b3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b42:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b44:	4654      	mov	r4, sl
 8006b46:	2205      	movs	r2, #5
 8006b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4c:	484e      	ldr	r0, [pc, #312]	@ (8006c88 <_svfiprintf_r+0x1e4>)
 8006b4e:	f7f9 fb8f 	bl	8000270 <memchr>
 8006b52:	9a04      	ldr	r2, [sp, #16]
 8006b54:	b9d8      	cbnz	r0, 8006b8e <_svfiprintf_r+0xea>
 8006b56:	06d0      	lsls	r0, r2, #27
 8006b58:	bf44      	itt	mi
 8006b5a:	2320      	movmi	r3, #32
 8006b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b60:	0711      	lsls	r1, r2, #28
 8006b62:	bf44      	itt	mi
 8006b64:	232b      	movmi	r3, #43	@ 0x2b
 8006b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b70:	d015      	beq.n	8006b9e <_svfiprintf_r+0xfa>
 8006b72:	9a07      	ldr	r2, [sp, #28]
 8006b74:	4654      	mov	r4, sl
 8006b76:	2000      	movs	r0, #0
 8006b78:	f04f 0c0a 	mov.w	ip, #10
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b82:	3b30      	subs	r3, #48	@ 0x30
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	d94b      	bls.n	8006c20 <_svfiprintf_r+0x17c>
 8006b88:	b1b0      	cbz	r0, 8006bb8 <_svfiprintf_r+0x114>
 8006b8a:	9207      	str	r2, [sp, #28]
 8006b8c:	e014      	b.n	8006bb8 <_svfiprintf_r+0x114>
 8006b8e:	eba0 0308 	sub.w	r3, r0, r8
 8006b92:	fa09 f303 	lsl.w	r3, r9, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	46a2      	mov	sl, r4
 8006b9c:	e7d2      	b.n	8006b44 <_svfiprintf_r+0xa0>
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	1d19      	adds	r1, r3, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	9103      	str	r1, [sp, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bfbb      	ittet	lt
 8006baa:	425b      	neglt	r3, r3
 8006bac:	f042 0202 	orrlt.w	r2, r2, #2
 8006bb0:	9307      	strge	r3, [sp, #28]
 8006bb2:	9307      	strlt	r3, [sp, #28]
 8006bb4:	bfb8      	it	lt
 8006bb6:	9204      	strlt	r2, [sp, #16]
 8006bb8:	7823      	ldrb	r3, [r4, #0]
 8006bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bbc:	d10a      	bne.n	8006bd4 <_svfiprintf_r+0x130>
 8006bbe:	7863      	ldrb	r3, [r4, #1]
 8006bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc2:	d132      	bne.n	8006c2a <_svfiprintf_r+0x186>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	9203      	str	r2, [sp, #12]
 8006bcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bd0:	3402      	adds	r4, #2
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c98 <_svfiprintf_r+0x1f4>
 8006bd8:	7821      	ldrb	r1, [r4, #0]
 8006bda:	2203      	movs	r2, #3
 8006bdc:	4650      	mov	r0, sl
 8006bde:	f7f9 fb47 	bl	8000270 <memchr>
 8006be2:	b138      	cbz	r0, 8006bf4 <_svfiprintf_r+0x150>
 8006be4:	9b04      	ldr	r3, [sp, #16]
 8006be6:	eba0 000a 	sub.w	r0, r0, sl
 8006bea:	2240      	movs	r2, #64	@ 0x40
 8006bec:	4082      	lsls	r2, r0
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	3401      	adds	r4, #1
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf8:	4824      	ldr	r0, [pc, #144]	@ (8006c8c <_svfiprintf_r+0x1e8>)
 8006bfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bfe:	2206      	movs	r2, #6
 8006c00:	f7f9 fb36 	bl	8000270 <memchr>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d036      	beq.n	8006c76 <_svfiprintf_r+0x1d2>
 8006c08:	4b21      	ldr	r3, [pc, #132]	@ (8006c90 <_svfiprintf_r+0x1ec>)
 8006c0a:	bb1b      	cbnz	r3, 8006c54 <_svfiprintf_r+0x1b0>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	3307      	adds	r3, #7
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	3308      	adds	r3, #8
 8006c16:	9303      	str	r3, [sp, #12]
 8006c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1a:	4433      	add	r3, r6
 8006c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c1e:	e76a      	b.n	8006af6 <_svfiprintf_r+0x52>
 8006c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c24:	460c      	mov	r4, r1
 8006c26:	2001      	movs	r0, #1
 8006c28:	e7a8      	b.n	8006b7c <_svfiprintf_r+0xd8>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	3401      	adds	r4, #1
 8006c2e:	9305      	str	r3, [sp, #20]
 8006c30:	4619      	mov	r1, r3
 8006c32:	f04f 0c0a 	mov.w	ip, #10
 8006c36:	4620      	mov	r0, r4
 8006c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3c:	3a30      	subs	r2, #48	@ 0x30
 8006c3e:	2a09      	cmp	r2, #9
 8006c40:	d903      	bls.n	8006c4a <_svfiprintf_r+0x1a6>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0c6      	beq.n	8006bd4 <_svfiprintf_r+0x130>
 8006c46:	9105      	str	r1, [sp, #20]
 8006c48:	e7c4      	b.n	8006bd4 <_svfiprintf_r+0x130>
 8006c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c4e:	4604      	mov	r4, r0
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7f0      	b.n	8006c36 <_svfiprintf_r+0x192>
 8006c54:	ab03      	add	r3, sp, #12
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c94 <_svfiprintf_r+0x1f0>)
 8006c5c:	a904      	add	r1, sp, #16
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f3af 8000 	nop.w
 8006c64:	1c42      	adds	r2, r0, #1
 8006c66:	4606      	mov	r6, r0
 8006c68:	d1d6      	bne.n	8006c18 <_svfiprintf_r+0x174>
 8006c6a:	89ab      	ldrh	r3, [r5, #12]
 8006c6c:	065b      	lsls	r3, r3, #25
 8006c6e:	f53f af2d 	bmi.w	8006acc <_svfiprintf_r+0x28>
 8006c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c74:	e72c      	b.n	8006ad0 <_svfiprintf_r+0x2c>
 8006c76:	ab03      	add	r3, sp, #12
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	4b05      	ldr	r3, [pc, #20]	@ (8006c94 <_svfiprintf_r+0x1f0>)
 8006c7e:	a904      	add	r1, sp, #16
 8006c80:	4638      	mov	r0, r7
 8006c82:	f000 f879 	bl	8006d78 <_printf_i>
 8006c86:	e7ed      	b.n	8006c64 <_svfiprintf_r+0x1c0>
 8006c88:	080071ec 	.word	0x080071ec
 8006c8c:	080071f6 	.word	0x080071f6
 8006c90:	00000000 	.word	0x00000000
 8006c94:	080069ed 	.word	0x080069ed
 8006c98:	080071f2 	.word	0x080071f2

08006c9c <_printf_common>:
 8006c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	4616      	mov	r6, r2
 8006ca2:	4698      	mov	r8, r3
 8006ca4:	688a      	ldr	r2, [r1, #8]
 8006ca6:	690b      	ldr	r3, [r1, #16]
 8006ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bfb8      	it	lt
 8006cb0:	4613      	movlt	r3, r2
 8006cb2:	6033      	str	r3, [r6, #0]
 8006cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cb8:	4607      	mov	r7, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	b10a      	cbz	r2, 8006cc2 <_printf_common+0x26>
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	6033      	str	r3, [r6, #0]
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	0699      	lsls	r1, r3, #26
 8006cc6:	bf42      	ittt	mi
 8006cc8:	6833      	ldrmi	r3, [r6, #0]
 8006cca:	3302      	addmi	r3, #2
 8006ccc:	6033      	strmi	r3, [r6, #0]
 8006cce:	6825      	ldr	r5, [r4, #0]
 8006cd0:	f015 0506 	ands.w	r5, r5, #6
 8006cd4:	d106      	bne.n	8006ce4 <_printf_common+0x48>
 8006cd6:	f104 0a19 	add.w	sl, r4, #25
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	6832      	ldr	r2, [r6, #0]
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dc26      	bgt.n	8006d32 <_printf_common+0x96>
 8006ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	3b00      	subs	r3, #0
 8006cec:	bf18      	it	ne
 8006cee:	2301      	movne	r3, #1
 8006cf0:	0692      	lsls	r2, r2, #26
 8006cf2:	d42b      	bmi.n	8006d4c <_printf_common+0xb0>
 8006cf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	47c8      	blx	r9
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d01e      	beq.n	8006d40 <_printf_common+0xa4>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	6922      	ldr	r2, [r4, #16]
 8006d06:	f003 0306 	and.w	r3, r3, #6
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	bf02      	ittt	eq
 8006d0e:	68e5      	ldreq	r5, [r4, #12]
 8006d10:	6833      	ldreq	r3, [r6, #0]
 8006d12:	1aed      	subeq	r5, r5, r3
 8006d14:	68a3      	ldr	r3, [r4, #8]
 8006d16:	bf0c      	ite	eq
 8006d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d1c:	2500      	movne	r5, #0
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	bfc4      	itt	gt
 8006d22:	1a9b      	subgt	r3, r3, r2
 8006d24:	18ed      	addgt	r5, r5, r3
 8006d26:	2600      	movs	r6, #0
 8006d28:	341a      	adds	r4, #26
 8006d2a:	42b5      	cmp	r5, r6
 8006d2c:	d11a      	bne.n	8006d64 <_printf_common+0xc8>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	e008      	b.n	8006d44 <_printf_common+0xa8>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4652      	mov	r2, sl
 8006d36:	4641      	mov	r1, r8
 8006d38:	4638      	mov	r0, r7
 8006d3a:	47c8      	blx	r9
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d103      	bne.n	8006d48 <_printf_common+0xac>
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d48:	3501      	adds	r5, #1
 8006d4a:	e7c6      	b.n	8006cda <_printf_common+0x3e>
 8006d4c:	18e1      	adds	r1, r4, r3
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	2030      	movs	r0, #48	@ 0x30
 8006d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d56:	4422      	add	r2, r4
 8006d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d60:	3302      	adds	r3, #2
 8006d62:	e7c7      	b.n	8006cf4 <_printf_common+0x58>
 8006d64:	2301      	movs	r3, #1
 8006d66:	4622      	mov	r2, r4
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	47c8      	blx	r9
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d0e6      	beq.n	8006d40 <_printf_common+0xa4>
 8006d72:	3601      	adds	r6, #1
 8006d74:	e7d9      	b.n	8006d2a <_printf_common+0x8e>
	...

08006d78 <_printf_i>:
 8006d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	7e0f      	ldrb	r7, [r1, #24]
 8006d7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d80:	2f78      	cmp	r7, #120	@ 0x78
 8006d82:	4691      	mov	r9, r2
 8006d84:	4680      	mov	r8, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	469a      	mov	sl, r3
 8006d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d8e:	d807      	bhi.n	8006da0 <_printf_i+0x28>
 8006d90:	2f62      	cmp	r7, #98	@ 0x62
 8006d92:	d80a      	bhi.n	8006daa <_printf_i+0x32>
 8006d94:	2f00      	cmp	r7, #0
 8006d96:	f000 80d2 	beq.w	8006f3e <_printf_i+0x1c6>
 8006d9a:	2f58      	cmp	r7, #88	@ 0x58
 8006d9c:	f000 80b9 	beq.w	8006f12 <_printf_i+0x19a>
 8006da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006da8:	e03a      	b.n	8006e20 <_printf_i+0xa8>
 8006daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dae:	2b15      	cmp	r3, #21
 8006db0:	d8f6      	bhi.n	8006da0 <_printf_i+0x28>
 8006db2:	a101      	add	r1, pc, #4	@ (adr r1, 8006db8 <_printf_i+0x40>)
 8006db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	08006e25 	.word	0x08006e25
 8006dc0:	08006da1 	.word	0x08006da1
 8006dc4:	08006da1 	.word	0x08006da1
 8006dc8:	08006da1 	.word	0x08006da1
 8006dcc:	08006da1 	.word	0x08006da1
 8006dd0:	08006e25 	.word	0x08006e25
 8006dd4:	08006da1 	.word	0x08006da1
 8006dd8:	08006da1 	.word	0x08006da1
 8006ddc:	08006da1 	.word	0x08006da1
 8006de0:	08006da1 	.word	0x08006da1
 8006de4:	08006f25 	.word	0x08006f25
 8006de8:	08006e4f 	.word	0x08006e4f
 8006dec:	08006edf 	.word	0x08006edf
 8006df0:	08006da1 	.word	0x08006da1
 8006df4:	08006da1 	.word	0x08006da1
 8006df8:	08006f47 	.word	0x08006f47
 8006dfc:	08006da1 	.word	0x08006da1
 8006e00:	08006e4f 	.word	0x08006e4f
 8006e04:	08006da1 	.word	0x08006da1
 8006e08:	08006da1 	.word	0x08006da1
 8006e0c:	08006ee7 	.word	0x08006ee7
 8006e10:	6833      	ldr	r3, [r6, #0]
 8006e12:	1d1a      	adds	r2, r3, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6032      	str	r2, [r6, #0]
 8006e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e20:	2301      	movs	r3, #1
 8006e22:	e09d      	b.n	8006f60 <_printf_i+0x1e8>
 8006e24:	6833      	ldr	r3, [r6, #0]
 8006e26:	6820      	ldr	r0, [r4, #0]
 8006e28:	1d19      	adds	r1, r3, #4
 8006e2a:	6031      	str	r1, [r6, #0]
 8006e2c:	0606      	lsls	r6, r0, #24
 8006e2e:	d501      	bpl.n	8006e34 <_printf_i+0xbc>
 8006e30:	681d      	ldr	r5, [r3, #0]
 8006e32:	e003      	b.n	8006e3c <_printf_i+0xc4>
 8006e34:	0645      	lsls	r5, r0, #25
 8006e36:	d5fb      	bpl.n	8006e30 <_printf_i+0xb8>
 8006e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	da03      	bge.n	8006e48 <_printf_i+0xd0>
 8006e40:	232d      	movs	r3, #45	@ 0x2d
 8006e42:	426d      	negs	r5, r5
 8006e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e48:	4859      	ldr	r0, [pc, #356]	@ (8006fb0 <_printf_i+0x238>)
 8006e4a:	230a      	movs	r3, #10
 8006e4c:	e011      	b.n	8006e72 <_printf_i+0xfa>
 8006e4e:	6821      	ldr	r1, [r4, #0]
 8006e50:	6833      	ldr	r3, [r6, #0]
 8006e52:	0608      	lsls	r0, r1, #24
 8006e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e58:	d402      	bmi.n	8006e60 <_printf_i+0xe8>
 8006e5a:	0649      	lsls	r1, r1, #25
 8006e5c:	bf48      	it	mi
 8006e5e:	b2ad      	uxthmi	r5, r5
 8006e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e62:	4853      	ldr	r0, [pc, #332]	@ (8006fb0 <_printf_i+0x238>)
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	bf14      	ite	ne
 8006e68:	230a      	movne	r3, #10
 8006e6a:	2308      	moveq	r3, #8
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e72:	6866      	ldr	r6, [r4, #4]
 8006e74:	60a6      	str	r6, [r4, #8]
 8006e76:	2e00      	cmp	r6, #0
 8006e78:	bfa2      	ittt	ge
 8006e7a:	6821      	ldrge	r1, [r4, #0]
 8006e7c:	f021 0104 	bicge.w	r1, r1, #4
 8006e80:	6021      	strge	r1, [r4, #0]
 8006e82:	b90d      	cbnz	r5, 8006e88 <_printf_i+0x110>
 8006e84:	2e00      	cmp	r6, #0
 8006e86:	d04b      	beq.n	8006f20 <_printf_i+0x1a8>
 8006e88:	4616      	mov	r6, r2
 8006e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e92:	5dc7      	ldrb	r7, [r0, r7]
 8006e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e98:	462f      	mov	r7, r5
 8006e9a:	42bb      	cmp	r3, r7
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	d9f4      	bls.n	8006e8a <_printf_i+0x112>
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d10b      	bne.n	8006ebc <_printf_i+0x144>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	07df      	lsls	r7, r3, #31
 8006ea8:	d508      	bpl.n	8006ebc <_printf_i+0x144>
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	6861      	ldr	r1, [r4, #4]
 8006eae:	4299      	cmp	r1, r3
 8006eb0:	bfde      	ittt	le
 8006eb2:	2330      	movle	r3, #48	@ 0x30
 8006eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ebc:	1b92      	subs	r2, r2, r6
 8006ebe:	6122      	str	r2, [r4, #16]
 8006ec0:	f8cd a000 	str.w	sl, [sp]
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	aa03      	add	r2, sp, #12
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4640      	mov	r0, r8
 8006ecc:	f7ff fee6 	bl	8006c9c <_printf_common>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d14a      	bne.n	8006f6a <_printf_i+0x1f2>
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	b004      	add	sp, #16
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f043 0320 	orr.w	r3, r3, #32
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	4833      	ldr	r0, [pc, #204]	@ (8006fb4 <_printf_i+0x23c>)
 8006ee8:	2778      	movs	r7, #120	@ 0x78
 8006eea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	6831      	ldr	r1, [r6, #0]
 8006ef2:	061f      	lsls	r7, r3, #24
 8006ef4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ef8:	d402      	bmi.n	8006f00 <_printf_i+0x188>
 8006efa:	065f      	lsls	r7, r3, #25
 8006efc:	bf48      	it	mi
 8006efe:	b2ad      	uxthmi	r5, r5
 8006f00:	6031      	str	r1, [r6, #0]
 8006f02:	07d9      	lsls	r1, r3, #31
 8006f04:	bf44      	itt	mi
 8006f06:	f043 0320 	orrmi.w	r3, r3, #32
 8006f0a:	6023      	strmi	r3, [r4, #0]
 8006f0c:	b11d      	cbz	r5, 8006f16 <_printf_i+0x19e>
 8006f0e:	2310      	movs	r3, #16
 8006f10:	e7ac      	b.n	8006e6c <_printf_i+0xf4>
 8006f12:	4827      	ldr	r0, [pc, #156]	@ (8006fb0 <_printf_i+0x238>)
 8006f14:	e7e9      	b.n	8006eea <_printf_i+0x172>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	f023 0320 	bic.w	r3, r3, #32
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	e7f6      	b.n	8006f0e <_printf_i+0x196>
 8006f20:	4616      	mov	r6, r2
 8006f22:	e7bd      	b.n	8006ea0 <_printf_i+0x128>
 8006f24:	6833      	ldr	r3, [r6, #0]
 8006f26:	6825      	ldr	r5, [r4, #0]
 8006f28:	6961      	ldr	r1, [r4, #20]
 8006f2a:	1d18      	adds	r0, r3, #4
 8006f2c:	6030      	str	r0, [r6, #0]
 8006f2e:	062e      	lsls	r6, r5, #24
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	d501      	bpl.n	8006f38 <_printf_i+0x1c0>
 8006f34:	6019      	str	r1, [r3, #0]
 8006f36:	e002      	b.n	8006f3e <_printf_i+0x1c6>
 8006f38:	0668      	lsls	r0, r5, #25
 8006f3a:	d5fb      	bpl.n	8006f34 <_printf_i+0x1bc>
 8006f3c:	8019      	strh	r1, [r3, #0]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	4616      	mov	r6, r2
 8006f44:	e7bc      	b.n	8006ec0 <_printf_i+0x148>
 8006f46:	6833      	ldr	r3, [r6, #0]
 8006f48:	1d1a      	adds	r2, r3, #4
 8006f4a:	6032      	str	r2, [r6, #0]
 8006f4c:	681e      	ldr	r6, [r3, #0]
 8006f4e:	6862      	ldr	r2, [r4, #4]
 8006f50:	2100      	movs	r1, #0
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7f9 f98c 	bl	8000270 <memchr>
 8006f58:	b108      	cbz	r0, 8006f5e <_printf_i+0x1e6>
 8006f5a:	1b80      	subs	r0, r0, r6
 8006f5c:	6060      	str	r0, [r4, #4]
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	6123      	str	r3, [r4, #16]
 8006f62:	2300      	movs	r3, #0
 8006f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f68:	e7aa      	b.n	8006ec0 <_printf_i+0x148>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	4649      	mov	r1, r9
 8006f70:	4640      	mov	r0, r8
 8006f72:	47d0      	blx	sl
 8006f74:	3001      	adds	r0, #1
 8006f76:	d0ad      	beq.n	8006ed4 <_printf_i+0x15c>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	079b      	lsls	r3, r3, #30
 8006f7c:	d413      	bmi.n	8006fa6 <_printf_i+0x22e>
 8006f7e:	68e0      	ldr	r0, [r4, #12]
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	4298      	cmp	r0, r3
 8006f84:	bfb8      	it	lt
 8006f86:	4618      	movlt	r0, r3
 8006f88:	e7a6      	b.n	8006ed8 <_printf_i+0x160>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	4649      	mov	r1, r9
 8006f90:	4640      	mov	r0, r8
 8006f92:	47d0      	blx	sl
 8006f94:	3001      	adds	r0, #1
 8006f96:	d09d      	beq.n	8006ed4 <_printf_i+0x15c>
 8006f98:	3501      	adds	r5, #1
 8006f9a:	68e3      	ldr	r3, [r4, #12]
 8006f9c:	9903      	ldr	r1, [sp, #12]
 8006f9e:	1a5b      	subs	r3, r3, r1
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	dcf2      	bgt.n	8006f8a <_printf_i+0x212>
 8006fa4:	e7eb      	b.n	8006f7e <_printf_i+0x206>
 8006fa6:	2500      	movs	r5, #0
 8006fa8:	f104 0619 	add.w	r6, r4, #25
 8006fac:	e7f5      	b.n	8006f9a <_printf_i+0x222>
 8006fae:	bf00      	nop
 8006fb0:	080071fd 	.word	0x080071fd
 8006fb4:	0800720e 	.word	0x0800720e

08006fb8 <memmove>:
 8006fb8:	4288      	cmp	r0, r1
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	eb01 0402 	add.w	r4, r1, r2
 8006fc0:	d902      	bls.n	8006fc8 <memmove+0x10>
 8006fc2:	4284      	cmp	r4, r0
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	d807      	bhi.n	8006fd8 <memmove+0x20>
 8006fc8:	1e43      	subs	r3, r0, #1
 8006fca:	42a1      	cmp	r1, r4
 8006fcc:	d008      	beq.n	8006fe0 <memmove+0x28>
 8006fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fd6:	e7f8      	b.n	8006fca <memmove+0x12>
 8006fd8:	4402      	add	r2, r0
 8006fda:	4601      	mov	r1, r0
 8006fdc:	428a      	cmp	r2, r1
 8006fde:	d100      	bne.n	8006fe2 <memmove+0x2a>
 8006fe0:	bd10      	pop	{r4, pc}
 8006fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fea:	e7f7      	b.n	8006fdc <memmove+0x24>

08006fec <_sbrk_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d06      	ldr	r5, [pc, #24]	@ (8007008 <_sbrk_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7f9 fde0 	bl	8000bbc <_sbrk>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_sbrk_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_sbrk_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20019a84 	.word	0x20019a84

0800700c <_realloc_r>:
 800700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007010:	4680      	mov	r8, r0
 8007012:	4615      	mov	r5, r2
 8007014:	460c      	mov	r4, r1
 8007016:	b921      	cbnz	r1, 8007022 <_realloc_r+0x16>
 8007018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4611      	mov	r1, r2
 800701e:	f7ff bc59 	b.w	80068d4 <_malloc_r>
 8007022:	b92a      	cbnz	r2, 8007030 <_realloc_r+0x24>
 8007024:	f7ff fbea 	bl	80067fc <_free_r>
 8007028:	2400      	movs	r4, #0
 800702a:	4620      	mov	r0, r4
 800702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007030:	f000 f81a 	bl	8007068 <_malloc_usable_size_r>
 8007034:	4285      	cmp	r5, r0
 8007036:	4606      	mov	r6, r0
 8007038:	d802      	bhi.n	8007040 <_realloc_r+0x34>
 800703a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800703e:	d8f4      	bhi.n	800702a <_realloc_r+0x1e>
 8007040:	4629      	mov	r1, r5
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff fc46 	bl	80068d4 <_malloc_r>
 8007048:	4607      	mov	r7, r0
 800704a:	2800      	cmp	r0, #0
 800704c:	d0ec      	beq.n	8007028 <_realloc_r+0x1c>
 800704e:	42b5      	cmp	r5, r6
 8007050:	462a      	mov	r2, r5
 8007052:	4621      	mov	r1, r4
 8007054:	bf28      	it	cs
 8007056:	4632      	movcs	r2, r6
 8007058:	f7ff fbc2 	bl	80067e0 <memcpy>
 800705c:	4621      	mov	r1, r4
 800705e:	4640      	mov	r0, r8
 8007060:	f7ff fbcc 	bl	80067fc <_free_r>
 8007064:	463c      	mov	r4, r7
 8007066:	e7e0      	b.n	800702a <_realloc_r+0x1e>

08007068 <_malloc_usable_size_r>:
 8007068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800706c:	1f18      	subs	r0, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfbc      	itt	lt
 8007072:	580b      	ldrlt	r3, [r1, r0]
 8007074:	18c0      	addlt	r0, r0, r3
 8007076:	4770      	bx	lr

08007078 <_init>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr

08007084 <_fini>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr
