
App_027_Example_9.1_Experimenting_with_Event_Groups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  08006184  08006184  00007184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800618c  0800618c  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006190  08006190  00007190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006194  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008018  2**0
                  CONTENTS
 10 .bss          00012ea0  20000018  20000018  00008018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012eb8  20012eb8  00008018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137da  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5c  00000000  00000000  0001b822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  0001e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfb  00000000  00000000  0001f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002118a  00000000  00000000  0002055b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014cb2  00000000  00000000  000416e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da8b8  00000000  00000000  00056397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130c4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b0c  00000000  00000000  00130c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  001357a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006018 	.word	0x08006018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08006018 	.word	0x08006018

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80004c6:	201c      	movs	r0, #28
 80004c8:	f002 fe8a 	bl	80031e0 <pvPortMalloc>
 80004cc:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d007      	beq.n	80004e4 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3304      	adds	r3, #4
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f9a8 	bl	8000834 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80004e4:	687b      	ldr	r3, [r7, #4]
        }
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b090      	sub	sp, #64	@ 0x40
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	637b      	str	r3, [r7, #52]	@ 0x34
        EventBits_t uxReturn, uxControlBits = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	63bb      	str	r3, [r7, #56]	@ 0x38
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8000506:	2300      	movs	r3, #0
 8000508:	633b      	str	r3, [r7, #48]	@ 0x30

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d10b      	bne.n	8000528 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000514:	f383 8811 	msr	BASEPRI, r3
 8000518:	f3bf 8f6f 	isb	sy
 800051c:	f3bf 8f4f 	dsb	sy
 8000520:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <xEventGroupWaitBits+0x34>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800052e:	d30b      	bcc.n	8000548 <xEventGroupWaitBits+0x58>
    __asm volatile
 8000530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000534:	f383 8811 	msr	BASEPRI, r3
 8000538:	f3bf 8f6f 	isb	sy
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	61fb      	str	r3, [r7, #28]
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <xEventGroupWaitBits+0x54>
        configASSERT( uxBitsToWaitFor != 0 );
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10b      	bne.n	8000566 <xEventGroupWaitBits+0x76>
    __asm volatile
 800054e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000552:	f383 8811 	msr	BASEPRI, r3
 8000556:	f3bf 8f6f 	isb	sy
 800055a:	f3bf 8f4f 	dsb	sy
 800055e:	61bb      	str	r3, [r7, #24]
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	e7fd      	b.n	8000562 <xEventGroupWaitBits+0x72>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000566:	f001 ff67 	bl	8002438 <xTaskGetSchedulerState>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d102      	bne.n	8000576 <xEventGroupWaitBits+0x86>
 8000570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <xEventGroupWaitBits+0x8a>
 8000576:	2301      	movs	r3, #1
 8000578:	e000      	b.n	800057c <xEventGroupWaitBits+0x8c>
 800057a:	2300      	movs	r3, #0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10b      	bne.n	8000598 <xEventGroupWaitBits+0xa8>
    __asm volatile
 8000580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000584:	f383 8811 	msr	BASEPRI, r3
 8000588:	f3bf 8f6f 	isb	sy
 800058c:	f3bf 8f4f 	dsb	sy
 8000590:	617b      	str	r3, [r7, #20]
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <xEventGroupWaitBits+0xa4>
        }
        #endif

        vTaskSuspendAll();
 8000598:	f001 f906 	bl	80017a8 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800059c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	68b9      	ldr	r1, [r7, #8]
 80005a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80005a8:	f000 f90d 	bl	80007c6 <prvTestWaitCondition>
 80005ac:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( xWaitConditionMet != pdFALSE )
 80005ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00e      	beq.n	80005d2 <xEventGroupWaitBits+0xe2>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 80005b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                xTicksToWait = ( TickType_t ) 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d028      	beq.n	8000614 <xEventGroupWaitBits+0x124>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80005c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	43db      	mvns	r3, r3
 80005ca:	401a      	ands	r2, r3
 80005cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	e020      	b.n	8000614 <xEventGroupWaitBits+0x124>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 80005d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <xEventGroupWaitBits+0xf2>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 80005d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
                xTimeoutOccurred = pdTRUE;
 80005dc:	2301      	movs	r3, #1
 80005de:	633b      	str	r3, [r7, #48]	@ 0x30
 80005e0:	e018      	b.n	8000614 <xEventGroupWaitBits+0x124>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <xEventGroupWaitBits+0x100>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80005e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ee:	63bb      	str	r3, [r7, #56]	@ 0x38
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d003      	beq.n	80005fe <xEventGroupWaitBits+0x10e>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80005f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005fc:	63bb      	str	r3, [r7, #56]	@ 0x38
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80005fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000600:	1d18      	adds	r0, r3, #4
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000606:	4313      	orrs	r3, r2
 8000608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800060a:	4619      	mov	r1, r3
 800060c:	f001 fb9c 	bl	8001d48 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000614:	f001 f8d6 	bl	80017c4 <xTaskResumeAll>
 8000618:	6278      	str	r0, [r7, #36]	@ 0x24

        if( xTicksToWait != ( TickType_t ) 0 )
 800061a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800061c:	2b00      	cmp	r3, #0
 800061e:	d031      	beq.n	8000684 <xEventGroupWaitBits+0x194>
        {
            if( xAlreadyYielded == pdFALSE )
 8000620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000622:	2b00      	cmp	r3, #0
 8000624:	d107      	bne.n	8000636 <xEventGroupWaitBits+0x146>
            {
                taskYIELD_WITHIN_API();
 8000626:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <xEventGroupWaitBits+0x1a0>)
 8000628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 8000636:	f001 ffc5 	bl	80025c4 <uxTaskResetEventItemValue>
 800063a:	63f8      	str	r0, [r7, #60]	@ 0x3c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800063c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800063e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d11a      	bne.n	800067c <xEventGroupWaitBits+0x18c>
            {
                taskENTER_CRITICAL();
 8000646:	f002 fca5 	bl	8002f94 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 800064a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000656:	f000 f8b6 	bl	80007c6 <prvTestWaitCondition>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d009      	beq.n	8000674 <xEventGroupWaitBits+0x184>
                    {
                        if( xClearOnExit != pdFALSE )
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <xEventGroupWaitBits+0x184>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	43db      	mvns	r3, r3
 800066e:	401a      	ands	r2, r3
 8000670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000672:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8000674:	2301      	movs	r3, #1
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
                }
                taskEXIT_CRITICAL();
 8000678:	f002 fcbe 	bl	8002ff8 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800067c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800067e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8000684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8000686:	4618      	mov	r0, r3
 8000688:	3740      	adds	r7, #64	@ 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	e000ed04 	.word	0xe000ed04

08000694 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08e      	sub	sp, #56	@ 0x38
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800069e:	2300      	movs	r3, #0
 80006a0:	633b      	str	r3, [r7, #48]	@ 0x30
        EventGroup_t * pxEventBits = xEventGroup;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xMatchFound = pdFALSE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10b      	bne.n	80006c8 <xEventGroupSetBits+0x34>
    __asm volatile
 80006b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	613b      	str	r3, [r7, #16]
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <xEventGroupSetBits+0x30>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006ce:	d30b      	bcc.n	80006e8 <xEventGroupSetBits+0x54>
    __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	60fb      	str	r3, [r7, #12]
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <xEventGroupSetBits+0x50>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 80006e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ea:	3304      	adds	r3, #4
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
        pxListEnd = listGET_END_MARKER( pxList );
 80006ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f0:	3308      	adds	r3, #8
 80006f2:	623b      	str	r3, [r7, #32]
        vTaskSuspendAll();
 80006f4:	f001 f858 	bl	80017a8 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 80006f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 80006fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	431a      	orrs	r2, r3
 8000706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000708:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 800070a:	e03c      	b.n	8000786 <xEventGroupSetBits+0xf2>
            {
                pxNext = listGET_NEXT( pxListItem );
 800070c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	61fb      	str	r3, [r7, #28]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	61bb      	str	r3, [r7, #24]
                xMatchFound = pdFALSE;
 8000718:	2300      	movs	r3, #0
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8000722:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800072a:	61bb      	str	r3, [r7, #24]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d108      	bne.n	8000748 <xEventGroupSetBits+0xb4>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	4013      	ands	r3, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00b      	beq.n	800075a <xEventGroupSetBits+0xc6>
                    {
                        xMatchFound = pdTRUE;
 8000742:	2301      	movs	r3, #1
 8000744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000746:	e008      	b.n	800075a <xEventGroupSetBits+0xc6>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	4013      	ands	r3, r2
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	429a      	cmp	r2, r3
 8000754:	d101      	bne.n	800075a <xEventGroupSetBits+0xc6>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8000756:	2301      	movs	r3, #1
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 800075a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800075c:	2b00      	cmp	r3, #0
 800075e:	d010      	beq.n	8000782 <xEventGroupSetBits+0xee>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <xEventGroupSetBits+0xde>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 800076a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	4313      	orrs	r3, r2
 8000770:	633b      	str	r3, [r7, #48]	@ 0x30
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800077a:	4619      	mov	r1, r3
 800077c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800077e:	f001 fc5b 	bl	8002038 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
            while( pxListItem != pxListEnd )
 8000786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	429a      	cmp	r2, r3
 800078c:	d1be      	bne.n	800070c <xEventGroupSetBits+0x78>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800078e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000794:	43db      	mvns	r3, r3
 8000796:	401a      	ands	r2, r3
 8000798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800079a:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 800079c:	f001 f812 	bl	80017c4 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80007a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007a2:	681b      	ldr	r3, [r3, #0]
    }
 80007a4:	4618      	mov	r0, r3
 80007a6:	3738      	adds	r7, #56	@ 0x38
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
    void vEventGroupSetBitsCallback( void * pvEventGroup,
                                     uint32_t ulBitsToSet )
    {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
        traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80007b6:	6839      	ldr	r1, [r7, #0]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff6b 	bl	8000694 <xEventGroupSetBits>

        traceRETURN_vEventGroupSetBitsCallback();
    }
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 80007c6:	b480      	push	{r7}
 80007c8:	b087      	sub	sp, #28
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d107      	bne.n	80007ec <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	4013      	ands	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00a      	beq.n	80007fc <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e007      	b.n	80007fc <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	4013      	ands	r3, r2
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d101      	bne.n	80007fc <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 80007fc:	697b      	ldr	r3, [r7, #20]
    }
 80007fe:	4618      	mov	r0, r3
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <xEventGroupSetBitsFromISR>:
    #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

        BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                              const EventBits_t uxBitsToSet,
                                              BaseType_t * pxHigherPriorityTaskWoken )
        {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
            BaseType_t xReturn;

            traceENTER_xEventGroupSetBitsFromISR( xEventGroup, uxBitsToSet, pxHigherPriorityTaskWoken );

            traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
            xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	68f9      	ldr	r1, [r7, #12]
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <xEventGroupSetBitsFromISR+0x24>)
 8000820:	f002 fa18 	bl	8002c54 <xTimerPendFunctionCallFromISR>
 8000824:	6178      	str	r0, [r7, #20]

            traceRETURN_xEventGroupSetBitsFromISR( xReturn );

            return xReturn;
 8000826:	697b      	ldr	r3, [r7, #20]
        }
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	080007ad 	.word	0x080007ad

08000834 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f103 0208 	add.w	r2, r3, #8
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 0208 	add.w	r2, r3, #8
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f103 0208 	add.w	r2, r3, #8
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800088e:	b480      	push	{r7}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80008d6:	b480      	push	{r7}
 80008d8:	b085      	sub	sp, #20
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ec:	d103      	bne.n	80008f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e00c      	b.n	8000910 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3308      	adds	r3, #8
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e002      	b.n	8000904 <vListInsert+0x2e>
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d2f6      	bcs.n	80008fe <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	6892      	ldr	r2, [r2, #8]
 800095e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	6852      	ldr	r2, [r2, #4]
 8000968:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	d103      	bne.n	800097c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1e5a      	subs	r2, r3, #1
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80009a6:	2301      	movs	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10b      	bne.n	80009cc <xQueueGenericReset+0x30>
    __asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	60fb      	str	r3, [r7, #12]
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d05d      	beq.n	8000a8e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d059      	beq.n	8000a8e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009e2:	2100      	movs	r1, #0
 80009e4:	fba3 2302 	umull	r2, r3, r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d000      	beq.n	80009ee <xQueueGenericReset+0x52>
 80009ec:	2101      	movs	r1, #1
 80009ee:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14c      	bne.n	8000a8e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80009f4:	f002 face 	bl	8002f94 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a00:	6939      	ldr	r1, [r7, #16]
 8000a02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	441a      	add	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	2200      	movs	r2, #0
 8000a12:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a24:	3b01      	subs	r3, #1
 8000a26:	6939      	ldr	r1, [r7, #16]
 8000a28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000a2a:	fb01 f303 	mul.w	r3, r1, r3
 8000a2e:	441a      	add	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	22ff      	movs	r2, #255	@ 0xff
 8000a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	22ff      	movs	r2, #255	@ 0xff
 8000a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d114      	bne.n	8000a74 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d01a      	beq.n	8000a88 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	3310      	adds	r3, #16
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fa14 	bl	8001e84 <xTaskRemoveFromEventList>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d012      	beq.n	8000a88 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <xQueueGenericReset+0x120>)
 8000a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	f3bf 8f4f 	dsb	sy
 8000a6e:	f3bf 8f6f 	isb	sy
 8000a72:	e009      	b.n	8000a88 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	3310      	adds	r3, #16
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fedb 	bl	8000834 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	3324      	adds	r3, #36	@ 0x24
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fed6 	bl	8000834 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000a88:	f002 fab6 	bl	8002ff8 <vPortExitCritical>
 8000a8c:	e001      	b.n	8000a92 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d10b      	bne.n	8000ab0 <xQueueGenericReset+0x114>
    __asm volatile
 8000a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	60bb      	str	r3, [r7, #8]
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000ab0:	697b      	ldr	r3, [r7, #20]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000ed04 	.word	0xe000ed04

08000ac0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d02e      	beq.n	8000b36 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000ad8:	2100      	movs	r1, #0
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	fba3 2302 	umull	r2, r3, r3, r2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d000      	beq.n	8000ae8 <xQueueGenericCreate+0x28>
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d123      	bne.n	8000b36 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000af6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000afa:	d81c      	bhi.n	8000b36 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	3350      	adds	r3, #80	@ 0x50
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fb68 	bl	80031e0 <pvPortMalloc>
 8000b10:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d01d      	beq.n	8000b54 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3350      	adds	r3, #80	@ 0x50
 8000b20:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f000 f815 	bl	8000b5e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000b34:	e00e      	b.n	8000b54 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10b      	bne.n	8000b54 <xQueueGenericCreate+0x94>
    __asm volatile
 8000b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b40:	f383 8811 	msr	BASEPRI, r3
 8000b44:	f3bf 8f6f 	isb	sy
 8000b48:	f3bf 8f4f 	dsb	sy
 8000b4c:	613b      	str	r3, [r7, #16]
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000b54:	69fb      	ldr	r3, [r7, #28]
    }
 8000b56:	4618      	mov	r0, r3
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	e002      	b.n	8000b80 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	69b8      	ldr	r0, [r7, #24]
 8000b90:	f7ff ff04 	bl	800099c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	78fa      	ldrb	r2, [r7, #3]
 8000b98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b092      	sub	sp, #72	@ 0x48
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8000bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10b      	bne.n	8000bd4 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 8000bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bc0:	f383 8811 	msr	BASEPRI, r3
 8000bc4:	f3bf 8f6f 	isb	sy
 8000bc8:	f3bf 8f4f 	dsb	sy
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d103      	bne.n	8000be2 <xQueueGenericSendFromISR+0x3e>
 8000bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <xQueueGenericSendFromISR+0x42>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <xQueueGenericSendFromISR+0x44>
 8000be6:	2300      	movs	r3, #0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10b      	bne.n	8000c04 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 8000bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bf0:	f383 8811 	msr	BASEPRI, r3
 8000bf4:	f3bf 8f6f 	isb	sy
 8000bf8:	f3bf 8f4f 	dsb	sy
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d103      	bne.n	8000c12 <xQueueGenericSendFromISR+0x6e>
 8000c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <xQueueGenericSendFromISR+0x72>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <xQueueGenericSendFromISR+0x74>
 8000c16:	2300      	movs	r3, #0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10b      	bne.n	8000c34 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 8000c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c34:	f002 fa92 	bl	800315c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000c38:	f3ef 8211 	mrs	r2, BASEPRI
 8000c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c40:	f383 8811 	msr	BASEPRI, r3
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	f3bf 8f4f 	dsb	sy
 8000c4c:	623a      	str	r2, [r7, #32]
 8000c4e:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000c50:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d302      	bcc.n	8000c66 <xQueueGenericSendFromISR+0xc2>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d147      	bne.n	8000cf6 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c6c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c7c:	f000 f92a 	bl	8000ed4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000c80:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d112      	bne.n	8000cb0 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d02e      	beq.n	8000cf0 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c94:	3324      	adds	r3, #36	@ 0x24
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 f8f4 	bl	8001e84 <xTaskRemoveFromEventList>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d026      	beq.n	8000cf0 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d023      	beq.n	8000cf0 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e01f      	b.n	8000cf0 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000cb0:	f000 fea0 	bl	80019f4 <uxTaskGetNumberOfTasks>
 8000cb4:	6338      	str	r0, [r7, #48]	@ 0x30
 8000cb6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d917      	bls.n	8000cf0 <xQueueGenericSendFromISR+0x14c>
 8000cc0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cc6:	d10b      	bne.n	8000ce0 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8000cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	61bb      	str	r3, [r7, #24]
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <xQueueGenericSendFromISR+0x138>
 8000ce0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	b25a      	sxtb	r2, r3
 8000cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8000cf4:	e001      	b.n	8000cfa <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cfc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000d04:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8000d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3748      	adds	r7, #72	@ 0x48
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	@ 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10b      	bne.n	8000d42 <xQueueReceive+0x32>
    __asm volatile
 8000d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d2e:	f383 8811 	msr	BASEPRI, r3
 8000d32:	f3bf 8f6f 	isb	sy
 8000d36:	f3bf 8f4f 	dsb	sy
 8000d3a:	623b      	str	r3, [r7, #32]
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	e7fd      	b.n	8000d3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d103      	bne.n	8000d50 <xQueueReceive+0x40>
 8000d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <xQueueReceive+0x44>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <xQueueReceive+0x46>
 8000d54:	2300      	movs	r3, #0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10b      	bne.n	8000d72 <xQueueReceive+0x62>
    __asm volatile
 8000d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d5e:	f383 8811 	msr	BASEPRI, r3
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	61fb      	str	r3, [r7, #28]
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	e7fd      	b.n	8000d6e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d72:	f001 fb61 	bl	8002438 <xTaskGetSchedulerState>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <xQueueReceive+0x72>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <xQueueReceive+0x76>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <xQueueReceive+0x78>
 8000d86:	2300      	movs	r3, #0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10b      	bne.n	8000da4 <xQueueReceive+0x94>
    __asm volatile
 8000d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d90:	f383 8811 	msr	BASEPRI, r3
 8000d94:	f3bf 8f6f 	isb	sy
 8000d98:	f3bf 8f4f 	dsb	sy
 8000d9c:	61bb      	str	r3, [r7, #24]
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000da4:	f002 f8f6 	bl	8002f94 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01f      	beq.n	8000df4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000db8:	f000 f8f6 	bl	8000fa8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00f      	beq.n	8000dec <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dce:	3310      	adds	r3, #16
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 f857 	bl	8001e84 <xTaskRemoveFromEventList>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d007      	beq.n	8000dec <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed0 <xQueueReceive+0x1c0>)
 8000dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f3bf 8f4f 	dsb	sy
 8000de8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000dec:	f002 f904 	bl	8002ff8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e069      	b.n	8000ec8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d103      	bne.n	8000e02 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000dfa:	f002 f8fd 	bl	8002ff8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e062      	b.n	8000ec8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d106      	bne.n	8000e16 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f9d7 	bl	80021c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e16:	f002 f8ef 	bl	8002ff8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000e1a:	f000 fcc5 	bl	80017a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e1e:	f002 f8b9 	bl	8002f94 <vPortEnterCritical>
 8000e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2e:	d103      	bne.n	8000e38 <xQueueReceive+0x128>
 8000e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d103      	bne.n	8000e4e <xQueueReceive+0x13e>
 8000e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000e4e:	f002 f8d3 	bl	8002ff8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e52:	1d3a      	adds	r2, r7, #4
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f9c6 	bl	80021ec <xTaskCheckForTimeOut>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d123      	bne.n	8000eae <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e68:	f000 f916 	bl	8001098 <prvIsQueueEmpty>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d017      	beq.n	8000ea2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e74:	3324      	adds	r3, #36	@ 0x24
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 ff3e 	bl	8001cfc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e82:	f000 f8b7 	bl	8000ff4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e86:	f000 fc9d 	bl	80017c4 <xTaskResumeAll>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d189      	bne.n	8000da4 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <xQueueReceive+0x1c0>)
 8000e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	f3bf 8f4f 	dsb	sy
 8000e9c:	f3bf 8f6f 	isb	sy
 8000ea0:	e780      	b.n	8000da4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ea4:	f000 f8a6 	bl	8000ff4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ea8:	f000 fc8c 	bl	80017c4 <xTaskResumeAll>
 8000eac:	e77a      	b.n	8000da4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000eb0:	f000 f8a0 	bl	8000ff4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000eb4:	f000 fc86 	bl	80017c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000eba:	f000 f8ed 	bl	8001098 <prvIsQueueEmpty>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f43f af6f 	beq.w	8000da4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000ec6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3730      	adds	r7, #48	@ 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	e000ed04 	.word	0xe000ed04

08000ed4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10d      	bne.n	8000f0e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d14d      	bne.n	8000f96 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fab8 	bl	8002474 <xTaskPriorityDisinherit>
 8000f04:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	e043      	b.n	8000f96 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d119      	bne.n	8000f48 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6858      	ldr	r0, [r3, #4]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	f005 f86c 	bl	8005ffc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	441a      	add	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d32b      	bcc.n	8000f96 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	e026      	b.n	8000f96 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	68d8      	ldr	r0, [r3, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	461a      	mov	r2, r3
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	f005 f852 	bl	8005ffc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	425b      	negs	r3, r3
 8000f62:	441a      	add	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	441a      	add	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d105      	bne.n	8000f96 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f9e:	697b      	ldr	r3, [r7, #20]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d018      	beq.n	8000fec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	441a      	add	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d303      	bcc.n	8000fdc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68d9      	ldr	r1, [r3, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f005 f808 	bl	8005ffc <memcpy>
    }
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000ffc:	f001 ffca 	bl	8002f94 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001006:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001008:	e011      	b.n	800102e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100e:	2b00      	cmp	r3, #0
 8001010:	d012      	beq.n	8001038 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3324      	adds	r3, #36	@ 0x24
 8001016:	4618      	mov	r0, r3
 8001018:	f000 ff34 	bl	8001e84 <xTaskRemoveFromEventList>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001022:	f001 f94b 	bl	80022bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3b01      	subs	r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dce9      	bgt.n	800100a <prvUnlockQueue+0x16>
 8001036:	e000      	b.n	800103a <prvUnlockQueue+0x46>
                    break;
 8001038:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	22ff      	movs	r2, #255	@ 0xff
 800103e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001042:	f001 ffd9 	bl	8002ff8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001046:	f001 ffa5 	bl	8002f94 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001050:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001052:	e011      	b.n	8001078 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d012      	beq.n	8001082 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3310      	adds	r3, #16
 8001060:	4618      	mov	r0, r3
 8001062:	f000 ff0f 	bl	8001e84 <xTaskRemoveFromEventList>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800106c:	f001 f926 	bl	80022bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	3b01      	subs	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800107c:	2b00      	cmp	r3, #0
 800107e:	dce9      	bgt.n	8001054 <prvUnlockQueue+0x60>
 8001080:	e000      	b.n	8001084 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001082:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800108c:	f001 ffb4 	bl	8002ff8 <vPortExitCritical>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010a0:	f001 ff78 	bl	8002f94 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e001      	b.n	80010b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010b6:	f001 ff9f 	bl	8002ff8 <vPortExitCritical>

    return xReturn;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10b      	bne.n	80010f0 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80010d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010dc:	f383 8811 	msr	BASEPRI, r3
 80010e0:	f3bf 8f6f 	isb	sy
 80010e4:	f3bf 8f4f 	dsb	sy
 80010e8:	60fb      	str	r3, [r7, #12]
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d024      	beq.n	8001140 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e01e      	b.n	800113a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80010fc:	4a18      	ldr	r2, [pc, #96]	@ (8001160 <vQueueAddToRegistry+0x9c>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d105      	bne.n	8001118 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4a13      	ldr	r2, [pc, #76]	@ (8001160 <vQueueAddToRegistry+0x9c>)
 8001112:	4413      	add	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
                    break;
 8001116:	e013      	b.n	8001140 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10a      	bne.n	8001134 <vQueueAddToRegistry+0x70>
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <vQueueAddToRegistry+0x9c>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d104      	bne.n	8001134 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4a0c      	ldr	r2, [pc, #48]	@ (8001160 <vQueueAddToRegistry+0x9c>)
 8001130:	4413      	add	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d9dd      	bls.n	80010fc <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8001152:	bf00      	nop
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000034 	.word	0x20000034

08001164 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001174:	f001 ff0e 	bl	8002f94 <vPortEnterCritical>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d103      	bne.n	800118e <vQueueWaitForMessageRestricted+0x2a>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001194:	b25b      	sxtb	r3, r3
 8001196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119a:	d103      	bne.n	80011a4 <vQueueWaitForMessageRestricted+0x40>
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011a4:	f001 ff28 	bl	8002ff8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3324      	adds	r3, #36	@ 0x24
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fe1d 	bl	8001df8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff18 	bl	8000ff4 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fffe 	bl	80031e0 <pvPortMalloc>
 80011e4:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80011ec:	205c      	movs	r0, #92	@ 0x5c
 80011ee:	f001 fff7 	bl	80031e0 <pvPortMalloc>
 80011f2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80011fa:	225c      	movs	r2, #92	@ 0x5c
 80011fc:	2100      	movs	r1, #0
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f004 fed0 	bl	8005fa4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	631a      	str	r2, [r3, #48]	@ 0x30
 800120a:	e005      	b.n	8001218 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800120c:	6938      	ldr	r0, [r7, #16]
 800120e:	f002 f919 	bl	8003444 <vPortFree>
 8001212:	e001      	b.n	8001218 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00d      	beq.n	800123a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800121e:	2300      	movs	r3, #0
 8001220:	9303      	str	r3, [sp, #12]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f828 	bl	800128a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800123a:	697b      	ldr	r3, [r7, #20]
    }
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af02      	add	r7, sp, #8
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff ffb3 	bl	80011cc <prvCreateTask>
 8001266:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800126e:	6938      	ldr	r0, [r7, #16]
 8001270:	f000 f89c 	bl	80013ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001274:	2301      	movs	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e002      	b.n	8001280 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001280:	697b      	ldr	r3, [r7, #20]
    }
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800129a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	461a      	mov	r2, r3
 80012a2:	21a5      	movs	r1, #165	@ 0xa5
 80012a4:	f004 fe7e 	bl	8005fa4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80012a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80012b2:	3b01      	subs	r3, #1
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f023 0307 	bic.w	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80012cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012d0:	f383 8811 	msr	BASEPRI, r3
 80012d4:	f3bf 8f6f 	isb	sy
 80012d8:	f3bf 8f4f 	dsb	sy
 80012dc:	617b      	str	r3, [r7, #20]
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d01e      	beq.n	8001328 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e012      	b.n	8001316 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	4413      	add	r3, r2
 80012f6:	7819      	ldrb	r1, [r3, #0]
 80012f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	3334      	adds	r3, #52	@ 0x34
 8001300:	460a      	mov	r2, r1
 8001302:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3301      	adds	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	2b0e      	cmp	r3, #14
 800131a:	d9e9      	bls.n	80012f0 <prvInitialiseNewTask+0x66>
 800131c:	e000      	b.n	8001320 <prvInitialiseNewTask+0x96>
            {
                break;
 800131e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132a:	2b04      	cmp	r3, #4
 800132c:	d90b      	bls.n	8001346 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800132e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001332:	f383 8811 	msr	BASEPRI, r3
 8001336:	f3bf 8f6f 	isb	sy
 800133a:	f3bf 8f4f 	dsb	sy
 800133e:	613b      	str	r3, [r7, #16]
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	e7fd      	b.n	8001342 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001348:	2b04      	cmp	r3, #4
 800134a:	d901      	bls.n	8001350 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800134c:	2304      	movs	r3, #4
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001354:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800135a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800135c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800135e:	3304      	adds	r3, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fa87 	bl	8000874 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001368:	3318      	adds	r3, #24
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fa82 	bl	8000874 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001374:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	f1c3 0205 	rsb	r2, r3, #5
 800137c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800137e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	68f9      	ldr	r1, [r7, #12]
 800138a:	69b8      	ldr	r0, [r7, #24]
 800138c:	f001 fc82 	bl	8002c94 <pxPortInitialiseStack>
 8001390:	4602      	mov	r2, r0
 8001392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001394:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800139e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80013b4:	f001 fdee 	bl	8002f94 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80013b8:	4b41      	ldr	r3, [pc, #260]	@ (80014c0 <prvAddNewTaskToReadyList+0x114>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	4a40      	ldr	r2, [pc, #256]	@ (80014c0 <prvAddNewTaskToReadyList+0x114>)
 80013c0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80013c2:	4b40      	ldr	r3, [pc, #256]	@ (80014c4 <prvAddNewTaskToReadyList+0x118>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80013ca:	4a3e      	ldr	r2, [pc, #248]	@ (80014c4 <prvAddNewTaskToReadyList+0x118>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013d0:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <prvAddNewTaskToReadyList+0x114>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d110      	bne.n	80013fa <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80013d8:	f000 ff94 	bl	8002304 <prvInitialiseTaskLists>
 80013dc:	e00d      	b.n	80013fa <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80013de:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <prvAddNewTaskToReadyList+0x11c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013e6:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <prvAddNewTaskToReadyList+0x118>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d802      	bhi.n	80013fa <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80013f4:	4a33      	ldr	r2, [pc, #204]	@ (80014c4 <prvAddNewTaskToReadyList+0x118>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <prvAddNewTaskToReadyList+0x120>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	4a32      	ldr	r2, [pc, #200]	@ (80014cc <prvAddNewTaskToReadyList+0x120>)
 8001402:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <prvAddNewTaskToReadyList+0x120>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	2201      	movs	r2, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <prvAddNewTaskToReadyList+0x124>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4313      	orrs	r3, r2
 800141a:	4a2d      	ldr	r2, [pc, #180]	@ (80014d0 <prvAddNewTaskToReadyList+0x124>)
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001422:	492c      	ldr	r1, [pc, #176]	@ (80014d4 <prvAddNewTaskToReadyList+0x128>)
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	3204      	adds	r2, #4
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1d1a      	adds	r2, r3, #4
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <prvAddNewTaskToReadyList+0x128>)
 8001462:	441a      	add	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800146c:	4919      	ldr	r1, [pc, #100]	@ (80014d4 <prvAddNewTaskToReadyList+0x128>)
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800147e:	1c59      	adds	r1, r3, #1
 8001480:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <prvAddNewTaskToReadyList+0x128>)
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4403      	add	r3, r0
 800148c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800148e:	f001 fdb3 	bl	8002ff8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <prvAddNewTaskToReadyList+0x11c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00e      	beq.n	80014b8 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <prvAddNewTaskToReadyList+0x118>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <prvAddNewTaskToReadyList+0x10c>
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <prvAddNewTaskToReadyList+0x12c>)
 80014aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000014c 	.word	0x2000014c
 80014c4:	20000074 	.word	0x20000074
 80014c8:	20000158 	.word	0x20000158
 80014cc:	20000168 	.word	0x20000168
 80014d0:	20000154 	.word	0x20000154
 80014d4:	20000078 	.word	0x20000078
 80014d8:	e000ed04 	.word	0xe000ed04

080014dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 80014e8:	f001 fd54 	bl	8002f94 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <vTaskDelete+0x1c>
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <vTaskDelete+0x11c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	e000      	b.n	80014fa <vTaskDelete+0x1e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	3304      	adds	r3, #4
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fa21 	bl	8000948 <uxListRemove>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d115      	bne.n	8001538 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001510:	493a      	ldr	r1, [pc, #232]	@ (80015fc <vTaskDelete+0x120>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10a      	bne.n	8001538 <vTaskDelete+0x5c>
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001526:	2201      	movs	r2, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43da      	mvns	r2, r3
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <vTaskDelete+0x124>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4013      	ands	r3, r2
 8001534:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <vTaskDelete+0x124>)
 8001536:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	3318      	adds	r3, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f9ff 	bl	8000948 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <vTaskDelete+0x128>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <vTaskDelete+0x128>)
 8001552:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <vTaskDelete+0x11c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	429a      	cmp	r2, r3
 800155c:	d101      	bne.n	8001562 <vTaskDelete+0x86>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <vTaskDelete+0x88>
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8001566:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <vTaskDelete+0x12c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <vTaskDelete+0xb4>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00d      	beq.n	8001590 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	3304      	adds	r3, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4824      	ldr	r0, [pc, #144]	@ (800160c <vTaskDelete+0x130>)
 800157c:	f7ff f987 	bl	800088e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8001580:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <vTaskDelete+0x134>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a22      	ldr	r2, [pc, #136]	@ (8001610 <vTaskDelete+0x134>)
 8001588:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800158a:	2301      	movs	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e006      	b.n	800159e <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8001590:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <vTaskDelete+0x138>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a1f      	ldr	r2, [pc, #124]	@ (8001614 <vTaskDelete+0x138>)
 8001598:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800159a:	f000 ff31 	bl	8002400 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800159e:	f001 fd2b 	bl	8002ff8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d002      	beq.n	80015ae <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 80015a8:	6938      	ldr	r0, [r7, #16]
 80015aa:	f000 ff19 	bl	80023e0 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <vTaskDelete+0x12c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01c      	beq.n	80015f0 <vTaskDelete+0x114>
            {
                if( pxTCB == pxCurrentTCB )
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <vTaskDelete+0x11c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d117      	bne.n	80015f0 <vTaskDelete+0x114>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <vTaskDelete+0x13c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <vTaskDelete+0x104>
    __asm volatile
 80015c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015cc:	f383 8811 	msr	BASEPRI, r3
 80015d0:	f3bf 8f6f 	isb	sy
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	60bb      	str	r3, [r7, #8]
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <vTaskDelete+0x100>
                    taskYIELD_WITHIN_API();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <vTaskDelete+0x140>)
 80015e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000074 	.word	0x20000074
 80015fc:	20000078 	.word	0x20000078
 8001600:	20000154 	.word	0x20000154
 8001604:	20000168 	.word	0x20000168
 8001608:	20000158 	.word	0x20000158
 800160c:	20000120 	.word	0x20000120
 8001610:	20000134 	.word	0x20000134
 8001614:	2000014c 	.word	0x2000014c
 8001618:	20000174 	.word	0x20000174
 800161c:	e000ed04 	.word	0xe000ed04

08001620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d018      	beq.n	8001664 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8001632:	f000 f8b9 	bl	80017a8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <vTaskDelay+0x64>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d00b      	beq.n	8001656 <vTaskDelay+0x36>
    __asm volatile
 800163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	60bb      	str	r3, [r7, #8]
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	e7fd      	b.n	8001652 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001656:	2100      	movs	r1, #0
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 ffcb 	bl	80025f4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800165e:	f000 f8b1 	bl	80017c4 <xTaskResumeAll>
 8001662:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d107      	bne.n	800167a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <vTaskDelay+0x68>)
 800166c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f3bf 8f4f 	dsb	sy
 8001676:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000174 	.word	0x20000174
 8001688:	e000ed04 	.word	0xe000ed04

0800168c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001692:	2301      	movs	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e011      	b.n	80016c4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80016a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001714 <prvCreateIdleTasks+0x88>)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4413      	add	r3, r2
 80016a6:	7819      	ldrb	r1, [r3, #0]
 80016a8:	463a      	mov	r2, r7
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4413      	add	r3, r2
 80016ae:	460a      	mov	r2, r1
 80016b0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80016b2:	463a      	mov	r2, r7
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b0e      	cmp	r3, #14
 80016c8:	ddea      	ble.n	80016a0 <prvCreateIdleTasks+0x14>
 80016ca:	e000      	b.n	80016ce <prvCreateIdleTasks+0x42>
        {
            break;
 80016cc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e015      	b.n	8001700 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <prvCreateIdleTasks+0x8c>)
 80016d6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <prvCreateIdleTasks+0x90>)
 80016de:	4413      	add	r3, r2
 80016e0:	4639      	mov	r1, r7
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	2282      	movs	r2, #130	@ 0x82
 80016ec:	6938      	ldr	r0, [r7, #16]
 80016ee:	f7ff fda9 	bl	8001244 <xTaskCreate>
 80016f2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	dde6      	ble.n	80016d4 <prvCreateIdleTasks+0x48>
 8001706:	e000      	b.n	800170a <prvCreateIdleTasks+0x7e>
        {
            break;
 8001708:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800170a:	69fb      	ldr	r3, [r7, #28]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	08006030 	.word	0x08006030
 8001718:	080022d5 	.word	0x080022d5
 800171c:	20000170 	.word	0x20000170

08001720 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001726:	f7ff ffb1 	bl	800168c <prvCreateIdleTasks>
 800172a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001732:	f000 ffe1 	bl	80026f8 <xTimerCreateTimerTask>
 8001736:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d116      	bne.n	800176c <vTaskStartScheduler+0x4c>
    __asm volatile
 800173e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001742:	f383 8811 	msr	BASEPRI, r3
 8001746:	f3bf 8f6f 	isb	sy
 800174a:	f3bf 8f4f 	dsb	sy
 800174e:	60bb      	str	r3, [r7, #8]
}
 8001750:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <vTaskStartScheduler+0x78>)
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <vTaskStartScheduler+0x7c>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001760:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <vTaskStartScheduler+0x80>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001766:	f001 fb25 	bl	8002db4 <xPortStartScheduler>
 800176a:	e00f      	b.n	800178c <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001772:	d10b      	bne.n	800178c <vTaskStartScheduler+0x6c>
    __asm volatile
 8001774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001778:	f383 8811 	msr	BASEPRI, r3
 800177c:	f3bf 8f6f 	isb	sy
 8001780:	f3bf 8f4f 	dsb	sy
 8001784:	607b      	str	r3, [r7, #4]
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <vTaskStartScheduler+0x84>)
 800178e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000016c 	.word	0x2000016c
 800179c:	20000158 	.word	0x20000158
 80017a0:	20000150 	.word	0x20000150
 80017a4:	20000000 	.word	0x20000000

080017a8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <vTaskSuspendAll+0x18>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a03      	ldr	r2, [pc, #12]	@ (80017c0 <vTaskSuspendAll+0x18>)
 80017b4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	20000174 	.word	0x20000174

080017c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80017d2:	f001 fbdf 	bl	8002f94 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80017da:	4b75      	ldr	r3, [pc, #468]	@ (80019b0 <xTaskResumeAll+0x1ec>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10b      	bne.n	80017fa <xTaskResumeAll+0x36>
    __asm volatile
 80017e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	603b      	str	r3, [r7, #0]
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	e7fd      	b.n	80017f6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80017fa:	4b6d      	ldr	r3, [pc, #436]	@ (80019b0 <xTaskResumeAll+0x1ec>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a6b      	ldr	r2, [pc, #428]	@ (80019b0 <xTaskResumeAll+0x1ec>)
 8001802:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001804:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <xTaskResumeAll+0x1ec>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 80ca 	bne.w	80019a2 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800180e:	4b69      	ldr	r3, [pc, #420]	@ (80019b4 <xTaskResumeAll+0x1f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80c5 	beq.w	80019a2 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001818:	e08e      	b.n	8001938 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800181a:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <xTaskResumeAll+0x1f4>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	6a12      	ldr	r2, [r2, #32]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	69d2      	ldr	r2, [r2, #28]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3318      	adds	r3, #24
 8001844:	429a      	cmp	r2, r3
 8001846:	d103      	bne.n	8001850 <xTaskResumeAll+0x8c>
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1e5a      	subs	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	68d2      	ldr	r2, [r2, #12]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	6892      	ldr	r2, [r2, #8]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	429a      	cmp	r2, r3
 8001884:	d103      	bne.n	800188e <xTaskResumeAll+0xca>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	2201      	movs	r2, #1
 80018a4:	409a      	lsls	r2, r3
 80018a6:	4b45      	ldr	r3, [pc, #276]	@ (80019bc <xTaskResumeAll+0x1f8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	4a43      	ldr	r2, [pc, #268]	@ (80019bc <xTaskResumeAll+0x1f8>)
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b4:	4942      	ldr	r1, [pc, #264]	@ (80019c0 <xTaskResumeAll+0x1fc>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	3304      	adds	r3, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	3204      	adds	r2, #4
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	1d1a      	adds	r2, r3, #4
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4a33      	ldr	r2, [pc, #204]	@ (80019c0 <xTaskResumeAll+0x1fc>)
 80018f4:	441a      	add	r2, r3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018fe:	4930      	ldr	r1, [pc, #192]	@ (80019c0 <xTaskResumeAll+0x1fc>)
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001910:	1c59      	adds	r1, r3, #1
 8001912:	482b      	ldr	r0, [pc, #172]	@ (80019c0 <xTaskResumeAll+0x1fc>)
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4403      	add	r3, r0
 800191e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001924:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <xTaskResumeAll+0x200>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	429a      	cmp	r2, r3
 800192c:	d904      	bls.n	8001938 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800192e:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <xTaskResumeAll+0x204>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2101      	movs	r1, #1
 8001934:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <xTaskResumeAll+0x1f4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f47f af6c 	bne.w	800181a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001948:	f000 fd5a 	bl	8002400 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800194c:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <xTaskResumeAll+0x208>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d012      	beq.n	800197e <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001958:	f000 f858 	bl	8001a0c <xTaskIncrementTick>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001962:	4a19      	ldr	r2, [pc, #100]	@ (80019c8 <xTaskResumeAll+0x204>)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2101      	movs	r1, #1
 8001968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3b01      	subs	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ef      	bne.n	8001958 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <xTaskResumeAll+0x208>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <xTaskResumeAll+0x204>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800198a:	2301      	movs	r3, #1
 800198c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <xTaskResumeAll+0x200>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <xTaskResumeAll+0x20c>)
 8001994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f3bf 8f4f 	dsb	sy
 800199e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80019a2:	f001 fb29 	bl	8002ff8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80019a6:	69bb      	ldr	r3, [r7, #24]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000174 	.word	0x20000174
 80019b4:	2000014c 	.word	0x2000014c
 80019b8:	2000010c 	.word	0x2000010c
 80019bc:	20000154 	.word	0x20000154
 80019c0:	20000078 	.word	0x20000078
 80019c4:	20000074 	.word	0x20000074
 80019c8:	20000160 	.word	0x20000160
 80019cc:	2000015c 	.word	0x2000015c
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <xTaskGetTickCount+0x1c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000150 	.word	0x20000150

080019f4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <uxTaskGetNumberOfTasks+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2000014c 	.word	0x2000014c

08001a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	@ 0x28
 8001a10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001a16:	4b7f      	ldr	r3, [pc, #508]	@ (8001c14 <xTaskIncrementTick+0x208>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 80ef 	bne.w	8001bfe <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a20:	4b7d      	ldr	r3, [pc, #500]	@ (8001c18 <xTaskIncrementTick+0x20c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001a28:	4a7b      	ldr	r2, [pc, #492]	@ (8001c18 <xTaskIncrementTick+0x20c>)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d121      	bne.n	8001a78 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001a34:	4b79      	ldr	r3, [pc, #484]	@ (8001c1c <xTaskIncrementTick+0x210>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <xTaskIncrementTick+0x4a>
    __asm volatile
 8001a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	607b      	str	r3, [r7, #4]
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	e7fd      	b.n	8001a52 <xTaskIncrementTick+0x46>
 8001a56:	4b71      	ldr	r3, [pc, #452]	@ (8001c1c <xTaskIncrementTick+0x210>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	4b70      	ldr	r3, [pc, #448]	@ (8001c20 <xTaskIncrementTick+0x214>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6e      	ldr	r2, [pc, #440]	@ (8001c1c <xTaskIncrementTick+0x210>)
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4a6e      	ldr	r2, [pc, #440]	@ (8001c20 <xTaskIncrementTick+0x214>)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c24 <xTaskIncrementTick+0x218>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a6c      	ldr	r2, [pc, #432]	@ (8001c24 <xTaskIncrementTick+0x218>)
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	f000 fcc4 	bl	8002400 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a78:	4b6b      	ldr	r3, [pc, #428]	@ (8001c28 <xTaskIncrementTick+0x21c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	f0c0 80a8 	bcc.w	8001bd4 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a84:	4b65      	ldr	r3, [pc, #404]	@ (8001c1c <xTaskIncrementTick+0x210>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d104      	bne.n	8001a98 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001a8e:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <xTaskIncrementTick+0x21c>)
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	601a      	str	r2, [r3, #0]
                    break;
 8001a96:	e09d      	b.n	8001bd4 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a98:	4b60      	ldr	r3, [pc, #384]	@ (8001c1c <xTaskIncrementTick+0x210>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001aa8:	6a3a      	ldr	r2, [r7, #32]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d203      	bcs.n	8001ab8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <xTaskIncrementTick+0x21c>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	6013      	str	r3, [r2, #0]
                        break;
 8001ab6:	e08d      	b.n	8001bd4 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	68d2      	ldr	r2, [r2, #12]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	6892      	ldr	r2, [r2, #8]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d103      	bne.n	8001ae6 <xTaskIncrementTick+0xda>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1e5a      	subs	r2, r3, #1
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01e      	beq.n	8001b3c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	6a12      	ldr	r2, [r2, #32]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	69d2      	ldr	r2, [r2, #28]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	3318      	adds	r3, #24
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d103      	bne.n	8001b2c <xTaskIncrementTick+0x120>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6a1a      	ldr	r2, [r3, #32]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	1e5a      	subs	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	2201      	movs	r2, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <xTaskIncrementTick+0x220>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	4a38      	ldr	r2, [pc, #224]	@ (8001c2c <xTaskIncrementTick+0x220>)
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b52:	4937      	ldr	r1, [pc, #220]	@ (8001c30 <xTaskIncrementTick+0x224>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	3204      	adds	r2, #4
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1d1a      	adds	r2, r3, #4
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4a27      	ldr	r2, [pc, #156]	@ (8001c30 <xTaskIncrementTick+0x224>)
 8001b92:	441a      	add	r2, r3
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b9c:	4924      	ldr	r1, [pc, #144]	@ (8001c30 <xTaskIncrementTick+0x224>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	481f      	ldr	r0, [pc, #124]	@ (8001c30 <xTaskIncrementTick+0x224>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4403      	add	r3, r0
 8001bbc:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <xTaskIncrementTick+0x228>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f67f af5b 	bls.w	8001a84 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bd2:	e757      	b.n	8001a84 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001bd4:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <xTaskIncrementTick+0x228>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bda:	4915      	ldr	r1, [pc, #84]	@ (8001c30 <xTaskIncrementTick+0x224>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d901      	bls.n	8001bf0 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <xTaskIncrementTick+0x22c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfc:	e004      	b.n	8001c08 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <xTaskIncrementTick+0x230>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <xTaskIncrementTick+0x230>)
 8001c06:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000174 	.word	0x20000174
 8001c18:	20000150 	.word	0x20000150
 8001c1c:	20000104 	.word	0x20000104
 8001c20:	20000108 	.word	0x20000108
 8001c24:	20000164 	.word	0x20000164
 8001c28:	2000016c 	.word	0x2000016c
 8001c2c:	20000154 	.word	0x20000154
 8001c30:	20000078 	.word	0x20000078
 8001c34:	20000074 	.word	0x20000074
 8001c38:	20000160 	.word	0x20000160
 8001c3c:	2000015c 	.word	0x2000015c

08001c40 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001c46:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <vTaskSwitchContext+0xa8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001c4e:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <vTaskSwitchContext+0xac>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001c54:	e041      	b.n	8001cda <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001c56:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <vTaskSwitchContext+0xac>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c5c:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <vTaskSwitchContext+0xb0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	f1c3 031f 	rsb	r3, r3, #31
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	4920      	ldr	r1, [pc, #128]	@ (8001cf4 <vTaskSwitchContext+0xb4>)
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <vTaskSwitchContext+0x5e>
    __asm volatile
 8001c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	607b      	str	r3, [r7, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	e7fd      	b.n	8001c9a <vTaskSwitchContext+0x5a>
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <vTaskSwitchContext+0xb4>)
 8001caa:	4413      	add	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d103      	bne.n	8001ccc <vTaskSwitchContext+0x8c>
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <vTaskSwitchContext+0xb8>)
 8001cd4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <vTaskSwitchContext+0xb8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
    }
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000174 	.word	0x20000174
 8001cec:	20000160 	.word	0x20000160
 8001cf0:	20000154 	.word	0x20000154
 8001cf4:	20000078 	.word	0x20000078
 8001cf8:	20000074 	.word	0x20000074

08001cfc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10b      	bne.n	8001d24 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d10:	f383 8811 	msr	BASEPRI, r3
 8001d14:	f3bf 8f6f 	isb	sy
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	60fb      	str	r3, [r7, #12]
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <vTaskPlaceOnEventList+0x48>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3318      	adds	r3, #24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fdd2 	bl	80008d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d32:	2101      	movs	r1, #1
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f000 fc5d 	bl	80025f4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000074 	.word	0x20000074

08001d48 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10b      	bne.n	8001d72 <vTaskPlaceOnUnorderedEventList+0x2a>
    __asm volatile
 8001d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	61bb      	str	r3, [r7, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	e7fd      	b.n	8001d6e <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10b      	bne.n	8001d92 <vTaskPlaceOnUnorderedEventList+0x4a>
    __asm volatile
 8001d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d7e:	f383 8811 	msr	BASEPRI, r3
 8001d82:	f3bf 8f6f 	isb	sy
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	617b      	str	r3, [r7, #20]
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	e7fd      	b.n	8001d8e <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8001d92:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d9c:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	61da      	str	r2, [r3, #28]
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	6892      	ldr	r2, [r2, #8]
 8001db4:	621a      	str	r2, [r3, #32]
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	3218      	adds	r2, #24
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f103 0218 	add.w	r2, r3, #24
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001de0:	2101      	movs	r1, #1
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fc06 	bl	80025f4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000174 	.word	0x20000174
 8001df4:	20000074 	.word	0x20000074

08001df8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10b      	bne.n	8001e22 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	613b      	str	r3, [r7, #16]
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	e7fd      	b.n	8001e1e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	61da      	str	r2, [r3, #28]
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	6892      	ldr	r2, [r2, #8]
 8001e38:	621a      	str	r2, [r3, #32]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	3218      	adds	r2, #24
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f103 0218 	add.w	r2, r3, #24
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	68b8      	ldr	r0, [r7, #8]
 8001e74:	f000 fbbe 	bl	80025f4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000074 	.word	0x20000074

08001e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e84:	b480      	push	{r7}
 8001e86:	b08b      	sub	sp, #44	@ 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10b      	bne.n	8001eb2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	60fb      	str	r3, [r7, #12]
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	e7fd      	b.n	8001eae <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	6a12      	ldr	r2, [r2, #32]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	69d2      	ldr	r2, [r2, #28]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	3318      	adds	r3, #24
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d103      	bne.n	8001ee0 <xTaskRemoveFromEventList+0x5c>
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <xTaskRemoveFromEventList+0x19c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d160      	bne.n	8001fba <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	6a3a      	ldr	r2, [r7, #32]
 8001f04:	68d2      	ldr	r2, [r2, #12]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	6a3a      	ldr	r2, [r7, #32]
 8001f0e:	6892      	ldr	r2, [r2, #8]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d103      	bne.n	8001f26 <xTaskRemoveFromEventList+0xa2>
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	4b39      	ldr	r3, [pc, #228]	@ (8002024 <xTaskRemoveFromEventList+0x1a0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	4a37      	ldr	r2, [pc, #220]	@ (8002024 <xTaskRemoveFromEventList+0x1a0>)
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f4c:	4936      	ldr	r1, [pc, #216]	@ (8002028 <xTaskRemoveFromEventList+0x1a4>)
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	3304      	adds	r3, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	3204      	adds	r2, #4
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	1d1a      	adds	r2, r3, #4
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4a27      	ldr	r2, [pc, #156]	@ (8002028 <xTaskRemoveFromEventList+0x1a4>)
 8001f8c:	441a      	add	r2, r3
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	615a      	str	r2, [r3, #20]
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f96:	4924      	ldr	r1, [pc, #144]	@ (8002028 <xTaskRemoveFromEventList+0x1a4>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a3a      	ldr	r2, [r7, #32]
 8001fa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fa8:	1c59      	adds	r1, r3, #1
 8001faa:	481f      	ldr	r0, [pc, #124]	@ (8002028 <xTaskRemoveFromEventList+0x1a4>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	6019      	str	r1, [r3, #0]
 8001fb8:	e01b      	b.n	8001ff2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <xTaskRemoveFromEventList+0x1a8>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	61da      	str	r2, [r3, #28]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	621a      	str	r2, [r3, #32]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	6a3a      	ldr	r2, [r7, #32]
 8001fd4:	3218      	adds	r2, #24
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	f103 0218 	add.w	r2, r3, #24
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	4a11      	ldr	r2, [pc, #68]	@ (800202c <xTaskRemoveFromEventList+0x1a8>)
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fe8:	4b10      	ldr	r3, [pc, #64]	@ (800202c <xTaskRemoveFromEventList+0x1a8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	4a0f      	ldr	r2, [pc, #60]	@ (800202c <xTaskRemoveFromEventList+0x1a8>)
 8001ff0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <xTaskRemoveFromEventList+0x1ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d905      	bls.n	800200c <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002000:	2301      	movs	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <xTaskRemoveFromEventList+0x1b0>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e001      	b.n	8002010 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002012:	4618      	mov	r0, r3
 8002014:	372c      	adds	r7, #44	@ 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000174 	.word	0x20000174
 8002024:	20000154 	.word	0x20000154
 8002028:	20000078 	.word	0x20000078
 800202c:	2000010c 	.word	0x2000010c
 8002030:	20000074 	.word	0x20000074
 8002034:	20000160 	.word	0x20000160

08002038 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8002042:	4b5a      	ldr	r3, [pc, #360]	@ (80021ac <vTaskRemoveFromUnorderedEventList+0x174>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <vTaskRemoveFromUnorderedEventList+0x2a>
    __asm volatile
 800204a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	60fb      	str	r3, [r7, #12]
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	e7fd      	b.n	800205e <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <vTaskRemoveFromUnorderedEventList+0x58>
    __asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	60bb      	str	r3, [r7, #8]
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <vTaskRemoveFromUnorderedEventList+0x54>
    listREMOVE_ITEM( pxEventListItem );
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6892      	ldr	r2, [r2, #8]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6852      	ldr	r2, [r2, #4]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d103      	bne.n	80020bc <vTaskRemoveFromUnorderedEventList+0x84>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	6892      	ldr	r2, [r2, #8]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <vTaskRemoveFromUnorderedEventList+0xc2>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1e5a      	subs	r2, r3, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <vTaskRemoveFromUnorderedEventList+0x178>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	4a25      	ldr	r2, [pc, #148]	@ (80021b0 <vTaskRemoveFromUnorderedEventList+0x178>)
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002120:	4924      	ldr	r1, [pc, #144]	@ (80021b4 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3304      	adds	r3, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	3204      	adds	r2, #4
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	1d1a      	adds	r2, r3, #4
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8002160:	441a      	add	r2, r3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	615a      	str	r2, [r3, #20]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216a:	4912      	ldr	r1, [pc, #72]	@ (80021b4 <vTaskRemoveFromUnorderedEventList+0x17c>)
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800217c:	1c59      	adds	r1, r3, #1
 800217e:	480d      	ldr	r0, [pc, #52]	@ (80021b4 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <vTaskRemoveFromUnorderedEventList+0x180>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	429a      	cmp	r2, r3
 8002198:	d902      	bls.n	80021a0 <vTaskRemoveFromUnorderedEventList+0x168>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <vTaskRemoveFromUnorderedEventList+0x184>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 80021a0:	bf00      	nop
 80021a2:	3724      	adds	r7, #36	@ 0x24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	20000174 	.word	0x20000174
 80021b0:	20000154 	.word	0x20000154
 80021b4:	20000078 	.word	0x20000078
 80021b8:	20000074 	.word	0x20000074
 80021bc:	20000160 	.word	0x20000160

080021c0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <vTaskInternalSetTimeOutState+0x24>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <vTaskInternalSetTimeOutState+0x28>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20000164 	.word	0x20000164
 80021e8:	20000150 	.word	0x20000150

080021ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80021fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	613b      	str	r3, [r7, #16]
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10b      	bne.n	8002232 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800221a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221e:	f383 8811 	msr	BASEPRI, r3
 8002222:	f3bf 8f6f 	isb	sy
 8002226:	f3bf 8f4f 	dsb	sy
 800222a:	60fb      	str	r3, [r7, #12]
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	e7fd      	b.n	800222e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8002232:	f000 feaf 	bl	8002f94 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <xTaskCheckForTimeOut+0xc8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d102      	bne.n	8002256 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	e026      	b.n	80022a4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <xTaskCheckForTimeOut+0xcc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d00a      	beq.n	8002278 <xTaskCheckForTimeOut+0x8c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	429a      	cmp	r2, r3
 800226a:	d305      	bcc.n	8002278 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800226c:	2301      	movs	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e015      	b.n	80022a4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d20b      	bcs.n	800229a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad2      	subs	r2, r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff96 	bl	80021c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	e004      	b.n	80022a4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80022a4:	f000 fea8 	bl	8002ff8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80022a8:	69fb      	ldr	r3, [r7, #28]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000150 	.word	0x20000150
 80022b8:	20000164 	.word	0x20000164

080022bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <vTaskMissedYield+0x14>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	20000160 	.word	0x20000160

080022d4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80022dc:	f000 f852 	bl	8002384 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <prvIdleTask+0x28>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d9f9      	bls.n	80022dc <prvIdleTask+0x8>
            {
                taskYIELD();
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <prvIdleTask+0x2c>)
 80022ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80022f8:	e7f0      	b.n	80022dc <prvIdleTask+0x8>
 80022fa:	bf00      	nop
 80022fc:	20000078 	.word	0x20000078
 8002300:	e000ed04 	.word	0xe000ed04

08002304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	e00c      	b.n	800232a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <prvInitialiseTaskLists+0x60>)
 800231c:	4413      	add	r3, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fa88 	bl	8000834 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3301      	adds	r3, #1
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d9ef      	bls.n	8002310 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002330:	480d      	ldr	r0, [pc, #52]	@ (8002368 <prvInitialiseTaskLists+0x64>)
 8002332:	f7fe fa7f 	bl	8000834 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002336:	480d      	ldr	r0, [pc, #52]	@ (800236c <prvInitialiseTaskLists+0x68>)
 8002338:	f7fe fa7c 	bl	8000834 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800233c:	480c      	ldr	r0, [pc, #48]	@ (8002370 <prvInitialiseTaskLists+0x6c>)
 800233e:	f7fe fa79 	bl	8000834 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002342:	480c      	ldr	r0, [pc, #48]	@ (8002374 <prvInitialiseTaskLists+0x70>)
 8002344:	f7fe fa76 	bl	8000834 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002348:	480b      	ldr	r0, [pc, #44]	@ (8002378 <prvInitialiseTaskLists+0x74>)
 800234a:	f7fe fa73 	bl	8000834 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <prvInitialiseTaskLists+0x78>)
 8002350:	4a05      	ldr	r2, [pc, #20]	@ (8002368 <prvInitialiseTaskLists+0x64>)
 8002352:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002354:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <prvInitialiseTaskLists+0x7c>)
 8002356:	4a05      	ldr	r2, [pc, #20]	@ (800236c <prvInitialiseTaskLists+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000078 	.word	0x20000078
 8002368:	200000dc 	.word	0x200000dc
 800236c:	200000f0 	.word	0x200000f0
 8002370:	2000010c 	.word	0x2000010c
 8002374:	20000120 	.word	0x20000120
 8002378:	20000138 	.word	0x20000138
 800237c:	20000104 	.word	0x20000104
 8002380:	20000108 	.word	0x20000108

08002384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800238a:	e019      	b.n	80023c0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800238c:	f000 fe02 	bl	8002f94 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002390:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <prvCheckTasksWaitingTermination+0x50>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fad3 	bl	8000948 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80023a2:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <prvCheckTasksWaitingTermination+0x54>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	4a0b      	ldr	r2, [pc, #44]	@ (80023d8 <prvCheckTasksWaitingTermination+0x54>)
 80023aa:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <prvCheckTasksWaitingTermination+0x58>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <prvCheckTasksWaitingTermination+0x58>)
 80023b4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80023b6:	f000 fe1f 	bl	8002ff8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f810 	bl	80023e0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <prvCheckTasksWaitingTermination+0x58>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e1      	bne.n	800238c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000120 	.word	0x20000120
 80023d8:	2000014c 	.word	0x2000014c
 80023dc:	20000134 	.word	0x20000134

080023e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 f829 	bl	8003444 <vPortFree>
            vPortFree( pxTCB );
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f001 f826 	bl	8003444 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <prvResetNextTaskUnblockTime+0x30>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d104      	bne.n	8002418 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <prvResetNextTaskUnblockTime+0x34>)
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002416:	e005      	b.n	8002424 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <prvResetNextTaskUnblockTime+0x30>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <prvResetNextTaskUnblockTime+0x34>)
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000104 	.word	0x20000104
 8002434:	2000016c 	.word	0x2000016c

08002438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800243e:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <xTaskGetSchedulerState+0x34>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002446:	2301      	movs	r3, #1
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	e008      	b.n	800245e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <xTaskGetSchedulerState+0x38>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002454:	2302      	movs	r3, #2
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e001      	b.n	800245e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800245e:	687b      	ldr	r3, [r7, #4]
    }
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	20000158 	.word	0x20000158
 8002470:	20000174 	.word	0x20000174

08002474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8090 	beq.w	80025ac <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800248c:	4b4a      	ldr	r3, [pc, #296]	@ (80025b8 <xTaskPriorityDisinherit+0x144>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	429a      	cmp	r2, r3
 8002494:	d00b      	beq.n	80024ae <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	613b      	str	r3, [r7, #16]
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	e7fd      	b.n	80024aa <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10b      	bne.n	80024ce <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	60fb      	str	r3, [r7, #12]
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	e7fd      	b.n	80024ca <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d2:	1e5a      	subs	r2, r3, #1
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d063      	beq.n	80025ac <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d15f      	bne.n	80025ac <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fa29 	bl	8000948 <uxListRemove>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	2201      	movs	r2, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	4b2c      	ldr	r3, [pc, #176]	@ (80025bc <xTaskPriorityDisinherit+0x148>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4013      	ands	r3, r2
 800250e:	4a2b      	ldr	r2, [pc, #172]	@ (80025bc <xTaskPriorityDisinherit+0x148>)
 8002510:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	f1c3 0205 	rsb	r2, r3, #5
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	2201      	movs	r2, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	4b23      	ldr	r3, [pc, #140]	@ (80025bc <xTaskPriorityDisinherit+0x148>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	4a21      	ldr	r2, [pc, #132]	@ (80025bc <xTaskPriorityDisinherit+0x148>)
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253c:	4920      	ldr	r1, [pc, #128]	@ (80025c0 <xTaskPriorityDisinherit+0x14c>)
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3304      	adds	r3, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	3204      	adds	r2, #4
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1d1a      	adds	r2, r3, #4
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4a11      	ldr	r2, [pc, #68]	@ (80025c0 <xTaskPriorityDisinherit+0x14c>)
 800257c:	441a      	add	r2, r3
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	615a      	str	r2, [r3, #20]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002586:	490e      	ldr	r1, [pc, #56]	@ (80025c0 <xTaskPriorityDisinherit+0x14c>)
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	4809      	ldr	r0, [pc, #36]	@ (80025c0 <xTaskPriorityDisinherit+0x14c>)
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4403      	add	r3, r0
 80025a6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 80025ac:	69fb      	ldr	r3, [r7, #28]
    }
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000074 	.word	0x20000074
 80025bc:	20000154 	.word	0x20000154
 80025c0:	20000078 	.word	0x20000078

080025c4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <uxTaskResetEventItemValue+0x2c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <uxTaskResetEventItemValue+0x2c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <uxTaskResetEventItemValue+0x2c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1c2 0205 	rsb	r2, r2, #5
 80025e0:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	20000074 	.word	0x20000074

080025f4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80025fe:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800260a:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002610:	4b35      	ldr	r3, [pc, #212]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3304      	adds	r3, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe f996 	bl	8000948 <uxListRemove>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002622:	4b31      	ldr	r3, [pc, #196]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	2201      	movs	r2, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	4b2e      	ldr	r3, [pc, #184]	@ (80026ec <prvAddCurrentTaskToDelayedList+0xf8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4013      	ands	r3, r2
 8002636:	4a2d      	ldr	r2, [pc, #180]	@ (80026ec <prvAddCurrentTaskToDelayedList+0xf8>)
 8002638:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d124      	bne.n	800268c <prvAddCurrentTaskToDelayedList+0x98>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d021      	beq.n	800268c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002648:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	6892      	ldr	r2, [r2, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	3204      	adds	r2, #4
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1d1a      	adds	r2, r3, #4
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800267c:	615a      	str	r2, [r3, #20]
 800267e:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	4a1a      	ldr	r2, [pc, #104]	@ (80026f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800268a:	e022      	b.n	80026d2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3304      	adds	r3, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7fe f912 	bl	80008d6 <vListInsert>
}
 80026b2:	e00e      	b.n	80026d2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	69b8      	ldr	r0, [r7, #24]
 80026be:	f7fe f90a 	bl	80008d6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80026c2:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <prvAddCurrentTaskToDelayedList+0x100>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d202      	bcs.n	80026d2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80026cc:	4a09      	ldr	r2, [pc, #36]	@ (80026f4 <prvAddCurrentTaskToDelayedList+0x100>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6013      	str	r3, [r2, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000150 	.word	0x20000150
 80026e0:	20000104 	.word	0x20000104
 80026e4:	20000108 	.word	0x20000108
 80026e8:	20000074 	.word	0x20000074
 80026ec:	20000154 	.word	0x20000154
 80026f0:	20000138 	.word	0x20000138
 80026f4:	2000016c 	.word	0x2000016c

080026f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002702:	f000 fa71 	bl	8002be8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <xTimerCreateTimerTask+0x58>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <xTimerCreateTimerTask+0x5c>)
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	2302      	movs	r3, #2
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2300      	movs	r3, #0
 8002718:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800271c:	490e      	ldr	r1, [pc, #56]	@ (8002758 <xTimerCreateTimerTask+0x60>)
 800271e:	480f      	ldr	r0, [pc, #60]	@ (800275c <xTimerCreateTimerTask+0x64>)
 8002720:	f7fe fd90 	bl	8001244 <xTaskCreate>
 8002724:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	603b      	str	r3, [r7, #0]
}
 800273e:	bf00      	nop
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002744:	687b      	ldr	r3, [r7, #4]
    }
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200001a8 	.word	0x200001a8
 8002754:	200001ac 	.word	0x200001ac
 8002758:	08006038 	.word	0x08006038
 800275c:	08002805 	.word	0x08002805

08002760 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800276c:	e008      	b.n	8002780 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4413      	add	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	18d1      	adds	r1, r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f8df 	bl	8002950 <prvInsertTimerInActiveList>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ea      	bne.n	800276e <prvReloadTimer+0xe>
        }
    }
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027ae:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <prvProcessExpiredTimer+0x5c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3304      	adds	r3, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe f8c3 	bl	8000948 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff ffc3 	bl	8002760 <prvReloadTimer>
 80027da:	e008      	b.n	80027ee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	4798      	blx	r3
    }
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200001a0 	.word	0x200001a0

08002804 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f859 	bl	80028c8 <prvGetNextExpireTime>
 8002816:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4619      	mov	r1, r3
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f805 	bl	800282c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002822:	f000 f8d7 	bl	80029d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002826:	bf00      	nop
 8002828:	e7f0      	b.n	800280c <prvTimerTask+0x8>
	...

0800282c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002836:	f7fe ffb7 	bl	80017a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f866 	bl	8002910 <prvSampleTimeNow>
 8002844:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d130      	bne.n	80028ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <prvProcessTimerOrBlockTask+0x3c>
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	429a      	cmp	r2, r3
 8002858:	d806      	bhi.n	8002868 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800285a:	f7fe ffb3 	bl	80017c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff9f 	bl	80027a4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002866:	e024      	b.n	80028b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800286e:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <prvProcessTimerOrBlockTask+0x90>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <prvProcessTimerOrBlockTask+0x50>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <prvProcessTimerOrBlockTask+0x52>
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002880:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <prvProcessTimerOrBlockTask+0x94>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f7fe fc69 	bl	8001164 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002892:	f7fe ff97 	bl	80017c4 <xTaskResumeAll>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <prvProcessTimerOrBlockTask+0x98>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
    }
 80028ac:	e001      	b.n	80028b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80028ae:	f7fe ff89 	bl	80017c4 <xTaskResumeAll>
    }
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200001a4 	.word	0x200001a4
 80028c0:	200001a8 	.word	0x200001a8
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80028d0:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <prvGetNextExpireTime+0x44>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <prvGetNextExpireTime+0x16>
 80028da:	2201      	movs	r2, #1
 80028dc:	e000      	b.n	80028e0 <prvGetNextExpireTime+0x18>
 80028de:	2200      	movs	r2, #0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80028ec:	4b07      	ldr	r3, [pc, #28]	@ (800290c <prvGetNextExpireTime+0x44>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e001      	b.n	80028fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80028fc:	68fb      	ldr	r3, [r7, #12]
    }
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200001a0 	.word	0x200001a0

08002910 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002918:	f7ff f85c 	bl	80019d4 <xTaskGetTickCount>
 800291c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800291e:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <prvSampleTimeNow+0x3c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	429a      	cmp	r2, r3
 8002926:	d205      	bcs.n	8002934 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002928:	f000 f938 	bl	8002b9c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e002      	b.n	800293a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800293a:	4a04      	ldr	r2, [pc, #16]	@ (800294c <prvSampleTimeNow+0x3c>)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002940:	68fb      	ldr	r3, [r7, #12]
    }
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200001b0 	.word	0x200001b0

08002950 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	d812      	bhi.n	800299c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002984:	2301      	movs	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e01b      	b.n	80029c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800298a:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <prvInsertTimerInActiveList+0x7c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3304      	adds	r3, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f7fd ff9e 	bl	80008d6 <vListInsert>
 800299a:	e012      	b.n	80029c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d206      	bcs.n	80029b2 <prvInsertTimerInActiveList+0x62>
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d302      	bcc.n	80029b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e007      	b.n	80029c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <prvInsertTimerInActiveList+0x80>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3304      	adds	r3, #4
 80029ba:	4619      	mov	r1, r3
 80029bc:	4610      	mov	r0, r2
 80029be:	f7fd ff8a 	bl	80008d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80029c2:	697b      	ldr	r3, [r7, #20]
    }
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200001a4 	.word	0x200001a4
 80029d0:	200001a0 	.word	0x200001a0

080029d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80029e6:	e0c7      	b.n	8002b78 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	da19      	bge.n	8002a22 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	3304      	adds	r3, #4
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	61bb      	str	r3, [r7, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a18:	6850      	ldr	r0, [r2, #4]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f2c0 80a7 	blt.w	8002b78 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd ff84 	bl	8000948 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a40:	463b      	mov	r3, r7
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff64 	bl	8002910 <prvSampleTimeNow>
 8002a48:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	f200 808f 	bhi.w	8002b72 <prvProcessReceivedCommands+0x19e>
 8002a54:	a201      	add	r2, pc, #4	@ (adr r2, 8002a5c <prvProcessReceivedCommands+0x88>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a81 	.word	0x08002a81
 8002a60:	08002a81 	.word	0x08002a81
 8002a64:	08002ae9 	.word	0x08002ae9
 8002a68:	08002afd 	.word	0x08002afd
 8002a6c:	08002b49 	.word	0x08002b49
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a81 	.word	0x08002a81
 8002a78:	08002ae9 	.word	0x08002ae9
 8002a7c:	08002afd 	.word	0x08002afd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	18d1      	adds	r1, r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	6a38      	ldr	r0, [r7, #32]
 8002aa0:	f7ff ff56 	bl	8002950 <prvInsertTimerInActiveList>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d065      	beq.n	8002b76 <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4413      	add	r3, r2
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6a38      	ldr	r0, [r7, #32]
 8002ac6:	f7ff fe4b 	bl	8002760 <prvReloadTimer>
 8002aca:	e008      	b.n	8002ade <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	6a38      	ldr	r0, [r7, #32]
 8002ae4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002ae6:	e046      	b.n	8002b76 <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002afa:	e03d      	b.n	8002b78 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	617b      	str	r3, [r7, #20]
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	18d1      	adds	r1, r2, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	6a38      	ldr	r0, [r7, #32]
 8002b42:	f7ff ff05 	bl	8002950 <prvInsertTimerInActiveList>
                        break;
 8002b46:	e017      	b.n	8002b78 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8002b56:	6a38      	ldr	r0, [r7, #32]
 8002b58:	f000 fc74 	bl	8003444 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002b5c:	e00c      	b.n	8002b78 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002b70:	e002      	b.n	8002b78 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <prvProcessReceivedCommands+0x1a4>
                        break;
 8002b76:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002b78:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <prvProcessReceivedCommands+0x1c4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1d39      	adds	r1, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe f8c5 	bl	8000d10 <xQueueReceive>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f af2d 	bne.w	80029e8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	3728      	adds	r7, #40	@ 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200001a8 	.word	0x200001a8

08002b9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ba2:	e009      	b.n	8002bb8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <prvSwitchTimerLists+0x44>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002bae:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f7ff fdf6 	bl	80027a4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <prvSwitchTimerLists+0x44>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002bc2:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <prvSwitchTimerLists+0x44>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <prvSwitchTimerLists+0x48>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <prvSwitchTimerLists+0x44>)
 8002bce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <prvSwitchTimerLists+0x48>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6013      	str	r3, [r2, #0]
    }
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200001a0 	.word	0x200001a0
 8002be4:	200001a4 	.word	0x200001a4

08002be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002bec:	f000 f9d2 	bl	8002f94 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <prvCheckForValidListAndQueue+0x54>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11d      	bne.n	8002c34 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002bf8:	4811      	ldr	r0, [pc, #68]	@ (8002c40 <prvCheckForValidListAndQueue+0x58>)
 8002bfa:	f7fd fe1b 	bl	8000834 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002bfe:	4811      	ldr	r0, [pc, #68]	@ (8002c44 <prvCheckForValidListAndQueue+0x5c>)
 8002c00:	f7fd fe18 	bl	8000834 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002c04:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <prvCheckForValidListAndQueue+0x60>)
 8002c06:	4a0e      	ldr	r2, [pc, #56]	@ (8002c40 <prvCheckForValidListAndQueue+0x58>)
 8002c08:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <prvCheckForValidListAndQueue+0x64>)
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <prvCheckForValidListAndQueue+0x5c>)
 8002c0e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002c10:	2200      	movs	r2, #0
 8002c12:	2110      	movs	r1, #16
 8002c14:	200a      	movs	r0, #10
 8002c16:	f7fd ff53 	bl	8000ac0 <xQueueGenericCreate>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <prvCheckForValidListAndQueue+0x54>)
 8002c1e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002c20:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <prvCheckForValidListAndQueue+0x54>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <prvCheckForValidListAndQueue+0x54>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4908      	ldr	r1, [pc, #32]	@ (8002c50 <prvCheckForValidListAndQueue+0x68>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fa48 	bl	80010c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002c34:	f000 f9e0 	bl	8002ff8 <vPortExitCritical>
    }
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200001a8 	.word	0x200001a8
 8002c40:	20000178 	.word	0x20000178
 8002c44:	2000018c 	.word	0x2000018c
 8002c48:	200001a0 	.word	0x200001a0
 8002c4c:	200001a4 	.word	0x200001a4
 8002c50:	08006040 	.word	0x08006040

08002c54 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]

            traceENTER_xTimerPendFunctionCallFromISR( xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken );

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8002c62:	f06f 0301 	mvn.w	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <xTimerPendFunctionCallFromISR+0x3c>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	f107 0114 	add.w	r1, r7, #20
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	f7fd ff90 	bl	8000ba4 <xQueueGenericSendFromISR>
 8002c84:	6278      	str	r0, [r7, #36]	@ 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
            traceRETURN_xTimerPendFunctionCallFromISR( xReturn );

            return xReturn;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	@ 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200001a8 	.word	0x200001a8

08002c94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3b04      	subs	r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 0201 	bic.w	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b04      	subs	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <pxPortInitialiseStack+0x64>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3b14      	subs	r3, #20
 8002cce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b04      	subs	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f06f 0202 	mvn.w	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3b20      	subs	r3, #32
 8002ce8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	08002cfd 	.word	0x08002cfd

08002cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d06:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <prvTaskExitError+0x58>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d00b      	beq.n	8002d28 <prvTaskExitError+0x2c>
    __asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	60fb      	str	r3, [r7, #12]
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <prvTaskExitError+0x28>
    __asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	60bb      	str	r3, [r7, #8]
}
 8002d3a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d3c:	bf00      	nop
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0fc      	beq.n	8002d3e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000004 	.word	0x20000004
	...

08002d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <pxCurrentTCBConst2>)
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	6808      	ldr	r0, [r1, #0]
 8002d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6a:	f380 8809 	msr	PSP, r0
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f380 8811 	msr	BASEPRI, r0
 8002d7a:	4770      	bx	lr
 8002d7c:	f3af 8000 	nop.w

08002d80 <pxCurrentTCBConst2>:
 8002d80:	20000074 	.word	0x20000074
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop

08002d88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d88:	4808      	ldr	r0, [pc, #32]	@ (8002dac <prvPortStartFirstTask+0x24>)
 8002d8a:	6800      	ldr	r0, [r0, #0]
 8002d8c:	6800      	ldr	r0, [r0, #0]
 8002d8e:	f380 8808 	msr	MSP, r0
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f380 8814 	msr	CONTROL, r0
 8002d9a:	b662      	cpsie	i
 8002d9c:	b661      	cpsie	f
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	df00      	svc	0
 8002da8:	bf00      	nop
 8002daa:	0000      	.short	0x0000
 8002dac:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop

08002db4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	@ 0x30
 8002db8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dba:	4b69      	ldr	r3, [pc, #420]	@ (8002f60 <xPortStartScheduler+0x1ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a69      	ldr	r2, [pc, #420]	@ (8002f64 <xPortStartScheduler+0x1b0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10b      	bne.n	8002ddc <xPortStartScheduler+0x28>
    __asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ddc:	4b60      	ldr	r3, [pc, #384]	@ (8002f60 <xPortStartScheduler+0x1ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a61      	ldr	r2, [pc, #388]	@ (8002f68 <xPortStartScheduler+0x1b4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10b      	bne.n	8002dfe <xPortStartScheduler+0x4a>
    __asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	623b      	str	r3, [r7, #32]
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	e7fd      	b.n	8002dfa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f6c <xPortStartScheduler+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	332c      	adds	r3, #44	@ 0x2c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a59      	ldr	r2, [pc, #356]	@ (8002f70 <xPortStartScheduler+0x1bc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00b      	beq.n	8002e28 <xPortStartScheduler+0x74>
    __asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61fb      	str	r3, [r7, #28]
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2a:	3338      	adds	r3, #56	@ 0x38
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a51      	ldr	r2, [pc, #324]	@ (8002f74 <xPortStartScheduler+0x1c0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00b      	beq.n	8002e4c <xPortStartScheduler+0x98>
    __asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	61bb      	str	r3, [r7, #24]
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e50:	4b49      	ldr	r3, [pc, #292]	@ (8002f78 <xPortStartScheduler+0x1c4>)
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5e:	22ff      	movs	r2, #255	@ 0xff
 8002e60:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <xPortStartScheduler+0x1c8>)
 8002e76:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002e78:	4b40      	ldr	r3, [pc, #256]	@ (8002f7c <xPortStartScheduler+0x1c8>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <xPortStartScheduler+0xe4>
    __asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	617b      	str	r3, [r7, #20]
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d013      	beq.n	8002ece <xPortStartScheduler+0x11a>
    __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	613b      	str	r3, [r7, #16]
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	e7fd      	b.n	8002eba <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed6:	2b80      	cmp	r3, #128	@ 0x80
 8002ed8:	d0f1      	beq.n	8002ebe <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d103      	bne.n	8002ee8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002ee0:	4b27      	ldr	r3, [pc, #156]	@ (8002f80 <xPortStartScheduler+0x1cc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e004      	b.n	8002ef2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	4a24      	ldr	r2, [pc, #144]	@ (8002f80 <xPortStartScheduler+0x1cc>)
 8002ef0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ef2:	4b23      	ldr	r3, [pc, #140]	@ (8002f80 <xPortStartScheduler+0x1cc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	4a21      	ldr	r2, [pc, #132]	@ (8002f80 <xPortStartScheduler+0x1cc>)
 8002efa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002efc:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <xPortStartScheduler+0x1cc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f04:	4a1e      	ldr	r2, [pc, #120]	@ (8002f80 <xPortStartScheduler+0x1cc>)
 8002f06:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <xPortStartScheduler+0x1d0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1b      	ldr	r2, [pc, #108]	@ (8002f84 <xPortStartScheduler+0x1d0>)
 8002f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <xPortStartScheduler+0x1d0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a18      	ldr	r2, [pc, #96]	@ (8002f84 <xPortStartScheduler+0x1d0>)
 8002f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f26:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002f28:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <xPortStartScheduler+0x1d4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f2e:	f000 f8e5 	bl	80030fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f32:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <xPortStartScheduler+0x1d8>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002f38:	f000 f904 	bl	8003144 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <xPortStartScheduler+0x1dc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a13      	ldr	r2, [pc, #76]	@ (8002f90 <xPortStartScheduler+0x1dc>)
 8002f42:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002f46:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f48:	f7ff ff1e 	bl	8002d88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f4c:	f7fe fe78 	bl	8001c40 <vTaskSwitchContext>
    prvTaskExitError();
 8002f50:	f7ff fed4 	bl	8002cfc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3730      	adds	r7, #48	@ 0x30
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00
 8002f64:	410fc271 	.word	0x410fc271
 8002f68:	410fc270 	.word	0x410fc270
 8002f6c:	e000ed08 	.word	0xe000ed08
 8002f70:	08002d61 	.word	0x08002d61
 8002f74:	08003051 	.word	0x08003051
 8002f78:	e000e400 	.word	0xe000e400
 8002f7c:	200001b4 	.word	0x200001b4
 8002f80:	200001b8 	.word	0x200001b8
 8002f84:	e000ed20 	.word	0xe000ed20
 8002f88:	e000ed1c 	.word	0xe000ed1c
 8002f8c:	20000004 	.word	0x20000004
 8002f90:	e000ef34 	.word	0xe000ef34

08002f94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
    __asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	607b      	str	r3, [r7, #4]
}
 8002fac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fae:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <vPortEnterCritical+0x5c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff0 <vPortEnterCritical+0x5c>)
 8002fb6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <vPortEnterCritical+0x5c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d110      	bne.n	8002fe2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <vPortEnterCritical+0x60>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <vPortEnterCritical+0x4e>
    __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	603b      	str	r3, [r7, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <vPortEnterCritical+0x4a>
    }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000004 	.word	0x20000004
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <vPortExitCritical+0x50>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <vPortExitCritical+0x26>
    __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	607b      	str	r3, [r7, #4]
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	e7fd      	b.n	800301a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <vPortExitCritical+0x50>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3b01      	subs	r3, #1
 8003024:	4a08      	ldr	r2, [pc, #32]	@ (8003048 <vPortExitCritical+0x50>)
 8003026:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003028:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <vPortExitCritical+0x50>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <vPortExitCritical+0x44>
 8003030:	2300      	movs	r3, #0
 8003032:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f383 8811 	msr	BASEPRI, r3
}
 800303a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	20000004 	.word	0x20000004
 800304c:	00000000 	.word	0x00000000

08003050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003050:	f3ef 8009 	mrs	r0, PSP
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <pxCurrentTCBConst>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f01e 0f10 	tst.w	lr, #16
 8003060:	bf08      	it	eq
 8003062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306a:	6010      	str	r0, [r2, #0]
 800306c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003074:	f380 8811 	msr	BASEPRI, r0
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f7fe fdde 	bl	8001c40 <vTaskSwitchContext>
 8003084:	f04f 0000 	mov.w	r0, #0
 8003088:	f380 8811 	msr	BASEPRI, r0
 800308c:	bc09      	pop	{r0, r3}
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	6808      	ldr	r0, [r1, #0]
 8003092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003096:	f01e 0f10 	tst.w	lr, #16
 800309a:	bf08      	it	eq
 800309c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030a0:	f380 8809 	msr	PSP, r0
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w

080030b0 <pxCurrentTCBConst>:
 80030b0:	20000074 	.word	0x20000074
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop

080030b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
    __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	607b      	str	r3, [r7, #4]
}
 80030d0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030d2:	f7fe fc9b 	bl	8001a0c <xTaskIncrementTick>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030dc:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <SysTick_Handler+0x40>)
 80030de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	2300      	movs	r3, #0
 80030e6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f383 8811 	msr	BASEPRI, r3
}
 80030ee:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003106:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <vPortSetupTimerInterrupt+0x38>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800310c:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <vPortSetupTimerInterrupt+0x3c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	@ (800313c <vPortSetupTimerInterrupt+0x40>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	4a09      	ldr	r2, [pc, #36]	@ (8003140 <vPortSetupTimerInterrupt+0x44>)
 800311a:	3b01      	subs	r3, #1
 800311c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800311e:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010
 8003134:	e000e018 	.word	0xe000e018
 8003138:	2000000c 	.word	0x2000000c
 800313c:	10624dd3 	.word	0x10624dd3
 8003140:	e000e014 	.word	0xe000e014

08003144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003154 <vPortEnableVFP+0x10>
 8003148:	6801      	ldr	r1, [r0, #0]
 800314a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800314e:	6001      	str	r1, [r0, #0]
 8003150:	4770      	bx	lr
 8003152:	0000      	.short	0x0000
 8003154:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop

0800315c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003162:	f3ef 8305 	mrs	r3, IPSR
 8003166:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d915      	bls.n	800319a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800316e:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <vPortValidateInterruptPriority+0x74>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003178:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <vPortValidateInterruptPriority+0x78>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	7afa      	ldrb	r2, [r7, #11]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20b      	bcs.n	800319a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800319a:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <vPortValidateInterruptPriority+0x7c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031a2:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <vPortValidateInterruptPriority+0x80>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90b      	bls.n	80031c2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	603b      	str	r3, [r7, #0]
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	e7fd      	b.n	80031be <vPortValidateInterruptPriority+0x62>
    }
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e3f0 	.word	0xe000e3f0
 80031d4:	200001b4 	.word	0x200001b4
 80031d8:	e000ed0c 	.word	0xe000ed0c
 80031dc:	200001b8 	.word	0x200001b8

080031e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08e      	sub	sp, #56	@ 0x38
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d022      	beq.n	8003238 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80031f2:	2308      	movs	r3, #8
 80031f4:	43db      	mvns	r3, r3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d81b      	bhi.n	8003234 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80031fc:	2208      	movs	r2, #8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	2b00      	cmp	r3, #0
 800320c:	d014      	beq.n	8003238 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	f1c3 0308 	rsb	r3, r3, #8
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	43db      	mvns	r3, r3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	d804      	bhi.n	800322e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003228:	4413      	add	r3, r2
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	e004      	b.n	8003238 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	e001      	b.n	8003238 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003238:	f7fe fab6 	bl	80017a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800323c:	4b7a      	ldr	r3, [pc, #488]	@ (8003428 <pvPortMalloc+0x248>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003244:	f000 f978 	bl	8003538 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f2c0 80d3 	blt.w	80033f6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80cf 	beq.w	80033f6 <pvPortMalloc+0x216>
 8003258:	4b74      	ldr	r3, [pc, #464]	@ (800342c <pvPortMalloc+0x24c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	f200 80c9 	bhi.w	80033f6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003264:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <pvPortMalloc+0x250>)
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003268:	4b71      	ldr	r3, [pc, #452]	@ (8003430 <pvPortMalloc+0x250>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800326e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003270:	4a70      	ldr	r2, [pc, #448]	@ (8003434 <pvPortMalloc+0x254>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d305      	bcc.n	8003282 <pvPortMalloc+0xa2>
 8003276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003278:	4a6f      	ldr	r2, [pc, #444]	@ (8003438 <pvPortMalloc+0x258>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d801      	bhi.n	8003282 <pvPortMalloc+0xa2>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <pvPortMalloc+0xa4>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d129      	bne.n	80032dc <pvPortMalloc+0xfc>
    __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	623b      	str	r3, [r7, #32]
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80032a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80032a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80032aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ac:	4a61      	ldr	r2, [pc, #388]	@ (8003434 <pvPortMalloc+0x254>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d305      	bcc.n	80032be <pvPortMalloc+0xde>
 80032b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b4:	4a60      	ldr	r2, [pc, #384]	@ (8003438 <pvPortMalloc+0x258>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d801      	bhi.n	80032be <pvPortMalloc+0xde>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <pvPortMalloc+0xe0>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <pvPortMalloc+0xfc>
    __asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	61fb      	str	r3, [r7, #28]
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d903      	bls.n	80032ee <pvPortMalloc+0x10e>
 80032e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1d8      	bne.n	80032a0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80032ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003428 <pvPortMalloc+0x248>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d07e      	beq.n	80033f6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2208      	movs	r2, #8
 80032fe:	4413      	add	r3, r2
 8003300:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003304:	4a4b      	ldr	r2, [pc, #300]	@ (8003434 <pvPortMalloc+0x254>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d305      	bcc.n	8003316 <pvPortMalloc+0x136>
 800330a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330c:	4a4a      	ldr	r2, [pc, #296]	@ (8003438 <pvPortMalloc+0x258>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d801      	bhi.n	8003316 <pvPortMalloc+0x136>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <pvPortMalloc+0x138>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <pvPortMalloc+0x154>
    __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	61bb      	str	r3, [r7, #24]
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800333c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90b      	bls.n	800335e <pvPortMalloc+0x17e>
    __asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	617b      	str	r3, [r7, #20]
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	e7fd      	b.n	800335a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad2      	subs	r2, r2, r3
 8003366:	2308      	movs	r3, #8
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	429a      	cmp	r2, r3
 800336c:	d924      	bls.n	80033b8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800336e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <pvPortMalloc+0x1b8>
    __asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	613b      	str	r3, [r7, #16]
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80033a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033b8:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <pvPortMalloc+0x24c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	4a1a      	ldr	r2, [pc, #104]	@ (800342c <pvPortMalloc+0x24c>)
 80033c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033c6:	4b19      	ldr	r3, [pc, #100]	@ (800342c <pvPortMalloc+0x24c>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <pvPortMalloc+0x25c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d203      	bcs.n	80033da <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <pvPortMalloc+0x24c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a19      	ldr	r2, [pc, #100]	@ (800343c <pvPortMalloc+0x25c>)
 80033d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80033da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80033e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <pvPortMalloc+0x260>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	4a13      	ldr	r2, [pc, #76]	@ (8003440 <pvPortMalloc+0x260>)
 80033f4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80033f6:	f7fe f9e5 	bl	80017c4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <pvPortMalloc+0x23c>
    __asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	60fb      	str	r3, [r7, #12]
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <pvPortMalloc+0x238>
    return pvReturn;
 800341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800341e:	4618      	mov	r0, r3
 8003420:	3738      	adds	r7, #56	@ 0x38
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20012dc4 	.word	0x20012dc4
 800342c:	20012dc8 	.word	0x20012dc8
 8003430:	20012dbc 	.word	0x20012dbc
 8003434:	200001bc 	.word	0x200001bc
 8003438:	20012dbb 	.word	0x20012dbb
 800343c:	20012dcc 	.word	0x20012dcc
 8003440:	20012dd0 	.word	0x20012dd0

08003444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d064      	beq.n	8003520 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003456:	2308      	movs	r3, #8
 8003458:	425b      	negs	r3, r3
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4a30      	ldr	r2, [pc, #192]	@ (8003528 <vPortFree+0xe4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d305      	bcc.n	8003478 <vPortFree+0x34>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4a2f      	ldr	r2, [pc, #188]	@ (800352c <vPortFree+0xe8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d801      	bhi.n	8003478 <vPortFree+0x34>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <vPortFree+0x36>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <vPortFree+0x52>
    __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	617b      	str	r3, [r7, #20]
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	e7fd      	b.n	8003492 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	db0b      	blt.n	80034b6 <vPortFree+0x72>
    __asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	613b      	str	r3, [r7, #16]
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	e7fd      	b.n	80034b2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <vPortFree+0x92>
    __asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	60fb      	str	r3, [r7, #12]
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	e7fd      	b.n	80034d2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	0fdb      	lsrs	r3, r3, #31
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01c      	beq.n	8003520 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80034fa:	f7fe f955 	bl	80017a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <vPortFree+0xec>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4413      	add	r3, r2
 8003508:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <vPortFree+0xec>)
 800350a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800350c:	69b8      	ldr	r0, [r7, #24]
 800350e:	f000 f86d 	bl	80035ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <vPortFree+0xf0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a06      	ldr	r2, [pc, #24]	@ (8003534 <vPortFree+0xf0>)
 800351a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800351c:	f7fe f952 	bl	80017c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003520:	bf00      	nop
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200001bc 	.word	0x200001bc
 800352c:	20012dbb 	.word	0x20012dbb
 8003530:	20012dc8 	.word	0x20012dc8
 8003534:	20012dd4 	.word	0x20012dd4

08003538 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800353e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003542:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003544:	4b24      	ldr	r3, [pc, #144]	@ (80035d8 <prvHeapInit+0xa0>)
 8003546:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3307      	adds	r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <prvHeapInit+0xa0>)
 8003568:	4413      	add	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <prvHeapInit+0xa4>)
 8003570:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <prvHeapInit+0xa4>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4413      	add	r3, r2
 800357e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003580:	2208      	movs	r2, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f023 0307 	bic.w	r3, r3, #7
 800358e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <prvHeapInit+0xa8>)
 8003594:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003596:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <prvHeapInit+0xa8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800359e:	4b10      	ldr	r3, [pc, #64]	@ (80035e0 <prvHeapInit+0xa8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <prvHeapInit+0xa8>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a08      	ldr	r2, [pc, #32]	@ (80035e4 <prvHeapInit+0xac>)
 80035c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a07      	ldr	r2, [pc, #28]	@ (80035e8 <prvHeapInit+0xb0>)
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	200001bc 	.word	0x200001bc
 80035dc:	20012dbc 	.word	0x20012dbc
 80035e0:	20012dc4 	.word	0x20012dc4
 80035e4:	20012dcc 	.word	0x20012dcc
 80035e8:	20012dc8 	.word	0x20012dc8

080035ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80035f4:	4b36      	ldr	r3, [pc, #216]	@ (80036d0 <prvInsertBlockIntoFreeList+0xe4>)
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e002      	b.n	8003600 <prvInsertBlockIntoFreeList+0x14>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d8f7      	bhi.n	80035fa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	4a30      	ldr	r2, [pc, #192]	@ (80036d0 <prvInsertBlockIntoFreeList+0xe4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4a2f      	ldr	r2, [pc, #188]	@ (80036d4 <prvInsertBlockIntoFreeList+0xe8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d305      	bcc.n	8003626 <prvInsertBlockIntoFreeList+0x3a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	4a2e      	ldr	r2, [pc, #184]	@ (80036d8 <prvInsertBlockIntoFreeList+0xec>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d801      	bhi.n	8003626 <prvInsertBlockIntoFreeList+0x3a>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <prvInsertBlockIntoFreeList+0x3c>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	60fb      	str	r3, [r7, #12]
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d108      	bne.n	8003668 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	441a      	add	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	441a      	add	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d118      	bne.n	80036ae <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <prvInsertBlockIntoFreeList+0xf0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d00d      	beq.n	80036a4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	441a      	add	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e008      	b.n	80036b6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80036a4:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <prvInsertBlockIntoFreeList+0xf0>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e003      	b.n	80036b6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d002      	beq.n	80036c4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	20012dbc 	.word	0x20012dbc
 80036d4:	200001bc 	.word	0x200001bc
 80036d8:	20012dbb 	.word	0x20012dbb
 80036dc:	20012dc4 	.word	0x20012dc4

080036e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036e6:	f000 fc1d 	bl	8003f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036ea:	f000 f83f 	bl	800376c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036ee:	f000 f91f 	bl	8003930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80036f2:	f000 f8f3 	bl	80038dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80036f6:	f000 f8a3 	bl	8003840 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* before an event group can be used, it must first be created */
  xEventGroup = xEventGroupCreate();
 80036fa:	f7fc fee1 	bl	80004c0 <xEventGroupCreate>
 80036fe:	4603      	mov	r3, r0
 8003700:	4a13      	ldr	r2, [pc, #76]	@ (8003750 <main+0x70>)
 8003702:	6013      	str	r3, [r2, #0]

  /* Create the task that will start the TIM3 timeout interrupt. This will only
     run once before being deleted by itself as it won't be needed anymore */
  xTaskCreate( vTim3InterruptEnablingTask, "TIM3 INT start", 1000, NULL, configMAX_PRIORITIES - 1, NULL );
 8003704:	2300      	movs	r3, #0
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2304      	movs	r3, #4
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003712:	4910      	ldr	r1, [pc, #64]	@ (8003754 <main+0x74>)
 8003714:	4810      	ldr	r0, [pc, #64]	@ (8003758 <main+0x78>)
 8003716:	f7fd fd95 	bl	8001244 <xTaskCreate>

  /* create the task that waits for event bits to get set in the event group */
  xTaskCreate( vEventBitReadingTask, "Bit Reader", 1000, NULL, 2, NULL );
 800371a:	2300      	movs	r3, #0
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2302      	movs	r3, #2
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003728:	490c      	ldr	r1, [pc, #48]	@ (800375c <main+0x7c>)
 800372a:	480d      	ldr	r0, [pc, #52]	@ (8003760 <main+0x80>)
 800372c:	f7fd fd8a 	bl	8001244 <xTaskCreate>

  /* create the task that sets event bits in the event group */
  xTaskCreate( vEventBitSettingTask, "Bit Setter", 1000, NULL, 1, NULL );
 8003730:	2300      	movs	r3, #0
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	2301      	movs	r3, #1
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2300      	movs	r3, #0
 800373a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800373e:	4909      	ldr	r1, [pc, #36]	@ (8003764 <main+0x84>)
 8003740:	4809      	ldr	r0, [pc, #36]	@ (8003768 <main+0x88>)
 8003742:	f7fd fd7f 	bl	8001244 <xTaskCreate>

  /* start the scheduler */
  vTaskStartScheduler();
 8003746:	f7fd ffeb 	bl	8001720 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 800374a:	bf00      	nop
 800374c:	e7fd      	b.n	800374a <main+0x6a>
 800374e:	bf00      	nop
 8003750:	20012e68 	.word	0x20012e68
 8003754:	08006048 	.word	0x08006048
 8003758:	08003a8d 	.word	0x08003a8d
 800375c:	08006058 	.word	0x08006058
 8003760:	08003b01 	.word	0x08003b01
 8003764:	08006064 	.word	0x08006064
 8003768:	08003aad 	.word	0x08003aad

0800376c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b094      	sub	sp, #80	@ 0x50
 8003770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003772:	f107 0320 	add.w	r3, r7, #32
 8003776:	2230      	movs	r2, #48	@ 0x30
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f002 fc12 	bl	8005fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	4b28      	ldr	r3, [pc, #160]	@ (8003838 <SystemClock_Config+0xcc>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	4a27      	ldr	r2, [pc, #156]	@ (8003838 <SystemClock_Config+0xcc>)
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379e:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a0:	4b25      	ldr	r3, [pc, #148]	@ (8003838 <SystemClock_Config+0xcc>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ac:	2300      	movs	r3, #0
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	4b22      	ldr	r3, [pc, #136]	@ (800383c <SystemClock_Config+0xd0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a21      	ldr	r2, [pc, #132]	@ (800383c <SystemClock_Config+0xd0>)
 80037b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b1f      	ldr	r3, [pc, #124]	@ (800383c <SystemClock_Config+0xd0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037c8:	2302      	movs	r3, #2
 80037ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037cc:	2301      	movs	r3, #1
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037d0:	2310      	movs	r3, #16
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037d4:	2302      	movs	r3, #2
 80037d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037d8:	2300      	movs	r3, #0
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037dc:	2308      	movs	r3, #8
 80037de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80037e0:	2332      	movs	r3, #50	@ 0x32
 80037e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80037e4:	2304      	movs	r3, #4
 80037e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80037e8:	2307      	movs	r3, #7
 80037ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ec:	f107 0320 	add.w	r3, r7, #32
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fe8b 	bl	800450c <HAL_RCC_OscConfig>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037fc:	f000 fa0c 	bl	8003c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003800:	230f      	movs	r3, #15
 8003802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003804:	2302      	movs	r3, #2
 8003806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800380c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003818:	f107 030c 	add.w	r3, r7, #12
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f8ec 	bl	80049fc <HAL_RCC_ClockConfig>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800382a:	f000 f9f5 	bl	8003c18 <Error_Handler>
  }
}
 800382e:	bf00      	nop
 8003830:	3750      	adds	r7, #80	@ 0x50
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40007000 	.word	0x40007000

08003840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003854:	463b      	mov	r3, r7
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800385c:	4b1d      	ldr	r3, [pc, #116]	@ (80038d4 <MX_TIM3_Init+0x94>)
 800385e:	4a1e      	ldr	r2, [pc, #120]	@ (80038d8 <MX_TIM3_Init+0x98>)
 8003860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12499;
 8003862:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <MX_TIM3_Init+0x94>)
 8003864:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 8003868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386a:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <MX_TIM3_Init+0x94>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8003870:	4b18      	ldr	r3, [pc, #96]	@ (80038d4 <MX_TIM3_Init+0x94>)
 8003872:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003876:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003878:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <MX_TIM3_Init+0x94>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800387e:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <MX_TIM3_Init+0x94>)
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003884:	4813      	ldr	r0, [pc, #76]	@ (80038d4 <MX_TIM3_Init+0x94>)
 8003886:	f001 fb0b 	bl	8004ea0 <HAL_TIM_Base_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003890:	f000 f9c2 	bl	8003c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800389a:	f107 0308 	add.w	r3, r7, #8
 800389e:	4619      	mov	r1, r3
 80038a0:	480c      	ldr	r0, [pc, #48]	@ (80038d4 <MX_TIM3_Init+0x94>)
 80038a2:	f001 fcad 	bl	8005200 <HAL_TIM_ConfigClockSource>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80038ac:	f000 f9b4 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038b8:	463b      	mov	r3, r7
 80038ba:	4619      	mov	r1, r3
 80038bc:	4805      	ldr	r0, [pc, #20]	@ (80038d4 <MX_TIM3_Init+0x94>)
 80038be:	f001 fed5 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80038c8:	f000 f9a6 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038cc:	bf00      	nop
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20012dd8 	.word	0x20012dd8
 80038d8:	40000400 	.word	0x40000400

080038dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 80038e2:	4a12      	ldr	r2, [pc, #72]	@ (800392c <MX_USART2_UART_Init+0x50>)
 80038e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038e6:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 80038e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003900:	4b09      	ldr	r3, [pc, #36]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 8003902:	220c      	movs	r2, #12
 8003904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003906:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 800390e:	2200      	movs	r2, #0
 8003910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003912:	4805      	ldr	r0, [pc, #20]	@ (8003928 <MX_USART2_UART_Init+0x4c>)
 8003914:	f001 ff3a 	bl	800578c <HAL_UART_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800391e:	f000 f97b 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20012e20 	.word	0x20012e20
 800392c:	40004400 	.word	0x40004400

08003930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	@ 0x28
 8003934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <MX_GPIO_Init+0x108>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a38 <MX_GPIO_Init+0x108>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6313      	str	r3, [r2, #48]	@ 0x30
 8003956:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <MX_GPIO_Init+0x108>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b34      	ldr	r3, [pc, #208]	@ (8003a38 <MX_GPIO_Init+0x108>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	4a33      	ldr	r2, [pc, #204]	@ (8003a38 <MX_GPIO_Init+0x108>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	6313      	str	r3, [r2, #48]	@ 0x30
 8003972:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <MX_GPIO_Init+0x108>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <MX_GPIO_Init+0x108>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a2c      	ldr	r2, [pc, #176]	@ (8003a38 <MX_GPIO_Init+0x108>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a38 <MX_GPIO_Init+0x108>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <MX_GPIO_Init+0x108>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	4a25      	ldr	r2, [pc, #148]	@ (8003a38 <MX_GPIO_Init+0x108>)
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039aa:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <MX_GPIO_Init+0x108>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80039b6:	2200      	movs	r2, #0
 80039b8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80039bc:	481f      	ldr	r0, [pc, #124]	@ (8003a3c <MX_GPIO_Init+0x10c>)
 80039be:	f000 fd71 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039c2:	2301      	movs	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	481a      	ldr	r0, [pc, #104]	@ (8003a40 <MX_GPIO_Init+0x110>)
 80039d6:	f000 fbc9 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80039da:	2304      	movs	r3, #4
 80039dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4815      	ldr	r0, [pc, #84]	@ (8003a44 <MX_GPIO_Init+0x114>)
 80039ee:	f000 fbbd 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80039f2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80039f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f8:	2301      	movs	r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a00:	2300      	movs	r3, #0
 8003a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4619      	mov	r1, r3
 8003a0a:	480c      	ldr	r0, [pc, #48]	@ (8003a3c <MX_GPIO_Init+0x10c>)
 8003a0c:	f000 fbae 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a20:	2306      	movs	r3, #6
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4807      	ldr	r0, [pc, #28]	@ (8003a48 <MX_GPIO_Init+0x118>)
 8003a2c:	f000 fb9e 	bl	800416c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a30:	bf00      	nop
 8003a32:	3728      	adds	r7, #40	@ 0x28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40020c00 	.word	0x40020c00
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40020800 	.word	0x40020800

08003a4c <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e00b      	b.n	8003a74 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	18d1      	adds	r1, r2, r3
 8003a62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a66:	2201      	movs	r2, #1
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f001 fedf 	bl	800582c <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	3301      	adds	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	4413      	add	r3, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ed      	bne.n	8003a5c <UART2_Print_Text+0x10>
  }
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <vTim3InterruptEnablingTask>:

static void vTim3InterruptEnablingTask( void *pvParameter )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Start the TIM3 in interrupt mode.
     This is done in a task after the scheduler is started because otherwise
     the TIM3 timeout would be triggered and then its callback would try to defer the
     processing to the daemon task before the scheduler started, causing an assertion
     due to the timer queue not being properly created */
  HAL_TIM_Base_Start_IT( &htim3 );
 8003a94:	4804      	ldr	r0, [pc, #16]	@ (8003aa8 <vTim3InterruptEnablingTask+0x1c>)
 8003a96:	f001 fa53 	bl	8004f40 <HAL_TIM_Base_Start_IT>

  /* delete this task as it will be only required to run once at the beginning */
  vTaskDelete( NULL );
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f7fd fd1e 	bl	80014dc <vTaskDelete>
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20012dd8 	.word	0x20012dd8

08003aac <vEventBitSettingTask>:

static void vEventBitSettingTask( void *pvParameter )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay200ms = pdMS_TO_TICKS( 200UL );
 8003ab4:	23c8      	movs	r3, #200	@ 0xc8
 8003ab6:	60fb      	str	r3, [r7, #12]

  for ( ;; )
  {
    /* delay for a short time before starting the next loop */
    vTaskDelay( xDelay200ms );
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7fd fdb1 	bl	8001620 <vTaskDelay>

    /* print out a message to say event bit 0 is about to be set by the task,
       then set event bit 0 */
    UART2_Print_Text( &huart2, "Bit setting task - about to set bit 0\r\n" );
 8003abe:	490c      	ldr	r1, [pc, #48]	@ (8003af0 <vEventBitSettingTask+0x44>)
 8003ac0:	480c      	ldr	r0, [pc, #48]	@ (8003af4 <vEventBitSettingTask+0x48>)
 8003ac2:	f7ff ffc3 	bl	8003a4c <UART2_Print_Text>
    xEventGroupSetBits( xEventGroup, mainFIRST_TASK_BIT );
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <vEventBitSettingTask+0x4c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fde1 	bl	8000694 <xEventGroupSetBits>

    /* delay for a short while before setting the other bit */
    vTaskDelay( xDelay200ms );
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7fd fda4 	bl	8001620 <vTaskDelay>

    /* print out a message to say event bit 1 is about to be set by the task,
       then set event bit 1 */
    UART2_Print_Text( &huart2, "Bit setting task - about to set bit 1\r\n" );
 8003ad8:	4908      	ldr	r1, [pc, #32]	@ (8003afc <vEventBitSettingTask+0x50>)
 8003ada:	4806      	ldr	r0, [pc, #24]	@ (8003af4 <vEventBitSettingTask+0x48>)
 8003adc:	f7ff ffb6 	bl	8003a4c <UART2_Print_Text>
    xEventGroupSetBits( xEventGroup, mainSECOND_TASK_BIT );
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <vEventBitSettingTask+0x4c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fc fdd4 	bl	8000694 <xEventGroupSetBits>
    vTaskDelay( xDelay200ms );
 8003aec:	bf00      	nop
 8003aee:	e7e3      	b.n	8003ab8 <vEventBitSettingTask+0xc>
 8003af0:	08006070 	.word	0x08006070
 8003af4:	20012e20 	.word	0x20012e20
 8003af8:	20012e68 	.word	0x20012e68
 8003afc:	08006098 	.word	0x08006098

08003b00 <vEventBitReadingTask>:
  }
}

static void vEventBitReadingTask( void *pvParameter )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
  EventBits_t xEventGroupValue;
  const EventBits_t xBitsToWaitFor = ( mainISR_BIT | mainSECOND_TASK_BIT | mainFIRST_TASK_BIT );
 8003b08:	2307      	movs	r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]

  for ( ;; )
  {
    /* block to wait for event bits to become set within the event group */
    xEventGroupValue = xEventGroupWaitBits( xEventGroup,    /* the event group to read */
 8003b0c:	4b13      	ldr	r3, [pc, #76]	@ (8003b5c <vEventBitReadingTask+0x5c>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	2201      	movs	r2, #1
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	f7fc fce8 	bl	80004f0 <xEventGroupWaitBits>
 8003b20:	60b8      	str	r0, [r7, #8]
                                                               pdTRUE for the second execution */
                                            portMAX_DELAY   /* don't time out */
                                          );

    /* print a message for each bit that was set */
    if ( ( xEventGroupValue & mainFIRST_TASK_BIT ) == mainFIRST_TASK_BIT )
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <vEventBitReadingTask+0x34>
    {
      UART2_Print_Text( &huart2, "Bit reading task - Event bit 0 was set\n\r" );
 8003b2c:	490c      	ldr	r1, [pc, #48]	@ (8003b60 <vEventBitReadingTask+0x60>)
 8003b2e:	480d      	ldr	r0, [pc, #52]	@ (8003b64 <vEventBitReadingTask+0x64>)
 8003b30:	f7ff ff8c 	bl	8003a4c <UART2_Print_Text>
    }

    if ( ( xEventGroupValue & mainSECOND_TASK_BIT ) == mainSECOND_TASK_BIT )
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <vEventBitReadingTask+0x46>
    {
      UART2_Print_Text( &huart2, "Bit reading task - Event bit 1 was set\n\r" );
 8003b3e:	490a      	ldr	r1, [pc, #40]	@ (8003b68 <vEventBitReadingTask+0x68>)
 8003b40:	4808      	ldr	r0, [pc, #32]	@ (8003b64 <vEventBitReadingTask+0x64>)
 8003b42:	f7ff ff83 	bl	8003a4c <UART2_Print_Text>
    }

    if ( ( xEventGroupValue & mainISR_BIT ) == mainISR_BIT )
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0dd      	beq.n	8003b0c <vEventBitReadingTask+0xc>
    {
      UART2_Print_Text( &huart2, "Bit reading task - Event bit 2 was set\n\r" );
 8003b50:	4906      	ldr	r1, [pc, #24]	@ (8003b6c <vEventBitReadingTask+0x6c>)
 8003b52:	4804      	ldr	r0, [pc, #16]	@ (8003b64 <vEventBitReadingTask+0x64>)
 8003b54:	f7ff ff7a 	bl	8003a4c <UART2_Print_Text>
    xEventGroupValue = xEventGroupWaitBits( xEventGroup,    /* the event group to read */
 8003b58:	e7d8      	b.n	8003b0c <vEventBitReadingTask+0xc>
 8003b5a:	bf00      	nop
 8003b5c:	20012e68 	.word	0x20012e68
 8003b60:	080060c0 	.word	0x080060c0
 8003b64:	20012e20 	.word	0x20012e20
 8003b68:	080060ec 	.word	0x080060ec
 8003b6c:	08006118 	.word	0x08006118

08003b70 <vDeferredHandlingFunction>:
    }
  }
}

static void vDeferredHandlingFunction( void *pvParameter1, uint32_t ulParameter2 )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  /* Process the event, in this case just print out a message.
     ulParameter2 is not used in this example */
  UART2_Print_Text( &huart2, ( const char * ) pvParameter1 );
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4803      	ldr	r0, [pc, #12]	@ (8003b8c <vDeferredHandlingFunction+0x1c>)
 8003b7e:	f7ff ff65 	bl	8003a4c <UART2_Print_Text>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20012e20 	.word	0x20012e20

08003b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken;

  /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE
     as it will get set to pdTRUE inside the interrupt safe API function
     if a context switch is required */
  xHigherPriorityTaskWoken = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

  if ( htim->Instance == TIM3 )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d11f      	bne.n	8003be6 <HAL_TIM_PeriodElapsedCallback+0x56>
  {
    /* used for debugging purposes (check TIM3 period via a logic analyzer) */
    HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 8003ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003baa:	4815      	ldr	r0, [pc, #84]	@ (8003c00 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003bac:	f000 fc93 	bl	80044d6 <HAL_GPIO_TogglePin>
       in the context of the RTOS daemon task.

       Send a pointer to the interrupt's deferred handling function to the daemon task:
       - The deferred handling function's pvParameter1 parameter is used to pass the string to print.
       - The deferred handling function's ulParameter2 parameter is not used so it's just set to 0. */
    xTimerPendFunctionCallFromISR(  vDeferredHandlingFunction, /* function to be executed by the daemon task */
 8003bb0:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4813      	ldr	r0, [pc, #76]	@ (8003c08 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003bbc:	f7ff f84a 	bl	8002c54 <xTimerPendFunctionCallFromISR>
                                    0,                      /* ulParameter2 is not used */
                                    &xHigherPriorityTaskWoken  /* context switch flag updated by this FromISR() API */
                                 );

    /* set bit 2 in the event group */
    xEventGroupSetBitsFromISR( xEventGroup, mainISR_BIT, &xHigherPriorityTaskWoken );
 8003bc0:	4b12      	ldr	r3, [pc, #72]	@ (8003c0c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f107 020c 	add.w	r2, r7, #12
 8003bc8:	2104      	movs	r1, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fe1e 	bl	800080c <xEventGroupSetBitsFromISR>
    
       Pass the xHigherPriorityTaskWoken value into portYIELD_FROM_ISR():
       - If xHigherPriorityTaskWoken was set to pdTRUE inside xTimerPendFunctionCallFromISR()
         or xEventGroupSetBitsFromISR, then calling portYIELD_FROM_ISR() will request a context switch.
       - If xHigherPriorityTaskWoken is still pdFALSE then calling portYIELD_FROM_ISR() will have no effect */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d007      	beq.n	8003be6 <HAL_TIM_PeriodElapsedCallback+0x56>
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_PeriodElapsedCallback+0x64>
    HAL_IncTick();
 8003bf0:	f000 f9ba 	bl	8003f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40020c00 	.word	0x40020c00
 8003c04:	20000008 	.word	0x20000008
 8003c08:	08003b71 	.word	0x08003b71
 8003c0c:	20012e68 	.word	0x20012e68
 8003c10:	e000ed04 	.word	0xe000ed04
 8003c14:	40001000 	.word	0x40001000

08003c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c1c:	b672      	cpsid	i
}
 8003c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <Error_Handler+0x8>

08003c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	4b10      	ldr	r3, [pc, #64]	@ (8003c70 <HAL_MspInit+0x4c>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	4a0f      	ldr	r2, [pc, #60]	@ (8003c70 <HAL_MspInit+0x4c>)
 8003c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <HAL_MspInit+0x4c>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <HAL_MspInit+0x4c>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a08      	ldr	r2, [pc, #32]	@ (8003c70 <HAL_MspInit+0x4c>)
 8003c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_MspInit+0x4c>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800

08003c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0e      	ldr	r2, [pc, #56]	@ (8003cbc <HAL_TIM_Base_MspInit+0x48>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d115      	bne.n	8003cb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2106      	movs	r1, #6
 8003ca6:	201d      	movs	r0, #29
 8003ca8:	f000 fa36 	bl	8004118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003cac:	201d      	movs	r0, #29
 8003cae:	f000 fa4f 	bl	8004150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <HAL_UART_MspInit+0x84>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d12b      	bne.n	8003d3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_UART_MspInit+0x88>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_UART_MspInit+0x88>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf6:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_UART_MspInit+0x88>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <HAL_UART_MspInit+0x88>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <HAL_UART_MspInit+0x88>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_UART_MspInit+0x88>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d1e:	230c      	movs	r3, #12
 8003d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d2e:	2307      	movs	r3, #7
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4619      	mov	r1, r3
 8003d38:	4805      	ldr	r0, [pc, #20]	@ (8003d50 <HAL_UART_MspInit+0x8c>)
 8003d3a:	f000 fa17 	bl	800416c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d3e:	bf00      	nop
 8003d40:	3728      	adds	r7, #40	@ 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40004400 	.word	0x40004400
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40020000 	.word	0x40020000

08003d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	@ 0x38
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	4b33      	ldr	r3, [pc, #204]	@ (8003e38 <HAL_InitTick+0xe4>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	4a32      	ldr	r2, [pc, #200]	@ (8003e38 <HAL_InitTick+0xe4>)
 8003d6e:	f043 0310 	orr.w	r3, r3, #16
 8003d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d74:	4b30      	ldr	r3, [pc, #192]	@ (8003e38 <HAL_InitTick+0xe4>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d80:	f107 0210 	add.w	r2, r7, #16
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f856 	bl	8004e3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d9a:	f001 f827 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8003d9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003da0:	e004      	b.n	8003dac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003da2:	f001 f823 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8003da6:	4603      	mov	r3, r0
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dae:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <HAL_InitTick+0xe8>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	0c9b      	lsrs	r3, r3, #18
 8003db6:	3b01      	subs	r3, #1
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003dba:	4b21      	ldr	r3, [pc, #132]	@ (8003e40 <HAL_InitTick+0xec>)
 8003dbc:	4a21      	ldr	r2, [pc, #132]	@ (8003e44 <HAL_InitTick+0xf0>)
 8003dbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_InitTick+0xec>)
 8003dc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003dc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e40 <HAL_InitTick+0xec>)
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003dce:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <HAL_InitTick+0xec>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e40 <HAL_InitTick+0xec>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dda:	4b19      	ldr	r3, [pc, #100]	@ (8003e40 <HAL_InitTick+0xec>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003de0:	4817      	ldr	r0, [pc, #92]	@ (8003e40 <HAL_InitTick+0xec>)
 8003de2:	f001 f85d 	bl	8004ea0 <HAL_TIM_Base_Init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11b      	bne.n	8003e2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003df4:	4812      	ldr	r0, [pc, #72]	@ (8003e40 <HAL_InitTick+0xec>)
 8003df6:	f001 f8a3 	bl	8004f40 <HAL_TIM_Base_Start_IT>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003e00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e08:	2036      	movs	r0, #54	@ 0x36
 8003e0a:	f000 f9a1 	bl	8004150 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b0f      	cmp	r3, #15
 8003e12:	d808      	bhi.n	8003e26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003e14:	2200      	movs	r2, #0
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	2036      	movs	r0, #54	@ 0x36
 8003e1a:	f000 f97d 	bl	8004118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <HAL_InitTick+0xf4>)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e002      	b.n	8003e2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3738      	adds	r7, #56	@ 0x38
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	431bde83 	.word	0x431bde83
 8003e40:	20012e6c 	.word	0x20012e6c
 8003e44:	40001000 	.word	0x40001000
 8003e48:	20000010 	.word	0x20000010

08003e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <NMI_Handler+0x4>

08003e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <HardFault_Handler+0x4>

08003e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <MemManage_Handler+0x4>

08003e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e68:	bf00      	nop
 8003e6a:	e7fd      	b.n	8003e68 <BusFault_Handler+0x4>

08003e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <UsageFault_Handler+0x4>

08003e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e88:	4802      	ldr	r0, [pc, #8]	@ (8003e94 <TIM3_IRQHandler+0x10>)
 8003e8a:	f001 f8c9 	bl	8005020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20012dd8 	.word	0x20012dd8

08003e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e9c:	4802      	ldr	r0, [pc, #8]	@ (8003ea8 <TIM6_DAC_IRQHandler+0x10>)
 8003e9e:	f001 f8bf 	bl	8005020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20012e6c 	.word	0x20012e6c

08003eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <SystemInit+0x20>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	4a05      	ldr	r2, [pc, #20]	@ (8003ecc <SystemInit+0x20>)
 8003eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ed4:	f7ff ffea 	bl	8003eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ed8:	480c      	ldr	r0, [pc, #48]	@ (8003f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eda:	490d      	ldr	r1, [pc, #52]	@ (8003f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003edc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ee0:	e002      	b.n	8003ee8 <LoopCopyDataInit>

08003ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ee6:	3304      	adds	r3, #4

08003ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eec:	d3f9      	bcc.n	8003ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eee:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8003f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef4:	e001      	b.n	8003efa <LoopFillZerobss>

08003ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef8:	3204      	adds	r2, #4

08003efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003efc:	d3fb      	bcc.n	8003ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003efe:	f002 f859 	bl	8005fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f02:	f7ff fbed 	bl	80036e0 <main>
  bx  lr    
 8003f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f10:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003f14:	08006194 	.word	0x08006194
  ldr r2, =_sbss
 8003f18:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003f1c:	20012eb8 	.word	0x20012eb8

08003f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f20:	e7fe      	b.n	8003f20 <ADC_IRQHandler>
	...

08003f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f28:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <HAL_Init+0x40>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f64 <HAL_Init+0x40>)
 8003f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f34:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <HAL_Init+0x40>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <HAL_Init+0x40>)
 8003f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <HAL_Init+0x40>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a07      	ldr	r2, [pc, #28]	@ (8003f64 <HAL_Init+0x40>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	f000 f8d8 	bl	8004102 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f7ff fefe 	bl	8003d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f58:	f7ff fe64 	bl	8003c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00

08003f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_IncTick+0x20>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_IncTick+0x24>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	4a04      	ldr	r2, [pc, #16]	@ (8003f8c <HAL_IncTick+0x24>)
 8003f7a:	6013      	str	r3, [r2, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000014 	.word	0x20000014
 8003f8c:	20012eb4 	.word	0x20012eb4

08003f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return uwTick;
 8003f94:	4b03      	ldr	r3, [pc, #12]	@ (8003fa4 <HAL_GetTick+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20012eb4 	.word	0x20012eb4

08003fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <__NVIC_SetPriorityGrouping+0x44>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fda:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <__NVIC_SetPriorityGrouping+0x44>)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	60d3      	str	r3, [r2, #12]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <__NVIC_GetPriorityGrouping+0x18>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	0a1b      	lsrs	r3, r3, #8
 8003ffa:	f003 0307 	and.w	r3, r3, #7
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	2b00      	cmp	r3, #0
 800401c:	db0b      	blt.n	8004036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	4907      	ldr	r1, [pc, #28]	@ (8004044 <__NVIC_EnableIRQ+0x38>)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2001      	movs	r0, #1
 800402e:	fa00 f202 	lsl.w	r2, r0, r2
 8004032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000e100 	.word	0xe000e100

08004048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db0a      	blt.n	8004072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	490c      	ldr	r1, [pc, #48]	@ (8004094 <__NVIC_SetPriority+0x4c>)
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	440b      	add	r3, r1
 800406c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004070:	e00a      	b.n	8004088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4908      	ldr	r1, [pc, #32]	@ (8004098 <__NVIC_SetPriority+0x50>)
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	3b04      	subs	r3, #4
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	440b      	add	r3, r1
 8004086:	761a      	strb	r2, [r3, #24]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	@ 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f1c3 0307 	rsb	r3, r3, #7
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	bf28      	it	cs
 80040ba:	2304      	movcs	r3, #4
 80040bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d902      	bls.n	80040cc <NVIC_EncodePriority+0x30>
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3b03      	subs	r3, #3
 80040ca:	e000      	b.n	80040ce <NVIC_EncodePriority+0x32>
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	f04f 32ff 	mov.w	r2, #4294967295
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	401a      	ands	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e4:	f04f 31ff 	mov.w	r1, #4294967295
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	43d9      	mvns	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	4313      	orrs	r3, r2
         );
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	@ 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ff4c 	bl	8003fa8 <__NVIC_SetPriorityGrouping>
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800412a:	f7ff ff61 	bl	8003ff0 <__NVIC_GetPriorityGrouping>
 800412e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f7ff ffb1 	bl	800409c <NVIC_EncodePriority>
 800413a:	4602      	mov	r2, r0
 800413c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff80 	bl	8004048 <__NVIC_SetPriority>
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff54 	bl	800400c <__NVIC_EnableIRQ>
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	@ 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e16b      	b.n	8004460 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004188:	2201      	movs	r2, #1
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	f040 815a 	bne.w	800445a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d005      	beq.n	80041be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d130      	bne.n	8004220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	2203      	movs	r2, #3
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 0201 	and.w	r2, r3, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b03      	cmp	r3, #3
 800422a:	d017      	beq.n	800425c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	2203      	movs	r2, #3
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d123      	bne.n	80042b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	08da      	lsrs	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3208      	adds	r2, #8
 8004270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	220f      	movs	r2, #15
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	08da      	lsrs	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3208      	adds	r2, #8
 80042aa:	69b9      	ldr	r1, [r7, #24]
 80042ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	2203      	movs	r2, #3
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0203 	and.w	r2, r3, #3
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80b4 	beq.w	800445a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	4b60      	ldr	r3, [pc, #384]	@ (8004478 <HAL_GPIO_Init+0x30c>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004478 <HAL_GPIO_Init+0x30c>)
 80042fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004300:	6453      	str	r3, [r2, #68]	@ 0x44
 8004302:	4b5d      	ldr	r3, [pc, #372]	@ (8004478 <HAL_GPIO_Init+0x30c>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800430e:	4a5b      	ldr	r2, [pc, #364]	@ (800447c <HAL_GPIO_Init+0x310>)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	3302      	adds	r3, #2
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	220f      	movs	r2, #15
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a52      	ldr	r2, [pc, #328]	@ (8004480 <HAL_GPIO_Init+0x314>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02b      	beq.n	8004392 <HAL_GPIO_Init+0x226>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a51      	ldr	r2, [pc, #324]	@ (8004484 <HAL_GPIO_Init+0x318>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d025      	beq.n	800438e <HAL_GPIO_Init+0x222>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a50      	ldr	r2, [pc, #320]	@ (8004488 <HAL_GPIO_Init+0x31c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01f      	beq.n	800438a <HAL_GPIO_Init+0x21e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a4f      	ldr	r2, [pc, #316]	@ (800448c <HAL_GPIO_Init+0x320>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d019      	beq.n	8004386 <HAL_GPIO_Init+0x21a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a4e      	ldr	r2, [pc, #312]	@ (8004490 <HAL_GPIO_Init+0x324>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_GPIO_Init+0x216>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a4d      	ldr	r2, [pc, #308]	@ (8004494 <HAL_GPIO_Init+0x328>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00d      	beq.n	800437e <HAL_GPIO_Init+0x212>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a4c      	ldr	r2, [pc, #304]	@ (8004498 <HAL_GPIO_Init+0x32c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d007      	beq.n	800437a <HAL_GPIO_Init+0x20e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a4b      	ldr	r2, [pc, #300]	@ (800449c <HAL_GPIO_Init+0x330>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <HAL_GPIO_Init+0x20a>
 8004372:	2307      	movs	r3, #7
 8004374:	e00e      	b.n	8004394 <HAL_GPIO_Init+0x228>
 8004376:	2308      	movs	r3, #8
 8004378:	e00c      	b.n	8004394 <HAL_GPIO_Init+0x228>
 800437a:	2306      	movs	r3, #6
 800437c:	e00a      	b.n	8004394 <HAL_GPIO_Init+0x228>
 800437e:	2305      	movs	r3, #5
 8004380:	e008      	b.n	8004394 <HAL_GPIO_Init+0x228>
 8004382:	2304      	movs	r3, #4
 8004384:	e006      	b.n	8004394 <HAL_GPIO_Init+0x228>
 8004386:	2303      	movs	r3, #3
 8004388:	e004      	b.n	8004394 <HAL_GPIO_Init+0x228>
 800438a:	2302      	movs	r3, #2
 800438c:	e002      	b.n	8004394 <HAL_GPIO_Init+0x228>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_GPIO_Init+0x228>
 8004392:	2300      	movs	r3, #0
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	f002 0203 	and.w	r2, r2, #3
 800439a:	0092      	lsls	r2, r2, #2
 800439c:	4093      	lsls	r3, r2
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043a4:	4935      	ldr	r1, [pc, #212]	@ (800447c <HAL_GPIO_Init+0x310>)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	089b      	lsrs	r3, r3, #2
 80043aa:	3302      	adds	r3, #2
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043b2:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043d6:	4a32      	ldr	r2, [pc, #200]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043dc:	4b30      	ldr	r3, [pc, #192]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004400:	4a27      	ldr	r2, [pc, #156]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004406:	4b26      	ldr	r3, [pc, #152]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800442a:	4a1d      	ldr	r2, [pc, #116]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004430:	4b1b      	ldr	r3, [pc, #108]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004454:	4a12      	ldr	r2, [pc, #72]	@ (80044a0 <HAL_GPIO_Init+0x334>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3301      	adds	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b0f      	cmp	r3, #15
 8004464:	f67f ae90 	bls.w	8004188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	3724      	adds	r7, #36	@ 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	40013800 	.word	0x40013800
 8004480:	40020000 	.word	0x40020000
 8004484:	40020400 	.word	0x40020400
 8004488:	40020800 	.word	0x40020800
 800448c:	40020c00 	.word	0x40020c00
 8004490:	40021000 	.word	0x40021000
 8004494:	40021400 	.word	0x40021400
 8004498:	40021800 	.word	0x40021800
 800449c:	40021c00 	.word	0x40021c00
 80044a0:	40013c00 	.word	0x40013c00

080044a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
 80044b0:	4613      	mov	r3, r2
 80044b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b4:	787b      	ldrb	r3, [r7, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044c0:	e003      	b.n	80044ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	041a      	lsls	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	041a      	lsls	r2, r3, #16
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43d9      	mvns	r1, r3
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	400b      	ands	r3, r1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	619a      	str	r2, [r3, #24]
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e267      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d075      	beq.n	8004616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800452a:	4b88      	ldr	r3, [pc, #544]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b04      	cmp	r3, #4
 8004534:	d00c      	beq.n	8004550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004536:	4b85      	ldr	r3, [pc, #532]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800453e:	2b08      	cmp	r3, #8
 8004540:	d112      	bne.n	8004568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b82      	ldr	r3, [pc, #520]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800454e:	d10b      	bne.n	8004568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	4b7e      	ldr	r3, [pc, #504]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d05b      	beq.n	8004614 <HAL_RCC_OscConfig+0x108>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d157      	bne.n	8004614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e242      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x74>
 8004572:	4b76      	ldr	r3, [pc, #472]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a75      	ldr	r2, [pc, #468]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <HAL_RCC_OscConfig+0xb0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x98>
 800458a:	4b70      	ldr	r3, [pc, #448]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6f      	ldr	r2, [pc, #444]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b6d      	ldr	r3, [pc, #436]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6c      	ldr	r2, [pc, #432]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0xb0>
 80045a4:	4b69      	ldr	r3, [pc, #420]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a68      	ldr	r2, [pc, #416]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b66      	ldr	r3, [pc, #408]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a65      	ldr	r2, [pc, #404]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7ff fce4 	bl	8003f90 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045cc:	f7ff fce0 	bl	8003f90 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e207      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b5b      	ldr	r3, [pc, #364]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0xc0>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7ff fcd0 	bl	8003f90 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f4:	f7ff fccc 	bl	8003f90 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e1f3      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004606:	4b51      	ldr	r3, [pc, #324]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0xe8>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d063      	beq.n	80046ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004622:	4b4a      	ldr	r3, [pc, #296]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462e:	4b47      	ldr	r3, [pc, #284]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11c      	bne.n	8004674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463a:	4b44      	ldr	r3, [pc, #272]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d116      	bne.n	8004674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	4b41      	ldr	r3, [pc, #260]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x152>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e1c7      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4937      	ldr	r1, [pc, #220]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	e03a      	b.n	80046ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467c:	4b34      	ldr	r3, [pc, #208]	@ (8004750 <HAL_RCC_OscConfig+0x244>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7ff fc85 	bl	8003f90 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468a:	f7ff fc81 	bl	8003f90 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1a8      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469c:	4b2b      	ldr	r3, [pc, #172]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b28      	ldr	r3, [pc, #160]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4925      	ldr	r1, [pc, #148]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
 80046bc:	e015      	b.n	80046ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046be:	4b24      	ldr	r3, [pc, #144]	@ (8004750 <HAL_RCC_OscConfig+0x244>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7ff fc64 	bl	8003f90 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046cc:	f7ff fc60 	bl	8003f90 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e187      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d036      	beq.n	8004764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fe:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <HAL_RCC_OscConfig+0x248>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7ff fc44 	bl	8003f90 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800470c:	f7ff fc40 	bl	8003f90 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e167      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <HAL_RCC_OscConfig+0x240>)
 8004720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x200>
 800472a:	e01b      	b.n	8004764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800472c:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <HAL_RCC_OscConfig+0x248>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7ff fc2d 	bl	8003f90 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	e00e      	b.n	8004758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800473a:	f7ff fc29 	bl	8003f90 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d907      	bls.n	8004758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e150      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
 800474c:	40023800 	.word	0x40023800
 8004750:	42470000 	.word	0x42470000
 8004754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004758:	4b88      	ldr	r3, [pc, #544]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 800475a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ea      	bne.n	800473a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8097 	beq.w	80048a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004776:	4b81      	ldr	r3, [pc, #516]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	4b7d      	ldr	r3, [pc, #500]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4a7c      	ldr	r2, [pc, #496]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004790:	6413      	str	r3, [r2, #64]	@ 0x40
 8004792:	4b7a      	ldr	r3, [pc, #488]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a2:	4b77      	ldr	r3, [pc, #476]	@ (8004980 <HAL_RCC_OscConfig+0x474>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d118      	bne.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ae:	4b74      	ldr	r3, [pc, #464]	@ (8004980 <HAL_RCC_OscConfig+0x474>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a73      	ldr	r2, [pc, #460]	@ (8004980 <HAL_RCC_OscConfig+0x474>)
 80047b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ba:	f7ff fbe9 	bl	8003f90 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c2:	f7ff fbe5 	bl	8003f90 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e10c      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004980 <HAL_RCC_OscConfig+0x474>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2ea>
 80047e8:	4b64      	ldr	r3, [pc, #400]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ec:	4a63      	ldr	r2, [pc, #396]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f4:	e01c      	b.n	8004830 <HAL_RCC_OscConfig+0x324>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x30c>
 80047fe:	4b5f      	ldr	r3, [pc, #380]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	4a5e      	ldr	r2, [pc, #376]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004804:	f043 0304 	orr.w	r3, r3, #4
 8004808:	6713      	str	r3, [r2, #112]	@ 0x70
 800480a:	4b5c      	ldr	r3, [pc, #368]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	4a5b      	ldr	r2, [pc, #364]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6713      	str	r3, [r2, #112]	@ 0x70
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0x324>
 8004818:	4b58      	ldr	r3, [pc, #352]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	4a57      	ldr	r2, [pc, #348]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	6713      	str	r3, [r2, #112]	@ 0x70
 8004824:	4b55      	ldr	r3, [pc, #340]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	4a54      	ldr	r2, [pc, #336]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 0304 	bic.w	r3, r3, #4
 800482e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d015      	beq.n	8004864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7ff fbaa 	bl	8003f90 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	e00a      	b.n	8004856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7ff fba6 	bl	8003f90 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e0cb      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004856:	4b49      	ldr	r3, [pc, #292]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ee      	beq.n	8004840 <HAL_RCC_OscConfig+0x334>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004864:	f7ff fb94 	bl	8003f90 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7ff fb90 	bl	8003f90 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0b5      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004882:	4b3e      	ldr	r3, [pc, #248]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ee      	bne.n	800486c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004894:	4b39      	ldr	r3, [pc, #228]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	4a38      	ldr	r2, [pc, #224]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 800489a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800489e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a1 	beq.w	80049ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048aa:	4b34      	ldr	r3, [pc, #208]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d05c      	beq.n	8004970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d141      	bne.n	8004942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b31      	ldr	r3, [pc, #196]	@ (8004984 <HAL_RCC_OscConfig+0x478>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7ff fb64 	bl	8003f90 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048cc:	f7ff fb60 	bl	8003f90 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e087      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	4b27      	ldr	r3, [pc, #156]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	491b      	ldr	r1, [pc, #108]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004914:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <HAL_RCC_OscConfig+0x478>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7ff fb39 	bl	8003f90 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004922:	f7ff fb35 	bl	8003f90 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e05c      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004934:	4b11      	ldr	r3, [pc, #68]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x416>
 8004940:	e054      	b.n	80049ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <HAL_RCC_OscConfig+0x478>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7ff fb22 	bl	8003f90 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004950:	f7ff fb1e 	bl	8003f90 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e045      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	4b06      	ldr	r3, [pc, #24]	@ (800497c <HAL_RCC_OscConfig+0x470>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x444>
 800496e:	e03d      	b.n	80049ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e038      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000
 8004984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004988:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <HAL_RCC_OscConfig+0x4ec>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d028      	beq.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d121      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d11a      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d111      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	3b01      	subs	r3, #1
 80049d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800

080049fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0cc      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a10:	4b68      	ldr	r3, [pc, #416]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d90c      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1e:	4b65      	ldr	r3, [pc, #404]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b63      	ldr	r3, [pc, #396]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0b8      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a50:	4b59      	ldr	r3, [pc, #356]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4a58      	ldr	r2, [pc, #352]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a68:	4b53      	ldr	r3, [pc, #332]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a52      	ldr	r2, [pc, #328]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a74:	4b50      	ldr	r3, [pc, #320]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	494d      	ldr	r1, [pc, #308]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d044      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b47      	ldr	r3, [pc, #284]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d119      	bne.n	8004ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e07f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d003      	beq.n	8004aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aba:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aca:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e067      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ada:	4b37      	ldr	r3, [pc, #220]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 0203 	bic.w	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4934      	ldr	r1, [pc, #208]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aec:	f7ff fa50 	bl	8003f90 <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af4:	f7ff fa4c 	bl	8003f90 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e04f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 020c 	and.w	r2, r3, #12
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d1eb      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b25      	ldr	r3, [pc, #148]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d20c      	bcs.n	8004b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b20      	ldr	r3, [pc, #128]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e032      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4916      	ldr	r1, [pc, #88]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b6e:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	490e      	ldr	r1, [pc, #56]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b82:	f000 f821 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	490a      	ldr	r1, [pc, #40]	@ (8004bbc <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	5ccb      	ldrb	r3, [r1, r3]
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b9e:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff f8d6 	bl	8003d54 <HAL_InitTick>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023c00 	.word	0x40023c00
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0800616c 	.word	0x0800616c
 8004bc0:	2000000c 	.word	0x2000000c
 8004bc4:	20000010 	.word	0x20000010

08004bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bcc:	b094      	sub	sp, #80	@ 0x50
 8004bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd8:	2300      	movs	r3, #0
 8004bda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be0:	4b79      	ldr	r3, [pc, #484]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d00d      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x40>
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	f200 80e1 	bhi.w	8004db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x34>
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bfa:	e0db      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b73      	ldr	r3, [pc, #460]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004c00:	e0db      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c02:	4b73      	ldr	r3, [pc, #460]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c06:	e0d8      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c08:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c10:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c12:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d063      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	2200      	movs	r2, #0
 8004c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c32:	2300      	movs	r3, #0
 8004c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	f04f 0000 	mov.w	r0, #0
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	0159      	lsls	r1, r3, #5
 8004c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c4c:	0150      	lsls	r0, r2, #5
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4621      	mov	r1, r4
 8004c54:	1a51      	subs	r1, r2, r1
 8004c56:	6139      	str	r1, [r7, #16]
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c6c:	4659      	mov	r1, fp
 8004c6e:	018b      	lsls	r3, r1, #6
 8004c70:	4651      	mov	r1, sl
 8004c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c76:	4651      	mov	r1, sl
 8004c78:	018a      	lsls	r2, r1, #6
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c80:	4659      	mov	r1, fp
 8004c82:	eb63 0901 	sbc.w	r9, r3, r1
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c9a:	4690      	mov	r8, r2
 8004c9c:	4699      	mov	r9, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	eb18 0303 	adds.w	r3, r8, r3
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	eb49 0303 	adc.w	r3, r9, r3
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cba:	4629      	mov	r1, r5
 8004cbc:	024b      	lsls	r3, r1, #9
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	024a      	lsls	r2, r1, #9
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cce:	2200      	movs	r2, #0
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cd8:	f7fb fa7a 	bl	80001d0 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce4:	e058      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b38      	ldr	r3, [pc, #224]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	2200      	movs	r2, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	0159      	lsls	r1, r3, #5
 8004d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d12:	0150      	lsls	r0, r2, #5
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4641      	mov	r1, r8
 8004d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d1e:	4649      	mov	r1, r9
 8004d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d38:	ebb2 040a 	subs.w	r4, r2, sl
 8004d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	00eb      	lsls	r3, r5, #3
 8004d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4e:	00e2      	lsls	r2, r4, #3
 8004d50:	4614      	mov	r4, r2
 8004d52:	461d      	mov	r5, r3
 8004d54:	4643      	mov	r3, r8
 8004d56:	18e3      	adds	r3, r4, r3
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	eb45 0303 	adc.w	r3, r5, r3
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d6e:	4629      	mov	r1, r5
 8004d70:	028b      	lsls	r3, r1, #10
 8004d72:	4621      	mov	r1, r4
 8004d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d78:	4621      	mov	r1, r4
 8004d7a:	028a      	lsls	r2, r1, #10
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d82:	2200      	movs	r2, #0
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	61fa      	str	r2, [r7, #28]
 8004d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d8c:	f7fb fa20 	bl	80001d0 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4613      	mov	r3, r2
 8004d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	3301      	adds	r3, #1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004da8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004db2:	e002      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8004db6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3750      	adds	r7, #80	@ 0x50
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	007a1200 	.word	0x007a1200

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	@ (8004de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c

08004dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df0:	f7ff fff0 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0a9b      	lsrs	r3, r3, #10
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	@ (8004e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	0800617c 	.word	0x0800617c

08004e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e18:	f7ff ffdc 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0b5b      	lsrs	r3, r3, #13
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4903      	ldr	r1, [pc, #12]	@ (8004e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40023800 	.word	0x40023800
 8004e38:	0800617c 	.word	0x0800617c

08004e3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	220f      	movs	r2, #15
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e4c:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0203 	and.w	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e58:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e70:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e7e:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_RCC_GetClockConfig+0x60>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0207 	and.w	r2, r3, #7
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40023c00 	.word	0x40023c00

08004ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e041      	b.n	8004f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fe fed4 	bl	8003c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f000 fa7e 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d001      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e04e      	b.n	8004ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a23      	ldr	r2, [pc, #140]	@ (8005004 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d022      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f82:	d01d      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1f      	ldr	r2, [pc, #124]	@ (8005008 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <HAL_TIM_Base_Start_IT+0xcc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_TIM_Base_Start_IT+0xdc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d111      	bne.n	8004fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b06      	cmp	r3, #6
 8004fd0:	d010      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	e007      	b.n	8004ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40010400 	.word	0x40010400
 8005018:	40014000 	.word	0x40014000
 800501c:	40001800 	.word	0x40001800

08005020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d020      	beq.n	8005084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01b      	beq.n	8005084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0202 	mvn.w	r2, #2
 8005054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f999 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f98b 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f99c 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d020      	beq.n	80050d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01b      	beq.n	80050d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0204 	mvn.w	r2, #4
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f973 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f965 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f976 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d020      	beq.n	800511c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0208 	mvn.w	r2, #8
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2204      	movs	r2, #4
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f94d 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f93f 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f950 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d020      	beq.n	8005168 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01b      	beq.n	8005168 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0210 	mvn.w	r2, #16
 8005138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2208      	movs	r2, #8
 800513e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f927 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f919 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f92a 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0201 	mvn.w	r2, #1
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fe fd02 	bl	8003b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00c      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fae4 	bl	8005778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8fb 	bl	80053ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0220 	mvn.w	r2, #32
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fab6 	bl	8005764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIM_ConfigClockSource+0x1c>
 8005218:	2302      	movs	r3, #2
 800521a:	e0b4      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x186>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800523a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005254:	d03e      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800525a:	f200 8087 	bhi.w	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005262:	f000 8086 	beq.w	8005372 <HAL_TIM_ConfigClockSource+0x172>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526a:	d87f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b70      	cmp	r3, #112	@ 0x70
 800526e:	d01a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005270:	2b70      	cmp	r3, #112	@ 0x70
 8005272:	d87b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b60      	cmp	r3, #96	@ 0x60
 8005276:	d050      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x11a>
 8005278:	2b60      	cmp	r3, #96	@ 0x60
 800527a:	d877      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b50      	cmp	r3, #80	@ 0x50
 800527e:	d03c      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0xfa>
 8005280:	2b50      	cmp	r3, #80	@ 0x50
 8005282:	d873      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b40      	cmp	r3, #64	@ 0x40
 8005286:	d058      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x13a>
 8005288:	2b40      	cmp	r3, #64	@ 0x40
 800528a:	d86f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b30      	cmp	r3, #48	@ 0x30
 800528e:	d064      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	2b30      	cmp	r3, #48	@ 0x30
 8005292:	d86b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d060      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	2b20      	cmp	r3, #32
 800529a:	d867      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05c      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d05a      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 80052a4:	e062      	b.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b6:	f000 f9b9 	bl	800562c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	609a      	str	r2, [r3, #8]
      break;
 80052d2:	e04f      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e4:	f000 f9a2 	bl	800562c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052f6:	609a      	str	r2, [r3, #8]
      break;
 80052f8:	e03c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 f916 	bl	8005538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2150      	movs	r1, #80	@ 0x50
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f96f 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8005318:	e02c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 f935 	bl	8005596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2160      	movs	r1, #96	@ 0x60
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f95f 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8005338:	e01c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005346:	461a      	mov	r2, r3
 8005348:	f000 f8f6 	bl	8005538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2140      	movs	r1, #64	@ 0x40
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f94f 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8005358:	e00c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 f946 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 800536a:	e003      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e000      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a46      	ldr	r2, [pc, #280]	@ (800550c <TIM_Base_SetConfig+0x12c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a43      	ldr	r2, [pc, #268]	@ (8005510 <TIM_Base_SetConfig+0x130>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a42      	ldr	r2, [pc, #264]	@ (8005514 <TIM_Base_SetConfig+0x134>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a41      	ldr	r2, [pc, #260]	@ (8005518 <TIM_Base_SetConfig+0x138>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a40      	ldr	r2, [pc, #256]	@ (800551c <TIM_Base_SetConfig+0x13c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a35      	ldr	r2, [pc, #212]	@ (800550c <TIM_Base_SetConfig+0x12c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005440:	d027      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a32      	ldr	r2, [pc, #200]	@ (8005510 <TIM_Base_SetConfig+0x130>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d023      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a31      	ldr	r2, [pc, #196]	@ (8005514 <TIM_Base_SetConfig+0x134>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a30      	ldr	r2, [pc, #192]	@ (8005518 <TIM_Base_SetConfig+0x138>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2f      	ldr	r2, [pc, #188]	@ (800551c <TIM_Base_SetConfig+0x13c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d017      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2e      	ldr	r2, [pc, #184]	@ (8005520 <TIM_Base_SetConfig+0x140>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2d      	ldr	r2, [pc, #180]	@ (8005524 <TIM_Base_SetConfig+0x144>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <TIM_Base_SetConfig+0x148>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2b      	ldr	r2, [pc, #172]	@ (800552c <TIM_Base_SetConfig+0x14c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2a      	ldr	r2, [pc, #168]	@ (8005530 <TIM_Base_SetConfig+0x150>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a29      	ldr	r2, [pc, #164]	@ (8005534 <TIM_Base_SetConfig+0x154>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a10      	ldr	r2, [pc, #64]	@ (800550c <TIM_Base_SetConfig+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a12      	ldr	r2, [pc, #72]	@ (800551c <TIM_Base_SetConfig+0x13c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]
  }
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40010000 	.word	0x40010000
 8005510:	40000400 	.word	0x40000400
 8005514:	40000800 	.word	0x40000800
 8005518:	40000c00 	.word	0x40000c00
 800551c:	40010400 	.word	0x40010400
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800
 800552c:	40001800 	.word	0x40001800
 8005530:	40001c00 	.word	0x40001c00
 8005534:	40002000 	.word	0x40002000

08005538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 030a 	bic.w	r3, r3, #10
 8005574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005596:	b480      	push	{r7}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f023 0210 	bic.w	r2, r3, #16
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	f043 0307 	orr.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	021a      	lsls	r2, r3, #8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4313      	orrs	r3, r2
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e05a      	b.n	800573a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a21      	ldr	r2, [pc, #132]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d0:	d01d      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1d      	ldr	r2, [pc, #116]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a17      	ldr	r2, [pc, #92]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d10c      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	4313      	orrs	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40010400 	.word	0x40010400
 800575c:	40014000 	.word	0x40014000
 8005760:	40001800 	.word	0x40001800

08005764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e042      	b.n	8005824 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fe fa86 	bl	8003cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	@ 0x24
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f973 	bl	8005abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	@ 0x28
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b20      	cmp	r3, #32
 800584a:	d175      	bne.n	8005938 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_UART_Transmit+0x2c>
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e06e      	b.n	800593a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2221      	movs	r2, #33	@ 0x21
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800586a:	f7fe fb91 	bl	8003f90 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005884:	d108      	bne.n	8005898 <HAL_UART_Transmit+0x6c>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	e003      	b.n	80058a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058a0:	e02e      	b.n	8005900 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2180      	movs	r1, #128	@ 0x80
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f848 	bl	8005942 <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e03a      	b.n	800593a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3302      	adds	r3, #2
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e007      	b.n	80058f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1cb      	bne.n	80058a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	2140      	movs	r1, #64	@ 0x40
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f814 	bl	8005942 <UART_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e006      	b.n	800593a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4613      	mov	r3, r2
 8005950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005952:	e03b      	b.n	80059cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d037      	beq.n	80059cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595c:	f7fe fb18 	bl	8003f90 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	429a      	cmp	r2, r3
 800596a:	d302      	bcc.n	8005972 <UART_WaitOnFlagUntilTimeout+0x30>
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e03a      	b.n	80059ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d023      	beq.n	80059cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b80      	cmp	r3, #128	@ 0x80
 8005988:	d020      	beq.n	80059cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b40      	cmp	r3, #64	@ 0x40
 800598e:	d01d      	beq.n	80059cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b08      	cmp	r3, #8
 800599c:	d116      	bne.n	80059cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f81d 	bl	80059f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2208      	movs	r2, #8
 80059be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e00f      	b.n	80059ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4013      	ands	r3, r2
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d0b4      	beq.n	8005954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b095      	sub	sp, #84	@ 0x54
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d119      	bne.n	8005aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a8c:	61ba      	str	r2, [r7, #24]
 8005a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	613b      	str	r3, [r7, #16]
   return(result);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005aae:	bf00      	nop
 8005ab0:	3754      	adds	r7, #84	@ 0x54
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac0:	b0c0      	sub	sp, #256	@ 0x100
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	68d9      	ldr	r1, [r3, #12]
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	ea40 0301 	orr.w	r3, r0, r1
 8005ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b14:	f021 010c 	bic.w	r1, r1, #12
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b22:	430b      	orrs	r3, r1
 8005b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	6999      	ldr	r1, [r3, #24]
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	ea40 0301 	orr.w	r3, r0, r1
 8005b42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b8f      	ldr	r3, [pc, #572]	@ (8005d88 <UART_SetConfig+0x2cc>)
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d005      	beq.n	8005b5c <UART_SetConfig+0xa0>
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b8d      	ldr	r3, [pc, #564]	@ (8005d8c <UART_SetConfig+0x2d0>)
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d104      	bne.n	8005b66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b5c:	f7ff f95a 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 8005b60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b64:	e003      	b.n	8005b6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b66:	f7ff f941 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8005b6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b78:	f040 810c 	bne.w	8005d94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b8e:	4622      	mov	r2, r4
 8005b90:	462b      	mov	r3, r5
 8005b92:	1891      	adds	r1, r2, r2
 8005b94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b96:	415b      	adcs	r3, r3
 8005b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	eb12 0801 	adds.w	r8, r2, r1
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	eb43 0901 	adc.w	r9, r3, r1
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bbe:	4690      	mov	r8, r2
 8005bc0:	4699      	mov	r9, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	eb18 0303 	adds.w	r3, r8, r3
 8005bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bcc:	462b      	mov	r3, r5
 8005bce:	eb49 0303 	adc.w	r3, r9, r3
 8005bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005be2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bea:	460b      	mov	r3, r1
 8005bec:	18db      	adds	r3, r3, r3
 8005bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	eb42 0303 	adc.w	r3, r2, r3
 8005bf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c00:	f7fa fae6 	bl	80001d0 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4b61      	ldr	r3, [pc, #388]	@ (8005d90 <UART_SetConfig+0x2d4>)
 8005c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	011c      	lsls	r4, r3, #4
 8005c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	1891      	adds	r1, r2, r2
 8005c2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c2c:	415b      	adcs	r3, r3
 8005c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c34:	4641      	mov	r1, r8
 8005c36:	eb12 0a01 	adds.w	sl, r2, r1
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c54:	4692      	mov	sl, r2
 8005c56:	469b      	mov	fp, r3
 8005c58:	4643      	mov	r3, r8
 8005c5a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c62:	464b      	mov	r3, r9
 8005c64:	eb4b 0303 	adc.w	r3, fp, r3
 8005c68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c80:	460b      	mov	r3, r1
 8005c82:	18db      	adds	r3, r3, r3
 8005c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c86:	4613      	mov	r3, r2
 8005c88:	eb42 0303 	adc.w	r3, r2, r3
 8005c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c96:	f7fa fa9b 	bl	80001d0 <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8005d90 <UART_SetConfig+0x2d4>)
 8005ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	2264      	movs	r2, #100	@ 0x64
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	1acb      	subs	r3, r1, r3
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cb6:	4b36      	ldr	r3, [pc, #216]	@ (8005d90 <UART_SetConfig+0x2d4>)
 8005cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cc4:	441c      	add	r4, r3
 8005cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	1891      	adds	r1, r2, r2
 8005cde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ce0:	415b      	adcs	r3, r3
 8005ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ce8:	4641      	mov	r1, r8
 8005cea:	1851      	adds	r1, r2, r1
 8005cec:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cee:	4649      	mov	r1, r9
 8005cf0:	414b      	adcs	r3, r1
 8005cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d00:	4659      	mov	r1, fp
 8005d02:	00cb      	lsls	r3, r1, #3
 8005d04:	4651      	mov	r1, sl
 8005d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	00ca      	lsls	r2, r1, #3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	4642      	mov	r2, r8
 8005d16:	189b      	adds	r3, r3, r2
 8005d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	460a      	mov	r2, r1
 8005d20:	eb42 0303 	adc.w	r3, r2, r3
 8005d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	18db      	adds	r3, r3, r3
 8005d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d42:	4613      	mov	r3, r2
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d52:	f7fa fa3d 	bl	80001d0 <__aeabi_uldivmod>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <UART_SetConfig+0x2d4>)
 8005d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	2164      	movs	r1, #100	@ 0x64
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	3332      	adds	r3, #50	@ 0x32
 8005d6e:	4a08      	ldr	r2, [pc, #32]	@ (8005d90 <UART_SetConfig+0x2d4>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	f003 0207 	and.w	r2, r3, #7
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4422      	add	r2, r4
 8005d82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d84:	e106      	b.n	8005f94 <UART_SetConfig+0x4d8>
 8005d86:	bf00      	nop
 8005d88:	40011000 	.word	0x40011000
 8005d8c:	40011400 	.word	0x40011400
 8005d90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005da2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005da6:	4642      	mov	r2, r8
 8005da8:	464b      	mov	r3, r9
 8005daa:	1891      	adds	r1, r2, r2
 8005dac:	6239      	str	r1, [r7, #32]
 8005dae:	415b      	adcs	r3, r3
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005db6:	4641      	mov	r1, r8
 8005db8:	1854      	adds	r4, r2, r1
 8005dba:	4649      	mov	r1, r9
 8005dbc:	eb43 0501 	adc.w	r5, r3, r1
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	00eb      	lsls	r3, r5, #3
 8005dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dce:	00e2      	lsls	r2, r4, #3
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	461d      	mov	r5, r3
 8005dd4:	4643      	mov	r3, r8
 8005dd6:	18e3      	adds	r3, r4, r3
 8005dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ddc:	464b      	mov	r3, r9
 8005dde:	eb45 0303 	adc.w	r3, r5, r3
 8005de2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005df2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e02:	4629      	mov	r1, r5
 8005e04:	008b      	lsls	r3, r1, #2
 8005e06:	4621      	mov	r1, r4
 8005e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	008a      	lsls	r2, r1, #2
 8005e10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e14:	f7fa f9dc 	bl	80001d0 <__aeabi_uldivmod>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4b60      	ldr	r3, [pc, #384]	@ (8005fa0 <UART_SetConfig+0x4e4>)
 8005e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	011c      	lsls	r4, r3, #4
 8005e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e38:	4642      	mov	r2, r8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	1891      	adds	r1, r2, r2
 8005e3e:	61b9      	str	r1, [r7, #24]
 8005e40:	415b      	adcs	r3, r3
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e48:	4641      	mov	r1, r8
 8005e4a:	1851      	adds	r1, r2, r1
 8005e4c:	6139      	str	r1, [r7, #16]
 8005e4e:	4649      	mov	r1, r9
 8005e50:	414b      	adcs	r3, r1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e60:	4659      	mov	r1, fp
 8005e62:	00cb      	lsls	r3, r1, #3
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	00ca      	lsls	r2, r1, #3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	4642      	mov	r2, r8
 8005e76:	189b      	adds	r3, r3, r2
 8005e78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	460a      	mov	r2, r1
 8005e80:	eb42 0303 	adc.w	r3, r2, r3
 8005e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	008b      	lsls	r3, r1, #2
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eaa:	4641      	mov	r1, r8
 8005eac:	008a      	lsls	r2, r1, #2
 8005eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eb2:	f7fa f98d 	bl	80001d0 <__aeabi_uldivmod>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4b38      	ldr	r3, [pc, #224]	@ (8005fa0 <UART_SetConfig+0x4e4>)
 8005ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2264      	movs	r2, #100	@ 0x64
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	1acb      	subs	r3, r1, r3
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	3332      	adds	r3, #50	@ 0x32
 8005ed0:	4a33      	ldr	r2, [pc, #204]	@ (8005fa0 <UART_SetConfig+0x4e4>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005edc:	441c      	add	r4, r3
 8005ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ee6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ee8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005efc:	4641      	mov	r1, r8
 8005efe:	1851      	adds	r1, r2, r1
 8005f00:	6039      	str	r1, [r7, #0]
 8005f02:	4649      	mov	r1, r9
 8005f04:	414b      	adcs	r3, r1
 8005f06:	607b      	str	r3, [r7, #4]
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f14:	4659      	mov	r1, fp
 8005f16:	00cb      	lsls	r3, r1, #3
 8005f18:	4651      	mov	r1, sl
 8005f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f1e:	4651      	mov	r1, sl
 8005f20:	00ca      	lsls	r2, r1, #3
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f2e:	464b      	mov	r3, r9
 8005f30:	460a      	mov	r2, r1
 8005f32:	eb42 0303 	adc.w	r3, r2, r3
 8005f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f42:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f50:	4649      	mov	r1, r9
 8005f52:	008b      	lsls	r3, r1, #2
 8005f54:	4641      	mov	r1, r8
 8005f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	008a      	lsls	r2, r1, #2
 8005f5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f62:	f7fa f935 	bl	80001d0 <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <UART_SetConfig+0x4e4>)
 8005f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	2164      	movs	r1, #100	@ 0x64
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	3332      	adds	r3, #50	@ 0x32
 8005f7e:	4a08      	ldr	r2, [pc, #32]	@ (8005fa0 <UART_SetConfig+0x4e4>)
 8005f80:	fba2 2303 	umull	r2, r3, r2, r3
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	f003 020f 	and.w	r2, r3, #15
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4422      	add	r2, r4
 8005f92:	609a      	str	r2, [r3, #8]
}
 8005f94:	bf00      	nop
 8005f96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa0:	51eb851f 	.word	0x51eb851f

08005fa4 <memset>:
 8005fa4:	4402      	add	r2, r0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d100      	bne.n	8005fae <memset+0xa>
 8005fac:	4770      	bx	lr
 8005fae:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb2:	e7f9      	b.n	8005fa8 <memset+0x4>

08005fb4 <__libc_init_array>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8005fec <__libc_init_array+0x38>)
 8005fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8005ff0 <__libc_init_array+0x3c>)
 8005fba:	1b64      	subs	r4, r4, r5
 8005fbc:	10a4      	asrs	r4, r4, #2
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	d109      	bne.n	8005fd8 <__libc_init_array+0x24>
 8005fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8005ff4 <__libc_init_array+0x40>)
 8005fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff8 <__libc_init_array+0x44>)
 8005fc8:	f000 f826 	bl	8006018 <_init>
 8005fcc:	1b64      	subs	r4, r4, r5
 8005fce:	10a4      	asrs	r4, r4, #2
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	42a6      	cmp	r6, r4
 8005fd4:	d105      	bne.n	8005fe2 <__libc_init_array+0x2e>
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fdc:	4798      	blx	r3
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7ee      	b.n	8005fc0 <__libc_init_array+0xc>
 8005fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe6:	4798      	blx	r3
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7f2      	b.n	8005fd2 <__libc_init_array+0x1e>
 8005fec:	0800618c 	.word	0x0800618c
 8005ff0:	0800618c 	.word	0x0800618c
 8005ff4:	0800618c 	.word	0x0800618c
 8005ff8:	08006190 	.word	0x08006190

08005ffc <memcpy>:
 8005ffc:	440a      	add	r2, r1
 8005ffe:	4291      	cmp	r1, r2
 8006000:	f100 33ff 	add.w	r3, r0, #4294967295
 8006004:	d100      	bne.n	8006008 <memcpy+0xc>
 8006006:	4770      	bx	lr
 8006008:	b510      	push	{r4, lr}
 800600a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800600e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006012:	4291      	cmp	r1, r2
 8006014:	d1f9      	bne.n	800600a <memcpy+0xe>
 8006016:	bd10      	pop	{r4, pc}

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
