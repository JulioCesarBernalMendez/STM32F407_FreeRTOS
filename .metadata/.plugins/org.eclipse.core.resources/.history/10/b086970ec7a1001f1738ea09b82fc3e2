
App_002_2_Separate_Blinky_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004094  08004094  00005094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040dc  080040dc  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  080040dc  080040dc  000050dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040e4  080040e4  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e4  080040e4  000050e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040e8  080040e8  000050e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080040ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          00012df8  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e0c  20012e0c  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5cf  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253b  00000000  00000000  00014613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00016b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6c  00000000  00000000  00017a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc1d  00000000  00000000  00018584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cdc  00000000  00000000  000381a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d704d  00000000  00000000  00048e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011feca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d48  00000000  00000000  0011ff10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00123c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800407c 	.word	0x0800407c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800407c 	.word	0x0800407c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f103 0208 	add.w	r2, r3, #8
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f04f 32ff 	mov.w	r2, #4294967295
 80004d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f103 0208 	add.w	r2, r3, #8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f103 0208 	add.w	r2, r3, #8
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800051a:	b480      	push	{r7}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d103      	bne.n	800053a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e00c      	b.n	8000554 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3308      	adds	r3, #8
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e002      	b.n	8000548 <vListInsert+0x2e>
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	429a      	cmp	r2, r3
 8000552:	d2f6      	bcs.n	8000542 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6892      	ldr	r2, [r2, #8]
 80005a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6852      	ldr	r2, [r2, #4]
 80005ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d103      	bne.n	80005c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d05d      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800061a:	2b00      	cmp	r3, #0
 800061c:	d059      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000626:	2100      	movs	r1, #0
 8000628:	fba3 2302 	umull	r2, r3, r3, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d000      	beq.n	8000632 <xQueueGenericReset+0x52>
 8000630:	2101      	movs	r1, #1
 8000632:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14c      	bne.n	80006d2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000638:	f001 fee4 	bl	8002404 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000644:	6939      	ldr	r1, [r7, #16]
 8000646:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	441a      	add	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000668:	3b01      	subs	r3, #1
 800066a:	6939      	ldr	r1, [r7, #16]
 800066c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	441a      	add	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	22ff      	movs	r2, #255	@ 0xff
 800067c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	22ff      	movs	r2, #255	@ 0xff
 8000684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d114      	bne.n	80006b8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d01a      	beq.n	80006cc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	3310      	adds	r3, #16
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ffee 	bl	800167c <xTaskRemoveFromEventList>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d012      	beq.n	80006cc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <xQueueGenericReset+0x120>)
 80006a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	e009      	b.n	80006cc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3310      	adds	r3, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff feff 	bl	80004c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3324      	adds	r3, #36	@ 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fefa 	bl	80004c0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006cc:	f001 fecc 	bl	8002468 <vPortExitCritical>
 80006d0:	e001      	b.n	80006d6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10b      	bne.n	80006f4 <xQueueGenericReset+0x114>
    __asm volatile
 80006dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	60bb      	str	r3, [r7, #8]
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80006f4:	697b      	ldr	r3, [r7, #20]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	4613      	mov	r3, r2
 8000710:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d02e      	beq.n	800077a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800071c:	2100      	movs	r1, #0
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fba3 2302 	umull	r2, r3, r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <xQueueGenericCreate+0x28>
 800072a:	2101      	movs	r1, #1
 800072c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800072e:	2b00      	cmp	r3, #0
 8000730:	d123      	bne.n	800077a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800073a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800073e:	d81c      	bhi.n	800077a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	3350      	adds	r3, #80	@ 0x50
 800074e:	4618      	mov	r0, r3
 8000750:	f001 ff3c 	bl	80025cc <pvPortMalloc>
 8000754:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01d      	beq.n	8000798 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3350      	adds	r3, #80	@ 0x50
 8000764:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 f815 	bl	80007a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000778:	e00e      	b.n	8000798 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10b      	bne.n	8000798 <xQueueGenericCreate+0x94>
    __asm volatile
 8000780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	613b      	str	r3, [r7, #16]
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000798:	69fb      	ldr	r3, [r7, #28]
    }
 800079a:	4618      	mov	r0, r3
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007d0:	2101      	movs	r1, #1
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	f7ff ff04 	bl	80005e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	78fa      	ldrb	r2, [r7, #3]
 80007dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80007fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10b      	bne.n	800081a <xQueueReceive+0x32>
    __asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	623b      	str	r3, [r7, #32]
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d103      	bne.n	8000828 <xQueueReceive+0x40>
 8000820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <xQueueReceive+0x44>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <xQueueReceive+0x46>
 800082c:	2300      	movs	r3, #0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10b      	bne.n	800084a <xQueueReceive+0x62>
    __asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	61fb      	str	r3, [r7, #28]
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	e7fd      	b.n	8000846 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800084a:	f001 f92d 	bl	8001aa8 <xTaskGetSchedulerState>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <xQueueReceive+0x72>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <xQueueReceive+0x76>
 800085a:	2301      	movs	r3, #1
 800085c:	e000      	b.n	8000860 <xQueueReceive+0x78>
 800085e:	2300      	movs	r3, #0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10b      	bne.n	800087c <xQueueReceive+0x94>
    __asm volatile
 8000864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000868:	f383 8811 	msr	BASEPRI, r3
 800086c:	f3bf 8f6f 	isb	sy
 8000870:	f3bf 8f4f 	dsb	sy
 8000874:	61bb      	str	r3, [r7, #24]
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800087c:	f001 fdc2 	bl	8002404 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01f      	beq.n	80008cc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000890:	f000 f88c 	bl	80009ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800089c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00f      	beq.n	80008c4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a6:	3310      	adds	r3, #16
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fee7 	bl	800167c <xTaskRemoveFromEventList>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d007      	beq.n	80008c4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80008b4:	4b3c      	ldr	r3, [pc, #240]	@ (80009a8 <xQueueReceive+0x1c0>)
 80008b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008c4:	f001 fdd0 	bl	8002468 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e069      	b.n	80009a0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d103      	bne.n	80008da <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008d2:	f001 fdc9 	bl	8002468 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e062      	b.n	80009a0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d106      	bne.n	80008ee <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 ffa3 	bl	8001830 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008ee:	f001 fdbb 	bl	8002468 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008f2:	f000 fbb9 	bl	8001068 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008f6:	f001 fd85 	bl	8002404 <vPortEnterCritical>
 80008fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000900:	b25b      	sxtb	r3, r3
 8000902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000906:	d103      	bne.n	8000910 <xQueueReceive+0x128>
 8000908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000912:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000916:	b25b      	sxtb	r3, r3
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d103      	bne.n	8000926 <xQueueReceive+0x13e>
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000926:	f001 fd9f 	bl	8002468 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800092a:	1d3a      	adds	r2, r7, #4
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f000 ff92 	bl	800185c <xTaskCheckForTimeOut>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d123      	bne.n	8000986 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800093e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000940:	f000 f8ac 	bl	8000a9c <prvIsQueueEmpty>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d017      	beq.n	800097a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094c:	3324      	adds	r3, #36	@ 0x24
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fe26 	bl	80015a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800095a:	f000 f84d 	bl	80009f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800095e:	f000 fb91 	bl	8001084 <xTaskResumeAll>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d189      	bne.n	800087c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <xQueueReceive+0x1c0>)
 800096a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	f3bf 8f4f 	dsb	sy
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	e780      	b.n	800087c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800097a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800097c:	f000 f83c 	bl	80009f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000980:	f000 fb80 	bl	8001084 <xTaskResumeAll>
 8000984:	e77a      	b.n	800087c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000988:	f000 f836 	bl	80009f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800098c:	f000 fb7a 	bl	8001084 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000992:	f000 f883 	bl	8000a9c <prvIsQueueEmpty>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	f43f af6f 	beq.w	800087c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800099e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3730      	adds	r7, #48	@ 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	e000ed04 	.word	0xe000ed04

080009ac <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d018      	beq.n	80009f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	441a      	add	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d303      	bcc.n	80009e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68d9      	ldr	r1, [r3, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	461a      	mov	r2, r3
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f003 fb38 	bl	8004060 <memcpy>
    }
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a00:	f001 fd00 	bl	8002404 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a0c:	e011      	b.n	8000a32 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d012      	beq.n	8000a3c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3324      	adds	r3, #36	@ 0x24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fe2e 	bl	800167c <xTaskRemoveFromEventList>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a26:	f000 ff81 	bl	800192c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dce9      	bgt.n	8000a0e <prvUnlockQueue+0x16>
 8000a3a:	e000      	b.n	8000a3e <prvUnlockQueue+0x46>
                    break;
 8000a3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	22ff      	movs	r2, #255	@ 0xff
 8000a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000a46:	f001 fd0f 	bl	8002468 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000a4a:	f001 fcdb 	bl	8002404 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a56:	e011      	b.n	8000a7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d012      	beq.n	8000a86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3310      	adds	r3, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fe09 	bl	800167c <xTaskRemoveFromEventList>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000a70:	f000 ff5c 	bl	800192c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dce9      	bgt.n	8000a58 <prvUnlockQueue+0x60>
 8000a84:	e000      	b.n	8000a88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000a86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	22ff      	movs	r2, #255	@ 0xff
 8000a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000a90:	f001 fcea 	bl	8002468 <vPortExitCritical>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000aa4:	f001 fcae 	bl	8002404 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e001      	b.n	8000aba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000aba:	f001 fcd5 	bl	8002468 <vPortExitCritical>

    return xReturn;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10b      	bne.n	8000af4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae0:	f383 8811 	msr	BASEPRI, r3
 8000ae4:	f3bf 8f6f 	isb	sy
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	60fb      	str	r3, [r7, #12]
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d024      	beq.n	8000b44 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e01e      	b.n	8000b3e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000b00:	4a18      	ldr	r2, [pc, #96]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4413      	add	r3, r2
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d105      	bne.n	8000b1c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b16:	4413      	add	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
                    break;
 8000b1a:	e013      	b.n	8000b44 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10a      	bne.n	8000b38 <vQueueAddToRegistry+0x70>
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	4a0c      	ldr	r2, [pc, #48]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b34:	4413      	add	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	d9dd      	bls.n	8000b00 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000b56:	bf00      	nop
 8000b58:	371c      	adds	r7, #28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000030 	.word	0x20000030

08000b68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000b78:	f001 fc44 	bl	8002404 <vPortEnterCritical>
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d103      	bne.n	8000b92 <vQueueWaitForMessageRestricted+0x2a>
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9e:	d103      	bne.n	8000ba8 <vQueueWaitForMessageRestricted+0x40>
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000ba8:	f001 fc5e 	bl	8002468 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d106      	bne.n	8000bc2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3324      	adds	r3, #36	@ 0x24
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fd17 	bl	80015f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff18 	bl	80009f8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fcf2 	bl	80025cc <pvPortMalloc>
 8000be8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000bf0:	2058      	movs	r0, #88	@ 0x58
 8000bf2:	f001 fceb 	bl	80025cc <pvPortMalloc>
 8000bf6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d008      	beq.n	8000c10 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000bfe:	2258      	movs	r2, #88	@ 0x58
 8000c00:	2100      	movs	r1, #0
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f003 fa00 	bl	8004008 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c0e:	e005      	b.n	8000c1c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000c10:	6938      	ldr	r0, [r7, #16]
 8000c12:	f001 fd2f 	bl	8002674 <vPortFree>
 8000c16:	e001      	b.n	8000c1c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00d      	beq.n	8000c3e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c22:	2300      	movs	r3, #0
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f000 f828 	bl	8000c8e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000c3e:	697b      	ldr	r3, [r7, #20]
    }
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff ffb3 	bl	8000bd0 <prvCreateTask>
 8000c6a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000c72:	6938      	ldr	r0, [r7, #16]
 8000c74:	f000 f89c 	bl	8000db0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e002      	b.n	8000c84 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8000c84:	697b      	ldr	r3, [r7, #20]
    }
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b088      	sub	sp, #32
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	21a5      	movs	r1, #165	@ 0xa5
 8000ca8:	f003 f9ae 	bl	8004008 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f023 0307 	bic.w	r3, r3, #7
 8000cc4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00b      	beq.n	8000ce8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	617b      	str	r3, [r7, #20]
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01e      	beq.n	8000d2c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e012      	b.n	8000d1a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	7819      	ldrb	r1, [r3, #0]
 8000cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	4413      	add	r3, r2
 8000d02:	3334      	adds	r3, #52	@ 0x34
 8000d04:	460a      	mov	r2, r1
 8000d06:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d9e9      	bls.n	8000cf4 <prvInitialiseNewTask+0x66>
 8000d20:	e000      	b.n	8000d24 <prvInitialiseNewTask+0x96>
            {
                break;
 8000d22:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d90b      	bls.n	8000d4a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8000d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d36:	f383 8811 	msr	BASEPRI, r3
 8000d3a:	f3bf 8f6f 	isb	sy
 8000d3e:	f3bf 8f4f 	dsb	sy
 8000d42:	613b      	str	r3, [r7, #16]
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	e7fd      	b.n	8000d46 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d901      	bls.n	8000d54 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d50:	2304      	movs	r3, #4
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d58:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d5e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d62:	3304      	adds	r3, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fbcb 	bl	8000500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d6c:	3318      	adds	r3, #24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fbc6 	bl	8000500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d78:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7c:	f1c3 0205 	rsb	r2, r3, #5
 8000d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d82:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	68f9      	ldr	r1, [r7, #12]
 8000d8e:	69b8      	ldr	r0, [r7, #24]
 8000d90:	f001 f9bc 	bl	800210c <pxPortInitialiseStack>
 8000d94:	4602      	mov	r2, r0
 8000d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d98:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000da4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000db8:	f001 fb24 	bl	8002404 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000dbc:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a40      	ldr	r2, [pc, #256]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000dc4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000dc6:	4b40      	ldr	r3, [pc, #256]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000dce:	4a3e      	ldr	r2, [pc, #248]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d110      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000ddc:	f000 fdca 	bl	8001974 <prvInitialiseTaskLists>
 8000de0:	e00d      	b.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000de2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dea:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d802      	bhi.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000df8:	4a33      	ldr	r2, [pc, #204]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000dfe:	4b34      	ldr	r3, [pc, #208]	@ (8000ed0 <prvAddNewTaskToReadyList+0x120>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a32      	ldr	r2, [pc, #200]	@ (8000ed0 <prvAddNewTaskToReadyList+0x120>)
 8000e06:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e08:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <prvAddNewTaskToReadyList+0x120>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e14:	2201      	movs	r2, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <prvAddNewTaskToReadyList+0x124>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <prvAddNewTaskToReadyList+0x124>)
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e26:	492c      	ldr	r1, [pc, #176]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	3304      	adds	r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	3204      	adds	r2, #4
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1d1a      	adds	r2, r3, #4
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e66:	441a      	add	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e70:	4919      	ldr	r1, [pc, #100]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000e82:	1c59      	adds	r1, r3, #1
 8000e84:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4403      	add	r3, r0
 8000e90:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000e92:	f001 fae9 	bl	8002468 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00e      	beq.n	8000ebc <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <prvAddNewTaskToReadyList+0x10c>
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <prvAddNewTaskToReadyList+0x12c>)
 8000eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000148 	.word	0x20000148
 8000ec8:	20000070 	.word	0x20000070
 8000ecc:	20000154 	.word	0x20000154
 8000ed0:	20000164 	.word	0x20000164
 8000ed4:	20000150 	.word	0x20000150
 8000ed8:	20000074 	.word	0x20000074
 8000edc:	e000ed04 	.word	0xe000ed04

08000ee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d018      	beq.n	8000f24 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8000ef2:	f000 f8b9 	bl	8001068 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <vTaskDelay+0x64>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d00b      	beq.n	8000f16 <vTaskDelay+0x36>
    __asm volatile
 8000efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	60bb      	str	r3, [r7, #8]
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	e7fd      	b.n	8000f12 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000f16:	2100      	movs	r1, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 fde3 	bl	8001ae4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000f1e:	f000 f8b1 	bl	8001084 <xTaskResumeAll>
 8000f22:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d107      	bne.n	8000f3a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <vTaskDelay+0x68>)
 8000f2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	f3bf 8f4f 	dsb	sy
 8000f36:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000170 	.word	0x20000170
 8000f48:	e000ed04 	.word	0xe000ed04

08000f4c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e011      	b.n	8000f84 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8000f60:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <prvCreateIdleTasks+0x88>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4413      	add	r3, r2
 8000f66:	7819      	ldrb	r1, [r3, #0]
 8000f68:	1d3a      	adds	r2, r7, #4
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	ddea      	ble.n	8000f60 <prvCreateIdleTasks+0x14>
 8000f8a:	e000      	b.n	8000f8e <prvCreateIdleTasks+0x42>
        {
            break;
 8000f8c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	e015      	b.n	8000fc0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <prvCreateIdleTasks+0x8c>)
 8000f96:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <prvCreateIdleTasks+0x90>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	1d39      	adds	r1, r7, #4
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2282      	movs	r2, #130	@ 0x82
 8000fac:	6938      	ldr	r0, [r7, #16]
 8000fae:	f7ff fe4b 	bl	8000c48 <xTaskCreate>
 8000fb2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dde6      	ble.n	8000f94 <prvCreateIdleTasks+0x48>
 8000fc6:	e000      	b.n	8000fca <prvCreateIdleTasks+0x7e>
        {
            break;
 8000fc8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8000fca:	69fb      	ldr	r3, [r7, #28]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08004094 	.word	0x08004094
 8000fd8:	08001945 	.word	0x08001945
 8000fdc:	2000016c 	.word	0x2000016c

08000fe0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8000fe6:	f7ff ffb1 	bl	8000f4c <prvCreateIdleTasks>
 8000fea:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d102      	bne.n	8000ff8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8000ff2:	f000 fdf9 	bl	8001be8 <xTimerCreateTimerTask>
 8000ff6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d116      	bne.n	800102c <vTaskStartScheduler+0x4c>
    __asm volatile
 8000ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	60bb      	str	r3, [r7, #8]
}
 8001010:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <vTaskStartScheduler+0x78>)
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <vTaskStartScheduler+0x7c>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <vTaskStartScheduler+0x80>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001026:	f001 f8fd 	bl	8002224 <xPortStartScheduler>
 800102a:	e00f      	b.n	800104c <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001032:	d10b      	bne.n	800104c <vTaskStartScheduler+0x6c>
    __asm volatile
 8001034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	607b      	str	r3, [r7, #4]
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <vTaskStartScheduler+0x84>)
 800104e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000168 	.word	0x20000168
 800105c:	20000154 	.word	0x20000154
 8001060:	2000014c 	.word	0x2000014c
 8001064:	20000000 	.word	0x20000000

08001068 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <vTaskSuspendAll+0x18>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a03      	ldr	r2, [pc, #12]	@ (8001080 <vTaskSuspendAll+0x18>)
 8001074:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	20000170 	.word	0x20000170

08001084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001092:	f001 f9b7 	bl	8002404 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800109a:	4b75      	ldr	r3, [pc, #468]	@ (8001270 <xTaskResumeAll+0x1ec>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <xTaskResumeAll+0x36>
    __asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	603b      	str	r3, [r7, #0]
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	e7fd      	b.n	80010b6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80010ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001270 <xTaskResumeAll+0x1ec>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3b01      	subs	r3, #1
 80010c0:	4a6b      	ldr	r2, [pc, #428]	@ (8001270 <xTaskResumeAll+0x1ec>)
 80010c2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80010c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001270 <xTaskResumeAll+0x1ec>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f040 80ca 	bne.w	8001262 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010ce:	4b69      	ldr	r3, [pc, #420]	@ (8001274 <xTaskResumeAll+0x1f0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80c5 	beq.w	8001262 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010d8:	e08e      	b.n	80011f8 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80010da:	4b67      	ldr	r3, [pc, #412]	@ (8001278 <xTaskResumeAll+0x1f4>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	6a12      	ldr	r2, [r2, #32]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	69d2      	ldr	r2, [r2, #28]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	3318      	adds	r3, #24
 8001104:	429a      	cmp	r2, r3
 8001106:	d103      	bne.n	8001110 <xTaskResumeAll+0x8c>
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	6a1a      	ldr	r2, [r3, #32]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2200      	movs	r2, #0
 8001114:	629a      	str	r2, [r3, #40]	@ 0x28
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	68d2      	ldr	r2, [r2, #12]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	6892      	ldr	r2, [r2, #8]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	429a      	cmp	r2, r3
 8001144:	d103      	bne.n	800114e <xTaskResumeAll+0xca>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1e5a      	subs	r2, r3, #1
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001162:	2201      	movs	r2, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	4b45      	ldr	r3, [pc, #276]	@ (800127c <xTaskResumeAll+0x1f8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	4a43      	ldr	r2, [pc, #268]	@ (800127c <xTaskResumeAll+0x1f8>)
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001174:	4942      	ldr	r1, [pc, #264]	@ (8001280 <xTaskResumeAll+0x1fc>)
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	3304      	adds	r3, #4
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	3204      	adds	r2, #4
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	1d1a      	adds	r2, r3, #4
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4a33      	ldr	r2, [pc, #204]	@ (8001280 <xTaskResumeAll+0x1fc>)
 80011b4:	441a      	add	r2, r3
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011be:	4930      	ldr	r1, [pc, #192]	@ (8001280 <xTaskResumeAll+0x1fc>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	482b      	ldr	r0, [pc, #172]	@ (8001280 <xTaskResumeAll+0x1fc>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4403      	add	r3, r0
 80011de:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <xTaskResumeAll+0x200>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d904      	bls.n	80011f8 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80011ee:	4a26      	ldr	r2, [pc, #152]	@ (8001288 <xTaskResumeAll+0x204>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2101      	movs	r1, #1
 80011f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <xTaskResumeAll+0x1f4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f47f af6c 	bne.w	80010da <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001208:	f000 fc32 	bl	8001a70 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <xTaskResumeAll+0x208>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d012      	beq.n	800123e <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001218:	f000 f84c 	bl	80012b4 <xTaskIncrementTick>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001222:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <xTaskResumeAll+0x204>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2101      	movs	r1, #1
 8001228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3b01      	subs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1ef      	bne.n	8001218 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <xTaskResumeAll+0x208>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <xTaskResumeAll+0x204>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <xTaskResumeAll+0x200>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <xTaskResumeAll+0x20c>)
 8001254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001262:	f001 f901 	bl	8002468 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001266:	69bb      	ldr	r3, [r7, #24]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000170 	.word	0x20000170
 8001274:	20000148 	.word	0x20000148
 8001278:	20000108 	.word	0x20000108
 800127c:	20000150 	.word	0x20000150
 8001280:	20000074 	.word	0x20000074
 8001284:	20000070 	.word	0x20000070
 8001288:	2000015c 	.word	0x2000015c
 800128c:	20000158 	.word	0x20000158
 8001290:	e000ed04 	.word	0xe000ed04

08001294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <xTaskGetTickCount+0x1c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000014c 	.word	0x2000014c

080012b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80012be:	4b7f      	ldr	r3, [pc, #508]	@ (80014bc <xTaskIncrementTick+0x208>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 80ef 	bne.w	80014a6 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80012c8:	4b7d      	ldr	r3, [pc, #500]	@ (80014c0 <xTaskIncrementTick+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80012d0:	4a7b      	ldr	r2, [pc, #492]	@ (80014c0 <xTaskIncrementTick+0x20c>)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d121      	bne.n	8001320 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80012dc:	4b79      	ldr	r3, [pc, #484]	@ (80014c4 <xTaskIncrementTick+0x210>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <xTaskIncrementTick+0x4a>
    __asm volatile
 80012e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ea:	f383 8811 	msr	BASEPRI, r3
 80012ee:	f3bf 8f6f 	isb	sy
 80012f2:	f3bf 8f4f 	dsb	sy
 80012f6:	607b      	str	r3, [r7, #4]
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	e7fd      	b.n	80012fa <xTaskIncrementTick+0x46>
 80012fe:	4b71      	ldr	r3, [pc, #452]	@ (80014c4 <xTaskIncrementTick+0x210>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <xTaskIncrementTick+0x214>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a6e      	ldr	r2, [pc, #440]	@ (80014c4 <xTaskIncrementTick+0x210>)
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4a6e      	ldr	r2, [pc, #440]	@ (80014c8 <xTaskIncrementTick+0x214>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6e      	ldr	r3, [pc, #440]	@ (80014cc <xTaskIncrementTick+0x218>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a6c      	ldr	r2, [pc, #432]	@ (80014cc <xTaskIncrementTick+0x218>)
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	f000 fba8 	bl	8001a70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001320:	4b6b      	ldr	r3, [pc, #428]	@ (80014d0 <xTaskIncrementTick+0x21c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6a3a      	ldr	r2, [r7, #32]
 8001326:	429a      	cmp	r2, r3
 8001328:	f0c0 80a8 	bcc.w	800147c <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800132c:	4b65      	ldr	r3, [pc, #404]	@ (80014c4 <xTaskIncrementTick+0x210>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001336:	4b66      	ldr	r3, [pc, #408]	@ (80014d0 <xTaskIncrementTick+0x21c>)
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	601a      	str	r2, [r3, #0]
                    break;
 800133e:	e09d      	b.n	800147c <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001340:	4b60      	ldr	r3, [pc, #384]	@ (80014c4 <xTaskIncrementTick+0x210>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	429a      	cmp	r2, r3
 8001356:	d203      	bcs.n	8001360 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001358:	4a5d      	ldr	r2, [pc, #372]	@ (80014d0 <xTaskIncrementTick+0x21c>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	6013      	str	r3, [r2, #0]
                        break;
 800135e:	e08d      	b.n	800147c <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	68d2      	ldr	r2, [r2, #12]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	6892      	ldr	r2, [r2, #8]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	3304      	adds	r3, #4
 8001382:	429a      	cmp	r2, r3
 8001384:	d103      	bne.n	800138e <xTaskIncrementTick+0xda>
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01e      	beq.n	80013e4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	6a12      	ldr	r2, [r2, #32]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	69d2      	ldr	r2, [r2, #28]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	3318      	adds	r3, #24
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d103      	bne.n	80013d4 <xTaskIncrementTick+0x120>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2200      	movs	r2, #0
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1e5a      	subs	r2, r3, #1
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e8:	2201      	movs	r2, #1
 80013ea:	409a      	lsls	r2, r3
 80013ec:	4b39      	ldr	r3, [pc, #228]	@ (80014d4 <xTaskIncrementTick+0x220>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	4a38      	ldr	r2, [pc, #224]	@ (80014d4 <xTaskIncrementTick+0x220>)
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013fa:	4937      	ldr	r1, [pc, #220]	@ (80014d8 <xTaskIncrementTick+0x224>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	3204      	adds	r2, #4
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	1d1a      	adds	r2, r3, #4
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4a27      	ldr	r2, [pc, #156]	@ (80014d8 <xTaskIncrementTick+0x224>)
 800143a:	441a      	add	r2, r3
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001444:	4924      	ldr	r1, [pc, #144]	@ (80014d8 <xTaskIncrementTick+0x224>)
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001456:	1c59      	adds	r1, r3, #1
 8001458:	481f      	ldr	r0, [pc, #124]	@ (80014d8 <xTaskIncrementTick+0x224>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4403      	add	r3, r0
 8001464:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <xTaskIncrementTick+0x228>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	429a      	cmp	r2, r3
 8001472:	f67f af5b 	bls.w	800132c <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001476:	2301      	movs	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800147a:	e757      	b.n	800132c <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800147c:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <xTaskIncrementTick+0x228>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001482:	4915      	ldr	r1, [pc, #84]	@ (80014d8 <xTaskIncrementTick+0x224>)
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d901      	bls.n	8001498 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001494:	2301      	movs	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <xTaskIncrementTick+0x22c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80014a0:	2301      	movs	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a4:	e004      	b.n	80014b0 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <xTaskIncrementTick+0x230>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <xTaskIncrementTick+0x230>)
 80014ae:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3728      	adds	r7, #40	@ 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000170 	.word	0x20000170
 80014c0:	2000014c 	.word	0x2000014c
 80014c4:	20000100 	.word	0x20000100
 80014c8:	20000104 	.word	0x20000104
 80014cc:	20000160 	.word	0x20000160
 80014d0:	20000168 	.word	0x20000168
 80014d4:	20000150 	.word	0x20000150
 80014d8:	20000074 	.word	0x20000074
 80014dc:	20000070 	.word	0x20000070
 80014e0:	2000015c 	.word	0x2000015c
 80014e4:	20000158 	.word	0x20000158

080014e8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80014ee:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <vTaskSwitchContext+0xa8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <vTaskSwitchContext+0xac>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80014fc:	e041      	b.n	8001582 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <vTaskSwitchContext+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <vTaskSwitchContext+0xb0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	f1c3 031f 	rsb	r3, r3, #31
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	4920      	ldr	r1, [pc, #128]	@ (800159c <vTaskSwitchContext+0xb4>)
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10b      	bne.n	8001546 <vTaskSwitchContext+0x5e>
    __asm volatile
 800152e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001532:	f383 8811 	msr	BASEPRI, r3
 8001536:	f3bf 8f6f 	isb	sy
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	607b      	str	r3, [r7, #4]
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	e7fd      	b.n	8001542 <vTaskSwitchContext+0x5a>
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4a12      	ldr	r2, [pc, #72]	@ (800159c <vTaskSwitchContext+0xb4>)
 8001552:	4413      	add	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	3308      	adds	r3, #8
 8001568:	429a      	cmp	r2, r3
 800156a:	d103      	bne.n	8001574 <vTaskSwitchContext+0x8c>
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <vTaskSwitchContext+0xb8>)
 800157c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <vTaskSwitchContext+0xb8>)
 8001580:	681b      	ldr	r3, [r3, #0]
    }
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000170 	.word	0x20000170
 8001594:	2000015c 	.word	0x2000015c
 8001598:	20000150 	.word	0x20000150
 800159c:	20000074 	.word	0x20000074
 80015a0:	20000070 	.word	0x20000070

080015a4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10b      	bne.n	80015cc <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80015b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015b8:	f383 8811 	msr	BASEPRI, r3
 80015bc:	f3bf 8f6f 	isb	sy
 80015c0:	f3bf 8f4f 	dsb	sy
 80015c4:	60fb      	str	r3, [r7, #12]
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <vTaskPlaceOnEventList+0x48>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3318      	adds	r3, #24
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7fe ffa0 	bl	800051a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80015da:	2101      	movs	r1, #1
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f000 fa81 	bl	8001ae4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000070 	.word	0x20000070

080015f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10b      	bne.n	800161a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001606:	f383 8811 	msr	BASEPRI, r3
 800160a:	f3bf 8f6f 	isb	sy
 800160e:	f3bf 8f4f 	dsb	sy
 8001612:	613b      	str	r3, [r7, #16]
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	e7fd      	b.n	8001616 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <vTaskPlaceOnEventListRestricted+0x88>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	61da      	str	r2, [r3, #28]
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <vTaskPlaceOnEventListRestricted+0x88>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	6892      	ldr	r2, [r2, #8]
 8001630:	621a      	str	r2, [r3, #32]
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <vTaskPlaceOnEventListRestricted+0x88>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	3218      	adds	r2, #24
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <vTaskPlaceOnEventListRestricted+0x88>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f103 0218 	add.w	r2, r3, #24
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <vTaskPlaceOnEventListRestricted+0x88>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f000 fa3a 	bl	8001ae4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000070 	.word	0x20000070

0800167c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	@ 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10b      	bne.n	80016aa <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001696:	f383 8811 	msr	BASEPRI, r3
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	f3bf 8f4f 	dsb	sy
 80016a2:	60fb      	str	r3, [r7, #12]
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	e7fd      	b.n	80016a6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	6a3a      	ldr	r2, [r7, #32]
 80016b6:	6a12      	ldr	r2, [r2, #32]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	6a3a      	ldr	r2, [r7, #32]
 80016c0:	69d2      	ldr	r2, [r2, #28]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	3318      	adds	r3, #24
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d103      	bne.n	80016d8 <xTaskRemoveFromEventList+0x5c>
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80016e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001818 <xTaskRemoveFromEventList+0x19c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d160      	bne.n	80017b2 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	6a3a      	ldr	r2, [r7, #32]
 80016fc:	68d2      	ldr	r2, [r2, #12]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	6892      	ldr	r2, [r2, #8]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	3304      	adds	r3, #4
 8001712:	429a      	cmp	r2, r3
 8001714:	d103      	bne.n	800171e <xTaskRemoveFromEventList+0xa2>
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	2201      	movs	r2, #1
 8001734:	409a      	lsls	r2, r3
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <xTaskRemoveFromEventList+0x1a0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	4a37      	ldr	r2, [pc, #220]	@ (800181c <xTaskRemoveFromEventList+0x1a0>)
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001744:	4936      	ldr	r1, [pc, #216]	@ (8001820 <xTaskRemoveFromEventList+0x1a4>)
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3304      	adds	r3, #4
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	3204      	adds	r2, #4
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	1d1a      	adds	r2, r3, #4
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4a27      	ldr	r2, [pc, #156]	@ (8001820 <xTaskRemoveFromEventList+0x1a4>)
 8001784:	441a      	add	r2, r3
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800178e:	4924      	ldr	r1, [pc, #144]	@ (8001820 <xTaskRemoveFromEventList+0x1a4>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a3a      	ldr	r2, [r7, #32]
 800179e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017a0:	1c59      	adds	r1, r3, #1
 80017a2:	481f      	ldr	r0, [pc, #124]	@ (8001820 <xTaskRemoveFromEventList+0x1a4>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4403      	add	r3, r0
 80017ae:	6019      	str	r1, [r3, #0]
 80017b0:	e01b      	b.n	80017ea <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <xTaskRemoveFromEventList+0x1a8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	61da      	str	r2, [r3, #28]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	621a      	str	r2, [r3, #32]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	6a3a      	ldr	r2, [r7, #32]
 80017cc:	3218      	adds	r2, #24
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f103 0218 	add.w	r2, r3, #24
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <xTaskRemoveFromEventList+0x1a8>)
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <xTaskRemoveFromEventList+0x1a8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <xTaskRemoveFromEventList+0x1a8>)
 80017e8:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <xTaskRemoveFromEventList+0x1ac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d905      	bls.n	8001804 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80017fc:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <xTaskRemoveFromEventList+0x1b0>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e001      	b.n	8001808 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800180a:	4618      	mov	r0, r3
 800180c:	372c      	adds	r7, #44	@ 0x2c
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000170 	.word	0x20000170
 800181c:	20000150 	.word	0x20000150
 8001820:	20000074 	.word	0x20000074
 8001824:	20000108 	.word	0x20000108
 8001828:	20000070 	.word	0x20000070
 800182c:	2000015c 	.word	0x2000015c

08001830 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <vTaskInternalSetTimeOutState+0x24>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <vTaskInternalSetTimeOutState+0x28>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	20000160 	.word	0x20000160
 8001858:	2000014c 	.word	0x2000014c

0800185c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800186c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001870:	f383 8811 	msr	BASEPRI, r3
 8001874:	f3bf 8f6f 	isb	sy
 8001878:	f3bf 8f4f 	dsb	sy
 800187c:	613b      	str	r3, [r7, #16]
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10b      	bne.n	80018a2 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800188a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800188e:	f383 8811 	msr	BASEPRI, r3
 8001892:	f3bf 8f6f 	isb	sy
 8001896:	f3bf 8f4f 	dsb	sy
 800189a:	60fb      	str	r3, [r7, #12]
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	e7fd      	b.n	800189e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80018a2:	f000 fdaf 	bl	8002404 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <xTaskCheckForTimeOut+0xc8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018be:	d102      	bne.n	80018c6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	e026      	b.n	8001914 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <xTaskCheckForTimeOut+0xcc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d00a      	beq.n	80018e8 <xTaskCheckForTimeOut+0x8c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d305      	bcc.n	80018e8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e015      	b.n	8001914 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20b      	bcs.n	800190a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	1ad2      	subs	r2, r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff96 	bl	8001830 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e004      	b.n	8001914 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001914:	f000 fda8 	bl	8002468 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001918:	69fb      	ldr	r3, [r7, #28]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000014c 	.word	0x2000014c
 8001928:	20000160 	.word	0x20000160

0800192c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <vTaskMissedYield+0x14>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	2000015c 	.word	0x2000015c

08001944 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800194c:	f000 f852 	bl	80019f4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <prvIdleTask+0x28>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d9f9      	bls.n	800194c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <prvIdleTask+0x2c>)
 800195a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f3bf 8f4f 	dsb	sy
 8001964:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001968:	e7f0      	b.n	800194c <prvIdleTask+0x8>
 800196a:	bf00      	nop
 800196c:	20000074 	.word	0x20000074
 8001970:	e000ed04 	.word	0xe000ed04

08001974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	e00c      	b.n	800199a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <prvInitialiseTaskLists+0x60>)
 800198c:	4413      	add	r3, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd96 	bl	80004c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d9ef      	bls.n	8001980 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <prvInitialiseTaskLists+0x64>)
 80019a2:	f7fe fd8d 	bl	80004c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <prvInitialiseTaskLists+0x68>)
 80019a8:	f7fe fd8a 	bl	80004c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <prvInitialiseTaskLists+0x6c>)
 80019ae:	f7fe fd87 	bl	80004c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80019b2:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <prvInitialiseTaskLists+0x70>)
 80019b4:	f7fe fd84 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80019b8:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <prvInitialiseTaskLists+0x74>)
 80019ba:	f7fe fd81 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <prvInitialiseTaskLists+0x78>)
 80019c0:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <prvInitialiseTaskLists+0x64>)
 80019c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <prvInitialiseTaskLists+0x7c>)
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <prvInitialiseTaskLists+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000074 	.word	0x20000074
 80019d8:	200000d8 	.word	0x200000d8
 80019dc:	200000ec 	.word	0x200000ec
 80019e0:	20000108 	.word	0x20000108
 80019e4:	2000011c 	.word	0x2000011c
 80019e8:	20000134 	.word	0x20000134
 80019ec:	20000100 	.word	0x20000100
 80019f0:	20000104 	.word	0x20000104

080019f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019fa:	e019      	b.n	8001a30 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80019fc:	f000 fd02 	bl	8002404 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001a00:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <prvCheckTasksWaitingTermination+0x50>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fdbd 	bl	800058c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <prvCheckTasksWaitingTermination+0x54>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <prvCheckTasksWaitingTermination+0x54>)
 8001a1a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <prvCheckTasksWaitingTermination+0x58>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <prvCheckTasksWaitingTermination+0x58>)
 8001a24:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001a26:	f000 fd1f 	bl	8002468 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f810 	bl	8001a50 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <prvCheckTasksWaitingTermination+0x58>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e1      	bne.n	80019fc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000011c 	.word	0x2000011c
 8001a48:	20000148 	.word	0x20000148
 8001a4c:	20000130 	.word	0x20000130

08001a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fe09 	bl	8002674 <vPortFree>
            vPortFree( pxTCB );
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fe06 	bl	8002674 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <prvResetNextTaskUnblockTime+0x30>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d104      	bne.n	8001a88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <prvResetNextTaskUnblockTime+0x34>)
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a86:	e005      	b.n	8001a94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <prvResetNextTaskUnblockTime+0x30>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <prvResetNextTaskUnblockTime+0x34>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000100 	.word	0x20000100
 8001aa4:	20000168 	.word	0x20000168

08001aa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <xTaskGetSchedulerState+0x34>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	e008      	b.n	8001ace <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <xTaskGetSchedulerState+0x38>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	e001      	b.n	8001ace <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001ace:	687b      	ldr	r3, [r7, #4]
    }
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	20000154 	.word	0x20000154
 8001ae0:	20000170 	.word	0x20000170

08001ae4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001aee:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001af4:	4b36      	ldr	r3, [pc, #216]	@ (8001bd0 <prvAddCurrentTaskToDelayedList+0xec>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001afa:	4b36      	ldr	r3, [pc, #216]	@ (8001bd4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b00:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3304      	adds	r3, #4
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd40 	bl	800058c <uxListRemove>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10b      	bne.n	8001b2a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001b12:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	2201      	movs	r2, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <prvAddCurrentTaskToDelayedList+0xf8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4013      	ands	r3, r2
 8001b26:	4a2d      	ldr	r2, [pc, #180]	@ (8001bdc <prvAddCurrentTaskToDelayedList+0xf8>)
 8001b28:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d124      	bne.n	8001b7c <prvAddCurrentTaskToDelayedList+0x98>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d021      	beq.n	8001b7c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b38:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	6892      	ldr	r2, [r2, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	3204      	adds	r2, #4
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	1d1a      	adds	r2, r3, #4
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a1a      	ldr	r2, [pc, #104]	@ (8001be0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001b7a:	e022      	b.n	8001bc2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001b94:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6978      	ldr	r0, [r7, #20]
 8001b9e:	f7fe fcbc 	bl	800051a <vListInsert>
}
 8001ba2:	e00e      	b.n	8001bc2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	69b8      	ldr	r0, [r7, #24]
 8001bae:	f7fe fcb4 	bl	800051a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <prvAddCurrentTaskToDelayedList+0x100>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d202      	bcs.n	8001bc2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8001bbc:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <prvAddCurrentTaskToDelayedList+0x100>)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6013      	str	r3, [r2, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000014c 	.word	0x2000014c
 8001bd0:	20000100 	.word	0x20000100
 8001bd4:	20000104 	.word	0x20000104
 8001bd8:	20000070 	.word	0x20000070
 8001bdc:	20000150 	.word	0x20000150
 8001be0:	20000134 	.word	0x20000134
 8001be4:	20000168 	.word	0x20000168

08001be8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001bf2:	f000 fa55 	bl	80020a0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <xTimerCreateTimerTask+0x58>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <xTimerCreateTimerTask+0x5c>)
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2302      	movs	r3, #2
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c0c:	490e      	ldr	r1, [pc, #56]	@ (8001c48 <xTimerCreateTimerTask+0x60>)
 8001c0e:	480f      	ldr	r0, [pc, #60]	@ (8001c4c <xTimerCreateTimerTask+0x64>)
 8001c10:	f7ff f81a 	bl	8000c48 <xTaskCreate>
 8001c14:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10b      	bne.n	8001c34 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8001c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c20:	f383 8811 	msr	BASEPRI, r3
 8001c24:	f3bf 8f6f 	isb	sy
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	603b      	str	r3, [r7, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8001c34:	687b      	ldr	r3, [r7, #4]
    }
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200001a4 	.word	0x200001a4
 8001c44:	200001a8 	.word	0x200001a8
 8001c48:	0800409c 	.word	0x0800409c
 8001c4c:	08001cf5 	.word	0x08001cf5

08001c50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001c5c:	e008      	b.n	8001c70 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	18d1      	adds	r1, r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f8df 	bl	8001e40 <prvInsertTimerInActiveList>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ea      	bne.n	8001c5e <prvReloadTimer+0xe>
        }
    }
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <prvProcessExpiredTimer+0x5c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3304      	adds	r3, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc6d 	bl	800058c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff ffc3 	bl	8001c50 <prvReloadTimer>
 8001cca:	e008      	b.n	8001cde <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	4798      	blx	r3
    }
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000019c 	.word	0x2000019c

08001cf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f859 	bl	8001db8 <prvGetNextExpireTime>
 8001d06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f805 	bl	8001d1c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001d12:	f000 f8d7 	bl	8001ec4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001d16:	bf00      	nop
 8001d18:	e7f0      	b.n	8001cfc <prvTimerTask+0x8>
	...

08001d1c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001d26:	f7ff f99f 	bl	8001068 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f866 	bl	8001e00 <prvSampleTimeNow>
 8001d34:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d130      	bne.n	8001d9e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <prvProcessTimerOrBlockTask+0x3c>
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d806      	bhi.n	8001d58 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001d4a:	f7ff f99b 	bl	8001084 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff9f 	bl	8001c94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001d56:	e024      	b.n	8001da2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <prvProcessTimerOrBlockTask+0x90>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <prvProcessTimerOrBlockTask+0x50>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <prvProcessTimerOrBlockTask+0x52>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <prvProcessTimerOrBlockTask+0x94>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe fef3 	bl	8000b68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001d82:	f7ff f97f 	bl	8001084 <xTaskResumeAll>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <prvProcessTimerOrBlockTask+0x98>)
 8001d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	f3bf 8f6f 	isb	sy
    }
 8001d9c:	e001      	b.n	8001da2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001d9e:	f7ff f971 	bl	8001084 <xTaskResumeAll>
    }
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001a0 	.word	0x200001a0
 8001db0:	200001a4 	.word	0x200001a4
 8001db4:	e000ed04 	.word	0xe000ed04

08001db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <prvGetNextExpireTime+0x44>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <prvGetNextExpireTime+0x16>
 8001dca:	2201      	movs	r2, #1
 8001dcc:	e000      	b.n	8001dd0 <prvGetNextExpireTime+0x18>
 8001dce:	2200      	movs	r2, #0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <prvGetNextExpireTime+0x44>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e001      	b.n	8001dec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001dec:	68fb      	ldr	r3, [r7, #12]
    }
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000019c 	.word	0x2000019c

08001e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8001e08:	f7ff fa44 	bl	8001294 <xTaskGetTickCount>
 8001e0c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <prvSampleTimeNow+0x3c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d205      	bcs.n	8001e24 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001e18:	f000 f91c 	bl	8002054 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e002      	b.n	8001e2a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <prvSampleTimeNow+0x3c>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001e30:	68fb      	ldr	r3, [r7, #12]
    }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001ac 	.word	0x200001ac

08001e40 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d812      	bhi.n	8001e8c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d302      	bcc.n	8001e7a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001e74:	2301      	movs	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e01b      	b.n	8001eb2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <prvInsertTimerInActiveList+0x7c>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3304      	adds	r3, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4610      	mov	r0, r2
 8001e86:	f7fe fb48 	bl	800051a <vListInsert>
 8001e8a:	e012      	b.n	8001eb2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d206      	bcs.n	8001ea2 <prvInsertTimerInActiveList+0x62>
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d302      	bcc.n	8001ea2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e007      	b.n	8001eb2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <prvInsertTimerInActiveList+0x80>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f7fe fb34 	bl	800051a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001eb2:	697b      	ldr	r3, [r7, #20]
    }
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200001a0 	.word	0x200001a0
 8001ec0:	2000019c 	.word	0x2000019c

08001ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8001ed6:	e0a9      	b.n	800202c <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f2c0 80a6 	blt.w	800202c <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb4b 	bl	800058c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff81 	bl	8001e00 <prvSampleTimeNow>
 8001efe:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	f200 808e 	bhi.w	8002026 <prvProcessReceivedCommands+0x162>
 8001f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f10 <prvProcessReceivedCommands+0x4c>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f35 	.word	0x08001f35
 8001f14:	08001f35 	.word	0x08001f35
 8001f18:	08001f9d 	.word	0x08001f9d
 8001f1c:	08001fb1 	.word	0x08001fb1
 8001f20:	08001ffd 	.word	0x08001ffd
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f35 	.word	0x08001f35
 8001f2c:	08001f9d 	.word	0x08001f9d
 8001f30:	08001fb1 	.word	0x08001fb1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	18d1      	adds	r1, r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	69f8      	ldr	r0, [r7, #28]
 8001f54:	f7ff ff74 	bl	8001e40 <prvInsertTimerInActiveList>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d065      	beq.n	800202a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d009      	beq.n	8001f80 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	4413      	add	r3, r2
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4619      	mov	r1, r3
 8001f78:	69f8      	ldr	r0, [r7, #28]
 8001f7a:	f7ff fe69 	bl	8001c50 <prvReloadTimer>
 8001f7e:	e008      	b.n	8001f92 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	69f8      	ldr	r0, [r7, #28]
 8001f98:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001f9a:	e046      	b.n	800202a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8001fae:	e03d      	b.n	800202c <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	617b      	str	r3, [r7, #20]
}
 8001fe2:	bf00      	nop
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	18d1      	adds	r1, r2, r3
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	69f8      	ldr	r0, [r7, #28]
 8001ff6:	f7ff ff23 	bl	8001e40 <prvInsertTimerInActiveList>
                        break;
 8001ffa:	e017      	b.n	800202c <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800200a:	69f8      	ldr	r0, [r7, #28]
 800200c:	f000 fb32 	bl	8002674 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002010:	e00c      	b.n	800202c <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002024:	e002      	b.n	800202c <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002026:	bf00      	nop
 8002028:	e000      	b.n	800202c <prvProcessReceivedCommands+0x168>
                        break;
 800202a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <prvProcessReceivedCommands+0x18c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f107 0108 	add.w	r1, r7, #8
 8002034:	2200      	movs	r2, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fbd6 	bl	80007e8 <xQueueReceive>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	f47f af4a 	bne.w	8001ed8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200001a4 	.word	0x200001a4

08002054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800205a:	e009      	b.n	8002070 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800205c:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <prvSwitchTimerLists+0x44>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002066:	f04f 31ff 	mov.w	r1, #4294967295
 800206a:	6838      	ldr	r0, [r7, #0]
 800206c:	f7ff fe12 	bl	8001c94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <prvSwitchTimerLists+0x44>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <prvSwitchTimerLists+0x44>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <prvSwitchTimerLists+0x48>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <prvSwitchTimerLists+0x44>)
 8002086:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <prvSwitchTimerLists+0x48>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
    }
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000019c 	.word	0x2000019c
 800209c:	200001a0 	.word	0x200001a0

080020a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80020a4:	f000 f9ae 	bl	8002404 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <prvCheckForValidListAndQueue+0x54>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11d      	bne.n	80020ec <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80020b0:	4811      	ldr	r0, [pc, #68]	@ (80020f8 <prvCheckForValidListAndQueue+0x58>)
 80020b2:	f7fe fa05 	bl	80004c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80020b6:	4811      	ldr	r0, [pc, #68]	@ (80020fc <prvCheckForValidListAndQueue+0x5c>)
 80020b8:	f7fe fa02 	bl	80004c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80020bc:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <prvCheckForValidListAndQueue+0x60>)
 80020be:	4a0e      	ldr	r2, [pc, #56]	@ (80020f8 <prvCheckForValidListAndQueue+0x58>)
 80020c0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <prvCheckForValidListAndQueue+0x64>)
 80020c4:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <prvCheckForValidListAndQueue+0x5c>)
 80020c6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80020c8:	2200      	movs	r2, #0
 80020ca:	210c      	movs	r1, #12
 80020cc:	200a      	movs	r0, #10
 80020ce:	f7fe fb19 	bl	8000704 <xQueueGenericCreate>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <prvCheckForValidListAndQueue+0x54>)
 80020d6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <prvCheckForValidListAndQueue+0x54>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80020e0:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <prvCheckForValidListAndQueue+0x54>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4908      	ldr	r1, [pc, #32]	@ (8002108 <prvCheckForValidListAndQueue+0x68>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fcee 	bl	8000ac8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020ec:	f000 f9bc 	bl	8002468 <vPortExitCritical>
    }
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200001a4 	.word	0x200001a4
 80020f8:	20000174 	.word	0x20000174
 80020fc:	20000188 	.word	0x20000188
 8002100:	2000019c 	.word	0x2000019c
 8002104:	200001a0 	.word	0x200001a0
 8002108:	080040a4 	.word	0x080040a4

0800210c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3b04      	subs	r3, #4
 800211c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002124:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b04      	subs	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f023 0201 	bic.w	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3b04      	subs	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800213c:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <pxPortInitialiseStack+0x64>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b14      	subs	r3, #20
 8002146:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3b04      	subs	r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f06f 0202 	mvn.w	r2, #2
 800215a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3b20      	subs	r3, #32
 8002160:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	08002175 	.word	0x08002175

08002174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <prvTaskExitError+0x58>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d00b      	beq.n	80021a0 <prvTaskExitError+0x2c>
    __asm volatile
 8002188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	60fb      	str	r3, [r7, #12]
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <prvTaskExitError+0x28>
    __asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	60bb      	str	r3, [r7, #8]
}
 80021b2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80021b4:	bf00      	nop
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0fc      	beq.n	80021b6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000004 	.word	0x20000004

080021d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80021d0:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <pxCurrentTCBConst2>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	6808      	ldr	r0, [r1, #0]
 80021d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021da:	f380 8809 	msr	PSP, r0
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f380 8811 	msr	BASEPRI, r0
 80021ea:	4770      	bx	lr
 80021ec:	f3af 8000 	nop.w

080021f0 <pxCurrentTCBConst2>:
 80021f0:	20000070 	.word	0x20000070
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop

080021f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80021f8:	4808      	ldr	r0, [pc, #32]	@ (800221c <prvPortStartFirstTask+0x24>)
 80021fa:	6800      	ldr	r0, [r0, #0]
 80021fc:	6800      	ldr	r0, [r0, #0]
 80021fe:	f380 8808 	msr	MSP, r0
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	f380 8814 	msr	CONTROL, r0
 800220a:	b662      	cpsie	i
 800220c:	b661      	cpsie	f
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	df00      	svc	0
 8002218:	bf00      	nop
 800221a:	0000      	.short	0x0000
 800221c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop

08002224 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	@ 0x30
 8002228:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800222a:	4b69      	ldr	r3, [pc, #420]	@ (80023d0 <xPortStartScheduler+0x1ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a69      	ldr	r2, [pc, #420]	@ (80023d4 <xPortStartScheduler+0x1b0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d10b      	bne.n	800224c <xPortStartScheduler+0x28>
    __asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800224c:	4b60      	ldr	r3, [pc, #384]	@ (80023d0 <xPortStartScheduler+0x1ac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a61      	ldr	r2, [pc, #388]	@ (80023d8 <xPortStartScheduler+0x1b4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10b      	bne.n	800226e <xPortStartScheduler+0x4a>
    __asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	623b      	str	r3, [r7, #32]
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	e7fd      	b.n	800226a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800226e:	4b5b      	ldr	r3, [pc, #364]	@ (80023dc <xPortStartScheduler+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002276:	332c      	adds	r3, #44	@ 0x2c
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a59      	ldr	r2, [pc, #356]	@ (80023e0 <xPortStartScheduler+0x1bc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00b      	beq.n	8002298 <xPortStartScheduler+0x74>
    __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	61fb      	str	r3, [r7, #28]
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229a:	3338      	adds	r3, #56	@ 0x38
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a51      	ldr	r2, [pc, #324]	@ (80023e4 <xPortStartScheduler+0x1c0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00b      	beq.n	80022bc <xPortStartScheduler+0x98>
    __asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	61bb      	str	r3, [r7, #24]
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80022c0:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <xPortStartScheduler+0x1c4>)
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ce:	22ff      	movs	r2, #255	@ 0xff
 80022d0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b41      	ldr	r3, [pc, #260]	@ (80023ec <xPortStartScheduler+0x1c8>)
 80022e6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80022e8:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <xPortStartScheduler+0x1c8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <xPortStartScheduler+0xe4>
    __asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	617b      	str	r3, [r7, #20]
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002312:	2b00      	cmp	r3, #0
 8002314:	d013      	beq.n	800233e <xPortStartScheduler+0x11a>
    __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	613b      	str	r3, [r7, #16]
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	e7fd      	b.n	800232a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002346:	2b80      	cmp	r3, #128	@ 0x80
 8002348:	d0f1      	beq.n	800232e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d103      	bne.n	8002358 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <xPortStartScheduler+0x1cc>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e004      	b.n	8002362 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	4a24      	ldr	r2, [pc, #144]	@ (80023f0 <xPortStartScheduler+0x1cc>)
 8002360:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002362:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <xPortStartScheduler+0x1cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	4a21      	ldr	r2, [pc, #132]	@ (80023f0 <xPortStartScheduler+0x1cc>)
 800236a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <xPortStartScheduler+0x1cc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002374:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <xPortStartScheduler+0x1cc>)
 8002376:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002380:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <xPortStartScheduler+0x1d0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1b      	ldr	r2, [pc, #108]	@ (80023f4 <xPortStartScheduler+0x1d0>)
 8002386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800238a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800238c:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <xPortStartScheduler+0x1d0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a18      	ldr	r2, [pc, #96]	@ (80023f4 <xPortStartScheduler+0x1d0>)
 8002392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002396:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002398:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <xPortStartScheduler+0x1d4>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800239e:	f000 f8e5 	bl	800256c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <xPortStartScheduler+0x1d8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80023a8:	f000 f904 	bl	80025b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <xPortStartScheduler+0x1dc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <xPortStartScheduler+0x1dc>)
 80023b2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80023b6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80023b8:	f7ff ff1e 	bl	80021f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80023bc:	f7ff f894 	bl	80014e8 <vTaskSwitchContext>
    prvTaskExitError();
 80023c0:	f7ff fed8 	bl	8002174 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3730      	adds	r7, #48	@ 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	410fc271 	.word	0x410fc271
 80023d8:	410fc270 	.word	0x410fc270
 80023dc:	e000ed08 	.word	0xe000ed08
 80023e0:	080021d1 	.word	0x080021d1
 80023e4:	080024c1 	.word	0x080024c1
 80023e8:	e000e400 	.word	0xe000e400
 80023ec:	200001b0 	.word	0x200001b0
 80023f0:	200001b4 	.word	0x200001b4
 80023f4:	e000ed20 	.word	0xe000ed20
 80023f8:	e000ed1c 	.word	0xe000ed1c
 80023fc:	20000004 	.word	0x20000004
 8002400:	e000ef34 	.word	0xe000ef34

08002404 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
    __asm volatile
 800240a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	607b      	str	r3, [r7, #4]
}
 800241c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <vPortEnterCritical+0x5c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a0e      	ldr	r2, [pc, #56]	@ (8002460 <vPortEnterCritical+0x5c>)
 8002426:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002428:	4b0d      	ldr	r3, [pc, #52]	@ (8002460 <vPortEnterCritical+0x5c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d110      	bne.n	8002452 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <vPortEnterCritical+0x60>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <vPortEnterCritical+0x4e>
    __asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	603b      	str	r3, [r7, #0]
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	e7fd      	b.n	800244e <vPortEnterCritical+0x4a>
    }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000004 	.word	0x20000004
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <vPortExitCritical+0x50>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <vPortExitCritical+0x26>
    __asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	607b      	str	r3, [r7, #4]
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	e7fd      	b.n	800248a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <vPortExitCritical+0x50>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3b01      	subs	r3, #1
 8002494:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <vPortExitCritical+0x50>)
 8002496:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002498:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <vPortExitCritical+0x50>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <vPortExitCritical+0x44>
 80024a0:	2300      	movs	r3, #0
 80024a2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80024aa:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	20000004 	.word	0x20000004
 80024bc:	00000000 	.word	0x00000000

080024c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80024c0:	f3ef 8009 	mrs	r0, PSP
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <pxCurrentTCBConst>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f01e 0f10 	tst.w	lr, #16
 80024d0:	bf08      	it	eq
 80024d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80024d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024da:	6010      	str	r0, [r2, #0]
 80024dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80024e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80024e4:	f380 8811 	msr	BASEPRI, r0
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f7fe fffa 	bl	80014e8 <vTaskSwitchContext>
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f380 8811 	msr	BASEPRI, r0
 80024fc:	bc09      	pop	{r0, r3}
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	6808      	ldr	r0, [r1, #0]
 8002502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002506:	f01e 0f10 	tst.w	lr, #16
 800250a:	bf08      	it	eq
 800250c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002510:	f380 8809 	msr	PSP, r0
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	f3af 8000 	nop.w

08002520 <pxCurrentTCBConst>:
 8002520:	20000070 	.word	0x20000070
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop

08002528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
    __asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	607b      	str	r3, [r7, #4]
}
 8002540:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002542:	f7fe feb7 	bl	80012b4 <xTaskIncrementTick>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <SysTick_Handler+0x40>)
 800254e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	2300      	movs	r3, #0
 8002556:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f383 8811 	msr	BASEPRI, r3
}
 800255e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <vPortSetupTimerInterrupt+0x34>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <vPortSetupTimerInterrupt+0x38>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <vPortSetupTimerInterrupt+0x3c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <vPortSetupTimerInterrupt+0x40>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <vPortSetupTimerInterrupt+0x44>)
 800258a:	3b01      	subs	r3, #1
 800258c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800258e:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <vPortSetupTimerInterrupt+0x34>)
 8002590:	2207      	movs	r2, #7
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e010 	.word	0xe000e010
 80025a4:	e000e018 	.word	0xe000e018
 80025a8:	20000008 	.word	0x20000008
 80025ac:	10624dd3 	.word	0x10624dd3
 80025b0:	e000e014 	.word	0xe000e014

080025b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80025b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80025c4 <vPortEnableVFP+0x10>
 80025b8:	6801      	ldr	r1, [r0, #0]
 80025ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80025be:	6001      	str	r1, [r0, #0]
 80025c0:	4770      	bx	lr
 80025c2:	0000      	.short	0x0000
 80025c4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop

080025cc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00e      	beq.n	8002600 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f023 0307 	bic.w	r3, r3, #7
 80025e8:	3308      	adds	r3, #8
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d205      	bcs.n	80025fc <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f023 0307 	bic.w	r3, r3, #7
 80025f6:	3308      	adds	r3, #8
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	e001      	b.n	8002600 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002600:	f7fe fd32 	bl	8001068 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <pvPortMalloc+0x98>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800260c:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <pvPortMalloc+0x9c>)
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	461a      	mov	r2, r3
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <pvPortMalloc+0x98>)
 8002616:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01a      	beq.n	8002654 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800261e:	4b13      	ldr	r3, [pc, #76]	@ (800266c <pvPortMalloc+0xa0>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002626:	4a12      	ldr	r2, [pc, #72]	@ (8002670 <pvPortMalloc+0xa4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d813      	bhi.n	8002654 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <pvPortMalloc+0xa0>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	441a      	add	r2, r3
 8002634:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <pvPortMalloc+0xa0>)
 8002636:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002638:	429a      	cmp	r2, r3
 800263a:	d90b      	bls.n	8002654 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <pvPortMalloc+0x98>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <pvPortMalloc+0xa0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4413      	add	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <pvPortMalloc+0xa0>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	4a06      	ldr	r2, [pc, #24]	@ (800266c <pvPortMalloc+0xa0>)
 8002652:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002654:	f7fe fd16 	bl	8001084 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002658:	68fb      	ldr	r3, [r7, #12]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20012dbc 	.word	0x20012dbc
 8002668:	200001bf 	.word	0x200001bf
 800266c:	20012db8 	.word	0x20012db8
 8002670:	00012bf7 	.word	0x00012bf7

08002674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <vPortFree+0x26>
    __asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	60fb      	str	r3, [r7, #12]
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	e7fd      	b.n	8002696 <vPortFree+0x22>
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026ae:	f000 fa5f 	bl	8002b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b2:	f000 f823 	bl	80026fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b6:	f000 f88b 	bl	80027d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* create the 1st FreeRTOS task (Blue_LED_Task) */
  xTaskCreate( Blue_LED_Task, "BLUE LED", 128, NULL, 1, NULL );
 80026ba:	2300      	movs	r3, #0
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2301      	movs	r3, #1
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	2280      	movs	r2, #128	@ 0x80
 80026c6:	4909      	ldr	r1, [pc, #36]	@ (80026ec <main+0x44>)
 80026c8:	4809      	ldr	r0, [pc, #36]	@ (80026f0 <main+0x48>)
 80026ca:	f7fe fabd 	bl	8000c48 <xTaskCreate>

  /* create the 2nd FreeRTOS task (Orange_LED_Task) */
  xTaskCreate( Orange_LED_Task, "ORANGE LED", 128, NULL, 1, NULL );
 80026ce:	2300      	movs	r3, #0
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	2280      	movs	r2, #128	@ 0x80
 80026da:	4906      	ldr	r1, [pc, #24]	@ (80026f4 <main+0x4c>)
 80026dc:	4806      	ldr	r0, [pc, #24]	@ (80026f8 <main+0x50>)
 80026de:	f7fe fab3 	bl	8000c48 <xTaskCreate>

  /* start FreeRTOS scheduler */
  vTaskStartScheduler();
 80026e2:	f7fe fc7d 	bl	8000fe0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026e6:	bf00      	nop
 80026e8:	e7fd      	b.n	80026e6 <main+0x3e>
 80026ea:	bf00      	nop
 80026ec:	080040ac 	.word	0x080040ac
 80026f0:	080028f1 	.word	0x080028f1
 80026f4:	080040b8 	.word	0x080040b8
 80026f8:	08002915 	.word	0x08002915

080026fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b094      	sub	sp, #80	@ 0x50
 8002700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002702:	f107 0320 	add.w	r3, r7, #32
 8002706:	2230      	movs	r2, #48	@ 0x30
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fc7c 	bl	8004008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	4b28      	ldr	r3, [pc, #160]	@ (80027c8 <SystemClock_Config+0xcc>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a27      	ldr	r2, [pc, #156]	@ (80027c8 <SystemClock_Config+0xcc>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002730:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <SystemClock_Config+0xcc>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <SystemClock_Config+0xd0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a21      	ldr	r2, [pc, #132]	@ (80027cc <SystemClock_Config+0xd0>)
 8002746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <SystemClock_Config+0xd0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002758:	2302      	movs	r3, #2
 800275a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800275c:	2301      	movs	r3, #1
 800275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002760:	2310      	movs	r3, #16
 8002762:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002764:	2302      	movs	r3, #2
 8002766:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002768:	2300      	movs	r3, #0
 800276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800276c:	2308      	movs	r3, #8
 800276e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002770:	2332      	movs	r3, #50	@ 0x32
 8002772:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002774:	2304      	movs	r3, #4
 8002776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002778:	2307      	movs	r3, #7
 800277a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800277c:	f107 0320 	add.w	r3, r7, #32
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fce9 	bl	8003158 <HAL_RCC_OscConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800278c:	f000 f8e4 	bl	8002958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002790:	230f      	movs	r3, #15
 8002792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002794:	2302      	movs	r3, #2
 8002796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800279c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 ff4a 	bl	8003648 <HAL_RCC_ClockConfig>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027ba:	f000 f8cd 	bl	8002958 <Error_Handler>
  }
}
 80027be:	bf00      	nop
 80027c0:	3750      	adds	r7, #80	@ 0x50
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000

080027d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	4b3c      	ldr	r3, [pc, #240]	@ (80028dc <MX_GPIO_Init+0x10c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a3b      	ldr	r2, [pc, #236]	@ (80028dc <MX_GPIO_Init+0x10c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <MX_GPIO_Init+0x10c>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b35      	ldr	r3, [pc, #212]	@ (80028dc <MX_GPIO_Init+0x10c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a34      	ldr	r2, [pc, #208]	@ (80028dc <MX_GPIO_Init+0x10c>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <MX_GPIO_Init+0x10c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4b2e      	ldr	r3, [pc, #184]	@ (80028dc <MX_GPIO_Init+0x10c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a2d      	ldr	r2, [pc, #180]	@ (80028dc <MX_GPIO_Init+0x10c>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b2b      	ldr	r3, [pc, #172]	@ (80028dc <MX_GPIO_Init+0x10c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <MX_GPIO_Init+0x10c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	4a26      	ldr	r2, [pc, #152]	@ (80028dc <MX_GPIO_Init+0x10c>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6313      	str	r3, [r2, #48]	@ 0x30
 800284a:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <MX_GPIO_Init+0x10c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800285c:	4820      	ldr	r0, [pc, #128]	@ (80028e0 <MX_GPIO_Init+0x110>)
 800285e:	f000 fc47 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002862:	2301      	movs	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002866:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800286a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4619      	mov	r1, r3
 8002876:	481b      	ldr	r0, [pc, #108]	@ (80028e4 <MX_GPIO_Init+0x114>)
 8002878:	f000 fa9e 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800287c:	2304      	movs	r3, #4
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4816      	ldr	r0, [pc, #88]	@ (80028e8 <MX_GPIO_Init+0x118>)
 8002890:	f000 fa92 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8002894:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <MX_GPIO_Init+0x110>)
 80028ae:	f000 fa83 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028c2:	2306      	movs	r3, #6
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4807      	ldr	r0, [pc, #28]	@ (80028ec <MX_GPIO_Init+0x11c>)
 80028ce:	f000 fa73 	bl	8002db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	@ 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800

080028f0 <Blue_LED_Task>:

/* USER CODE BEGIN 4 */
void Blue_LED_Task( void *pvParameters )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  for ( ; ; )
  {
    /* toggle blue LED */
    HAL_GPIO_TogglePin( GPIOD, LD6_Pin );
 80028f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028fc:	4804      	ldr	r0, [pc, #16]	@ (8002910 <Blue_LED_Task+0x20>)
 80028fe:	f000 fc10 	bl	8003122 <HAL_GPIO_TogglePin>

    /* wait for 500 tick periods (500 ms) */
    vTaskDelay( pdMS_TO_TICKS( 500 ) );
 8002902:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002906:	f7fe faeb 	bl	8000ee0 <vTaskDelay>
    HAL_GPIO_TogglePin( GPIOD, LD6_Pin );
 800290a:	bf00      	nop
 800290c:	e7f4      	b.n	80028f8 <Blue_LED_Task+0x8>
 800290e:	bf00      	nop
 8002910:	40020c00 	.word	0x40020c00

08002914 <Orange_LED_Task>:
  }
}

void Orange_LED_Task( void *pvParameters )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  for ( ; ; )
  {
    /* toggle orange LED */
    HAL_GPIO_TogglePin( GPIOD, LD3_Pin );
 800291c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002920:	4803      	ldr	r0, [pc, #12]	@ (8002930 <Orange_LED_Task+0x1c>)
 8002922:	f000 fbfe 	bl	8003122 <HAL_GPIO_TogglePin>

    /* wait for 250 tick periods (250 ms),
       twice as fast as the Blue_LED_Task */
    vTaskDelay( pdMS_TO_TICKS( 250 ) );
 8002926:	20fa      	movs	r0, #250	@ 0xfa
 8002928:	f7fe fada 	bl	8000ee0 <vTaskDelay>
    HAL_GPIO_TogglePin( GPIOD, LD3_Pin );
 800292c:	bf00      	nop
 800292e:	e7f5      	b.n	800291c <Orange_LED_Task+0x8>
 8002930:	40020c00 	.word	0x40020c00

08002934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002946:	f000 f935 	bl	8002bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40001000 	.word	0x40001000

08002958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <Error_Handler+0x8>

08002964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a0f      	ldr	r2, [pc, #60]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_MspInit+0x4c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08e      	sub	sp, #56	@ 0x38
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <HAL_InitTick+0xe4>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	4a32      	ldr	r2, [pc, #200]	@ (8002a98 <HAL_InitTick+0xe4>)
 80029ce:	f043 0310 	orr.w	r3, r3, #16
 80029d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d4:	4b30      	ldr	r3, [pc, #192]	@ (8002a98 <HAL_InitTick+0xe4>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029e0:	f107 0210 	add.w	r2, r7, #16
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 f838 	bl	8003a60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029fa:	f001 f81d 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 80029fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8002a00:	e004      	b.n	8002a0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a02:	f001 f819 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8002a06:	4603      	mov	r3, r0
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0e:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <HAL_InitTick+0xe8>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9b      	lsrs	r3, r3, #18
 8002a16:	3b01      	subs	r3, #1
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a1a:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a1c:	4a21      	ldr	r2, [pc, #132]	@ (8002aa4 <HAL_InitTick+0xf0>)
 8002a1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a28:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a40:	4817      	ldr	r0, [pc, #92]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a42:	f001 f83f 	bl	8003ac4 <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d11b      	bne.n	8002a8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a54:	4812      	ldr	r0, [pc, #72]	@ (8002aa0 <HAL_InitTick+0xec>)
 8002a56:	f001 f88f 	bl	8003b78 <HAL_TIM_Base_Start_IT>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002a60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a68:	2036      	movs	r0, #54	@ 0x36
 8002a6a:	f000 f997 	bl	8002d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d808      	bhi.n	8002a86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002a74:	2200      	movs	r2, #0
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	2036      	movs	r0, #54	@ 0x36
 8002a7a:	f000 f973 	bl	8002d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <HAL_InitTick+0xf4>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e002      	b.n	8002a8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3738      	adds	r7, #56	@ 0x38
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	20012dc0 	.word	0x20012dc0
 8002aa4:	40001000 	.word	0x40001000
 8002aa8:	2000000c 	.word	0x2000000c

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <BusFault_Handler+0x4>

08002acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <UsageFault_Handler+0x4>

08002ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ae8:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <TIM6_DAC_IRQHandler+0x10>)
 8002aea:	f001 f8b5 	bl	8003c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20012dc0 	.word	0x20012dc0

08002af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <SystemInit+0x20>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	4a05      	ldr	r2, [pc, #20]	@ (8002b18 <SystemInit+0x20>)
 8002b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b20:	f7ff ffea 	bl	8002af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b24:	480c      	ldr	r0, [pc, #48]	@ (8002b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b26:	490d      	ldr	r1, [pc, #52]	@ (8002b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b28:	4a0d      	ldr	r2, [pc, #52]	@ (8002b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b2c:	e002      	b.n	8002b34 <LoopCopyDataInit>

08002b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b32:	3304      	adds	r3, #4

08002b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b38:	d3f9      	bcc.n	8002b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b40:	e001      	b.n	8002b46 <LoopFillZerobss>

08002b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b44:	3204      	adds	r2, #4

08002b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b48:	d3fb      	bcc.n	8002b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f001 fa65 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4e:	f7ff fdab 	bl	80026a8 <main>
  bx  lr    
 8002b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002b60:	080040ec 	.word	0x080040ec
  ldr r2, =_sbss
 8002b64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002b68:	20012e0c 	.word	0x20012e0c

08002b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b74:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_Init+0x40>)
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <HAL_Init+0x40>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8c:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	@ (8002bb0 <HAL_Init+0x40>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f000 f8d8 	bl	8002d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7ff ff08 	bl	80029b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba4:	f7ff fede 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	20012e08 	.word	0x20012e08

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20012e08 	.word	0x20012e08

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4907      	ldr	r1, [pc, #28]	@ (8002c90 <__NVIC_EnableIRQ+0x38>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	@ (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	@ (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff4c 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d76:	f7ff ff61 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f7ff ffb1 	bl	8002ce8 <NVIC_EncodePriority>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff80 	bl	8002c94 <__NVIC_SetPriority>
}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff54 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e16b      	b.n	80030ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f040 815a 	bne.w	80030a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d005      	beq.n	8002e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d130      	bne.n	8002e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0201 	and.w	r2, r3, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d017      	beq.n	8002ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d123      	bne.n	8002efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	08da      	lsrs	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3208      	adds	r2, #8
 8002ef6:	69b9      	ldr	r1, [r7, #24]
 8002ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80b4 	beq.w	80030a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b60      	ldr	r3, [pc, #384]	@ (80030c4 <HAL_GPIO_Init+0x30c>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	4a5f      	ldr	r2, [pc, #380]	@ (80030c4 <HAL_GPIO_Init+0x30c>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80030c4 <HAL_GPIO_Init+0x30c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80030c8 <HAL_GPIO_Init+0x310>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_GPIO_Init+0x314>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02b      	beq.n	8002fde <HAL_GPIO_Init+0x226>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a51      	ldr	r2, [pc, #324]	@ (80030d0 <HAL_GPIO_Init+0x318>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d025      	beq.n	8002fda <HAL_GPIO_Init+0x222>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a50      	ldr	r2, [pc, #320]	@ (80030d4 <HAL_GPIO_Init+0x31c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <HAL_GPIO_Init+0x21e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4f      	ldr	r2, [pc, #316]	@ (80030d8 <HAL_GPIO_Init+0x320>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x21a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4e      	ldr	r2, [pc, #312]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x216>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4d      	ldr	r2, [pc, #308]	@ (80030e0 <HAL_GPIO_Init+0x328>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x212>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80030e4 <HAL_GPIO_Init+0x32c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80030e8 <HAL_GPIO_Init+0x330>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x20a>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e00e      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	e00c      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	e00a      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fca:	2305      	movs	r3, #5
 8002fcc:	e008      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e006      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e004      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f002 0203 	and.w	r2, r2, #3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4093      	lsls	r3, r2
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff0:	4935      	ldr	r1, [pc, #212]	@ (80030c8 <HAL_GPIO_Init+0x310>)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003022:	4a32      	ldr	r2, [pc, #200]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003028:	4b30      	ldr	r3, [pc, #192]	@ (80030ec <HAL_GPIO_Init+0x334>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800304c:	4a27      	ldr	r2, [pc, #156]	@ (80030ec <HAL_GPIO_Init+0x334>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003052:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003076:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_GPIO_Init+0x334>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a0:	4a12      	ldr	r2, [pc, #72]	@ (80030ec <HAL_GPIO_Init+0x334>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3301      	adds	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b0f      	cmp	r3, #15
 80030b0:	f67f ae90 	bls.w	8002dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40013800 	.word	0x40013800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40020800 	.word	0x40020800
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40021400 	.word	0x40021400
 80030e4:	40021800 	.word	0x40021800
 80030e8:	40021c00 	.word	0x40021c00
 80030ec:	40013c00 	.word	0x40013c00

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800310c:	e003      	b.n	8003116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003134:	887a      	ldrh	r2, [r7, #2]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4013      	ands	r3, r2
 800313a:	041a      	lsls	r2, r3, #16
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43d9      	mvns	r1, r3
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	400b      	ands	r3, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	619a      	str	r2, [r3, #24]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e267      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d075      	beq.n	8003262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003176:	4b88      	ldr	r3, [pc, #544]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d00c      	beq.n	800319c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003182:	4b85      	ldr	r3, [pc, #532]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318a:	2b08      	cmp	r3, #8
 800318c:	d112      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318e:	4b82      	ldr	r3, [pc, #520]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800319a:	d10b      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	4b7e      	ldr	r3, [pc, #504]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d05b      	beq.n	8003260 <HAL_RCC_OscConfig+0x108>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d157      	bne.n	8003260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e242      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031bc:	d106      	bne.n	80031cc <HAL_RCC_OscConfig+0x74>
 80031be:	4b76      	ldr	r3, [pc, #472]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a75      	ldr	r2, [pc, #468]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xb0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x98>
 80031d6:	4b70      	ldr	r3, [pc, #448]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a6f      	ldr	r2, [pc, #444]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xb0>
 80031f0:	4b69      	ldr	r3, [pc, #420]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a68      	ldr	r2, [pc, #416]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b66      	ldr	r3, [pc, #408]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a65      	ldr	r2, [pc, #404]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7ff fce4 	bl	8002bdc <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003218:	f7ff fce0 	bl	8002bdc <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	@ 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e207      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b5b      	ldr	r3, [pc, #364]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xc0>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7ff fcd0 	bl	8002bdc <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003240:	f7ff fccc 	bl	8002bdc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	@ 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1f3      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0xe8>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326e:	4b4a      	ldr	r3, [pc, #296]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327a:	4b47      	ldr	r3, [pc, #284]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	4b44      	ldr	r3, [pc, #272]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b41      	ldr	r3, [pc, #260]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x152>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1c7      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4937      	ldr	r1, [pc, #220]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e03a      	b.n	8003336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b34      	ldr	r3, [pc, #208]	@ (800339c <HAL_RCC_OscConfig+0x244>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7ff fc85 	bl	8002bdc <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d6:	f7ff fc81 	bl	8002bdc <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e1a8      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b28      	ldr	r3, [pc, #160]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4925      	ldr	r1, [pc, #148]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b24      	ldr	r3, [pc, #144]	@ (800339c <HAL_RCC_OscConfig+0x244>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7ff fc64 	bl	8002bdc <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003318:	f7ff fc60 	bl	8002bdc <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e187      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d036      	beq.n	80033b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d016      	beq.n	8003378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_RCC_OscConfig+0x248>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7ff fc44 	bl	8002bdc <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003358:	f7ff fc40 	bl	8002bdc <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e167      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_OscConfig+0x240>)
 800336c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x200>
 8003376:	e01b      	b.n	80033b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003378:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_RCC_OscConfig+0x248>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7ff fc2d 	bl	8002bdc <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	e00e      	b.n	80033a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003386:	f7ff fc29 	bl	8002bdc <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d907      	bls.n	80033a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e150      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
 8003398:	40023800 	.word	0x40023800
 800339c:	42470000 	.word	0x42470000
 80033a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	4b88      	ldr	r3, [pc, #544]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ea      	bne.n	8003386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8097 	beq.w	80034ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b81      	ldr	r3, [pc, #516]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	4b7d      	ldr	r3, [pc, #500]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	4a7c      	ldr	r2, [pc, #496]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033de:	4b7a      	ldr	r3, [pc, #488]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	4b77      	ldr	r3, [pc, #476]	@ (80035cc <HAL_RCC_OscConfig+0x474>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d118      	bne.n	800342c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fa:	4b74      	ldr	r3, [pc, #464]	@ (80035cc <HAL_RCC_OscConfig+0x474>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a73      	ldr	r2, [pc, #460]	@ (80035cc <HAL_RCC_OscConfig+0x474>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003406:	f7ff fbe9 	bl	8002bdc <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340e:	f7ff fbe5 	bl	8002bdc <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e10c      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	4b6a      	ldr	r3, [pc, #424]	@ (80035cc <HAL_RCC_OscConfig+0x474>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x2ea>
 8003434:	4b64      	ldr	r3, [pc, #400]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	4a63      	ldr	r2, [pc, #396]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x324>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x30c>
 800344a:	4b5f      	ldr	r3, [pc, #380]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	4a5e      	ldr	r2, [pc, #376]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	@ 0x70
 8003456:	4b5c      	ldr	r3, [pc, #368]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345a:	4a5b      	ldr	r2, [pc, #364]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	@ 0x70
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0x324>
 8003464:	4b58      	ldr	r3, [pc, #352]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003468:	4a57      	ldr	r2, [pc, #348]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003470:	4b55      	ldr	r3, [pc, #340]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	4a54      	ldr	r2, [pc, #336]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003476:	f023 0304 	bic.w	r3, r3, #4
 800347a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7ff fbaa 	bl	8002bdc <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7ff fba6 	bl	8002bdc <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0cb      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a2:	4b49      	ldr	r3, [pc, #292]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ee      	beq.n	800348c <HAL_RCC_OscConfig+0x334>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7ff fb94 	bl	8002bdc <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7ff fb90 	bl	8002bdc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0b5      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ce:	4b3e      	ldr	r3, [pc, #248]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ee      	bne.n	80034b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e0:	4b39      	ldr	r3, [pc, #228]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	4a38      	ldr	r2, [pc, #224]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a1 	beq.w	8003638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f6:	4b34      	ldr	r3, [pc, #208]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d05c      	beq.n	80035bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d141      	bne.n	800358e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCC_OscConfig+0x478>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7ff fb64 	bl	8002bdc <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff fb60 	bl	8002bdc <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e087      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b27      	ldr	r3, [pc, #156]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	491b      	ldr	r1, [pc, #108]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003560:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <HAL_RCC_OscConfig+0x478>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7ff fb39 	bl	8002bdc <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356e:	f7ff fb35 	bl	8002bdc <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e05c      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003580:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x416>
 800358c:	e054      	b.n	8003638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358e:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <HAL_RCC_OscConfig+0x478>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7ff fb22 	bl	8002bdc <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359c:	f7ff fb1e 	bl	8002bdc <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e045      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_OscConfig+0x470>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x444>
 80035ba:	e03d      	b.n	8003638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e038      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40007000 	.word	0x40007000
 80035d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <HAL_RCC_OscConfig+0x4ec>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d028      	beq.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d121      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d11a      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800360a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800360c:	4293      	cmp	r3, r2
 800360e:	d111      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0cc      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b68      	ldr	r3, [pc, #416]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d90c      	bls.n	8003684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b65      	ldr	r3, [pc, #404]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a58      	ldr	r2, [pc, #352]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a52      	ldr	r2, [pc, #328]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d044      	beq.n	8003768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d119      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003702:	2b03      	cmp	r3, #3
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	4b3f      	ldr	r3, [pc, #252]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	4b3b      	ldr	r3, [pc, #236]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e067      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003726:	4b37      	ldr	r3, [pc, #220]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4934      	ldr	r1, [pc, #208]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003738:	f7ff fa50 	bl	8002bdc <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003740:	f7ff fa4c 	bl	8002bdc <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e04f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	4b2b      	ldr	r3, [pc, #172]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 020c 	and.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d1eb      	bne.n	8003740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003768:	4b25      	ldr	r3, [pc, #148]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d20c      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b22      	ldr	r3, [pc, #136]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f821 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x1c8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f8e0 	bl	80029b4 <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
 8003808:	080040c4 	.word	0x080040c4
 800380c:	20000008 	.word	0x20000008
 8003810:	2000000c 	.word	0x2000000c

08003814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b094      	sub	sp, #80	@ 0x50
 800381a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003820:	2300      	movs	r3, #0
 8003822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003824:	2300      	movs	r3, #0
 8003826:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800382c:	4b79      	ldr	r3, [pc, #484]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d00d      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x40>
 8003838:	2b08      	cmp	r3, #8
 800383a:	f200 80e1 	bhi.w	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x34>
 8003842:	2b04      	cmp	r3, #4
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x3a>
 8003846:	e0db      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b73      	ldr	r3, [pc, #460]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800384a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800384c:	e0db      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800384e:	4b73      	ldr	r3, [pc, #460]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003852:	e0d8      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003854:	4b6f      	ldr	r3, [pc, #444]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800385c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800385e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d063      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003874:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
 800387e:	2300      	movs	r3, #0
 8003880:	637b      	str	r3, [r7, #52]	@ 0x34
 8003882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003886:	4622      	mov	r2, r4
 8003888:	462b      	mov	r3, r5
 800388a:	f04f 0000 	mov.w	r0, #0
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	0159      	lsls	r1, r3, #5
 8003894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003898:	0150      	lsls	r0, r2, #5
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4621      	mov	r1, r4
 80038a0:	1a51      	subs	r1, r2, r1
 80038a2:	6139      	str	r1, [r7, #16]
 80038a4:	4629      	mov	r1, r5
 80038a6:	eb63 0301 	sbc.w	r3, r3, r1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b8:	4659      	mov	r1, fp
 80038ba:	018b      	lsls	r3, r1, #6
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038c2:	4651      	mov	r1, sl
 80038c4:	018a      	lsls	r2, r1, #6
 80038c6:	4651      	mov	r1, sl
 80038c8:	ebb2 0801 	subs.w	r8, r2, r1
 80038cc:	4659      	mov	r1, fp
 80038ce:	eb63 0901 	sbc.w	r9, r3, r1
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e6:	4690      	mov	r8, r2
 80038e8:	4699      	mov	r9, r3
 80038ea:	4623      	mov	r3, r4
 80038ec:	eb18 0303 	adds.w	r3, r8, r3
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	462b      	mov	r3, r5
 80038f4:	eb49 0303 	adc.w	r3, r9, r3
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003906:	4629      	mov	r1, r5
 8003908:	024b      	lsls	r3, r1, #9
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003910:	4621      	mov	r1, r4
 8003912:	024a      	lsls	r2, r1, #9
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800391e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003924:	f7fc fc54 	bl	80001d0 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003930:	e058      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003932:	4b38      	ldr	r3, [pc, #224]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	2200      	movs	r2, #0
 800393a:	4618      	mov	r0, r3
 800393c:	4611      	mov	r1, r2
 800393e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
 8003948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800394c:	4642      	mov	r2, r8
 800394e:	464b      	mov	r3, r9
 8003950:	f04f 0000 	mov.w	r0, #0
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	0159      	lsls	r1, r3, #5
 800395a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395e:	0150      	lsls	r0, r2, #5
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4641      	mov	r1, r8
 8003966:	ebb2 0a01 	subs.w	sl, r2, r1
 800396a:	4649      	mov	r1, r9
 800396c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800397c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003984:	ebb2 040a 	subs.w	r4, r2, sl
 8003988:	eb63 050b 	sbc.w	r5, r3, fp
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	00eb      	lsls	r3, r5, #3
 8003996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800399a:	00e2      	lsls	r2, r4, #3
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
 80039a0:	4643      	mov	r3, r8
 80039a2:	18e3      	adds	r3, r4, r3
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	464b      	mov	r3, r9
 80039a8:	eb45 0303 	adc.w	r3, r5, r3
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ba:	4629      	mov	r1, r5
 80039bc:	028b      	lsls	r3, r1, #10
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039c4:	4621      	mov	r1, r4
 80039c6:	028a      	lsls	r2, r1, #10
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	61fa      	str	r2, [r7, #28]
 80039d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d8:	f7fc fbfa 	bl	80001d0 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80039f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3750      	adds	r7, #80	@ 0x50
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000008 	.word	0x20000008

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a9b      	lsrs	r3, r3, #10
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	080040d4 	.word	0x080040d4

08003a60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aa2:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x60>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0207 	and.w	r2, r3, #7
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40023c00 	.word	0x40023c00

08003ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f839 	bl	8003b62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 f9c0 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e04e      	b.n	8003c2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a23      	ldr	r2, [pc, #140]	@ (8003c3c <HAL_TIM_Base_Start_IT+0xc4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bba:	d01d      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1e      	ldr	r2, [pc, #120]	@ (8003c44 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1b      	ldr	r2, [pc, #108]	@ (8003c4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a19      	ldr	r2, [pc, #100]	@ (8003c50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d111      	bne.n	8003c1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d010      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1a:	e007      	b.n	8003c2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	40000400 	.word	0x40000400
 8003c44:	40000800 	.word	0x40000800
 8003c48:	40000c00 	.word	0x40000c00
 8003c4c:	40010400 	.word	0x40010400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40001800 	.word	0x40001800

08003c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d020      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01b      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0202 	mvn.w	r2, #2
 8003c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8d2 	bl	8003e4c <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8c4 	bl	8003e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8d5 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d020      	beq.n	8003d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01b      	beq.n	8003d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0204 	mvn.w	r2, #4
 8003cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8ac 	bl	8003e4c <HAL_TIM_IC_CaptureCallback>
 8003cf4:	e005      	b.n	8003d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f89e 	bl	8003e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f8af 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d020      	beq.n	8003d54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01b      	beq.n	8003d54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0208 	mvn.w	r2, #8
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f886 	bl	8003e4c <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f878 	bl	8003e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f889 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d020      	beq.n	8003da0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0210 	mvn.w	r2, #16
 8003d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2208      	movs	r2, #8
 8003d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f860 	bl	8003e4c <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f852 	bl	8003e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f863 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0201 	mvn.w	r2, #1
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe fdb8 	bl	8002934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f906 	bl	8003ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f834 	bl	8003e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0220 	mvn.w	r2, #32
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8d8 	bl	8003fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e30:	bf00      	nop
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a46      	ldr	r2, [pc, #280]	@ (8003fb4 <TIM_Base_SetConfig+0x12c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea6:	d00f      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a43      	ldr	r2, [pc, #268]	@ (8003fb8 <TIM_Base_SetConfig+0x130>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a42      	ldr	r2, [pc, #264]	@ (8003fbc <TIM_Base_SetConfig+0x134>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a41      	ldr	r2, [pc, #260]	@ (8003fc0 <TIM_Base_SetConfig+0x138>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a40      	ldr	r2, [pc, #256]	@ (8003fc4 <TIM_Base_SetConfig+0x13c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a35      	ldr	r2, [pc, #212]	@ (8003fb4 <TIM_Base_SetConfig+0x12c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d027      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a32      	ldr	r2, [pc, #200]	@ (8003fb8 <TIM_Base_SetConfig+0x130>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d023      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a31      	ldr	r2, [pc, #196]	@ (8003fbc <TIM_Base_SetConfig+0x134>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a30      	ldr	r2, [pc, #192]	@ (8003fc0 <TIM_Base_SetConfig+0x138>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc4 <TIM_Base_SetConfig+0x13c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d017      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc8 <TIM_Base_SetConfig+0x140>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2d      	ldr	r2, [pc, #180]	@ (8003fcc <TIM_Base_SetConfig+0x144>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd0 <TIM_Base_SetConfig+0x148>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd4 <TIM_Base_SetConfig+0x14c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd8 <TIM_Base_SetConfig+0x150>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a29      	ldr	r2, [pc, #164]	@ (8003fdc <TIM_Base_SetConfig+0x154>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a10      	ldr	r2, [pc, #64]	@ (8003fb4 <TIM_Base_SetConfig+0x12c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0xf8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <TIM_Base_SetConfig+0x13c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d103      	bne.n	8003f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40010400 	.word	0x40010400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800
 8003fd4:	40001800 	.word	0x40001800
 8003fd8:	40001c00 	.word	0x40001c00
 8003fdc:	40002000 	.word	0x40002000

08003fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <memset>:
 8004008:	4402      	add	r2, r0
 800400a:	4603      	mov	r3, r0
 800400c:	4293      	cmp	r3, r2
 800400e:	d100      	bne.n	8004012 <memset+0xa>
 8004010:	4770      	bx	lr
 8004012:	f803 1b01 	strb.w	r1, [r3], #1
 8004016:	e7f9      	b.n	800400c <memset+0x4>

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	4d0d      	ldr	r5, [pc, #52]	@ (8004050 <__libc_init_array+0x38>)
 800401c:	4c0d      	ldr	r4, [pc, #52]	@ (8004054 <__libc_init_array+0x3c>)
 800401e:	1b64      	subs	r4, r4, r5
 8004020:	10a4      	asrs	r4, r4, #2
 8004022:	2600      	movs	r6, #0
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	4d0b      	ldr	r5, [pc, #44]	@ (8004058 <__libc_init_array+0x40>)
 800402a:	4c0c      	ldr	r4, [pc, #48]	@ (800405c <__libc_init_array+0x44>)
 800402c:	f000 f826 	bl	800407c <_init>
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	2600      	movs	r6, #0
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	080040e4 	.word	0x080040e4
 8004054:	080040e4 	.word	0x080040e4
 8004058:	080040e4 	.word	0x080040e4
 800405c:	080040e8 	.word	0x080040e8

08004060 <memcpy>:
 8004060:	440a      	add	r2, r1
 8004062:	4291      	cmp	r1, r2
 8004064:	f100 33ff 	add.w	r3, r0, #4294967295
 8004068:	d100      	bne.n	800406c <memcpy+0xc>
 800406a:	4770      	bx	lr
 800406c:	b510      	push	{r4, lr}
 800406e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004076:	4291      	cmp	r1, r2
 8004078:	d1f9      	bne.n	800406e <memcpy+0xe>
 800407a:	bd10      	pop	{r4, pc}

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
