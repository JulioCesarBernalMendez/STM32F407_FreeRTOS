
App_007_Example_4.4_Blocked_State_To_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006674  08006674  00007674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b4  080067b4  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  080067b4  080067b4  000077b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067bc  080067bc  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067c0  080067c0  000077c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080067c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          000198b8  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200198d4  200198d4  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017917  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311b  00000000  00000000  0001f963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cb  00000000  00000000  00024020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024441  00000000  00000000  000250eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019138  00000000  00000000  0004952c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea759  00000000  00000000  00062664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014cdbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005af4  00000000  00000000  0014ce00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c6  00000000  00000000  001528f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800665c 	.word	0x0800665c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800665c 	.word	0x0800665c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 faf7 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f837 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8c9 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f89d 	bl	80006a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800056a:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <main+0x64>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a12      	ldr	r2, [pc, #72]	@ (80005b8 <main+0x64>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000576:	f004 fb4f 	bl	8004c18 <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800057a:	f005 f8a5 	bl	80056c8 <SEGGER_SYSVIEW_Start>

  /* create the first task with a priority of 1 */
  xTaskCreate( vTaskFunction, /* pointer to the function that implements the task */
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <main+0x68>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	9201      	str	r2, [sp, #4]
 8000586:	2201      	movs	r2, #1
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800058e:	490c      	ldr	r1, [pc, #48]	@ (80005c0 <main+0x6c>)
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <main+0x70>)
 8000592:	f002 fd1a 	bl	8002fca <xTaskCreate>
               ( void* ) pcTextForTask1, /* pass the text to be printed into the task using the task parameter */
               1,        /* this task will run at priority 1 */
               NULL );   /* this example does not use the task handle */

  /* create the second task at a higher priority of 2 */
  xTaskCreate( vTaskFunction, "Task 2", 1000, ( void* ) pcTextForTask2, 2, NULL );
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <main+0x74>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2202      	movs	r2, #2
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a6:	4909      	ldr	r1, [pc, #36]	@ (80005cc <main+0x78>)
 80005a8:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <main+0x70>)
 80005aa:	f002 fd0e 	bl	8002fca <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 80005ae:	f002 fefd 	bl	80033ac <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x5e>
 80005b6:	bf00      	nop
 80005b8:	e0001000 	.word	0xe0001000
 80005bc:	20000000 	.word	0x20000000
 80005c0:	0800669c 	.word	0x0800669c
 80005c4:	08000859 	.word	0x08000859
 80005c8:	20000004 	.word	0x20000004
 80005cc:	080066a4 	.word	0x080066a4

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	@ 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 f801 	bl	80065e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000644:	2332      	movs	r3, #50	@ 0x32
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000648:	2304      	movs	r3, #4
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064c:	2307      	movs	r3, #7
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd53 	bl	8001100 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 f920 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ffb4 	bl	80015f0 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 f909 	bl	80008a4 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <MX_USART2_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006dc:	f001 fc7c 	bl	8001fd8 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f8dd 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000038 	.word	0x20000038
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b3c      	ldr	r3, [pc, #240]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a3b      	ldr	r2, [pc, #236]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b39      	ldr	r3, [pc, #228]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b35      	ldr	r3, [pc, #212]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a34      	ldr	r2, [pc, #208]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <MX_GPIO_Init+0x10c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <MX_GPIO_Init+0x10c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a2d      	ldr	r2, [pc, #180]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a26      	ldr	r2, [pc, #152]	@ (8000804 <MX_GPIO_Init+0x10c>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000784:	4820      	ldr	r0, [pc, #128]	@ (8000808 <MX_GPIO_Init+0x110>)
 8000786:	f000 fca1 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	481b      	ldr	r0, [pc, #108]	@ (800080c <MX_GPIO_Init+0x114>)
 80007a0:	f000 faf8 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007a4:	2304      	movs	r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4816      	ldr	r0, [pc, #88]	@ (8000810 <MX_GPIO_Init+0x118>)
 80007b8:	f000 faec 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80007bc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_GPIO_Init+0x110>)
 80007d6:	f000 fadd 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ea:	2306      	movs	r3, #6
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4807      	ldr	r0, [pc, #28]	@ (8000814 <MX_GPIO_Init+0x11c>)
 80007f6:	f000 facd 	bl	8000d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40020000 	.word	0x40020000
 8000810:	40020400 	.word	0x40020400
 8000814:	40020800 	.word	0x40020800

08000818 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string untill null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e00b      	b.n	8000840 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	18d1      	adds	r1, r2, r3
 800082e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000832:	2201      	movs	r2, #1
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f001 fc1f 	bl	8002078 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	3301      	adds	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1ed      	bne.n	8000828 <UART2_Print_Text+0x10>
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <vTaskFunction>:


void vTaskFunction( void *pvParameters )
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* string to print out is passed in via the parameter.
     Cast this to a character pointer to obtain the string the task should print out*/
  const char *pcTaskName = ( const char* ) pvParameters;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	60fb      	str	r3, [r7, #12]

  /* get 250 milliseconds in Ticks used for delay */
  const TickType_t xDelay250ms = pdMS_TO_TICKS( 250 );
 8000864:	23fa      	movs	r3, #250	@ 0xfa
 8000866:	60bb      	str	r3, [r7, #8]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ; ; )
  {
    /* print out the name of the current task */
    UART2_Print_Text( &huart2, pcTaskName );
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	4804      	ldr	r0, [pc, #16]	@ (800087c <vTaskFunction+0x24>)
 800086c:	f7ff ffd4 	bl	8000818 <UART2_Print_Text>
    /* Delay for a period.
       This time a call to vTaskDelay() is used which places the task into Blocked state
       until the delay period has expired. The parameter takes a time specified in 'ticks',
       and the pdMS_TO_TICKS() macro is used (where the xDelay250ms constant is declared)
       to convert 250 milliseconds into an equivalent time in ticks */
    vTaskDelay( xDelay250ms );
 8000870:	68b8      	ldr	r0, [r7, #8]
 8000872:	f002 fd19 	bl	80032a8 <vTaskDelay>
    UART2_Print_Text( &huart2, pcTaskName );
 8000876:	bf00      	nop
 8000878:	e7f6      	b.n	8000868 <vTaskFunction+0x10>
 800087a:	bf00      	nop
 800087c:	20000038 	.word	0x20000038

08000880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000892:	f000 f97d 	bl	8000b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40001000 	.word	0x40001000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 fa1b 	bl	8000d2a <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	@ (8000984 <HAL_UART_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <HAL_UART_MspInit+0x88>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a10      	ldr	r2, [pc, #64]	@ (8000988 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800095a:	230c      	movs	r3, #12
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096a:	2307      	movs	r3, #7
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <HAL_UART_MspInit+0x8c>)
 8000976:	f000 fa0d 	bl	8000d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	@ 0x38
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <HAL_InitTick+0xe4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	4a32      	ldr	r2, [pc, #200]	@ (8000a74 <HAL_InitTick+0xe4>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b0:	4b30      	ldr	r3, [pc, #192]	@ (8000a74 <HAL_InitTick+0xe4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009bc:	f107 0210 	add.w	r2, r7, #16
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f832 	bl	8001a30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d6:	f001 f803 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 80009da:	6378      	str	r0, [r7, #52]	@ 0x34
 80009dc:	e004      	b.n	80009e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009de:	f000 ffff 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 80009e2:	4603      	mov	r3, r0
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ea:	4a23      	ldr	r2, [pc, #140]	@ (8000a78 <HAL_InitTick+0xe8>)
 80009ec:	fba2 2303 	umull	r2, r3, r2, r3
 80009f0:	0c9b      	lsrs	r3, r3, #18
 80009f2:	3b01      	subs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <HAL_InitTick+0xec>)
 80009f8:	4a21      	ldr	r2, [pc, #132]	@ (8000a80 <HAL_InitTick+0xf0>)
 80009fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <HAL_InitTick+0xec>)
 80009fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a04:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <HAL_InitTick+0xec>)
 8000a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_InitTick+0xec>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_InitTick+0xec>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_InitTick+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a1c:	4817      	ldr	r0, [pc, #92]	@ (8000a7c <HAL_InitTick+0xec>)
 8000a1e:	f001 f839 	bl	8001a94 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d11b      	bne.n	8000a68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a30:	4812      	ldr	r0, [pc, #72]	@ (8000a7c <HAL_InitTick+0xec>)
 8000a32:	f001 f889 	bl	8001b48 <HAL_TIM_Base_Start_IT>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d111      	bne.n	8000a68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a44:	2036      	movs	r0, #54	@ 0x36
 8000a46:	f000 f997 	bl	8000d78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d808      	bhi.n	8000a62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2036      	movs	r0, #54	@ 0x36
 8000a56:	f000 f973 	bl	8000d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_InitTick+0xf4>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e002      	b.n	8000a68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3738      	adds	r7, #56	@ 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	20000080 	.word	0x20000080
 8000a80:	40001000 	.word	0x40001000
 8000a84:	2000000c 	.word	0x2000000c

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <TIM6_DAC_IRQHandler+0x10>)
 8000ac6:	f001 f8af 	bl	8001c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000080 	.word	0x20000080

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000afc:	f7ff ffea 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f005 fd67 	bl	80065f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd13 	bl	8000554 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b3c:	080067c4 	.word	0x080067c4
  ldr r2, =_sbss
 8000b40:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b44:	200198d4 	.word	0x200198d4

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f8d8 	bl	8000d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff08 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe96 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	200000c8 	.word	0x200000c8

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200000c8 	.word	0x200000c8

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	@ (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	@ (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	@ 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff4c 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d52:	f7ff ff61 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff ffb1 	bl	8000cc4 <NVIC_EncodePriority>
 8000d62:	4602      	mov	r2, r0
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff80 	bl	8000c70 <__NVIC_SetPriority>
}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff54 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e16b      	b.n	8001088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 815a 	bne.w	8001082 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d005      	beq.n	8000de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d130      	bne.n	8000e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	f003 0201 	and.w	r2, r3, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d017      	beq.n	8000e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d123      	bne.n	8000ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	69b9      	ldr	r1, [r7, #24]
 8000ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0203 	and.w	r2, r3, #3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80b4 	beq.w	8001082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b60      	ldr	r3, [pc, #384]	@ (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a5f      	ldr	r2, [pc, #380]	@ (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f36:	4a5b      	ldr	r2, [pc, #364]	@ (80010a4 <HAL_GPIO_Init+0x310>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a52      	ldr	r2, [pc, #328]	@ (80010a8 <HAL_GPIO_Init+0x314>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x226>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a51      	ldr	r2, [pc, #324]	@ (80010ac <HAL_GPIO_Init+0x318>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x222>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a50      	ldr	r2, [pc, #320]	@ (80010b0 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x21e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80010b8 <HAL_GPIO_Init+0x324>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	@ (80010bc <HAL_GPIO_Init+0x328>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_GPIO_Init+0x32c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	@ (80010c4 <HAL_GPIO_Init+0x330>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x20a>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e00e      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	@ (80010a4 <HAL_GPIO_Init+0x310>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a32      	ldr	r2, [pc, #200]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1d      	ldr	r2, [pc, #116]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae90 	bls.w	8000db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021c00 	.word	0x40021c00
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e267      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d075      	beq.n	800120a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111e:	4b88      	ldr	r3, [pc, #544]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b04      	cmp	r3, #4
 8001128:	d00c      	beq.n	8001144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b85      	ldr	r3, [pc, #532]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001132:	2b08      	cmp	r3, #8
 8001134:	d112      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001136:	4b82      	ldr	r3, [pc, #520]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001142:	d10b      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	4b7e      	ldr	r3, [pc, #504]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d05b      	beq.n	8001208 <HAL_RCC_OscConfig+0x108>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d157      	bne.n	8001208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e242      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001164:	d106      	bne.n	8001174 <HAL_RCC_OscConfig+0x74>
 8001166:	4b76      	ldr	r3, [pc, #472]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a75      	ldr	r2, [pc, #468]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x98>
 800117e:	4b70      	ldr	r3, [pc, #448]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6f      	ldr	r2, [pc, #444]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6d      	ldr	r3, [pc, #436]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6c      	ldr	r2, [pc, #432]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001198:	4b69      	ldr	r3, [pc, #420]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a68      	ldr	r2, [pc, #416]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b66      	ldr	r3, [pc, #408]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a65      	ldr	r2, [pc, #404]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fcfe 	bl	8000bb8 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fcfa 	bl	8000bb8 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	@ 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e207      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xc0>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fcea 	bl	8000bb8 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fce6 	bl	8000bb8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	@ 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1f3      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b51      	ldr	r3, [pc, #324]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0xe8>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001216:	4b4a      	ldr	r3, [pc, #296]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1c7      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4937      	ldr	r1, [pc, #220]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e03a      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <HAL_RCC_OscConfig+0x244>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fc9f 	bl	8000bb8 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fc9b 	bl	8000bb8 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1a8      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4925      	ldr	r1, [pc, #148]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <HAL_RCC_OscConfig+0x244>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc7e 	bl	8000bb8 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc7a 	bl	8000bb8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e187      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d036      	beq.n	8001358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d016      	beq.n	8001320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_RCC_OscConfig+0x248>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fc5e 	bl	8000bb8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fc5a 	bl	8000bb8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e167      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x200>
 800131e:	e01b      	b.n	8001358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_RCC_OscConfig+0x248>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fc47 	bl	8000bb8 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	e00e      	b.n	800134c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fc43 	bl	8000bb8 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d907      	bls.n	800134c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e150      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001340:	40023800 	.word	0x40023800
 8001344:	42470000 	.word	0x42470000
 8001348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ea      	bne.n	800132e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8097 	beq.w	8001494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136a:	4b81      	ldr	r3, [pc, #516]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b7d      	ldr	r3, [pc, #500]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a7c      	ldr	r2, [pc, #496]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b7a      	ldr	r3, [pc, #488]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b77      	ldr	r3, [pc, #476]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b74      	ldr	r3, [pc, #464]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a73      	ldr	r2, [pc, #460]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fc03 	bl	8000bb8 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fbff 	bl	8000bb8 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e10c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x2ea>
 80013dc:	4b64      	ldr	r3, [pc, #400]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e0:	4a63      	ldr	r2, [pc, #396]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e8:	e01c      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x30c>
 80013f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001402:	4a5b      	ldr	r2, [pc, #364]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6713      	str	r3, [r2, #112]	@ 0x70
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 800140c:	4b58      	ldr	r3, [pc, #352]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001410:	4a57      	ldr	r2, [pc, #348]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6713      	str	r3, [r2, #112]	@ 0x70
 8001418:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141c:	4a54      	ldr	r2, [pc, #336]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800141e:	f023 0304 	bic.w	r3, r3, #4
 8001422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fbc4 	bl	8000bb8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff fbc0 	bl	8000bb8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e0cb      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	4b49      	ldr	r3, [pc, #292]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0ee      	beq.n	8001434 <HAL_RCC_OscConfig+0x334>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fbae 	bl	8000bb8 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	e00a      	b.n	8001476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff fbaa 	bl	8000bb8 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e0b5      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	4b3e      	ldr	r3, [pc, #248]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ee      	bne.n	8001460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	4a38      	ldr	r2, [pc, #224]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a1 	beq.w	80015e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149e:	4b34      	ldr	r3, [pc, #208]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d05c      	beq.n	8001564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d141      	bne.n	8001536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_RCC_OscConfig+0x478>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb7e 	bl	8000bb8 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fb7a 	bl	8000bb8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e087      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	019b      	lsls	r3, r3, #6
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	3b01      	subs	r3, #1
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	491b      	ldr	r1, [pc, #108]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x478>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fb53 	bl	8000bb8 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fb4f 	bl	8000bb8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e05c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x416>
 8001534:	e054      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_RCC_OscConfig+0x478>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb3c 	bl	8000bb8 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb38 	bl	8000bb8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e045      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x444>
 8001562:	e03d      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e038      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000
 8001578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_RCC_OscConfig+0x4ec>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d028      	beq.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d121      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015ac:	4013      	ands	r3, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d111      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fa6a 	bl	8000bb8 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fa66 	bl	8000bb8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f8fa 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	08006774 	.word	0x08006774
 80017b4:	20000008 	.word	0x20000008
 80017b8:	2000000c 	.word	0x2000000c

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b094      	sub	sp, #80	@ 0x50
 80017c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017c8:	2300      	movs	r3, #0
 80017ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017cc:	2300      	movs	r3, #0
 80017ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d4:	4b79      	ldr	r3, [pc, #484]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d00d      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x40>
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	f200 80e1 	bhi.w	80019a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ee:	e0db      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b73      	ldr	r3, [pc, #460]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80017f2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017f4:	e0db      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f6:	4b73      	ldr	r3, [pc, #460]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80017f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017fa:	e0d8      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001804:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001806:	4b6d      	ldr	r3, [pc, #436]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	2200      	movs	r2, #0
 800181a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800181c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800181e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
 800182a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800182e:	4622      	mov	r2, r4
 8001830:	462b      	mov	r3, r5
 8001832:	f04f 0000 	mov.w	r0, #0
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	0159      	lsls	r1, r3, #5
 800183c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001840:	0150      	lsls	r0, r2, #5
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4621      	mov	r1, r4
 8001848:	1a51      	subs	r1, r2, r1
 800184a:	6139      	str	r1, [r7, #16]
 800184c:	4629      	mov	r1, r5
 800184e:	eb63 0301 	sbc.w	r3, r3, r1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001860:	4659      	mov	r1, fp
 8001862:	018b      	lsls	r3, r1, #6
 8001864:	4651      	mov	r1, sl
 8001866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186a:	4651      	mov	r1, sl
 800186c:	018a      	lsls	r2, r1, #6
 800186e:	4651      	mov	r1, sl
 8001870:	ebb2 0801 	subs.w	r8, r2, r1
 8001874:	4659      	mov	r1, fp
 8001876:	eb63 0901 	sbc.w	r9, r3, r1
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188e:	4690      	mov	r8, r2
 8001890:	4699      	mov	r9, r3
 8001892:	4623      	mov	r3, r4
 8001894:	eb18 0303 	adds.w	r3, r8, r3
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	462b      	mov	r3, r5
 800189c:	eb49 0303 	adc.w	r3, r9, r3
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018ae:	4629      	mov	r1, r5
 80018b0:	024b      	lsls	r3, r1, #9
 80018b2:	4621      	mov	r1, r4
 80018b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b8:	4621      	mov	r1, r4
 80018ba:	024a      	lsls	r2, r1, #9
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018c2:	2200      	movs	r2, #0
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018cc:	f7fe fcca 	bl	8000264 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018d8:	e058      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	2200      	movs	r2, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	4611      	mov	r1, r2
 80018e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f4:	4642      	mov	r2, r8
 80018f6:	464b      	mov	r3, r9
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	0159      	lsls	r1, r3, #5
 8001902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001906:	0150      	lsls	r0, r2, #5
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4641      	mov	r1, r8
 800190e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001912:	4649      	mov	r1, r9
 8001914:	eb63 0b01 	sbc.w	fp, r3, r1
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800192c:	ebb2 040a 	subs.w	r4, r2, sl
 8001930:	eb63 050b 	sbc.w	r5, r3, fp
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	00eb      	lsls	r3, r5, #3
 800193e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001942:	00e2      	lsls	r2, r4, #3
 8001944:	4614      	mov	r4, r2
 8001946:	461d      	mov	r5, r3
 8001948:	4643      	mov	r3, r8
 800194a:	18e3      	adds	r3, r4, r3
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	464b      	mov	r3, r9
 8001950:	eb45 0303 	adc.w	r3, r5, r3
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001962:	4629      	mov	r1, r5
 8001964:	028b      	lsls	r3, r1, #10
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800196c:	4621      	mov	r1, r4
 800196e:	028a      	lsls	r2, r1, #10
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001976:	2200      	movs	r2, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	61fa      	str	r2, [r7, #28]
 800197c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001980:	f7fe fc70 	bl	8000264 <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4613      	mov	r3, r2
 800198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	3301      	adds	r3, #1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800199c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800199e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a6:	e002      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80019aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3750      	adds	r7, #80	@ 0x50
 80019b4:	46bd      	mov	sp, r7
 80019b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e4:	f7ff fff0 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0a9b      	lsrs	r3, r3, #10
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	@ (8001a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08006784 	.word	0x08006784

08001a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a0c:	f7ff ffdc 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	0b5b      	lsrs	r3, r3, #13
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4903      	ldr	r1, [pc, #12]	@ (8001a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	08006784 	.word	0x08006784

08001a30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_RCC_GetClockConfig+0x5c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	08db      	lsrs	r3, r3, #3
 8001a6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <HAL_RCC_GetClockConfig+0x60>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0207 	and.w	r2, r3, #7
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40023c00 	.word	0x40023c00

08001a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e041      	b.n	8001b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f839 	bl	8001b32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f000 f9c0 	bl	8001e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d001      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e04e      	b.n	8001bfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	@ (8001c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d022      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x80>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b8a:	d01d      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d018      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d013      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x80>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00e      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x80>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d009      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x80>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x80>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a18      	ldr	r2, [pc, #96]	@ (8001c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d111      	bne.n	8001bec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d010      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bea:	e007      	b.n	8001bfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40000800 	.word	0x40000800
 8001c18:	40000c00 	.word	0x40000c00
 8001c1c:	40010400 	.word	0x40010400
 8001c20:	40014000 	.word	0x40014000
 8001c24:	40001800 	.word	0x40001800

08001c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d020      	beq.n	8001c8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0202 	mvn.w	r2, #2
 8001c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8d2 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8c4 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8d5 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d020      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0204 	mvn.w	r2, #4
 8001ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8ac 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001cc4:	e005      	b.n	8001cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f89e 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f8af 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d020      	beq.n	8001d24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0208 	mvn.w	r2, #8
 8001cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f886 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f878 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f889 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d020      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01b      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0210 	mvn.w	r2, #16
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2208      	movs	r2, #8
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f860 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f852 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f863 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00c      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0201 	mvn.w	r2, #1
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fd76 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f906 	bl	8001fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00c      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f834 	bl	8001e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0220 	mvn.w	r2, #32
 8001df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8d8 	bl	8001fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a46      	ldr	r2, [pc, #280]	@ (8001f84 <TIM_Base_SetConfig+0x12c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <TIM_Base_SetConfig+0x40>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e76:	d00f      	beq.n	8001e98 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a43      	ldr	r2, [pc, #268]	@ (8001f88 <TIM_Base_SetConfig+0x130>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00b      	beq.n	8001e98 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a42      	ldr	r2, [pc, #264]	@ (8001f8c <TIM_Base_SetConfig+0x134>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a41      	ldr	r2, [pc, #260]	@ (8001f90 <TIM_Base_SetConfig+0x138>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d003      	beq.n	8001e98 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a40      	ldr	r2, [pc, #256]	@ (8001f94 <TIM_Base_SetConfig+0x13c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d108      	bne.n	8001eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a35      	ldr	r2, [pc, #212]	@ (8001f84 <TIM_Base_SetConfig+0x12c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d02b      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d027      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a32      	ldr	r2, [pc, #200]	@ (8001f88 <TIM_Base_SetConfig+0x130>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d023      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a31      	ldr	r2, [pc, #196]	@ (8001f8c <TIM_Base_SetConfig+0x134>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a30      	ldr	r2, [pc, #192]	@ (8001f90 <TIM_Base_SetConfig+0x138>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01b      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8001f94 <TIM_Base_SetConfig+0x13c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d017      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2e      	ldr	r2, [pc, #184]	@ (8001f98 <TIM_Base_SetConfig+0x140>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f9c <TIM_Base_SetConfig+0x144>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00f      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa0 <TIM_Base_SetConfig+0x148>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00b      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa4 <TIM_Base_SetConfig+0x14c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa8 <TIM_Base_SetConfig+0x150>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d003      	beq.n	8001f0a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a29      	ldr	r2, [pc, #164]	@ (8001fac <TIM_Base_SetConfig+0x154>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d108      	bne.n	8001f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a10      	ldr	r2, [pc, #64]	@ (8001f84 <TIM_Base_SetConfig+0x12c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0xf8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <TIM_Base_SetConfig+0x13c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d103      	bne.n	8001f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f023 0201 	bic.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]
  }
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800
 8001f90:	40000c00 	.word	0x40000c00
 8001f94:	40010400 	.word	0x40010400
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40014400 	.word	0x40014400
 8001fa0:	40014800 	.word	0x40014800
 8001fa4:	40001800 	.word	0x40001800
 8001fa8:	40001c00 	.word	0x40001c00
 8001fac:	40002000 	.word	0x40002000

08001fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e042      	b.n	8002070 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fc7e 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	@ 0x24
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800201a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f973 	bl	8002308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b20      	cmp	r3, #32
 8002096:	d175      	bne.n	8002184 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_UART_Transmit+0x2c>
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e06e      	b.n	8002186 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2221      	movs	r2, #33	@ 0x21
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b6:	f7fe fd7f 	bl	8000bb8 <HAL_GetTick>
 80020ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	88fa      	ldrh	r2, [r7, #6]
 80020c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	88fa      	ldrh	r2, [r7, #6]
 80020c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020d0:	d108      	bne.n	80020e4 <HAL_UART_Transmit+0x6c>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d104      	bne.n	80020e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	e003      	b.n	80020ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020ec:	e02e      	b.n	800214c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2200      	movs	r2, #0
 80020f6:	2180      	movs	r1, #128	@ 0x80
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f848 	bl	800218e <UART_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e03a      	b.n	8002186 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	3302      	adds	r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e007      	b.n	800213e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3301      	adds	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1cb      	bne.n	80020ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2140      	movs	r1, #64	@ 0x40
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f814 	bl	800218e <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e006      	b.n	8002186 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800219e:	e03b      	b.n	8002218 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d037      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a8:	f7fe fd06 	bl	8000bb8 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	6a3a      	ldr	r2, [r7, #32]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d302      	bcc.n	80021be <UART_WaitOnFlagUntilTimeout+0x30>
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e03a      	b.n	8002238 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d023      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b80      	cmp	r3, #128	@ 0x80
 80021d4:	d020      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b40      	cmp	r3, #64	@ 0x40
 80021da:	d01d      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d116      	bne.n	8002218 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f81d 	bl	8002240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2208      	movs	r2, #8
 800220a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e00f      	b.n	8002238 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	429a      	cmp	r2, r3
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	429a      	cmp	r2, r3
 8002234:	d0b4      	beq.n	80021a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002240:	b480      	push	{r7}
 8002242:	b095      	sub	sp, #84	@ 0x54
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	330c      	adds	r3, #12
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002252:	e853 3f00 	ldrex	r3, [r3]
 8002256:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800225e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	330c      	adds	r3, #12
 8002266:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002268:	643a      	str	r2, [r7, #64]	@ 0x40
 800226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800226e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002270:	e841 2300 	strex	r3, r2, [r1]
 8002274:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e5      	bne.n	8002248 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3314      	adds	r3, #20
 8002282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	e853 3f00 	ldrex	r3, [r3]
 800228a:	61fb      	str	r3, [r7, #28]
   return(result);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3314      	adds	r3, #20
 800229a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800229c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800229e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a4:	e841 2300 	strex	r3, r2, [r1]
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e5      	bne.n	800227c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d119      	bne.n	80022ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	e853 3f00 	ldrex	r3, [r3]
 80022c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f023 0310 	bic.w	r3, r3, #16
 80022ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022d8:	61ba      	str	r2, [r7, #24]
 80022da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022dc:	6979      	ldr	r1, [r7, #20]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	e841 2300 	strex	r3, r2, [r1]
 80022e4:	613b      	str	r3, [r7, #16]
   return(result);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e5      	bne.n	80022b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80022fa:	bf00      	nop
 80022fc:	3754      	adds	r7, #84	@ 0x54
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800230c:	b0c0      	sub	sp, #256	@ 0x100
 800230e:	af00      	add	r7, sp, #0
 8002310:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	ea40 0301 	orr.w	r3, r0, r1
 8002330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	431a      	orrs	r2, r3
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	431a      	orrs	r2, r3
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002360:	f021 010c 	bic.w	r1, r1, #12
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800236e:	430b      	orrs	r3, r1
 8002370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	6999      	ldr	r1, [r3, #24]
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	ea40 0301 	orr.w	r3, r0, r1
 800238e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b8f      	ldr	r3, [pc, #572]	@ (80025d4 <UART_SetConfig+0x2cc>)
 8002398:	429a      	cmp	r2, r3
 800239a:	d005      	beq.n	80023a8 <UART_SetConfig+0xa0>
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b8d      	ldr	r3, [pc, #564]	@ (80025d8 <UART_SetConfig+0x2d0>)
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d104      	bne.n	80023b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023a8:	f7ff fb2e 	bl	8001a08 <HAL_RCC_GetPCLK2Freq>
 80023ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023b0:	e003      	b.n	80023ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023b2:	f7ff fb15 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 80023b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c4:	f040 810c 	bne.w	80025e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023cc:	2200      	movs	r2, #0
 80023ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023da:	4622      	mov	r2, r4
 80023dc:	462b      	mov	r3, r5
 80023de:	1891      	adds	r1, r2, r2
 80023e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023e2:	415b      	adcs	r3, r3
 80023e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023ea:	4621      	mov	r1, r4
 80023ec:	eb12 0801 	adds.w	r8, r2, r1
 80023f0:	4629      	mov	r1, r5
 80023f2:	eb43 0901 	adc.w	r9, r3, r1
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800240a:	4690      	mov	r8, r2
 800240c:	4699      	mov	r9, r3
 800240e:	4623      	mov	r3, r4
 8002410:	eb18 0303 	adds.w	r3, r8, r3
 8002414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002418:	462b      	mov	r3, r5
 800241a:	eb49 0303 	adc.w	r3, r9, r3
 800241e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800242e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002436:	460b      	mov	r3, r1
 8002438:	18db      	adds	r3, r3, r3
 800243a:	653b      	str	r3, [r7, #80]	@ 0x50
 800243c:	4613      	mov	r3, r2
 800243e:	eb42 0303 	adc.w	r3, r2, r3
 8002442:	657b      	str	r3, [r7, #84]	@ 0x54
 8002444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800244c:	f7fd ff0a 	bl	8000264 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4b61      	ldr	r3, [pc, #388]	@ (80025dc <UART_SetConfig+0x2d4>)
 8002456:	fba3 2302 	umull	r2, r3, r3, r2
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	011c      	lsls	r4, r3, #4
 800245e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002462:	2200      	movs	r2, #0
 8002464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002468:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800246c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002470:	4642      	mov	r2, r8
 8002472:	464b      	mov	r3, r9
 8002474:	1891      	adds	r1, r2, r2
 8002476:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002478:	415b      	adcs	r3, r3
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800247c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002480:	4641      	mov	r1, r8
 8002482:	eb12 0a01 	adds.w	sl, r2, r1
 8002486:	4649      	mov	r1, r9
 8002488:	eb43 0b01 	adc.w	fp, r3, r1
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800249c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a0:	4692      	mov	sl, r2
 80024a2:	469b      	mov	fp, r3
 80024a4:	4643      	mov	r3, r8
 80024a6:	eb1a 0303 	adds.w	r3, sl, r3
 80024aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024ae:	464b      	mov	r3, r9
 80024b0:	eb4b 0303 	adc.w	r3, fp, r3
 80024b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024cc:	460b      	mov	r3, r1
 80024ce:	18db      	adds	r3, r3, r3
 80024d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80024d2:	4613      	mov	r3, r2
 80024d4:	eb42 0303 	adc.w	r3, r2, r3
 80024d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80024da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024e2:	f7fd febf 	bl	8000264 <__aeabi_uldivmod>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <UART_SetConfig+0x2d4>)
 80024ee:	fba3 2301 	umull	r2, r3, r3, r1
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2264      	movs	r2, #100	@ 0x64
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	1acb      	subs	r3, r1, r3
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002502:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <UART_SetConfig+0x2d4>)
 8002504:	fba3 2302 	umull	r2, r3, r3, r2
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002510:	441c      	add	r4, r3
 8002512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800251c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002524:	4642      	mov	r2, r8
 8002526:	464b      	mov	r3, r9
 8002528:	1891      	adds	r1, r2, r2
 800252a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800252c:	415b      	adcs	r3, r3
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002534:	4641      	mov	r1, r8
 8002536:	1851      	adds	r1, r2, r1
 8002538:	6339      	str	r1, [r7, #48]	@ 0x30
 800253a:	4649      	mov	r1, r9
 800253c:	414b      	adcs	r3, r1
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800254c:	4659      	mov	r1, fp
 800254e:	00cb      	lsls	r3, r1, #3
 8002550:	4651      	mov	r1, sl
 8002552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002556:	4651      	mov	r1, sl
 8002558:	00ca      	lsls	r2, r1, #3
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	4603      	mov	r3, r0
 8002560:	4642      	mov	r2, r8
 8002562:	189b      	adds	r3, r3, r2
 8002564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002568:	464b      	mov	r3, r9
 800256a:	460a      	mov	r2, r1
 800256c:	eb42 0303 	adc.w	r3, r2, r3
 8002570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002580:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002588:	460b      	mov	r3, r1
 800258a:	18db      	adds	r3, r3, r3
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800258e:	4613      	mov	r3, r2
 8002590:	eb42 0303 	adc.w	r3, r2, r3
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800259a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800259e:	f7fd fe61 	bl	8000264 <__aeabi_uldivmod>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <UART_SetConfig+0x2d4>)
 80025a8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	2164      	movs	r1, #100	@ 0x64
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	3332      	adds	r3, #50	@ 0x32
 80025ba:	4a08      	ldr	r2, [pc, #32]	@ (80025dc <UART_SetConfig+0x2d4>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4422      	add	r2, r4
 80025ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025d0:	e106      	b.n	80027e0 <UART_SetConfig+0x4d8>
 80025d2:	bf00      	nop
 80025d4:	40011000 	.word	0x40011000
 80025d8:	40011400 	.word	0x40011400
 80025dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025f2:	4642      	mov	r2, r8
 80025f4:	464b      	mov	r3, r9
 80025f6:	1891      	adds	r1, r2, r2
 80025f8:	6239      	str	r1, [r7, #32]
 80025fa:	415b      	adcs	r3, r3
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002602:	4641      	mov	r1, r8
 8002604:	1854      	adds	r4, r2, r1
 8002606:	4649      	mov	r1, r9
 8002608:	eb43 0501 	adc.w	r5, r3, r1
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	00eb      	lsls	r3, r5, #3
 8002616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	4614      	mov	r4, r2
 800261e:	461d      	mov	r5, r3
 8002620:	4643      	mov	r3, r8
 8002622:	18e3      	adds	r3, r4, r3
 8002624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002628:	464b      	mov	r3, r9
 800262a:	eb45 0303 	adc.w	r3, r5, r3
 800262e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800263e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800264e:	4629      	mov	r1, r5
 8002650:	008b      	lsls	r3, r1, #2
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002658:	4621      	mov	r1, r4
 800265a:	008a      	lsls	r2, r1, #2
 800265c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002660:	f7fd fe00 	bl	8000264 <__aeabi_uldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4b60      	ldr	r3, [pc, #384]	@ (80027ec <UART_SetConfig+0x4e4>)
 800266a:	fba3 2302 	umull	r2, r3, r3, r2
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	011c      	lsls	r4, r3, #4
 8002672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002676:	2200      	movs	r2, #0
 8002678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800267c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	1891      	adds	r1, r2, r2
 800268a:	61b9      	str	r1, [r7, #24]
 800268c:	415b      	adcs	r3, r3
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002694:	4641      	mov	r1, r8
 8002696:	1851      	adds	r1, r2, r1
 8002698:	6139      	str	r1, [r7, #16]
 800269a:	4649      	mov	r1, r9
 800269c:	414b      	adcs	r3, r1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026ac:	4659      	mov	r1, fp
 80026ae:	00cb      	lsls	r3, r1, #3
 80026b0:	4651      	mov	r1, sl
 80026b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b6:	4651      	mov	r1, sl
 80026b8:	00ca      	lsls	r2, r1, #3
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	4642      	mov	r2, r8
 80026c2:	189b      	adds	r3, r3, r2
 80026c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026c8:	464b      	mov	r3, r9
 80026ca:	460a      	mov	r2, r1
 80026cc:	eb42 0303 	adc.w	r3, r2, r3
 80026d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026ec:	4649      	mov	r1, r9
 80026ee:	008b      	lsls	r3, r1, #2
 80026f0:	4641      	mov	r1, r8
 80026f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026f6:	4641      	mov	r1, r8
 80026f8:	008a      	lsls	r2, r1, #2
 80026fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026fe:	f7fd fdb1 	bl	8000264 <__aeabi_uldivmod>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4611      	mov	r1, r2
 8002708:	4b38      	ldr	r3, [pc, #224]	@ (80027ec <UART_SetConfig+0x4e4>)
 800270a:	fba3 2301 	umull	r2, r3, r3, r1
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2264      	movs	r2, #100	@ 0x64
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	1acb      	subs	r3, r1, r3
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	3332      	adds	r3, #50	@ 0x32
 800271c:	4a33      	ldr	r2, [pc, #204]	@ (80027ec <UART_SetConfig+0x4e4>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002728:	441c      	add	r4, r3
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800272e:	2200      	movs	r2, #0
 8002730:	673b      	str	r3, [r7, #112]	@ 0x70
 8002732:	677a      	str	r2, [r7, #116]	@ 0x74
 8002734:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	1891      	adds	r1, r2, r2
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	415b      	adcs	r3, r3
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002748:	4641      	mov	r1, r8
 800274a:	1851      	adds	r1, r2, r1
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	4649      	mov	r1, r9
 8002750:	414b      	adcs	r3, r1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002760:	4659      	mov	r1, fp
 8002762:	00cb      	lsls	r3, r1, #3
 8002764:	4651      	mov	r1, sl
 8002766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276a:	4651      	mov	r1, sl
 800276c:	00ca      	lsls	r2, r1, #3
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	4603      	mov	r3, r0
 8002774:	4642      	mov	r2, r8
 8002776:	189b      	adds	r3, r3, r2
 8002778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800277a:	464b      	mov	r3, r9
 800277c:	460a      	mov	r2, r1
 800277e:	eb42 0303 	adc.w	r3, r2, r3
 8002782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	663b      	str	r3, [r7, #96]	@ 0x60
 800278e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800279c:	4649      	mov	r1, r9
 800279e:	008b      	lsls	r3, r1, #2
 80027a0:	4641      	mov	r1, r8
 80027a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a6:	4641      	mov	r1, r8
 80027a8:	008a      	lsls	r2, r1, #2
 80027aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027ae:	f7fd fd59 	bl	8000264 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <UART_SetConfig+0x4e4>)
 80027b8:	fba3 1302 	umull	r1, r3, r3, r2
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	2164      	movs	r1, #100	@ 0x64
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	3332      	adds	r3, #50	@ 0x32
 80027ca:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <UART_SetConfig+0x4e4>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	f003 020f 	and.w	r2, r3, #15
 80027d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4422      	add	r2, r4
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027e6:	46bd      	mov	sp, r7
 80027e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ec:	51eb851f 	.word	0x51eb851f

080027f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f103 0208 	add.w	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f103 0208 	add.w	r2, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0208 	add.w	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002824:	f240 1019 	movw	r0, #281	@ 0x119
 8002828:	f003 fa90 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002842:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002846:	f003 fa81 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d103      	bne.n	8002872 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e00c      	b.n	800288c <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3308      	adds	r3, #8
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e002      	b.n	8002880 <vListInsert+0x2e>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d2f6      	bcs.n	800287a <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80028b8:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80028bc:	f003 fa46 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6892      	ldr	r2, [r2, #8]
 80028de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6852      	ldr	r2, [r2, #4]
 80028e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d103      	bne.n	80028fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f240 101d 	movw	r0, #285	@ 0x11d
 8002916:	f003 fa55 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002932:	2301      	movs	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d05d      	beq.n	8002a1a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d059      	beq.n	8002a1a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	2100      	movs	r1, #0
 8002970:	fba3 2302 	umull	r2, r3, r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d000      	beq.n	800297a <xQueueGenericReset+0x52>
 8002978:	2101      	movs	r1, #1
 800297a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d14c      	bne.n	8002a1a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002980:	f001 ffa0 	bl	80048c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	441a      	add	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2200      	movs	r2, #0
 800299e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	3b01      	subs	r3, #1
 80029b2:	6939      	ldr	r1, [r7, #16]
 80029b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	441a      	add	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	22ff      	movs	r2, #255	@ 0xff
 80029c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	22ff      	movs	r2, #255	@ 0xff
 80029cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01a      	beq.n	8002a14 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	3310      	adds	r3, #16
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 f884 	bl	8003af0 <xTaskRemoveFromEventList>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <xQueueGenericReset+0x128>)
 80029f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	e009      	b.n	8002a14 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3310      	adds	r3, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fef3 	bl	80027f0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	3324      	adds	r3, #36	@ 0x24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff feee 	bl	80027f0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002a14:	f001 ff88 	bl	8004928 <vPortExitCritical>
 8002a18:	e001      	b.n	8002a1e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <xQueueGenericReset+0x114>
    __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60bb      	str	r3, [r7, #8]
}
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	2096      	movs	r0, #150	@ 0x96
 8002a42:	f003 f9bf 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002a46:	697b      	ldr	r3, [r7, #20]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	e000ed04 	.word	0xe000ed04

08002a54 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02e      	beq.n	8002aca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	fba3 2302 	umull	r2, r3, r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d000      	beq.n	8002a7c <xQueueGenericCreate+0x28>
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d123      	bne.n	8002aca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a8a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002a8e:	d81c      	bhi.n	8002aca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3350      	adds	r3, #80	@ 0x50
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 f83e 	bl	8004b20 <pvPortMalloc>
 8002aa4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01d      	beq.n	8002ae8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3350      	adds	r3, #80	@ 0x50
 8002ab4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f81e 	bl	8002b04 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002ac8:	e00e      	b.n	8002ae8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <xQueueGenericCreate+0x94>
    __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	613b      	str	r3, [r7, #16]
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 fb04 	bl	80060f8 <SEGGER_SYSVIEW_ShrinkId>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4619      	mov	r1, r3
 8002af4:	2098      	movs	r0, #152	@ 0x98
 8002af6:	f003 f965 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002afa:	69fb      	ldr	r3, [r7, #28]
    }
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e002      	b.n	8002b26 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b32:	2101      	movs	r1, #1
 8002b34:	69b8      	ldr	r0, [r7, #24]
 8002b36:	f7ff fef7 	bl	8002928 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	@ 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <xQueueReceive+0x32>
    __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	623b      	str	r3, [r7, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	e7fd      	b.n	8002b7a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <xQueueReceive+0x40>
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <xQueueReceive+0x44>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <xQueueReceive+0x46>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <xQueueReceive+0x62>
    __asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	61fb      	str	r3, [r7, #28]
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bae:	f001 f9c1 	bl	8003f34 <xTaskGetSchedulerState>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <xQueueReceive+0x72>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <xQueueReceive+0x76>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueReceive+0x78>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <xQueueReceive+0x94>
    __asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	61bb      	str	r3, [r7, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002be0:	f001 fe70 	bl	80048c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d023      	beq.n	8002c38 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bf4:	f000 f898 	bl	8002d28 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	1e5a      	subs	r2, r3, #1
 8002bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfe:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00f      	beq.n	8002c28 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0a:	3310      	adds	r3, #16
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 ff6f 	bl	8003af0 <xTaskRemoveFromEventList>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c18:	4b42      	ldr	r3, [pc, #264]	@ (8002d24 <xQueueReceive+0x1d8>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c28:	f001 fe7e 	bl	8004928 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	20a4      	movs	r0, #164	@ 0xa4
 8002c30:	f003 f8c8 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e071      	b.n	8002d1c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c3e:	f001 fe73 	bl	8004928 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002c42:	2100      	movs	r1, #0
 8002c44:	20a4      	movs	r0, #164	@ 0xa4
 8002c46:	f003 f8bd 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e066      	b.n	8002d1c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 f829 	bl	8003cb0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c62:	f001 fe61 	bl	8004928 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c66:	f000 fbfb 	bl	8003460 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c6a:	f001 fe2b 	bl	80048c4 <vPortEnterCritical>
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d103      	bne.n	8002c84 <xQueueReceive+0x138>
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d103      	bne.n	8002c9a <xQueueReceive+0x14e>
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c9a:	f001 fe45 	bl	8004928 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c9e:	1d3a      	adds	r2, r7, #4
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f81a 	bl	8003ce0 <xTaskCheckForTimeOut>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d123      	bne.n	8002cfa <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cb4:	f000 f8b0 	bl	8002e18 <prvIsQueueEmpty>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d017      	beq.n	8002cee <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc0:	3324      	adds	r3, #36	@ 0x24
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fea0 	bl	8003a0c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cce:	f000 f851 	bl	8002d74 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cd2:	f000 fbd3 	bl	800347c <xTaskResumeAll>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d181      	bne.n	8002be0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <xQueueReceive+0x1d8>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	e778      	b.n	8002be0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cf0:	f000 f840 	bl	8002d74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cf4:	f000 fbc2 	bl	800347c <xTaskResumeAll>
 8002cf8:	e772      	b.n	8002be0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cfc:	f000 f83a 	bl	8002d74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d00:	f000 fbbc 	bl	800347c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d06:	f000 f887 	bl	8002e18 <prvIsQueueEmpty>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f43f af67 	beq.w	8002be0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002d12:	2100      	movs	r1, #0
 8002d14:	20a4      	movs	r0, #164	@ 0xa4
 8002d16:	f003 f855 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002d1a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3730      	adds	r7, #48	@ 0x30
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	e000ed04 	.word	0xe000ed04

08002d28 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d018      	beq.n	8002d6c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	441a      	add	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d303      	bcc.n	8002d5c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68d9      	ldr	r1, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	461a      	mov	r2, r3
 8002d66:	6838      	ldr	r0, [r7, #0]
 8002d68:	f003 fc6a 	bl	8006640 <memcpy>
    }
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d7c:	f001 fda2 	bl	80048c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d86:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d88:	e011      	b.n	8002dae <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3324      	adds	r3, #36	@ 0x24
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 feaa 	bl	8003af0 <xTaskRemoveFromEventList>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002da2:	f001 f809 	bl	8003db8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	dce9      	bgt.n	8002d8a <prvUnlockQueue+0x16>
 8002db6:	e000      	b.n	8002dba <prvUnlockQueue+0x46>
                    break;
 8002db8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	22ff      	movs	r2, #255	@ 0xff
 8002dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002dc2:	f001 fdb1 	bl	8004928 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002dc6:	f001 fd7d 	bl	80048c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dd0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dd2:	e011      	b.n	8002df8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d012      	beq.n	8002e02 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3310      	adds	r3, #16
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fe85 	bl	8003af0 <xTaskRemoveFromEventList>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002dec:	f000 ffe4 	bl	8003db8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002df0:	7bbb      	ldrb	r3, [r7, #14]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	dce9      	bgt.n	8002dd4 <prvUnlockQueue+0x60>
 8002e00:	e000      	b.n	8002e04 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e02:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	22ff      	movs	r2, #255	@ 0xff
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002e0c:	f001 fd8c 	bl	8004928 <vPortExitCritical>
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e20:	f001 fd50 	bl	80048c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e001      	b.n	8002e36 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e36:	f001 fd77 	bl	8004928 <vPortExitCritical>

    return xReturn;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	60fb      	str	r3, [r7, #12]
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d024      	beq.n	8002ec0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e01e      	b.n	8002eba <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002e7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <vQueueAddToRegistry+0x9c>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d105      	bne.n	8002e98 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <vQueueAddToRegistry+0x9c>)
 8002e92:	4413      	add	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
                    break;
 8002e96:	e013      	b.n	8002ec0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <vQueueAddToRegistry+0x70>
 8002e9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ee0 <vQueueAddToRegistry+0x9c>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee0 <vQueueAddToRegistry+0x9c>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	d9dd      	bls.n	8002e7c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002ed2:	20b6      	movs	r0, #182	@ 0xb6
 8002ed4:	f002 ff3a 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200000cc 	.word	0x200000cc

08002ee4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ef4:	f001 fce6 	bl	80048c4 <vPortEnterCritical>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d103      	bne.n	8002f0e <vQueueWaitForMessageRestricted+0x2a>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d103      	bne.n	8002f24 <vQueueWaitForMessageRestricted+0x40>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f24:	f001 fd00 	bl	8004928 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3324      	adds	r3, #36	@ 0x24
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fd8f 	bl	8003a5c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff18 	bl	8002d74 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002f44:	20b9      	movs	r0, #185	@ 0xb9
 8002f46:	f002 ff01 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08a      	sub	sp, #40	@ 0x28
 8002f56:	af04      	add	r7, sp, #16
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 fddb 	bl	8004b20 <pvPortMalloc>
 8002f6a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d013      	beq.n	8002f9a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002f72:	2058      	movs	r0, #88	@ 0x58
 8002f74:	f001 fdd4 	bl	8004b20 <pvPortMalloc>
 8002f78:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002f80:	2258      	movs	r2, #88	@ 0x58
 8002f82:	2100      	movs	r1, #0
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f003 fb2e 	bl	80065e6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f90:	e005      	b.n	8002f9e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002f92:	6938      	ldr	r0, [r7, #16]
 8002f94:	f001 fe18 	bl	8004bc8 <vPortFree>
 8002f98:	e001      	b.n	8002f9e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	9302      	str	r3, [sp, #8]
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f82d 	bl	800301a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002fc0:	697b      	ldr	r3, [r7, #20]
    }
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b088      	sub	sp, #32
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff ffb3 	bl	8002f52 <prvCreateTask>
 8002fec:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002ff4:	6938      	ldr	r0, [r7, #16]
 8002ff6:	f000 f8a1 	bl	800313c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e002      	b.n	8003006 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	4619      	mov	r1, r3
 800300a:	20c2      	movs	r0, #194	@ 0xc2
 800300c:	f002 feda 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003010:	697b      	ldr	r3, [r7, #20]
    }
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b088      	sub	sp, #32
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	21a5      	movs	r1, #165	@ 0xa5
 8003034:	f003 fad7 	bl	80065e6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003042:	3b01      	subs	r3, #1
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f023 0307 	bic.w	r3, r3, #7
 8003050:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	617b      	str	r3, [r7, #20]
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01e      	beq.n	80030b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e012      	b.n	80030a6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	7819      	ldrb	r1, [r3, #0]
 8003088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	3334      	adds	r3, #52	@ 0x34
 8003090:	460a      	mov	r2, r1
 8003092:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4413      	add	r3, r2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3301      	adds	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d9e9      	bls.n	8003080 <prvInitialiseNewTask+0x66>
 80030ac:	e000      	b.n	80030b0 <prvInitialiseNewTask+0x96>
            {
                break;
 80030ae:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d90b      	bls.n	80030d6 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	613b      	str	r3, [r7, #16]
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d901      	bls.n	80030e0 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030dc:	2304      	movs	r3, #4
 80030de:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ea:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	3304      	adds	r3, #4
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fb9f 	bl	8002834 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	3318      	adds	r3, #24
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fb9a 	bl	8002834 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003104:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003108:	f1c3 0205 	rsb	r2, r3, #5
 800310c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	69b8      	ldr	r0, [r7, #24]
 800311c:	f001 fa52 	bl	80045c4 <pxPortInitialiseStack>
 8003120:	4602      	mov	r2, r0
 8003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003124:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003130:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003132:	bf00      	nop
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800313c:	b5b0      	push	{r4, r5, r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003144:	f001 fbbe 	bl	80048c4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <prvAddNewTaskToReadyList+0x150>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a4f      	ldr	r2, [pc, #316]	@ (800328c <prvAddNewTaskToReadyList+0x150>)
 8003150:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003152:	4b4f      	ldr	r3, [pc, #316]	@ (8003290 <prvAddNewTaskToReadyList+0x154>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800315a:	4a4d      	ldr	r2, [pc, #308]	@ (8003290 <prvAddNewTaskToReadyList+0x154>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003160:	4b4a      	ldr	r3, [pc, #296]	@ (800328c <prvAddNewTaskToReadyList+0x150>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d110      	bne.n	800318a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003168:	f000 fe4a 	bl	8003e00 <prvInitialiseTaskLists>
 800316c:	e00d      	b.n	800318a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800316e:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <prvAddNewTaskToReadyList+0x158>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003176:	4b46      	ldr	r3, [pc, #280]	@ (8003290 <prvAddNewTaskToReadyList+0x154>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	429a      	cmp	r2, r3
 8003182:	d802      	bhi.n	800318a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003184:	4a42      	ldr	r2, [pc, #264]	@ (8003290 <prvAddNewTaskToReadyList+0x154>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800318a:	4b43      	ldr	r3, [pc, #268]	@ (8003298 <prvAddNewTaskToReadyList+0x15c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a41      	ldr	r2, [pc, #260]	@ (8003298 <prvAddNewTaskToReadyList+0x15c>)
 8003192:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003194:	4b40      	ldr	r3, [pc, #256]	@ (8003298 <prvAddNewTaskToReadyList+0x15c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <prvAddNewTaskToReadyList+0x94>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fe81 	bl	8005eac <SEGGER_SYSVIEW_OnTaskCreate>
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	461d      	mov	r5, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461c      	mov	r4, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	1ae3      	subs	r3, r4, r3
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	462b      	mov	r3, r5
 80031cc:	f003 f972 	bl	80064b4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 feee 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	2201      	movs	r2, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	4b2e      	ldr	r3, [pc, #184]	@ (800329c <prvAddNewTaskToReadyList+0x160>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	4a2d      	ldr	r2, [pc, #180]	@ (800329c <prvAddNewTaskToReadyList+0x160>)
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ee:	492c      	ldr	r1, [pc, #176]	@ (80032a0 <prvAddNewTaskToReadyList+0x164>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3304      	adds	r3, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	3204      	adds	r2, #4
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <prvAddNewTaskToReadyList+0x164>)
 800322e:	441a      	add	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	615a      	str	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003238:	4919      	ldr	r1, [pc, #100]	@ (80032a0 <prvAddNewTaskToReadyList+0x164>)
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	4814      	ldr	r0, [pc, #80]	@ (80032a0 <prvAddNewTaskToReadyList+0x164>)
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4403      	add	r3, r0
 8003258:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800325a:	f001 fb65 	bl	8004928 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800325e:	4b0d      	ldr	r3, [pc, #52]	@ (8003294 <prvAddNewTaskToReadyList+0x158>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003266:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <prvAddNewTaskToReadyList+0x154>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	429a      	cmp	r2, r3
 8003272:	d207      	bcs.n	8003284 <prvAddNewTaskToReadyList+0x148>
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <prvAddNewTaskToReadyList+0x168>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	200001e4 	.word	0x200001e4
 8003290:	2000010c 	.word	0x2000010c
 8003294:	200001f0 	.word	0x200001f0
 8003298:	20000200 	.word	0x20000200
 800329c:	200001ec 	.word	0x200001ec
 80032a0:	20000110 	.word	0x20000110
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80032ba:	f000 f8d1 	bl	8003460 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80032be:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <vTaskDelay+0x68>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d00b      	beq.n	80032de <vTaskDelay+0x36>
    __asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	60bb      	str	r3, [r7, #8]
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032de:	2100      	movs	r1, #0
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fe49 	bl	8003f78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80032e6:	f000 f8c9 	bl	800347c <xTaskResumeAll>
 80032ea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80032f2:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <vTaskDelay+0x6c>)
 80032f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003302:	20c5      	movs	r0, #197	@ 0xc5
 8003304:	f002 fd22 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	2000020c 	.word	0x2000020c
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	@ 0x28
 800331c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800331e:	2301      	movs	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e011      	b.n	8003350 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800332c:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <prvCreateIdleTasks+0x88>)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4413      	add	r3, r2
 8003332:	7819      	ldrb	r1, [r3, #0]
 8003334:	1d3a      	adds	r2, r7, #4
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	4413      	add	r3, r2
 800333a:	460a      	mov	r2, r1
 800333c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800333e:	1d3a      	adds	r2, r7, #4
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4413      	add	r3, r2
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b09      	cmp	r3, #9
 8003354:	ddea      	ble.n	800332c <prvCreateIdleTasks+0x14>
 8003356:	e000      	b.n	800335a <prvCreateIdleTasks+0x42>
        {
            break;
 8003358:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e015      	b.n	800338c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003360:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <prvCreateIdleTasks+0x8c>)
 8003362:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4a0f      	ldr	r2, [pc, #60]	@ (80033a8 <prvCreateIdleTasks+0x90>)
 800336a:	4413      	add	r3, r2
 800336c:	1d39      	adds	r1, r7, #4
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2300      	movs	r3, #0
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2300      	movs	r3, #0
 8003376:	2282      	movs	r2, #130	@ 0x82
 8003378:	6938      	ldr	r0, [r7, #16]
 800337a:	f7ff fe26 	bl	8002fca <xTaskCreate>
 800337e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	3301      	adds	r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	dde6      	ble.n	8003360 <prvCreateIdleTasks+0x48>
 8003392:	e000      	b.n	8003396 <prvCreateIdleTasks+0x7e>
        {
            break;
 8003394:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003396:	69fb      	ldr	r3, [r7, #28]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	080066ac 	.word	0x080066ac
 80033a4:	08003dd1 	.word	0x08003dd1
 80033a8:	20000208 	.word	0x20000208

080033ac <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80033b2:	f7ff ffb1 	bl	8003318 <prvCreateIdleTasks>
 80033b6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80033be:	f000 fe69 	bl	8004094 <xTimerCreateTimerTask>
 80033c2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d124      	bne.n	8003414 <vTaskStartScheduler+0x68>
    __asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60bb      	str	r3, [r7, #8]
}
 80033dc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <vTaskStartScheduler+0x9c>)
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80033e6:	4b19      	ldr	r3, [pc, #100]	@ (800344c <vTaskStartScheduler+0xa0>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033ec:	4b18      	ldr	r3, [pc, #96]	@ (8003450 <vTaskStartScheduler+0xa4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80033f2:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <vTaskStartScheduler+0xa8>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <vTaskStartScheduler+0xac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d102      	bne.n	8003404 <vTaskStartScheduler+0x58>
 80033fe:	f002 fd39 	bl	8005e74 <SEGGER_SYSVIEW_OnIdle>
 8003402:	e004      	b.n	800340e <vTaskStartScheduler+0x62>
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <vTaskStartScheduler+0xac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f002 fd91 	bl	8005f30 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800340e:	f001 f969 	bl	80046e4 <xPortStartScheduler>
 8003412:	e00f      	b.n	8003434 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d10b      	bne.n	8003434 <vTaskStartScheduler+0x88>
    __asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	607b      	str	r3, [r7, #4]
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <vTaskStartScheduler+0xb0>)
 8003436:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003438:	20cd      	movs	r0, #205	@ 0xcd
 800343a:	f002 fc87 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000204 	.word	0x20000204
 800344c:	200001f0 	.word	0x200001f0
 8003450:	200001e8 	.word	0x200001e8
 8003454:	20000208 	.word	0x20000208
 8003458:	2000010c 	.word	0x2000010c
 800345c:	20000014 	.word	0x20000014

08003460 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003464:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <vTaskSuspendAll+0x18>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a03      	ldr	r2, [pc, #12]	@ (8003478 <vTaskSuspendAll+0x18>)
 800346c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800346e:	20cf      	movs	r0, #207	@ 0xcf
 8003470:	f002 fc6c 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2000020c 	.word	0x2000020c

0800347c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800348a:	f001 fa1b 	bl	80048c4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003492:	4b7a      	ldr	r3, [pc, #488]	@ (800367c <xTaskResumeAll+0x200>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <xTaskResumeAll+0x36>
    __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	603b      	str	r3, [r7, #0]
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	e7fd      	b.n	80034ae <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80034b2:	4b72      	ldr	r3, [pc, #456]	@ (800367c <xTaskResumeAll+0x200>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	4a70      	ldr	r2, [pc, #448]	@ (800367c <xTaskResumeAll+0x200>)
 80034ba:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80034bc:	4b6f      	ldr	r3, [pc, #444]	@ (800367c <xTaskResumeAll+0x200>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 80ce 	bne.w	8003662 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003680 <xTaskResumeAll+0x204>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80c9 	beq.w	8003662 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d0:	e092      	b.n	80035f8 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003684 <xTaskResumeAll+0x208>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	6a12      	ldr	r2, [r2, #32]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	69d2      	ldr	r2, [r2, #28]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3318      	adds	r3, #24
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d103      	bne.n	8003508 <xTaskResumeAll+0x8c>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	@ 0x28
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	68d2      	ldr	r2, [r2, #12]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	6892      	ldr	r2, [r2, #8]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	429a      	cmp	r2, r3
 800353c:	d103      	bne.n	8003546 <xTaskResumeAll+0xca>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4618      	mov	r0, r3
 800355a:	f002 fd2b 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	2201      	movs	r2, #1
 8003564:	409a      	lsls	r2, r3
 8003566:	4b48      	ldr	r3, [pc, #288]	@ (8003688 <xTaskResumeAll+0x20c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	4a46      	ldr	r2, [pc, #280]	@ (8003688 <xTaskResumeAll+0x20c>)
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003574:	4945      	ldr	r1, [pc, #276]	@ (800368c <xTaskResumeAll+0x210>)
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3304      	adds	r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	3204      	adds	r2, #4
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4a36      	ldr	r2, [pc, #216]	@ (800368c <xTaskResumeAll+0x210>)
 80035b4:	441a      	add	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	615a      	str	r2, [r3, #20]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035be:	4933      	ldr	r1, [pc, #204]	@ (800368c <xTaskResumeAll+0x210>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035d0:	1c59      	adds	r1, r3, #1
 80035d2:	482e      	ldr	r0, [pc, #184]	@ (800368c <xTaskResumeAll+0x210>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4403      	add	r3, r0
 80035de:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003690 <xTaskResumeAll+0x214>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d904      	bls.n	80035f8 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80035ee:	4a29      	ldr	r2, [pc, #164]	@ (8003694 <xTaskResumeAll+0x218>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2101      	movs	r1, #1
 80035f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <xTaskResumeAll+0x208>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f af68 	bne.w	80034d2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003608:	f000 fc78 	bl	8003efc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800360c:	4b22      	ldr	r3, [pc, #136]	@ (8003698 <xTaskResumeAll+0x21c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d012      	beq.n	800363e <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003618:	f000 f86a 	bl	80036f0 <xTaskIncrementTick>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003622:	4a1c      	ldr	r2, [pc, #112]	@ (8003694 <xTaskResumeAll+0x218>)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2101      	movs	r1, #1
 8003628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3b01      	subs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ef      	bne.n	8003618 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003638:	4b17      	ldr	r3, [pc, #92]	@ (8003698 <xTaskResumeAll+0x21c>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800363e:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <xTaskResumeAll+0x218>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800364a:	2301      	movs	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800364e:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <xTaskResumeAll+0x214>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4b12      	ldr	r3, [pc, #72]	@ (800369c <xTaskResumeAll+0x220>)
 8003654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003662:	f001 f961 	bl	8004928 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4619      	mov	r1, r3
 800366a:	20d0      	movs	r0, #208	@ 0xd0
 800366c:	f002 fbaa 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003670:	69bb      	ldr	r3, [r7, #24]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	2000020c 	.word	0x2000020c
 8003680:	200001e4 	.word	0x200001e4
 8003684:	200001a4 	.word	0x200001a4
 8003688:	200001ec 	.word	0x200001ec
 800368c:	20000110 	.word	0x20000110
 8003690:	2000010c 	.word	0x2000010c
 8003694:	200001f8 	.word	0x200001f8
 8003698:	200001f4 	.word	0x200001f4
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <xTaskGetTickCount+0x20>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	20d1      	movs	r0, #209	@ 0xd1
 80036b0:	f002 fb88 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80036b4:	687b      	ldr	r3, [r7, #4]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200001e8 	.word	0x200001e8

080036c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ca:	f001 f9e7 	bl	8004a9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <xTaskGetTickCountFromISR+0x28>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	20d2      	movs	r0, #210	@ 0xd2
 80036dc:	f002 fb72 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80036e0:	683b      	ldr	r3, [r7, #0]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200001e8 	.word	0x200001e8

080036f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80036fa:	4b83      	ldr	r3, [pc, #524]	@ (8003908 <xTaskIncrementTick+0x218>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 80f3 	bne.w	80038ea <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003704:	4b81      	ldr	r3, [pc, #516]	@ (800390c <xTaskIncrementTick+0x21c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800370c:	4a7f      	ldr	r2, [pc, #508]	@ (800390c <xTaskIncrementTick+0x21c>)
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d121      	bne.n	800375c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003718:	4b7d      	ldr	r3, [pc, #500]	@ (8003910 <xTaskIncrementTick+0x220>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <xTaskIncrementTick+0x4a>
    __asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	607b      	str	r3, [r7, #4]
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <xTaskIncrementTick+0x46>
 800373a:	4b75      	ldr	r3, [pc, #468]	@ (8003910 <xTaskIncrementTick+0x220>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	4b74      	ldr	r3, [pc, #464]	@ (8003914 <xTaskIncrementTick+0x224>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a72      	ldr	r2, [pc, #456]	@ (8003910 <xTaskIncrementTick+0x220>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4a72      	ldr	r2, [pc, #456]	@ (8003914 <xTaskIncrementTick+0x224>)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b72      	ldr	r3, [pc, #456]	@ (8003918 <xTaskIncrementTick+0x228>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a70      	ldr	r2, [pc, #448]	@ (8003918 <xTaskIncrementTick+0x228>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	f000 fbd0 	bl	8003efc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800375c:	4b6f      	ldr	r3, [pc, #444]	@ (800391c <xTaskIncrementTick+0x22c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	429a      	cmp	r2, r3
 8003764:	f0c0 80ac 	bcc.w	80038c0 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003768:	4b69      	ldr	r3, [pc, #420]	@ (8003910 <xTaskIncrementTick+0x220>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003772:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <xTaskIncrementTick+0x22c>)
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	601a      	str	r2, [r3, #0]
                    break;
 800377a:	e0a1      	b.n	80038c0 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800377c:	4b64      	ldr	r3, [pc, #400]	@ (8003910 <xTaskIncrementTick+0x220>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800378c:	6a3a      	ldr	r2, [r7, #32]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	d203      	bcs.n	800379c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003794:	4a61      	ldr	r2, [pc, #388]	@ (800391c <xTaskIncrementTick+0x22c>)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6013      	str	r3, [r2, #0]
                        break;
 800379a:	e091      	b.n	80038c0 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	6892      	ldr	r2, [r2, #8]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3304      	adds	r3, #4
 80037be:	429a      	cmp	r2, r3
 80037c0:	d103      	bne.n	80037ca <xTaskIncrementTick+0xda>
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01e      	beq.n	8003820 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	6a12      	ldr	r2, [r2, #32]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	69d2      	ldr	r2, [r2, #28]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	3318      	adds	r3, #24
 8003804:	429a      	cmp	r2, r3
 8003806:	d103      	bne.n	8003810 <xTaskIncrementTick+0x120>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4618      	mov	r0, r3
 8003824:	f002 fbc6 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	2201      	movs	r2, #1
 800382e:	409a      	lsls	r2, r3
 8003830:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <xTaskIncrementTick+0x230>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	4a3a      	ldr	r2, [pc, #232]	@ (8003920 <xTaskIncrementTick+0x230>)
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383e:	4939      	ldr	r1, [pc, #228]	@ (8003924 <xTaskIncrementTick+0x234>)
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3304      	adds	r3, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	3204      	adds	r2, #4
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	1d1a      	adds	r2, r3, #4
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4a29      	ldr	r2, [pc, #164]	@ (8003924 <xTaskIncrementTick+0x234>)
 800387e:	441a      	add	r2, r3
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	615a      	str	r2, [r3, #20]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003888:	4926      	ldr	r1, [pc, #152]	@ (8003924 <xTaskIncrementTick+0x234>)
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	4821      	ldr	r0, [pc, #132]	@ (8003924 <xTaskIncrementTick+0x234>)
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4403      	add	r3, r0
 80038a8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <xTaskIncrementTick+0x238>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	429a      	cmp	r2, r3
 80038b6:	f67f af57 	bls.w	8003768 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038be:	e753      	b.n	8003768 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80038c0:	4b19      	ldr	r3, [pc, #100]	@ (8003928 <xTaskIncrementTick+0x238>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c6:	4917      	ldr	r1, [pc, #92]	@ (8003924 <xTaskIncrementTick+0x234>)
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d901      	bls.n	80038dc <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80038dc:	4b13      	ldr	r3, [pc, #76]	@ (800392c <xTaskIncrementTick+0x23c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e8:	e004      	b.n	80038f4 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <xTaskIncrementTick+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003930 <xTaskIncrementTick+0x240>)
 80038f2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	4619      	mov	r1, r3
 80038f8:	20db      	movs	r0, #219	@ 0xdb
 80038fa:	f002 fa63 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	@ 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	2000020c 	.word	0x2000020c
 800390c:	200001e8 	.word	0x200001e8
 8003910:	2000019c 	.word	0x2000019c
 8003914:	200001a0 	.word	0x200001a0
 8003918:	200001fc 	.word	0x200001fc
 800391c:	20000204 	.word	0x20000204
 8003920:	200001ec 	.word	0x200001ec
 8003924:	20000110 	.word	0x20000110
 8003928:	2000010c 	.word	0x2000010c
 800392c:	200001f8 	.word	0x200001f8
 8003930:	200001f4 	.word	0x200001f4

08003934 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800393a:	4b2e      	ldr	r3, [pc, #184]	@ (80039f4 <vTaskSwitchContext+0xc0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003942:	4b2d      	ldr	r3, [pc, #180]	@ (80039f8 <vTaskSwitchContext+0xc4>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003948:	e04f      	b.n	80039ea <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 800394a:	4b2b      	ldr	r3, [pc, #172]	@ (80039f8 <vTaskSwitchContext+0xc4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003950:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <vTaskSwitchContext+0xc8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f1c3 031f 	rsb	r3, r3, #31
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	4926      	ldr	r1, [pc, #152]	@ (8003a00 <vTaskSwitchContext+0xcc>)
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <vTaskSwitchContext+0x5e>
    __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	607b      	str	r3, [r7, #4]
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <vTaskSwitchContext+0x5a>
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <vTaskSwitchContext+0xcc>)
 800399e:	4413      	add	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3308      	adds	r3, #8
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d103      	bne.n	80039c0 <vTaskSwitchContext+0x8c>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003a04 <vTaskSwitchContext+0xd0>)
 80039c8:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80039ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <vTaskSwitchContext+0xd4>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003a04 <vTaskSwitchContext+0xd0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d102      	bne.n	80039dc <vTaskSwitchContext+0xa8>
 80039d6:	f002 fa4d 	bl	8005e74 <SEGGER_SYSVIEW_OnIdle>
 80039da:	e004      	b.n	80039e6 <vTaskSwitchContext+0xb2>
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <vTaskSwitchContext+0xd0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 faa5 	bl	8005f30 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80039e6:	4b07      	ldr	r3, [pc, #28]	@ (8003a04 <vTaskSwitchContext+0xd0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
    }
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	2000020c 	.word	0x2000020c
 80039f8:	200001f8 	.word	0x200001f8
 80039fc:	200001ec 	.word	0x200001ec
 8003a00:	20000110 	.word	0x20000110
 8003a04:	2000010c 	.word	0x2000010c
 8003a08:	20000208 	.word	0x20000208

08003a0c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	60fb      	str	r3, [r7, #12]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <vTaskPlaceOnEventList+0x4c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3318      	adds	r3, #24
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fe ff08 	bl	8002852 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a42:	2101      	movs	r1, #1
 8003a44:	6838      	ldr	r0, [r7, #0]
 8003a46:	f000 fa97 	bl	8003f78 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003a4a:	20e1      	movs	r0, #225	@ 0xe1
 8003a4c:	f002 f97e 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	2000010c 	.word	0x2000010c

08003a5c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	613b      	str	r3, [r7, #16]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <vTaskPlaceOnEventListRestricted+0x90>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	61da      	str	r2, [r3, #28]
 8003a94:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <vTaskPlaceOnEventListRestricted+0x90>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	6892      	ldr	r2, [r2, #8]
 8003a9c:	621a      	str	r2, [r3, #32]
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <vTaskPlaceOnEventListRestricted+0x90>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	3218      	adds	r2, #24
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <vTaskPlaceOnEventListRestricted+0x90>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f103 0218 	add.w	r2, r3, #24
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <vTaskPlaceOnEventListRestricted+0x90>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	68b8      	ldr	r0, [r7, #8]
 8003ad8:	f000 fa4e 	bl	8003f78 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003adc:	20e3      	movs	r0, #227	@ 0xe3
 8003ade:	f002 f935 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000010c 	.word	0x2000010c

08003af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	60fb      	str	r3, [r7, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	e7fd      	b.n	8003b1a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	6a12      	ldr	r2, [r2, #32]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	69d2      	ldr	r2, [r2, #28]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	3318      	adds	r3, #24
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d103      	bne.n	8003b4c <xTaskRemoveFromEventList+0x5c>
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	1e5a      	subs	r2, r3, #1
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <xTaskRemoveFromEventList+0x1a8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d164      	bne.n	8003c2e <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	6892      	ldr	r2, [r2, #8]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	3304      	adds	r3, #4
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d103      	bne.n	8003b92 <xTaskRemoveFromEventList+0xa2>
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2200      	movs	r2, #0
 8003b96:	615a      	str	r2, [r3, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f002 fa05 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	2201      	movs	r2, #1
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8003c9c <xTaskRemoveFromEventList+0x1ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	4a38      	ldr	r2, [pc, #224]	@ (8003c9c <xTaskRemoveFromEventList+0x1ac>)
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc0:	4937      	ldr	r1, [pc, #220]	@ (8003ca0 <xTaskRemoveFromEventList+0x1b0>)
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	3304      	adds	r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	3204      	adds	r2, #4
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	1d1a      	adds	r2, r3, #4
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	609a      	str	r2, [r3, #8]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4a28      	ldr	r2, [pc, #160]	@ (8003ca0 <xTaskRemoveFromEventList+0x1b0>)
 8003c00:	441a      	add	r2, r3
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	615a      	str	r2, [r3, #20]
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0a:	4925      	ldr	r1, [pc, #148]	@ (8003ca0 <xTaskRemoveFromEventList+0x1b0>)
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a3a      	ldr	r2, [r7, #32]
 8003c1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c1c:	1c59      	adds	r1, r3, #1
 8003c1e:	4820      	ldr	r0, [pc, #128]	@ (8003ca0 <xTaskRemoveFromEventList+0x1b0>)
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4403      	add	r3, r0
 8003c2a:	6019      	str	r1, [r3, #0]
 8003c2c:	e01b      	b.n	8003c66 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <xTaskRemoveFromEventList+0x1b4>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	61da      	str	r2, [r3, #28]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	621a      	str	r2, [r3, #32]
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	6a3a      	ldr	r2, [r7, #32]
 8003c48:	3218      	adds	r2, #24
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	f103 0218 	add.w	r2, r3, #24
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	4a12      	ldr	r2, [pc, #72]	@ (8003ca4 <xTaskRemoveFromEventList+0x1b4>)
 8003c5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <xTaskRemoveFromEventList+0x1b4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4a10      	ldr	r2, [pc, #64]	@ (8003ca4 <xTaskRemoveFromEventList+0x1b4>)
 8003c64:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca8 <xTaskRemoveFromEventList+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d905      	bls.n	8003c80 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <xTaskRemoveFromEventList+0x1bc>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e001      	b.n	8003c84 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	4619      	mov	r1, r3
 8003c88:	20e4      	movs	r0, #228	@ 0xe4
 8003c8a:	f002 f89b 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	@ 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	2000020c 	.word	0x2000020c
 8003c9c:	200001ec 	.word	0x200001ec
 8003ca0:	20000110 	.word	0x20000110
 8003ca4:	200001a4 	.word	0x200001a4
 8003ca8:	2000010c 	.word	0x2000010c
 8003cac:	200001f8 	.word	0x200001f8

08003cb0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cb8:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <vTaskInternalSetTimeOutState+0x28>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <vTaskInternalSetTimeOutState+0x2c>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003cc8:	20e7      	movs	r0, #231	@ 0xe7
 8003cca:	f002 f83f 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200001fc 	.word	0x200001fc
 8003cdc:	200001e8 	.word	0x200001e8

08003ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	613b      	str	r3, [r7, #16]
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	60fb      	str	r3, [r7, #12]
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	e7fd      	b.n	8003d22 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003d26:	f000 fdcd 	bl	80048c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d2a:	4b21      	ldr	r3, [pc, #132]	@ (8003db0 <xTaskCheckForTimeOut+0xd0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d102      	bne.n	8003d4a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	e026      	b.n	8003d98 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <xTaskCheckForTimeOut+0xd4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d00a      	beq.n	8003d6c <xTaskCheckForTimeOut+0x8c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d305      	bcc.n	8003d6c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e015      	b.n	8003d98 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d20b      	bcs.n	8003d8e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	1ad2      	subs	r2, r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff94 	bl	8003cb0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	e004      	b.n	8003d98 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003d98:	f000 fdc6 	bl	8004928 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	20e8      	movs	r0, #232	@ 0xe8
 8003da2:	f002 f80f 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003da6:	69fb      	ldr	r3, [r7, #28]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200001e8 	.word	0x200001e8
 8003db4:	200001fc 	.word	0x200001fc

08003db8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <vTaskMissedYield+0x14>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003dc2:	20e9      	movs	r0, #233	@ 0xe9
 8003dc4:	f001 ffc2 	bl	8005d4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200001f8 	.word	0x200001f8

08003dd0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003dd8:	f000 f852 	bl	8003e80 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003ddc:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <prvIdleTask+0x28>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d9f9      	bls.n	8003dd8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <prvIdleTask+0x2c>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003df4:	e7f0      	b.n	8003dd8 <prvIdleTask+0x8>
 8003df6:	bf00      	nop
 8003df8:	20000110 	.word	0x20000110
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	e00c      	b.n	8003e26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <prvInitialiseTaskLists+0x60>)
 8003e18:	4413      	add	r3, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fce8 	bl	80027f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3301      	adds	r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d9ef      	bls.n	8003e0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e2c:	480d      	ldr	r0, [pc, #52]	@ (8003e64 <prvInitialiseTaskLists+0x64>)
 8003e2e:	f7fe fcdf 	bl	80027f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e32:	480d      	ldr	r0, [pc, #52]	@ (8003e68 <prvInitialiseTaskLists+0x68>)
 8003e34:	f7fe fcdc 	bl	80027f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e38:	480c      	ldr	r0, [pc, #48]	@ (8003e6c <prvInitialiseTaskLists+0x6c>)
 8003e3a:	f7fe fcd9 	bl	80027f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003e3e:	480c      	ldr	r0, [pc, #48]	@ (8003e70 <prvInitialiseTaskLists+0x70>)
 8003e40:	f7fe fcd6 	bl	80027f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003e44:	480b      	ldr	r0, [pc, #44]	@ (8003e74 <prvInitialiseTaskLists+0x74>)
 8003e46:	f7fe fcd3 	bl	80027f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <prvInitialiseTaskLists+0x78>)
 8003e4c:	4a05      	ldr	r2, [pc, #20]	@ (8003e64 <prvInitialiseTaskLists+0x64>)
 8003e4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e50:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <prvInitialiseTaskLists+0x7c>)
 8003e52:	4a05      	ldr	r2, [pc, #20]	@ (8003e68 <prvInitialiseTaskLists+0x68>)
 8003e54:	601a      	str	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000110 	.word	0x20000110
 8003e64:	20000174 	.word	0x20000174
 8003e68:	20000188 	.word	0x20000188
 8003e6c:	200001a4 	.word	0x200001a4
 8003e70:	200001b8 	.word	0x200001b8
 8003e74:	200001d0 	.word	0x200001d0
 8003e78:	2000019c 	.word	0x2000019c
 8003e7c:	200001a0 	.word	0x200001a0

08003e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e86:	e019      	b.n	8003ebc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003e88:	f000 fd1c 	bl	80048c4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <prvCheckTasksWaitingTermination+0x50>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fd15 	bl	80028c8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <prvCheckTasksWaitingTermination+0x54>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed4 <prvCheckTasksWaitingTermination+0x54>)
 8003ea6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <prvCheckTasksWaitingTermination+0x58>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <prvCheckTasksWaitingTermination+0x58>)
 8003eb0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003eb2:	f000 fd39 	bl	8004928 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f810 	bl	8003edc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <prvCheckTasksWaitingTermination+0x58>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e1      	bne.n	8003e88 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200001b8 	.word	0x200001b8
 8003ed4:	200001e4 	.word	0x200001e4
 8003ed8:	200001cc 	.word	0x200001cc

08003edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fe6d 	bl	8004bc8 <vPortFree>
            vPortFree( pxTCB );
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fe6a 	bl	8004bc8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f00:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <prvResetNextTaskUnblockTime+0x30>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f0a:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <prvResetNextTaskUnblockTime+0x34>)
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f10:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f12:	e005      	b.n	8003f20 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <prvResetNextTaskUnblockTime+0x30>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a04      	ldr	r2, [pc, #16]	@ (8003f30 <prvResetNextTaskUnblockTime+0x34>)
 8003f1e:	6013      	str	r3, [r2, #0]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000019c 	.word	0x2000019c
 8003f30:	20000204 	.word	0x20000204

08003f34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <xTaskGetSchedulerState+0x3c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003f42:	2301      	movs	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	e008      	b.n	8003f5a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003f48:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <xTaskGetSchedulerState+0x40>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003f50:	2302      	movs	r3, #2
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	e001      	b.n	8003f5a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	20f5      	movs	r0, #245	@ 0xf5
 8003f60:	f001 ff30 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003f64:	687b      	ldr	r3, [r7, #4]
    }
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200001f0 	.word	0x200001f0
 8003f74:	2000020c 	.word	0x2000020c

08003f78 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f82:	4b3d      	ldr	r3, [pc, #244]	@ (8004078 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003f88:	4b3c      	ldr	r3, [pc, #240]	@ (800407c <prvAddCurrentTaskToDelayedList+0x104>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004080 <prvAddCurrentTaskToDelayedList+0x108>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f94:	4b3b      	ldr	r3, [pc, #236]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fc94 	bl	80028c8 <uxListRemove>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003fa6:	4b37      	ldr	r3, [pc, #220]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	2201      	movs	r2, #1
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <prvAddCurrentTaskToDelayedList+0x110>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	4a33      	ldr	r2, [pc, #204]	@ (8004088 <prvAddCurrentTaskToDelayedList+0x110>)
 8003fbc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d124      	bne.n	8004010 <prvAddCurrentTaskToDelayedList+0x98>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d021      	beq.n	8004010 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800408c <prvAddCurrentTaskToDelayedList+0x114>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	4b2a      	ldr	r3, [pc, #168]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	6892      	ldr	r2, [r2, #8]
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	3204      	adds	r2, #4
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1d1a      	adds	r2, r3, #4
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	4b22      	ldr	r3, [pc, #136]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a23      	ldr	r2, [pc, #140]	@ (800408c <prvAddCurrentTaskToDelayedList+0x114>)
 8004000:	615a      	str	r2, [r3, #20]
 8004002:	4b22      	ldr	r3, [pc, #136]	@ (800408c <prvAddCurrentTaskToDelayedList+0x114>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	4a20      	ldr	r2, [pc, #128]	@ (800408c <prvAddCurrentTaskToDelayedList+0x114>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800400e:	e02e      	b.n	800406e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004018:	4b1a      	ldr	r3, [pc, #104]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	429a      	cmp	r2, r3
 8004026:	d20d      	bcs.n	8004044 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004028:	4b16      	ldr	r3, [pc, #88]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2104      	movs	r1, #4
 800402e:	4618      	mov	r0, r3
 8004030:	f002 f802 	bl	8006038 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004034:	4b13      	ldr	r3, [pc, #76]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	f7fe fc08 	bl	8002852 <vListInsert>
}
 8004042:	e014      	b.n	800406e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004044:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2104      	movs	r1, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f001 fff4 	bl	8006038 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004050:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	69b8      	ldr	r0, [r7, #24]
 800405a:	f7fe fbfa 	bl	8002852 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800405e:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x118>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	429a      	cmp	r2, r3
 8004066:	d202      	bcs.n	800406e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004068:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x118>)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6013      	str	r3, [r2, #0]
}
 800406e:	bf00      	nop
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200001e8 	.word	0x200001e8
 800407c:	2000019c 	.word	0x2000019c
 8004080:	200001a0 	.word	0x200001a0
 8004084:	2000010c 	.word	0x2000010c
 8004088:	200001ec 	.word	0x200001ec
 800408c:	200001d0 	.word	0x200001d0
 8004090:	20000204 	.word	0x20000204

08004094 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800409e:	f000 fa5b 	bl	8004558 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80040a2:	4b15      	ldr	r3, [pc, #84]	@ (80040f8 <xTimerCreateTimerTask+0x64>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80040aa:	4b14      	ldr	r3, [pc, #80]	@ (80040fc <xTimerCreateTimerTask+0x68>)
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	2302      	movs	r3, #2
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2300      	movs	r3, #0
 80040b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80040b8:	4911      	ldr	r1, [pc, #68]	@ (8004100 <xTimerCreateTimerTask+0x6c>)
 80040ba:	4812      	ldr	r0, [pc, #72]	@ (8004104 <xTimerCreateTimerTask+0x70>)
 80040bc:	f7fe ff85 	bl	8002fca <xTaskCreate>
 80040c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	603b      	str	r3, [r7, #0]
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4619      	mov	r1, r3
 80040e4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80040e8:	f001 fe6c 	bl	8005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80040ec:	687b      	ldr	r3, [r7, #4]
    }
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000240 	.word	0x20000240
 80040fc:	20000244 	.word	0x20000244
 8004100:	080066b4 	.word	0x080066b4
 8004104:	080041ad 	.word	0x080041ad

08004108 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004114:	e008      	b.n	8004128 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	18d1      	adds	r1, r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f8df 	bl	80042f8 <prvInsertTimerInActiveList>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ea      	bne.n	8004116 <prvReloadTimer+0xe>
        }
    }
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004156:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <prvProcessExpiredTimer+0x5c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fbaf 	bl	80028c8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff ffc3 	bl	8004108 <prvReloadTimer>
 8004182:	e008      	b.n	8004196 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800418a:	f023 0301 	bic.w	r3, r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	4798      	blx	r3
    }
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000238 	.word	0x20000238

080041ac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f859 	bl	8004270 <prvGetNextExpireTime>
 80041be:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4619      	mov	r1, r3
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f805 	bl	80041d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80041ca:	f000 f8d7 	bl	800437c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ce:	bf00      	nop
 80041d0:	e7f0      	b.n	80041b4 <prvTimerTask+0x8>
	...

080041d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80041de:	f7ff f93f 	bl	8003460 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f866 	bl	80042b8 <prvSampleTimeNow>
 80041ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d130      	bne.n	8004256 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <prvProcessTimerOrBlockTask+0x3c>
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d806      	bhi.n	8004210 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004202:	f7ff f93b 	bl	800347c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff9f 	bl	800414c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800420e:	e024      	b.n	800425a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004216:	4b13      	ldr	r3, [pc, #76]	@ (8004264 <prvProcessTimerOrBlockTask+0x90>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <prvProcessTimerOrBlockTask+0x50>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <prvProcessTimerOrBlockTask+0x52>
 8004224:	2300      	movs	r3, #0
 8004226:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004228:	4b0f      	ldr	r3, [pc, #60]	@ (8004268 <prvProcessTimerOrBlockTask+0x94>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	f7fe fe55 	bl	8002ee4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800423a:	f7ff f91f 	bl	800347c <xTaskResumeAll>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004244:	4b09      	ldr	r3, [pc, #36]	@ (800426c <prvProcessTimerOrBlockTask+0x98>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
    }
 8004254:	e001      	b.n	800425a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004256:	f7ff f911 	bl	800347c <xTaskResumeAll>
    }
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000023c 	.word	0x2000023c
 8004268:	20000240 	.word	0x20000240
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <prvGetNextExpireTime+0x44>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <prvGetNextExpireTime+0x16>
 8004282:	2201      	movs	r2, #1
 8004284:	e000      	b.n	8004288 <prvGetNextExpireTime+0x18>
 8004286:	2200      	movs	r2, #0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004294:	4b07      	ldr	r3, [pc, #28]	@ (80042b4 <prvGetNextExpireTime+0x44>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e001      	b.n	80042a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80042a4:	68fb      	ldr	r3, [r7, #12]
    }
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000238 	.word	0x20000238

080042b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80042c0:	f7ff f9ee 	bl	80036a0 <xTaskGetTickCount>
 80042c4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <prvSampleTimeNow+0x3c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d205      	bcs.n	80042dc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80042d0:	f000 f91c 	bl	800450c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e002      	b.n	80042e2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80042e2:	4a04      	ldr	r2, [pc, #16]	@ (80042f4 <prvSampleTimeNow+0x3c>)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80042e8:	68fb      	ldr	r3, [r7, #12]
    }
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000248 	.word	0x20000248

080042f8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d812      	bhi.n	8004344 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	1ad2      	subs	r2, r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800432c:	2301      	movs	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e01b      	b.n	800436a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <prvInsertTimerInActiveList+0x7c>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7fe fa88 	bl	8002852 <vListInsert>
 8004342:	e012      	b.n	800436a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d206      	bcs.n	800435a <prvInsertTimerInActiveList+0x62>
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d302      	bcc.n	800435a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e007      	b.n	800436a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <prvInsertTimerInActiveList+0x80>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fe fa74 	bl	8002852 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800436a:	697b      	ldr	r3, [r7, #20]
    }
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000023c 	.word	0x2000023c
 8004378:	20000238 	.word	0x20000238

0800437c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004382:	f107 0308 	add.w	r3, r7, #8
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800438e:	e0a9      	b.n	80044e4 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f2c0 80a6 	blt.w	80044e4 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fa8d 	bl	80028c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff81 	bl	80042b8 <prvSampleTimeNow>
 80043b6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	2b08      	cmp	r3, #8
 80043be:	f200 808e 	bhi.w	80044de <prvProcessReceivedCommands+0x162>
 80043c2:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <prvProcessReceivedCommands+0x4c>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	080043ed 	.word	0x080043ed
 80043d0:	08004455 	.word	0x08004455
 80043d4:	08004469 	.word	0x08004469
 80043d8:	080044b5 	.word	0x080044b5
 80043dc:	080043ed 	.word	0x080043ed
 80043e0:	080043ed 	.word	0x080043ed
 80043e4:	08004455 	.word	0x08004455
 80043e8:	08004469 	.word	0x08004469
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	18d1      	adds	r1, r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	69f8      	ldr	r0, [r7, #28]
 800440c:	f7ff ff74 	bl	80042f8 <prvInsertTimerInActiveList>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d065      	beq.n	80044e2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	4413      	add	r3, r2
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4619      	mov	r1, r3
 8004430:	69f8      	ldr	r0, [r7, #28]
 8004432:	f7ff fe69 	bl	8004108 <prvReloadTimer>
 8004436:	e008      	b.n	800444a <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	69f8      	ldr	r0, [r7, #28]
 8004450:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004452:	e046      	b.n	80044e2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004466:	e03d      	b.n	80044e4 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10b      	bne.n	80044a0 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	617b      	str	r3, [r7, #20]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	18d1      	adds	r1, r2, r3
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	69f8      	ldr	r0, [r7, #28]
 80044ae:	f7ff ff23 	bl	80042f8 <prvInsertTimerInActiveList>
                        break;
 80044b2:	e017      	b.n	80044e4 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 80044c2:	69f8      	ldr	r0, [r7, #28]
 80044c4:	f000 fb80 	bl	8004bc8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80044c8:	e00c      	b.n	80044e4 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80044dc:	e002      	b.n	80044e4 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <prvProcessReceivedCommands+0x168>
                        break;
 80044e2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80044e4:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <prvProcessReceivedCommands+0x18c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f107 0108 	add.w	r1, r7, #8
 80044ec:	2200      	movs	r2, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fb2c 	bl	8002b4c <xQueueReceive>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f47f af4a 	bne.w	8004390 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000240 	.word	0x20000240

0800450c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004512:	e009      	b.n	8004528 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004514:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <prvSwitchTimerLists+0x44>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800451e:	f04f 31ff 	mov.w	r1, #4294967295
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f7ff fe12 	bl	800414c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <prvSwitchTimerLists+0x44>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004532:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <prvSwitchTimerLists+0x44>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <prvSwitchTimerLists+0x48>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a04      	ldr	r2, [pc, #16]	@ (8004550 <prvSwitchTimerLists+0x44>)
 800453e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004540:	4a04      	ldr	r2, [pc, #16]	@ (8004554 <prvSwitchTimerLists+0x48>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6013      	str	r3, [r2, #0]
    }
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000238 	.word	0x20000238
 8004554:	2000023c 	.word	0x2000023c

08004558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800455c:	f000 f9b2 	bl	80048c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004560:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <prvCheckForValidListAndQueue+0x54>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11d      	bne.n	80045a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004568:	4811      	ldr	r0, [pc, #68]	@ (80045b0 <prvCheckForValidListAndQueue+0x58>)
 800456a:	f7fe f941 	bl	80027f0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800456e:	4811      	ldr	r0, [pc, #68]	@ (80045b4 <prvCheckForValidListAndQueue+0x5c>)
 8004570:	f7fe f93e 	bl	80027f0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004574:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <prvCheckForValidListAndQueue+0x60>)
 8004576:	4a0e      	ldr	r2, [pc, #56]	@ (80045b0 <prvCheckForValidListAndQueue+0x58>)
 8004578:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800457a:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <prvCheckForValidListAndQueue+0x64>)
 800457c:	4a0d      	ldr	r2, [pc, #52]	@ (80045b4 <prvCheckForValidListAndQueue+0x5c>)
 800457e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004580:	2200      	movs	r2, #0
 8004582:	210c      	movs	r1, #12
 8004584:	200a      	movs	r0, #10
 8004586:	f7fe fa65 	bl	8002a54 <xQueueGenericCreate>
 800458a:	4603      	mov	r3, r0
 800458c:	4a07      	ldr	r2, [pc, #28]	@ (80045ac <prvCheckForValidListAndQueue+0x54>)
 800458e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004590:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <prvCheckForValidListAndQueue+0x54>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004598:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <prvCheckForValidListAndQueue+0x54>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4908      	ldr	r1, [pc, #32]	@ (80045c0 <prvCheckForValidListAndQueue+0x68>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fc50 	bl	8002e44 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80045a4:	f000 f9c0 	bl	8004928 <vPortExitCritical>
    }
 80045a8:	bf00      	nop
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000240 	.word	0x20000240
 80045b0:	20000210 	.word	0x20000210
 80045b4:	20000224 	.word	0x20000224
 80045b8:	20000238 	.word	0x20000238
 80045bc:	2000023c 	.word	0x2000023c
 80045c0:	080066bc 	.word	0x080066bc

080045c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3b04      	subs	r3, #4
 80045d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3b04      	subs	r3, #4
 80045e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f023 0201 	bic.w	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3b04      	subs	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80045f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004628 <pxPortInitialiseStack+0x64>)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3b14      	subs	r3, #20
 80045fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b04      	subs	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f06f 0202 	mvn.w	r2, #2
 8004612:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3b20      	subs	r3, #32
 8004618:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	0800462d 	.word	0x0800462d

0800462c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004636:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <prvTaskExitError+0x58>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d00b      	beq.n	8004658 <prvTaskExitError+0x2c>
    __asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	60fb      	str	r3, [r7, #12]
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <prvTaskExitError+0x28>
    __asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60bb      	str	r3, [r7, #8]
}
 800466a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800466c:	bf00      	nop
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0fc      	beq.n	800466e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000018 	.word	0x20000018
	...

08004690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004690:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <pxCurrentTCBConst2>)
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	6808      	ldr	r0, [r1, #0]
 8004696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	f380 8809 	msr	PSP, r0
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8811 	msr	BASEPRI, r0
 80046aa:	4770      	bx	lr
 80046ac:	f3af 8000 	nop.w

080046b0 <pxCurrentTCBConst2>:
 80046b0:	2000010c 	.word	0x2000010c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop

080046b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80046b8:	4808      	ldr	r0, [pc, #32]	@ (80046dc <prvPortStartFirstTask+0x24>)
 80046ba:	6800      	ldr	r0, [r0, #0]
 80046bc:	6800      	ldr	r0, [r0, #0]
 80046be:	f380 8808 	msr	MSP, r0
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8814 	msr	CONTROL, r0
 80046ca:	b662      	cpsie	i
 80046cc:	b661      	cpsie	f
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	df00      	svc	0
 80046d8:	bf00      	nop
 80046da:	0000      	.short	0x0000
 80046dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop

080046e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	@ 0x30
 80046e8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046ea:	4b69      	ldr	r3, [pc, #420]	@ (8004890 <xPortStartScheduler+0x1ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a69      	ldr	r2, [pc, #420]	@ (8004894 <xPortStartScheduler+0x1b0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10b      	bne.n	800470c <xPortStartScheduler+0x28>
    __asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800470c:	4b60      	ldr	r3, [pc, #384]	@ (8004890 <xPortStartScheduler+0x1ac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a61      	ldr	r2, [pc, #388]	@ (8004898 <xPortStartScheduler+0x1b4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10b      	bne.n	800472e <xPortStartScheduler+0x4a>
    __asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	623b      	str	r3, [r7, #32]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800472e:	4b5b      	ldr	r3, [pc, #364]	@ (800489c <xPortStartScheduler+0x1b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	332c      	adds	r3, #44	@ 0x2c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a59      	ldr	r2, [pc, #356]	@ (80048a0 <xPortStartScheduler+0x1bc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <xPortStartScheduler+0x74>
    __asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	61fb      	str	r3, [r7, #28]
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	e7fd      	b.n	8004754 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475a:	3338      	adds	r3, #56	@ 0x38
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a51      	ldr	r2, [pc, #324]	@ (80048a4 <xPortStartScheduler+0x1c0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <xPortStartScheduler+0x98>
    __asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	61bb      	str	r3, [r7, #24]
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004780:	4b49      	ldr	r3, [pc, #292]	@ (80048a8 <xPortStartScheduler+0x1c4>)
 8004782:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800478c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478e:	22ff      	movs	r2, #255	@ 0xff
 8004790:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <xPortStartScheduler+0x1c8>)
 80047a6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80047a8:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <xPortStartScheduler+0x1c8>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <xPortStartScheduler+0xe4>
    __asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	617b      	str	r3, [r7, #20]
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d013      	beq.n	80047fe <xPortStartScheduler+0x11a>
    __asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	613b      	str	r3, [r7, #16]
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	e7fd      	b.n	80047ea <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	2b80      	cmp	r3, #128	@ 0x80
 8004808:	d0f1      	beq.n	80047ee <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d103      	bne.n	8004818 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004810:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <xPortStartScheduler+0x1cc>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e004      	b.n	8004822 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	4a24      	ldr	r2, [pc, #144]	@ (80048b0 <xPortStartScheduler+0x1cc>)
 8004820:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004822:	4b23      	ldr	r3, [pc, #140]	@ (80048b0 <xPortStartScheduler+0x1cc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	4a21      	ldr	r2, [pc, #132]	@ (80048b0 <xPortStartScheduler+0x1cc>)
 800482a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800482c:	4b20      	ldr	r3, [pc, #128]	@ (80048b0 <xPortStartScheduler+0x1cc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004834:	4a1e      	ldr	r2, [pc, #120]	@ (80048b0 <xPortStartScheduler+0x1cc>)
 8004836:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004840:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <xPortStartScheduler+0x1d0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <xPortStartScheduler+0x1d0>)
 8004846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <xPortStartScheduler+0x1d0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a18      	ldr	r2, [pc, #96]	@ (80048b4 <xPortStartScheduler+0x1d0>)
 8004852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004856:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004858:	4b17      	ldr	r3, [pc, #92]	@ (80048b8 <xPortStartScheduler+0x1d4>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800485e:	f000 f8ed 	bl	8004a3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004862:	4b16      	ldr	r3, [pc, #88]	@ (80048bc <xPortStartScheduler+0x1d8>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004868:	f000 f90c 	bl	8004a84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800486c:	4b14      	ldr	r3, [pc, #80]	@ (80048c0 <xPortStartScheduler+0x1dc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <xPortStartScheduler+0x1dc>)
 8004872:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004876:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004878:	f7ff ff1e 	bl	80046b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800487c:	f7ff f85a 	bl	8003934 <vTaskSwitchContext>
    prvTaskExitError();
 8004880:	f7ff fed4 	bl	800462c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3730      	adds	r7, #48	@ 0x30
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000ed00 	.word	0xe000ed00
 8004894:	410fc271 	.word	0x410fc271
 8004898:	410fc270 	.word	0x410fc270
 800489c:	e000ed08 	.word	0xe000ed08
 80048a0:	08004691 	.word	0x08004691
 80048a4:	08004981 	.word	0x08004981
 80048a8:	e000e400 	.word	0xe000e400
 80048ac:	2000024c 	.word	0x2000024c
 80048b0:	20000250 	.word	0x20000250
 80048b4:	e000ed20 	.word	0xe000ed20
 80048b8:	e000ed1c 	.word	0xe000ed1c
 80048bc:	20000018 	.word	0x20000018
 80048c0:	e000ef34 	.word	0xe000ef34

080048c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
    __asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	607b      	str	r3, [r7, #4]
}
 80048dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <vPortEnterCritical+0x5c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004920 <vPortEnterCritical+0x5c>)
 80048e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80048e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <vPortEnterCritical+0x5c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d110      	bne.n	8004912 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <vPortEnterCritical+0x60>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <vPortEnterCritical+0x4e>
    __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	603b      	str	r3, [r7, #0]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <vPortEnterCritical+0x4a>
    }
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000018 	.word	0x20000018
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800492e:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <vPortExitCritical+0x50>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <vPortExitCritical+0x26>
    __asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	607b      	str	r3, [r7, #4]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800494e:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <vPortExitCritical+0x50>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	4a08      	ldr	r2, [pc, #32]	@ (8004978 <vPortExitCritical+0x50>)
 8004956:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004958:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <vPortExitCritical+0x50>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <vPortExitCritical+0x44>
 8004960:	2300      	movs	r3, #0
 8004962:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800496a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000018 	.word	0x20000018
 800497c:	00000000 	.word	0x00000000

08004980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004980:	f3ef 8009 	mrs	r0, PSP
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <pxCurrentTCBConst>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f01e 0f10 	tst.w	lr, #16
 8004990:	bf08      	it	eq
 8004992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	6010      	str	r0, [r2, #0]
 800499c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80049a4:	f380 8811 	msr	BASEPRI, r0
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f7fe ffc0 	bl	8003934 <vTaskSwitchContext>
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f380 8811 	msr	BASEPRI, r0
 80049bc:	bc09      	pop	{r0, r3}
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	6808      	ldr	r0, [r1, #0]
 80049c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c6:	f01e 0f10 	tst.w	lr, #16
 80049ca:	bf08      	it	eq
 80049cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049d0:	f380 8809 	msr	PSP, r0
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst>:
 80049e0:	2000010c 	.word	0x2000010c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
    __asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004a02:	f001 f929 	bl	8005c58 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004a06:	f7fe fe73 	bl	80036f0 <xTaskIncrementTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d006      	beq.n	8004a1e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004a10:	f001 f980 	bl	8005d14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a14:	4b08      	ldr	r3, [pc, #32]	@ (8004a38 <SysTick_Handler+0x50>)
 8004a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e001      	b.n	8004a22 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8004a1e:	f001 f95d 	bl	8005cdc <SEGGER_SYSVIEW_RecordExitISR>
 8004a22:	2300      	movs	r3, #0
 8004a24:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	f383 8811 	msr	BASEPRI, r3
}
 8004a2c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <vPortSetupTimerInterrupt+0x34>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <vPortSetupTimerInterrupt+0x38>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <vPortSetupTimerInterrupt+0x3c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <vPortSetupTimerInterrupt+0x40>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <vPortSetupTimerInterrupt+0x44>)
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a5e:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <vPortSetupTimerInterrupt+0x34>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	e000e010 	.word	0xe000e010
 8004a74:	e000e018 	.word	0xe000e018
 8004a78:	20000008 	.word	0x20000008
 8004a7c:	10624dd3 	.word	0x10624dd3
 8004a80:	e000e014 	.word	0xe000e014

08004a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a94 <vPortEnableVFP+0x10>
 8004a88:	6801      	ldr	r1, [r0, #0]
 8004a8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a8e:	6001      	str	r1, [r0, #0]
 8004a90:	4770      	bx	lr
 8004a92:	0000      	.short	0x0000
 8004a94:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop

08004a9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004aa2:	f3ef 8305 	mrs	r3, IPSR
 8004aa6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b0f      	cmp	r3, #15
 8004aac:	d915      	bls.n	8004ada <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aae:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <vPortValidateInterruptPriority+0x74>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ab8:	4b16      	ldr	r3, [pc, #88]	@ (8004b14 <vPortValidateInterruptPriority+0x78>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	7afa      	ldrb	r2, [r7, #11]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d20b      	bcs.n	8004ada <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	607b      	str	r3, [r7, #4]
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ada:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <vPortValidateInterruptPriority+0x7c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <vPortValidateInterruptPriority+0x80>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d90b      	bls.n	8004b02 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	603b      	str	r3, [r7, #0]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <vPortValidateInterruptPriority+0x62>
    }
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e3f0 	.word	0xe000e3f0
 8004b14:	2000024c 	.word	0x2000024c
 8004b18:	e000ed0c 	.word	0xe000ed0c
 8004b1c:	20000250 	.word	0x20000250

08004b20 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f023 0307 	bic.w	r3, r3, #7
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d205      	bcs.n	8004b50 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	e001      	b.n	8004b54 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8004b54:	f7fe fc84 	bl	8003460 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8004b58:	4b17      	ldr	r3, [pc, #92]	@ (8004bb8 <pvPortMalloc+0x98>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004b60:	4b16      	ldr	r3, [pc, #88]	@ (8004bbc <pvPortMalloc+0x9c>)
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <pvPortMalloc+0x98>)
 8004b6a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01a      	beq.n	8004ba8 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004b72:	4b13      	ldr	r3, [pc, #76]	@ (8004bc0 <pvPortMalloc+0xa0>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004b7a:	4a12      	ldr	r2, [pc, #72]	@ (8004bc4 <pvPortMalloc+0xa4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d813      	bhi.n	8004ba8 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8004b80:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc0 <pvPortMalloc+0xa0>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	441a      	add	r2, r3
 8004b88:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <pvPortMalloc+0xa0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d90b      	bls.n	8004ba8 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8004b90:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <pvPortMalloc+0x98>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc0 <pvPortMalloc+0xa0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4413      	add	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8004b9c:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <pvPortMalloc+0xa0>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4a06      	ldr	r2, [pc, #24]	@ (8004bc0 <pvPortMalloc+0xa0>)
 8004ba6:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ba8:	f7fe fc68 	bl	800347c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8004bac:	68fb      	ldr	r3, [r7, #12]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20012e58 	.word	0x20012e58
 8004bbc:	2000025b 	.word	0x2000025b
 8004bc0:	20012e54 	.word	0x20012e54
 8004bc4:	00012bf7 	.word	0x00012bf7

08004bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <vPortFree+0x26>
    __asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <vPortFree+0x22>
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c00:	4803      	ldr	r0, [pc, #12]	@ (8004c10 <_cbSendSystemDesc+0x14>)
 8004c02:	f000 ffd3 	bl	8005bac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c06:	4803      	ldr	r0, [pc, #12]	@ (8004c14 <_cbSendSystemDesc+0x18>)
 8004c08:	f000 ffd0 	bl	8005bac <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	080066c4 	.word	0x080066c4
 8004c14:	080066f0 	.word	0x080066f0

08004c18 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <SEGGER_SYSVIEW_Conf+0x24>)
 8004c26:	4a06      	ldr	r2, [pc, #24]	@ (8004c40 <SEGGER_SYSVIEW_Conf+0x28>)
 8004c28:	f000 fc46 	bl	80054b8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c2c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004c30:	f000 fc86 	bl	8005540 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c34:	bf00      	nop
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000008 	.word	0x20000008
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	080067ac 	.word	0x080067ac

08004c44 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <_DoInit+0xa0>)
 8004c4c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004c4e:	22a8      	movs	r2, #168	@ 0xa8
 8004c50:	2100      	movs	r1, #0
 8004c52:	6838      	ldr	r0, [r7, #0]
 8004c54:	f001 fcc7 	bl	80065e6 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2203      	movs	r2, #3
 8004c62:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <_DoInit+0xa4>)
 8004c68:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cec <_DoInit+0xa8>)
 8004c6e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c76:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2200      	movs	r2, #0
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	@ (8004ce8 <_DoInit+0xa4>)
 8004c8e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4a17      	ldr	r2, [pc, #92]	@ (8004cf0 <_DoInit+0xac>)
 8004c94:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cae:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	e00c      	b.n	8004cd2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f1c3 030f 	rsb	r3, r3, #15
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf4 <_DoInit+0xb0>)
 8004cc0:	5cd1      	ldrb	r1, [r2, r3]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	460a      	mov	r2, r1
 8004cca:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b0f      	cmp	r3, #15
 8004cd6:	d9ef      	bls.n	8004cb8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cd8:	f3bf 8f5f 	dmb	sy
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20012e5c 	.word	0x20012e5c
 8004ce8:	08006700 	.word	0x08006700
 8004cec:	20012f04 	.word	0x20012f04
 8004cf0:	20013304 	.word	0x20013304
 8004cf4:	0800678c 	.word	0x0800678c

08004cf8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08c      	sub	sp, #48	@ 0x30
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d04:	4b3e      	ldr	r3, [pc, #248]	@ (8004e00 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b53      	cmp	r3, #83	@ 0x53
 8004d10:	d001      	beq.n	8004d16 <SEGGER_RTT_ReadNoLock+0x1e>
 8004d12:	f7ff ff97 	bl	8004c44 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	3360      	adds	r3, #96	@ 0x60
 8004d22:	4a37      	ldr	r2, [pc, #220]	@ (8004e00 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d24:	4413      	add	r3, r2
 8004d26:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d92b      	bls.n	8004d9c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4293      	cmp	r3, r2
 8004d54:	bf28      	it	cs
 8004d56:	4613      	movcs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	4413      	add	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d6a:	f001 fc69 	bl	8006640 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d101      	bne.n	8004d9c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4293      	cmp	r3, r2
 8004daa:	bf28      	it	cs
 8004dac:	4613      	movcs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d019      	beq.n	8004dea <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	4413      	add	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	6939      	ldr	r1, [r7, #16]
 8004dc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dc6:	f001 fc3b 	bl	8006640 <memcpy>
    NumBytesRead += NumBytesRem;
 8004dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4413      	add	r3, r2
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004df4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3730      	adds	r7, #48	@ 0x30
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20012e5c 	.word	0x20012e5c

08004e04 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e12:	4b3d      	ldr	r3, [pc, #244]	@ (8004f08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b53      	cmp	r3, #83	@ 0x53
 8004e1e:	d001      	beq.n	8004e24 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004e20:	f7ff ff10 	bl	8004c44 <_DoInit>
  SEGGER_RTT_LOCK();
 8004e24:	f3ef 8311 	mrs	r3, BASEPRI
 8004e28:	f04f 0120 	mov.w	r1, #32
 8004e2c:	f381 8811 	msr	BASEPRI, r1
 8004e30:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e32:	4b35      	ldr	r3, [pc, #212]	@ (8004f08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e34:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004e3a:	6939      	ldr	r1, [r7, #16]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	4613      	mov	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4413      	add	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	440b      	add	r3, r1
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	dbeb      	blt.n	8004e3a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e62:	e000      	b.n	8004e66 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004e64:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	da3f      	bge.n	8004ef0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e70:	6939      	ldr	r1, [r7, #16]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	440b      	add	r3, r1
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e84:	6939      	ldr	r1, [r7, #16]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	440b      	add	r3, r1
 8004e94:	3304      	adds	r3, #4
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e9a:	6939      	ldr	r1, [r7, #16]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3320      	adds	r3, #32
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004eae:	6939      	ldr	r1, [r7, #16]
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	440b      	add	r3, r1
 8004ebc:	3328      	adds	r3, #40	@ 0x28
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004ec2:	6939      	ldr	r1, [r7, #16]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	440b      	add	r3, r1
 8004ed0:	3324      	adds	r3, #36	@ 0x24
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004ed6:	6939      	ldr	r1, [r7, #16]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	332c      	adds	r3, #44	@ 0x2c
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eea:	f3bf 8f5f 	dmb	sy
 8004eee:	e002      	b.n	8004ef6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004efc:	69fb      	ldr	r3, [r7, #28]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20012e5c 	.word	0x20012e5c

08004f0c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	@ 0x28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004f1a:	4b21      	ldr	r3, [pc, #132]	@ (8004fa0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f1c:	623b      	str	r3, [r7, #32]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b53      	cmp	r3, #83	@ 0x53
 8004f26:	d001      	beq.n	8004f2c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004f28:	f7ff fe8c 	bl	8004c44 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f2e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d82c      	bhi.n	8004f90 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004f36:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3a:	f04f 0120 	mov.w	r1, #32
 8004f3e:	f381 8811 	msr	BASEPRI, r1
 8004f42:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4613      	mov	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	3360      	adds	r3, #96	@ 0x60
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f7e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f80:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8e:	e002      	b.n	8004f96 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3728      	adds	r7, #40	@ 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20012e5c 	.word	0x20012e5c

08004fa4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	60fa      	str	r2, [r7, #12]
 8004fba:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b80      	cmp	r3, #128	@ 0x80
 8004fc0:	d90a      	bls.n	8004fd8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004fc2:	2380      	movs	r3, #128	@ 0x80
 8004fc4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004fc6:	e007      	b.n	8004fd8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	1c53      	adds	r3, r2, #1
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1c59      	adds	r1, r3, #1
 8004fd2:	60f9      	str	r1, [r7, #12]
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	1e5a      	subs	r2, r3, #1
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <_EncodeStr+0x46>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ee      	bne.n	8004fc8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3307      	adds	r3, #7
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005022:	4b34      	ldr	r3, [pc, #208]	@ (80050f4 <_HandleIncomingPacket+0xd8>)
 8005024:	7e1b      	ldrb	r3, [r3, #24]
 8005026:	4618      	mov	r0, r3
 8005028:	1cfb      	adds	r3, r7, #3
 800502a:	2201      	movs	r2, #1
 800502c:	4619      	mov	r1, r3
 800502e:	f7ff fe63 	bl	8004cf8 <SEGGER_RTT_ReadNoLock>
 8005032:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d057      	beq.n	80050ea <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	2b80      	cmp	r3, #128	@ 0x80
 800503e:	d031      	beq.n	80050a4 <_HandleIncomingPacket+0x88>
 8005040:	2b80      	cmp	r3, #128	@ 0x80
 8005042:	dc40      	bgt.n	80050c6 <_HandleIncomingPacket+0xaa>
 8005044:	2b07      	cmp	r3, #7
 8005046:	dc15      	bgt.n	8005074 <_HandleIncomingPacket+0x58>
 8005048:	2b00      	cmp	r3, #0
 800504a:	dd3c      	ble.n	80050c6 <_HandleIncomingPacket+0xaa>
 800504c:	3b01      	subs	r3, #1
 800504e:	2b06      	cmp	r3, #6
 8005050:	d839      	bhi.n	80050c6 <_HandleIncomingPacket+0xaa>
 8005052:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <_HandleIncomingPacket+0x3c>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	0800507b 	.word	0x0800507b
 800505c:	08005081 	.word	0x08005081
 8005060:	08005087 	.word	0x08005087
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005093 	.word	0x08005093
 800506c:	08005099 	.word	0x08005099
 8005070:	0800509f 	.word	0x0800509f
 8005074:	2b7f      	cmp	r3, #127	@ 0x7f
 8005076:	d033      	beq.n	80050e0 <_HandleIncomingPacket+0xc4>
 8005078:	e025      	b.n	80050c6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800507a:	f000 fb25 	bl	80056c8 <SEGGER_SYSVIEW_Start>
      break;
 800507e:	e034      	b.n	80050ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005080:	f000 fbdc 	bl	800583c <SEGGER_SYSVIEW_Stop>
      break;
 8005084:	e031      	b.n	80050ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005086:	f000 fdb5 	bl	8005bf4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800508a:	e02e      	b.n	80050ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800508c:	f000 fd7a 	bl	8005b84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005090:	e02b      	b.n	80050ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005092:	f000 fbf9 	bl	8005888 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005096:	e028      	b.n	80050ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005098:	f001 f8e6 	bl	8006268 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800509c:	e025      	b.n	80050ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800509e:	f001 f8c5 	bl	800622c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80050a2:	e022      	b.n	80050ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050a4:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <_HandleIncomingPacket+0xd8>)
 80050a6:	7e1b      	ldrb	r3, [r3, #24]
 80050a8:	4618      	mov	r0, r3
 80050aa:	1cfb      	adds	r3, r7, #3
 80050ac:	2201      	movs	r2, #1
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7ff fe22 	bl	8004cf8 <SEGGER_RTT_ReadNoLock>
 80050b4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 f82a 	bl	8006118 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80050c4:	e00e      	b.n	80050e4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	b25b      	sxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da0c      	bge.n	80050e8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050ce:	4b09      	ldr	r3, [pc, #36]	@ (80050f4 <_HandleIncomingPacket+0xd8>)
 80050d0:	7e1b      	ldrb	r3, [r3, #24]
 80050d2:	4618      	mov	r0, r3
 80050d4:	1cfb      	adds	r3, r7, #3
 80050d6:	2201      	movs	r2, #1
 80050d8:	4619      	mov	r1, r3
 80050da:	f7ff fe0d 	bl	8004cf8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80050de:	e003      	b.n	80050e8 <_HandleIncomingPacket+0xcc>
      break;
 80050e0:	bf00      	nop
 80050e2:	e002      	b.n	80050ea <_HandleIncomingPacket+0xce>
      break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <_HandleIncomingPacket+0xce>
      break;
 80050e8:	bf00      	nop
    }
  }
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	2001971c 	.word	0x2001971c

080050f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	@ 0x30
 80050fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80050fe:	2301      	movs	r3, #1
 8005100:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005102:	1d3b      	adds	r3, r7, #4
 8005104:	3301      	adds	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800510c:	4b31      	ldr	r3, [pc, #196]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005112:	e00b      	b.n	800512c <_TrySendOverflowPacket+0x34>
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800511e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005130:	d8f0      	bhi.n	8005114 <_TrySendOverflowPacket+0x1c>
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005140:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005142:	4b25      	ldr	r3, [pc, #148]	@ (80051d8 <_TrySendOverflowPacket+0xe0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005148:	4b22      	ldr	r3, [pc, #136]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	623b      	str	r3, [r7, #32]
 800515a:	e00b      	b.n	8005174 <_TrySendOverflowPacket+0x7c>
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	6279      	str	r1, [r7, #36]	@ 0x24
 8005166:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	09db      	lsrs	r3, r3, #7
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	2b7f      	cmp	r3, #127	@ 0x7f
 8005178:	d8f0      	bhi.n	800515c <_TrySendOverflowPacket+0x64>
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800518a:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	4618      	mov	r0, r3
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	461a      	mov	r2, r3
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	4619      	mov	r1, r3
 800519c:	f7fb f818 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051a0:	4603      	mov	r3, r0
 80051a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051aa:	4a0a      	ldr	r2, [pc, #40]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80051b0:	4b08      	ldr	r3, [pc, #32]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b06      	ldr	r3, [pc, #24]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e004      	b.n	80051c8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80051be:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	4a03      	ldr	r2, [pc, #12]	@ (80051d4 <_TrySendOverflowPacket+0xdc>)
 80051c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80051c8:	693b      	ldr	r3, [r7, #16]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3730      	adds	r7, #48	@ 0x30
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	2001971c 	.word	0x2001971c
 80051d8:	e0001004 	.word	0xe0001004

080051dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	@ 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80051e8:	4b98      	ldr	r3, [pc, #608]	@ (800544c <_SendPacket+0x270>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d010      	beq.n	8005212 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80051f0:	4b96      	ldr	r3, [pc, #600]	@ (800544c <_SendPacket+0x270>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 812d 	beq.w	8005454 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80051fa:	4b94      	ldr	r3, [pc, #592]	@ (800544c <_SendPacket+0x270>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d109      	bne.n	8005216 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005202:	f7ff ff79 	bl	80050f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005206:	4b91      	ldr	r3, [pc, #580]	@ (800544c <_SendPacket+0x270>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	f040 8124 	bne.w	8005458 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005210:	e001      	b.n	8005216 <_SendPacket+0x3a>
    goto Send;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <_SendPacket+0x3c>
Send:
 8005216:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b1f      	cmp	r3, #31
 800521c:	d809      	bhi.n	8005232 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800521e:	4b8b      	ldr	r3, [pc, #556]	@ (800544c <_SendPacket+0x270>)
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 8115 	bne.w	800545c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b17      	cmp	r3, #23
 8005236:	d807      	bhi.n	8005248 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e0c4      	b.n	80053d2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b7f      	cmp	r3, #127	@ 0x7f
 8005254:	d912      	bls.n	800527c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	09da      	lsrs	r2, r3, #7
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b01      	subs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	3a01      	subs	r2, #1
 800526e:	60fa      	str	r2, [r7, #12]
 8005270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	e006      	b.n	800528a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b01      	subs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b7e      	cmp	r3, #126	@ 0x7e
 800528e:	d807      	bhi.n	80052a0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3b01      	subs	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e098      	b.n	80053d2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052a6:	d212      	bcs.n	80052ce <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	09da      	lsrs	r2, r3, #7
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	3a01      	subs	r2, #1
 80052c0:	60fa      	str	r2, [r7, #12]
 80052c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e081      	b.n	80053d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052d4:	d21d      	bcs.n	8005312 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	0b9a      	lsrs	r2, r3, #14
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3b01      	subs	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	09db      	lsrs	r3, r3, #7
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	3a01      	subs	r2, #1
 80052f0:	60fa      	str	r2, [r7, #12]
 80052f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	3a01      	subs	r2, #1
 8005304:	60fa      	str	r2, [r7, #12]
 8005306:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e05f      	b.n	80053d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005318:	d228      	bcs.n	800536c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0d5a      	lsrs	r2, r3, #21
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b01      	subs	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0b9b      	lsrs	r3, r3, #14
 800532e:	b2db      	uxtb	r3, r3
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	3a01      	subs	r2, #1
 8005334:	60fa      	str	r2, [r7, #12]
 8005336:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	b2db      	uxtb	r3, r3
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	3a01      	subs	r2, #1
 800534a:	60fa      	str	r2, [r7, #12]
 800534c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005350:	b2da      	uxtb	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	3a01      	subs	r2, #1
 800535e:	60fa      	str	r2, [r7, #12]
 8005360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005364:	b2da      	uxtb	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e032      	b.n	80053d2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	0f1a      	lsrs	r2, r3, #28
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	0d5b      	lsrs	r3, r3, #21
 8005380:	b2db      	uxtb	r3, r3
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	3a01      	subs	r2, #1
 8005386:	60fa      	str	r2, [r7, #12]
 8005388:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0b9b      	lsrs	r3, r3, #14
 8005396:	b2db      	uxtb	r3, r3
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	3a01      	subs	r2, #1
 800539c:	60fa      	str	r2, [r7, #12]
 800539e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	09db      	lsrs	r3, r3, #7
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	3a01      	subs	r2, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	3a01      	subs	r2, #1
 80053c6:	60fa      	str	r2, [r7, #12]
 80053c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80053d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005450 <_SendPacket+0x274>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80053d8:	4b1c      	ldr	r3, [pc, #112]	@ (800544c <_SendPacket+0x270>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	623b      	str	r3, [r7, #32]
 80053ea:	e00b      	b.n	8005404 <_SendPacket+0x228>
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80053f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	09db      	lsrs	r3, r3, #7
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	2b7f      	cmp	r3, #127	@ 0x7f
 8005408:	d8f0      	bhi.n	80053ec <_SendPacket+0x210>
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005410:	6a3a      	ldr	r2, [r7, #32]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800541a:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <_SendPacket+0x270>)
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	4618      	mov	r0, r3
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	461a      	mov	r2, r3
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	f7fa fed1 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800542e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005436:	4a05      	ldr	r2, [pc, #20]	@ (800544c <_SendPacket+0x270>)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	60d3      	str	r3, [r2, #12]
 800543c:	e00f      	b.n	800545e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800543e:	4b03      	ldr	r3, [pc, #12]	@ (800544c <_SendPacket+0x270>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	3301      	adds	r3, #1
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4b01      	ldr	r3, [pc, #4]	@ (800544c <_SendPacket+0x270>)
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	e008      	b.n	800545e <_SendPacket+0x282>
 800544c:	2001971c 	.word	0x2001971c
 8005450:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005454:	bf00      	nop
 8005456:	e002      	b.n	800545e <_SendPacket+0x282>
      goto SendDone;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <_SendPacket+0x282>
      goto SendDone;
 800545c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800545e:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <_SendPacket+0x2d4>)
 8005460:	7e1b      	ldrb	r3, [r3, #24]
 8005462:	4619      	mov	r1, r3
 8005464:	4a13      	ldr	r2, [pc, #76]	@ (80054b4 <_SendPacket+0x2d8>)
 8005466:	460b      	mov	r3, r1
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	440b      	add	r3, r1
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	336c      	adds	r3, #108	@ 0x6c
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0e      	ldr	r3, [pc, #56]	@ (80054b0 <_SendPacket+0x2d4>)
 8005476:	7e1b      	ldrb	r3, [r3, #24]
 8005478:	4618      	mov	r0, r3
 800547a:	490e      	ldr	r1, [pc, #56]	@ (80054b4 <_SendPacket+0x2d8>)
 800547c:	4603      	mov	r3, r0
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4403      	add	r3, r0
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	3370      	adds	r3, #112	@ 0x70
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d00b      	beq.n	80054a6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800548e:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <_SendPacket+0x2d4>)
 8005490:	789b      	ldrb	r3, [r3, #2]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d107      	bne.n	80054a6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005496:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <_SendPacket+0x2d4>)
 8005498:	2201      	movs	r2, #1
 800549a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800549c:	f7ff fdbe 	bl	800501c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80054a0:	4b03      	ldr	r3, [pc, #12]	@ (80054b0 <_SendPacket+0x2d4>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80054a6:	bf00      	nop
 80054a8:	3728      	adds	r7, #40	@ 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	2001971c 	.word	0x2001971c
 80054b4:	20012e5c 	.word	0x20012e5c

080054b8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80054c6:	2300      	movs	r3, #0
 80054c8:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80054cc:	4917      	ldr	r1, [pc, #92]	@ (800552c <SEGGER_SYSVIEW_Init+0x74>)
 80054ce:	4818      	ldr	r0, [pc, #96]	@ (8005530 <SEGGER_SYSVIEW_Init+0x78>)
 80054d0:	f7ff fc98 	bl	8004e04 <SEGGER_RTT_AllocUpBuffer>
 80054d4:	4603      	mov	r3, r0
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	4b16      	ldr	r3, [pc, #88]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 80054da:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80054dc:	4b15      	ldr	r3, [pc, #84]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 80054de:	785a      	ldrb	r2, [r3, #1]
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 80054e2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80054e4:	4b13      	ldr	r3, [pc, #76]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 80054e6:	7e1b      	ldrb	r3, [r3, #24]
 80054e8:	4618      	mov	r0, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	2308      	movs	r3, #8
 80054f0:	4a11      	ldr	r2, [pc, #68]	@ (8005538 <SEGGER_SYSVIEW_Init+0x80>)
 80054f2:	490f      	ldr	r1, [pc, #60]	@ (8005530 <SEGGER_SYSVIEW_Init+0x78>)
 80054f4:	f7ff fd0a 	bl	8004f0c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80054f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054fe:	4b0f      	ldr	r3, [pc, #60]	@ (800553c <SEGGER_SYSVIEW_Init+0x84>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a0c      	ldr	r2, [pc, #48]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 8005504:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005506:	4a0b      	ldr	r2, [pc, #44]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800550c:	4a09      	ldr	r2, [pc, #36]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005512:	4a08      	ldr	r2, [pc, #32]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005518:	4a06      	ldr	r2, [pc, #24]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800551e:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <SEGGER_SYSVIEW_Init+0x7c>)
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20013314 	.word	0x20013314
 8005530:	08006714 	.word	0x08006714
 8005534:	2001971c 	.word	0x2001971c
 8005538:	20019714 	.word	0x20019714
 800553c:	e0001004 	.word	0xe0001004

08005540 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005548:	4a04      	ldr	r2, [pc, #16]	@ (800555c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6113      	str	r3, [r2, #16]
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	2001971c 	.word	0x2001971c

08005560 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005568:	f3ef 8311 	mrs	r3, BASEPRI
 800556c:	f04f 0120 	mov.w	r1, #32
 8005570:	f381 8811 	msr	BASEPRI, r1
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	4808      	ldr	r0, [pc, #32]	@ (8005598 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005578:	f7ff fd44 	bl	8005004 <_PreparePacket>
 800557c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68b8      	ldr	r0, [r7, #8]
 8005584:	f7ff fe2a 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	2001974c 	.word	0x2001974c

0800559c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055a6:	f3ef 8311 	mrs	r3, BASEPRI
 80055aa:	f04f 0120 	mov.w	r1, #32
 80055ae:	f381 8811 	msr	BASEPRI, r1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	4816      	ldr	r0, [pc, #88]	@ (8005610 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80055b6:	f7ff fd25 	bl	8005004 <_PreparePacket>
 80055ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	e00b      	b.n	80055e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	1c59      	adds	r1, r3, #1
 80055d2:	61f9      	str	r1, [r7, #28]
 80055d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	09db      	lsrs	r3, r3, #7
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e6:	d8f0      	bhi.n	80055ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	61fa      	str	r2, [r7, #28]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	6938      	ldr	r0, [r7, #16]
 80055fe:	f7ff fded 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f383 8811 	msr	BASEPRI, r3
}
 8005608:	bf00      	nop
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	2001974c 	.word	0x2001974c

08005614 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b08c      	sub	sp, #48	@ 0x30
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005620:	f3ef 8311 	mrs	r3, BASEPRI
 8005624:	f04f 0120 	mov.w	r1, #32
 8005628:	f381 8811 	msr	BASEPRI, r1
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	4825      	ldr	r0, [pc, #148]	@ (80056c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005630:	f7ff fce8 	bl	8005004 <_PreparePacket>
 8005634:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005642:	e00b      	b.n	800565c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	b2da      	uxtb	r2, r3
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800564e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	09db      	lsrs	r3, r3, #7
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005660:	d8f0      	bhi.n	8005644 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005670:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	e00b      	b.n	8005694 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	6279      	str	r1, [r7, #36]	@ 0x24
 8005686:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	09db      	lsrs	r3, r3, #7
 8005692:	623b      	str	r3, [r7, #32]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	2b7f      	cmp	r3, #127	@ 0x7f
 8005698:	d8f0      	bhi.n	800567c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	627a      	str	r2, [r7, #36]	@ 0x24
 80056a0:	6a3a      	ldr	r2, [r7, #32]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	6979      	ldr	r1, [r7, #20]
 80056ae:	69b8      	ldr	r0, [r7, #24]
 80056b0:	f7ff fd94 	bl	80051dc <_SendPacket>
  RECORD_END();
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f383 8811 	msr	BASEPRI, r3
}
 80056ba:	bf00      	nop
 80056bc:	3730      	adds	r7, #48	@ 0x30
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	2001974c 	.word	0x2001974c

080056c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	@ 0x30
 80056cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80056ce:	4b58      	ldr	r3, [pc, #352]	@ (8005830 <SEGGER_SYSVIEW_Start+0x168>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80056d4:	f3ef 8311 	mrs	r3, BASEPRI
 80056d8:	f04f 0120 	mov.w	r1, #32
 80056dc:	f381 8811 	msr	BASEPRI, r1
 80056e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80056e2:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <SEGGER_SYSVIEW_Start+0x168>)
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	220a      	movs	r2, #10
 80056e8:	4952      	ldr	r1, [pc, #328]	@ (8005834 <SEGGER_SYSVIEW_Start+0x16c>)
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fa fd70 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80056f6:	200a      	movs	r0, #10
 80056f8:	f7ff ff32 	bl	8005560 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005700:	f04f 0120 	mov.w	r1, #32
 8005704:	f381 8811 	msr	BASEPRI, r1
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	484b      	ldr	r0, [pc, #300]	@ (8005838 <SEGGER_SYSVIEW_Start+0x170>)
 800570c:	f7ff fc7a 	bl	8005004 <_PreparePacket>
 8005710:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800571a:	4b45      	ldr	r3, [pc, #276]	@ (8005830 <SEGGER_SYSVIEW_Start+0x168>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005720:	e00b      	b.n	800573a <SEGGER_SYSVIEW_Start+0x72>
 8005722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800572c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	2b7f      	cmp	r3, #127	@ 0x7f
 800573e:	d8f0      	bhi.n	8005722 <SEGGER_SYSVIEW_Start+0x5a>
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
 8005754:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <SEGGER_SYSVIEW_Start+0x168>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	623b      	str	r3, [r7, #32]
 800575a:	e00b      	b.n	8005774 <SEGGER_SYSVIEW_Start+0xac>
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	b2da      	uxtb	r2, r3
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	1c59      	adds	r1, r3, #1
 8005764:	6279      	str	r1, [r7, #36]	@ 0x24
 8005766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	09db      	lsrs	r3, r3, #7
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b7f      	cmp	r3, #127	@ 0x7f
 8005778:	d8f0      	bhi.n	800575c <SEGGER_SYSVIEW_Start+0x94>
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	4b28      	ldr	r3, [pc, #160]	@ (8005830 <SEGGER_SYSVIEW_Start+0x168>)
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	e00b      	b.n	80057ae <SEGGER_SYSVIEW_Start+0xe6>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	1c59      	adds	r1, r3, #1
 800579e:	61f9      	str	r1, [r7, #28]
 80057a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	09db      	lsrs	r3, r3, #7
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b2:	d8f0      	bhi.n	8005796 <SEGGER_SYSVIEW_Start+0xce>
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	61fa      	str	r2, [r7, #28]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	e00b      	b.n	80057e6 <SEGGER_SYSVIEW_Start+0x11e>
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	1c59      	adds	r1, r3, #1
 80057d6:	6179      	str	r1, [r7, #20]
 80057d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	09db      	lsrs	r3, r3, #7
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057ea:	d8f0      	bhi.n	80057ce <SEGGER_SYSVIEW_Start+0x106>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	617a      	str	r2, [r7, #20]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80057fc:	2218      	movs	r2, #24
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fceb 	bl	80051dc <_SendPacket>
      RECORD_END();
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800580c:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <SEGGER_SYSVIEW_Start+0x168>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005814:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <SEGGER_SYSVIEW_Start+0x168>)
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800581a:	f000 f9eb 	bl	8005bf4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800581e:	f000 f9b1 	bl	8005b84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005822:	f000 fd21 	bl	8006268 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005826:	bf00      	nop
 8005828:	3730      	adds	r7, #48	@ 0x30
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2001971c 	.word	0x2001971c
 8005834:	080067a0 	.word	0x080067a0
 8005838:	2001974c 	.word	0x2001974c

0800583c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005842:	f3ef 8311 	mrs	r3, BASEPRI
 8005846:	f04f 0120 	mov.w	r1, #32
 800584a:	f381 8811 	msr	BASEPRI, r1
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	480b      	ldr	r0, [pc, #44]	@ (8005880 <SEGGER_SYSVIEW_Stop+0x44>)
 8005852:	f7ff fbd7 	bl	8005004 <_PreparePacket>
 8005856:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005858:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <SEGGER_SYSVIEW_Stop+0x48>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005860:	220b      	movs	r2, #11
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6838      	ldr	r0, [r7, #0]
 8005866:	f7ff fcb9 	bl	80051dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800586a:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <SEGGER_SYSVIEW_Stop+0x48>)
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f383 8811 	msr	BASEPRI, r3
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	2001974c 	.word	0x2001974c
 8005884:	2001971c 	.word	0x2001971c

08005888 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b08c      	sub	sp, #48	@ 0x30
 800588c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800588e:	f3ef 8311 	mrs	r3, BASEPRI
 8005892:	f04f 0120 	mov.w	r1, #32
 8005896:	f381 8811 	msr	BASEPRI, r1
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	4845      	ldr	r0, [pc, #276]	@ (80059b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800589e:	f7ff fbb1 	bl	8005004 <_PreparePacket>
 80058a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ac:	4b42      	ldr	r3, [pc, #264]	@ (80059b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058b2:	e00b      	b.n	80058cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80058be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80058d0:	d8f0      	bhi.n	80058b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80058d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058e6:	4b34      	ldr	r3, [pc, #208]	@ (80059b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	623b      	str	r3, [r7, #32]
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80058f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	623b      	str	r3, [r7, #32]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	2b7f      	cmp	r3, #127	@ 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	627a      	str	r2, [r7, #36]	@ 0x24
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	4b25      	ldr	r3, [pc, #148]	@ (80059b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e00b      	b.n	8005940 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	1c59      	adds	r1, r3, #1
 8005930:	61f9      	str	r1, [r7, #28]
 8005932:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	09db      	lsrs	r3, r3, #7
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b7f      	cmp	r3, #127	@ 0x7f
 8005944:	d8f0      	bhi.n	8005928 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	61fa      	str	r2, [r7, #28]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e00b      	b.n	8005978 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	1c59      	adds	r1, r3, #1
 8005968:	6179      	str	r1, [r7, #20]
 800596a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	09db      	lsrs	r3, r3, #7
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b7f      	cmp	r3, #127	@ 0x7f
 800597c:	d8f0      	bhi.n	8005960 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	617a      	str	r2, [r7, #20]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800598e:	2218      	movs	r2, #24
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	68b8      	ldr	r0, [r7, #8]
 8005994:	f7ff fc22 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800599e:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80059a6:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	4798      	blx	r3
  }
}
 80059ac:	bf00      	nop
 80059ae:	3730      	adds	r7, #48	@ 0x30
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2001974c 	.word	0x2001974c
 80059b8:	2001971c 	.word	0x2001971c

080059bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b092      	sub	sp, #72	@ 0x48
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80059c4:	f3ef 8311 	mrs	r3, BASEPRI
 80059c8:	f04f 0120 	mov.w	r1, #32
 80059cc:	f381 8811 	msr	BASEPRI, r1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	486a      	ldr	r0, [pc, #424]	@ (8005b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80059d4:	f7ff fb16 	bl	8005004 <_PreparePacket>
 80059d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b66      	ldr	r3, [pc, #408]	@ (8005b80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ee:	e00b      	b.n	8005a08 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80059f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	6479      	str	r1, [r7, #68]	@ 0x44
 80059fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a04:	09db      	lsrs	r3, r3, #7
 8005a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a0c:	d8f0      	bhi.n	80059f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a28:	e00b      	b.n	8005a42 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a30:	1c59      	adds	r1, r3, #1
 8005a32:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005a34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	09db      	lsrs	r3, r3, #7
 8005a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a46:	d8f0      	bhi.n	8005a2a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a56:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	4619      	mov	r1, r3
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fa9f 	bl	8004fa4 <_EncodeStr>
 8005a66:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005a68:	2209      	movs	r2, #9
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	6938      	ldr	r0, [r7, #16]
 8005a6e:	f7ff fbb5 	bl	80051dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b40      	ldr	r3, [pc, #256]	@ (8005b80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a86:	e00b      	b.n	8005aa0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8e:	1c59      	adds	r1, r3, #1
 8005a90:	6379      	str	r1, [r7, #52]	@ 0x34
 8005a92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	09db      	lsrs	r3, r3, #7
 8005a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aa4:	d8f0      	bhi.n	8005a88 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	637a      	str	r2, [r7, #52]	@ 0x34
 8005aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ac0:	e00b      	b.n	8005ada <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac8:	1c59      	adds	r1, r3, #1
 8005aca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005acc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	09db      	lsrs	r3, r3, #7
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ade:	d8f0      	bhi.n	8005ac2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	e00b      	b.n	8005b14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	1c59      	adds	r1, r3, #1
 8005b04:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	09db      	lsrs	r3, r3, #7
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b18:	d8f0      	bhi.n	8005afc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b20:	6a3a      	ldr	r2, [r7, #32]
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e00b      	b.n	8005b4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	61f9      	str	r1, [r7, #28]
 8005b3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	09db      	lsrs	r3, r3, #7
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b50:	d8f0      	bhi.n	8005b34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	61fa      	str	r2, [r7, #28]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005b62:	2215      	movs	r2, #21
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	6938      	ldr	r0, [r7, #16]
 8005b68:	f7ff fb38 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f383 8811 	msr	BASEPRI, r3
}
 8005b72:	bf00      	nop
 8005b74:	3748      	adds	r7, #72	@ 0x48
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	2001974c 	.word	0x2001974c
 8005b80:	2001971c 	.word	0x2001971c

08005b84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005b88:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005b9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ba8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	4798      	blx	r3
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	2001971c 	.word	0x2001971c

08005bac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb8:	f04f 0120 	mov.w	r1, #32
 8005bbc:	f381 8811 	msr	BASEPRI, r1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	480b      	ldr	r0, [pc, #44]	@ (8005bf0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005bc4:	f7ff fa1e 	bl	8005004 <_PreparePacket>
 8005bc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bca:	2280      	movs	r2, #128	@ 0x80
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	6938      	ldr	r0, [r7, #16]
 8005bd0:	f7ff f9e8 	bl	8004fa4 <_EncodeStr>
 8005bd4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005bd6:	220e      	movs	r2, #14
 8005bd8:	68f9      	ldr	r1, [r7, #12]
 8005bda:	6938      	ldr	r0, [r7, #16]
 8005bdc:	f7ff fafe 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f383 8811 	msr	BASEPRI, r3
}
 8005be6:	bf00      	nop
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	2001974c 	.word	0x2001974c

08005bf4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005bfa:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01a      	beq.n	8005c38 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005c02:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d015      	beq.n	8005c38 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005c0c:	4b10      	ldr	r3, [pc, #64]	@ (8005c50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4798      	blx	r3
 8005c14:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c18:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	000a      	movs	r2, r1
 8005c28:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4621      	mov	r1, r4
 8005c30:	200d      	movs	r0, #13
 8005c32:	f7ff fcef 	bl	8005614 <SEGGER_SYSVIEW_RecordU32x2>
 8005c36:	e006      	b.n	8005c46 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	200c      	movs	r0, #12
 8005c40:	f7ff fcac 	bl	800559c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd90      	pop	{r4, r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	2001971c 	.word	0x2001971c
 8005c54:	e0001004 	.word	0xe0001004

08005c58 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c62:	f04f 0120 	mov.w	r1, #32
 8005c66:	f381 8811 	msr	BASEPRI, r1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	4819      	ldr	r0, [pc, #100]	@ (8005cd4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005c6e:	f7ff f9c9 	bl	8005004 <_PreparePacket>
 8005c72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005c78:	4b17      	ldr	r3, [pc, #92]	@ (8005cd8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c80:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	e00b      	b.n	8005ca4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	6179      	str	r1, [r7, #20]
 8005c96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	09db      	lsrs	r3, r3, #7
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca8:	d8f0      	bhi.n	8005c8c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	617a      	str	r2, [r7, #20]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005cba:	2202      	movs	r2, #2
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	68b8      	ldr	r0, [r7, #8]
 8005cc0:	f7ff fa8c 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f383 8811 	msr	BASEPRI, r3
}
 8005cca:	bf00      	nop
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	2001974c 	.word	0x2001974c
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce6:	f04f 0120 	mov.w	r1, #32
 8005cea:	f381 8811 	msr	BASEPRI, r1
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	4807      	ldr	r0, [pc, #28]	@ (8005d10 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005cf2:	f7ff f987 	bl	8005004 <_PreparePacket>
 8005cf6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6838      	ldr	r0, [r7, #0]
 8005cfe:	f7ff fa6d 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f383 8811 	msr	BASEPRI, r3
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	2001974c 	.word	0x2001974c

08005d14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d1e:	f04f 0120 	mov.w	r1, #32
 8005d22:	f381 8811 	msr	BASEPRI, r1
 8005d26:	607b      	str	r3, [r7, #4]
 8005d28:	4807      	ldr	r0, [pc, #28]	@ (8005d48 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005d2a:	f7ff f96b 	bl	8005004 <_PreparePacket>
 8005d2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005d30:	2212      	movs	r2, #18
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6838      	ldr	r0, [r7, #0]
 8005d36:	f7ff fa51 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f383 8811 	msr	BASEPRI, r3
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	2001974c 	.word	0x2001974c

08005d4c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d54:	f3ef 8311 	mrs	r3, BASEPRI
 8005d58:	f04f 0120 	mov.w	r1, #32
 8005d5c:	f381 8811 	msr	BASEPRI, r1
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	4817      	ldr	r0, [pc, #92]	@ (8005dc0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005d64:	f7ff f94e 	bl	8005004 <_PreparePacket>
 8005d68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	e00b      	b.n	8005d90 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	61f9      	str	r1, [r7, #28]
 8005d82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	09db      	lsrs	r3, r3, #7
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d94:	d8f0      	bhi.n	8005d78 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	61fa      	str	r2, [r7, #28]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005da6:	221c      	movs	r2, #28
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	6938      	ldr	r0, [r7, #16]
 8005dac:	f7ff fa16 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f383 8811 	msr	BASEPRI, r3
}
 8005db6:	bf00      	nop
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2001974c 	.word	0x2001974c

08005dc4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dce:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd2:	f04f 0120 	mov.w	r1, #32
 8005dd6:	f381 8811 	msr	BASEPRI, r1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	4824      	ldr	r0, [pc, #144]	@ (8005e70 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005dde:	f7ff f911 	bl	8005004 <_PreparePacket>
 8005de2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	623b      	str	r3, [r7, #32]
 8005df0:	e00b      	b.n	8005e0a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	6279      	str	r1, [r7, #36]	@ 0x24
 8005dfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	09db      	lsrs	r3, r3, #7
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e0e:	d8f0      	bhi.n	8005df2 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	e00b      	b.n	8005e42 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	1c59      	adds	r1, r3, #1
 8005e32:	61f9      	str	r1, [r7, #28]
 8005e34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	09db      	lsrs	r3, r3, #7
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e46:	d8f0      	bhi.n	8005e2a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	61fa      	str	r2, [r7, #28]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005e58:	221c      	movs	r2, #28
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	6938      	ldr	r0, [r7, #16]
 8005e5e:	f7ff f9bd 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f383 8811 	msr	BASEPRI, r3
}
 8005e68:	bf00      	nop
 8005e6a:	3728      	adds	r7, #40	@ 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	2001974c 	.word	0x2001974c

08005e74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e7e:	f04f 0120 	mov.w	r1, #32
 8005e82:	f381 8811 	msr	BASEPRI, r1
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	4807      	ldr	r0, [pc, #28]	@ (8005ea8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e8a:	f7ff f8bb 	bl	8005004 <_PreparePacket>
 8005e8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e90:	2211      	movs	r2, #17
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6838      	ldr	r0, [r7, #0]
 8005e96:	f7ff f9a1 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f383 8811 	msr	BASEPRI, r3
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	2001974c 	.word	0x2001974c

08005eac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb8:	f04f 0120 	mov.w	r1, #32
 8005ebc:	f381 8811 	msr	BASEPRI, r1
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	4819      	ldr	r0, [pc, #100]	@ (8005f28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ec4:	f7ff f89e 	bl	8005004 <_PreparePacket>
 8005ec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ece:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e00b      	b.n	8005efa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	1c59      	adds	r1, r3, #1
 8005eea:	61f9      	str	r1, [r7, #28]
 8005eec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	09db      	lsrs	r3, r3, #7
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005efe:	d8f0      	bhi.n	8005ee2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	61fa      	str	r2, [r7, #28]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f10:	2208      	movs	r2, #8
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6938      	ldr	r0, [r7, #16]
 8005f16:	f7ff f961 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f383 8811 	msr	BASEPRI, r3
}
 8005f20:	bf00      	nop
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	2001974c 	.word	0x2001974c
 8005f2c:	2001971c 	.word	0x2001971c

08005f30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f38:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3c:	f04f 0120 	mov.w	r1, #32
 8005f40:	f381 8811 	msr	BASEPRI, r1
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	4819      	ldr	r0, [pc, #100]	@ (8005fac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f48:	f7ff f85c 	bl	8005004 <_PreparePacket>
 8005f4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f52:	4b17      	ldr	r3, [pc, #92]	@ (8005fb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e00b      	b.n	8005f7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	61f9      	str	r1, [r7, #28]
 8005f70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f82:	d8f0      	bhi.n	8005f66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	61fa      	str	r2, [r7, #28]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f94:	2204      	movs	r2, #4
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	6938      	ldr	r0, [r7, #16]
 8005f9a:	f7ff f91f 	bl	80051dc <_SendPacket>
  RECORD_END();
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f383 8811 	msr	BASEPRI, r3
}
 8005fa4:	bf00      	nop
 8005fa6:	3720      	adds	r7, #32
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	2001974c 	.word	0x2001974c
 8005fb0:	2001971c 	.word	0x2001971c

08005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc0:	f04f 0120 	mov.w	r1, #32
 8005fc4:	f381 8811 	msr	BASEPRI, r1
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	4819      	ldr	r0, [pc, #100]	@ (8006030 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005fcc:	f7ff f81a 	bl	8005004 <_PreparePacket>
 8005fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fd6:	4b17      	ldr	r3, [pc, #92]	@ (8006034 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	61f9      	str	r1, [r7, #28]
 8005ff4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b7f      	cmp	r3, #127	@ 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006018:	2206      	movs	r2, #6
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	6938      	ldr	r0, [r7, #16]
 800601e:	f7ff f8dd 	bl	80051dc <_SendPacket>
  RECORD_END();
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f383 8811 	msr	BASEPRI, r3
}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	2001974c 	.word	0x2001974c
 8006034:	2001971c 	.word	0x2001971c

08006038 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	@ 0x28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006042:	f3ef 8311 	mrs	r3, BASEPRI
 8006046:	f04f 0120 	mov.w	r1, #32
 800604a:	f381 8811 	msr	BASEPRI, r1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	4827      	ldr	r0, [pc, #156]	@ (80060f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006052:	f7fe ffd7 	bl	8005004 <_PreparePacket>
 8006056:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800605c:	4b25      	ldr	r3, [pc, #148]	@ (80060f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	e00b      	b.n	8006088 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	b2da      	uxtb	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	1c59      	adds	r1, r3, #1
 8006078:	6279      	str	r1, [r7, #36]	@ 0x24
 800607a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	09db      	lsrs	r3, r3, #7
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2b7f      	cmp	r3, #127	@ 0x7f
 800608c:	d8f0      	bhi.n	8006070 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	627a      	str	r2, [r7, #36]	@ 0x24
 8006094:	6a3a      	ldr	r2, [r7, #32]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e00b      	b.n	80060c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	61f9      	str	r1, [r7, #28]
 80060b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	09db      	lsrs	r3, r3, #7
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060c4:	d8f0      	bhi.n	80060a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	61fa      	str	r2, [r7, #28]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80060d6:	2207      	movs	r2, #7
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f7ff f87e 	bl	80051dc <_SendPacket>
  RECORD_END();
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f383 8811 	msr	BASEPRI, r3
}
 80060e6:	bf00      	nop
 80060e8:	3728      	adds	r7, #40	@ 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	2001974c 	.word	0x2001974c
 80060f4:	2001971c 	.word	0x2001971c

080060f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006100:	4b04      	ldr	r3, [pc, #16]	@ (8006114 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	1ad3      	subs	r3, r2, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	2001971c 	.word	0x2001971c

08006118 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b08c      	sub	sp, #48	@ 0x30
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006122:	4b40      	ldr	r3, [pc, #256]	@ (8006224 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d077      	beq.n	800621a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800612a:	4b3e      	ldr	r3, [pc, #248]	@ (8006224 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006130:	2300      	movs	r3, #0
 8006132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006134:	e008      	b.n	8006148 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	3301      	adds	r3, #1
 8006146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800614c:	429a      	cmp	r2, r3
 800614e:	d3f2      	bcc.n	8006136 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006150:	e000      	b.n	8006154 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006152:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d055      	beq.n	8006206 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800615a:	f3ef 8311 	mrs	r3, BASEPRI
 800615e:	f04f 0120 	mov.w	r1, #32
 8006162:	f381 8811 	msr	BASEPRI, r1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	482f      	ldr	r0, [pc, #188]	@ (8006228 <SEGGER_SYSVIEW_SendModule+0x110>)
 800616a:	f7fe ff4b 	bl	8005004 <_PreparePacket>
 800616e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	e00b      	b.n	8006196 <SEGGER_SYSVIEW_SendModule+0x7e>
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	1c59      	adds	r1, r3, #1
 8006186:	6279      	str	r1, [r7, #36]	@ 0x24
 8006188:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	09db      	lsrs	r3, r3, #7
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	2b7f      	cmp	r3, #127	@ 0x7f
 800619a:	d8f0      	bhi.n	800617e <SEGGER_SYSVIEW_SendModule+0x66>
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80061a2:	6a3a      	ldr	r2, [r7, #32]
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e00b      	b.n	80061d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	61f9      	str	r1, [r7, #28]
 80061c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	09db      	lsrs	r3, r3, #7
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80061d4:	d8f0      	bhi.n	80061b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	61fa      	str	r2, [r7, #28]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2280      	movs	r2, #128	@ 0x80
 80061ec:	4619      	mov	r1, r3
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7fe fed8 	bl	8004fa4 <_EncodeStr>
 80061f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80061f6:	2216      	movs	r2, #22
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	6938      	ldr	r0, [r7, #16]
 80061fc:	f7fe ffee 	bl	80051dc <_SendPacket>
      RECORD_END();
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d006      	beq.n	800621a <SEGGER_SYSVIEW_SendModule+0x102>
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4798      	blx	r3
    }
  }
}
 800621a:	bf00      	nop
 800621c:	3730      	adds	r7, #48	@ 0x30
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20019744 	.word	0x20019744
 8006228:	2001974c 	.word	0x2001974c

0800622c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006232:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00f      	beq.n	800625a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800623a:	4b0a      	ldr	r3, [pc, #40]	@ (8006264 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f2      	bne.n	8006240 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20019744 	.word	0x20019744

08006268 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800626e:	f3ef 8311 	mrs	r3, BASEPRI
 8006272:	f04f 0120 	mov.w	r1, #32
 8006276:	f381 8811 	msr	BASEPRI, r1
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	4817      	ldr	r0, [pc, #92]	@ (80062dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800627e:	f7fe fec1 	bl	8005004 <_PreparePacket>
 8006282:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	4b14      	ldr	r3, [pc, #80]	@ (80062e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	e00b      	b.n	80062ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	1c59      	adds	r1, r3, #1
 800629c:	6179      	str	r1, [r7, #20]
 800629e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	09db      	lsrs	r3, r3, #7
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80062b0:	d8f0      	bhi.n	8006294 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	617a      	str	r2, [r7, #20]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80062c2:	221b      	movs	r2, #27
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	68b8      	ldr	r0, [r7, #8]
 80062c8:	f7fe ff88 	bl	80051dc <_SendPacket>
  RECORD_END();
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f383 8811 	msr	BASEPRI, r3
}
 80062d2:	bf00      	nop
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	2001974c 	.word	0x2001974c
 80062e0:	20019748 	.word	0x20019748

080062e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	@ 0x28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062ec:	f3ef 8311 	mrs	r3, BASEPRI
 80062f0:	f04f 0120 	mov.w	r1, #32
 80062f4:	f381 8811 	msr	BASEPRI, r1
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	4827      	ldr	r0, [pc, #156]	@ (8006398 <SEGGER_SYSVIEW_Warn+0xb4>)
 80062fc:	f7fe fe82 	bl	8005004 <_PreparePacket>
 8006300:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006302:	2280      	movs	r2, #128	@ 0x80
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f7fe fe4c 	bl	8004fa4 <_EncodeStr>
 800630c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
 8006312:	2301      	movs	r3, #1
 8006314:	623b      	str	r3, [r7, #32]
 8006316:	e00b      	b.n	8006330 <SEGGER_SYSVIEW_Warn+0x4c>
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	6279      	str	r1, [r7, #36]	@ 0x24
 8006322:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	09db      	lsrs	r3, r3, #7
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	2b7f      	cmp	r3, #127	@ 0x7f
 8006334:	d8f0      	bhi.n	8006318 <SEGGER_SYSVIEW_Warn+0x34>
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	627a      	str	r2, [r7, #36]	@ 0x24
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e00b      	b.n	8006368 <SEGGER_SYSVIEW_Warn+0x84>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	61f9      	str	r1, [r7, #28]
 800635a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	09db      	lsrs	r3, r3, #7
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b7f      	cmp	r3, #127	@ 0x7f
 800636c:	d8f0      	bhi.n	8006350 <SEGGER_SYSVIEW_Warn+0x6c>
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	61fa      	str	r2, [r7, #28]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800637e:	221a      	movs	r2, #26
 8006380:	68f9      	ldr	r1, [r7, #12]
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f7fe ff2a 	bl	80051dc <_SendPacket>
  RECORD_END();
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f383 8811 	msr	BASEPRI, r3
}
 800638e:	bf00      	nop
 8006390:	3728      	adds	r7, #40	@ 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	2001974c 	.word	0x2001974c

0800639c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800639c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639e:	b085      	sub	sp, #20
 80063a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	e033      	b.n	8006410 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80063a8:	491e      	ldr	r1, [pc, #120]	@ (8006424 <_cbSendTaskList+0x88>)
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	491a      	ldr	r1, [pc, #104]	@ (8006424 <_cbSendTaskList+0x88>)
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	3304      	adds	r3, #4
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	4c16      	ldr	r4, [pc, #88]	@ (8006424 <_cbSendTaskList+0x88>)
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4423      	add	r3, r4
 80063d8:	3308      	adds	r3, #8
 80063da:	681c      	ldr	r4, [r3, #0]
 80063dc:	4d11      	ldr	r5, [pc, #68]	@ (8006424 <_cbSendTaskList+0x88>)
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	442b      	add	r3, r5
 80063ea:	330c      	adds	r3, #12
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	4e0d      	ldr	r6, [pc, #52]	@ (8006424 <_cbSendTaskList+0x88>)
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4433      	add	r3, r6
 80063fc:	3310      	adds	r3, #16
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	462b      	mov	r3, r5
 8006404:	4622      	mov	r2, r4
 8006406:	f000 f8bd 	bl	8006584 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3301      	adds	r3, #1
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	4b05      	ldr	r3, [pc, #20]	@ (8006428 <_cbSendTaskList+0x8c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	429a      	cmp	r2, r3
 8006418:	d3c6      	bcc.n	80063a8 <_cbSendTaskList+0xc>
  }
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006424:	20019830 	.word	0x20019830
 8006428:	200198d0 	.word	0x200198d0

0800642c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800642c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006434:	f7fd f946 	bl	80036c4 <xTaskGetTickCountFromISR>
 8006438:	4603      	mov	r3, r0
 800643a:	2200      	movs	r2, #0
 800643c:	469a      	mov	sl, r3
 800643e:	4693      	mov	fp, r2
 8006440:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	f04f 0a00 	mov.w	sl, #0
 8006450:	f04f 0b00 	mov.w	fp, #0
 8006454:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006458:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800645c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006460:	4652      	mov	r2, sl
 8006462:	465b      	mov	r3, fp
 8006464:	1a14      	subs	r4, r2, r0
 8006466:	eb63 0501 	sbc.w	r5, r3, r1
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	00ab      	lsls	r3, r5, #2
 8006474:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006478:	00a2      	lsls	r2, r4, #2
 800647a:	4614      	mov	r4, r2
 800647c:	461d      	mov	r5, r3
 800647e:	eb14 0800 	adds.w	r8, r4, r0
 8006482:	eb45 0901 	adc.w	r9, r5, r1
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800649a:	4690      	mov	r8, r2
 800649c:	4699      	mov	r9, r3
 800649e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80064a2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080064b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80064c2:	2205      	movs	r2, #5
 80064c4:	492b      	ldr	r1, [pc, #172]	@ (8006574 <SYSVIEW_AddTask+0xc0>)
 80064c6:	68b8      	ldr	r0, [r7, #8]
 80064c8:	f000 f87d 	bl	80065c6 <memcmp>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04b      	beq.n	800656a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80064d2:	4b29      	ldr	r3, [pc, #164]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b07      	cmp	r3, #7
 80064d8:	d903      	bls.n	80064e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80064da:	4828      	ldr	r0, [pc, #160]	@ (800657c <SYSVIEW_AddTask+0xc8>)
 80064dc:	f7ff ff02 	bl	80062e4 <SEGGER_SYSVIEW_Warn>
    return;
 80064e0:	e044      	b.n	800656c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80064e2:	4b25      	ldr	r3, [pc, #148]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4926      	ldr	r1, [pc, #152]	@ (8006580 <SYSVIEW_AddTask+0xcc>)
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80064f6:	4b20      	ldr	r3, [pc, #128]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4921      	ldr	r1, [pc, #132]	@ (8006580 <SYSVIEW_AddTask+0xcc>)
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	3304      	adds	r3, #4
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800650c:	4b1a      	ldr	r3, [pc, #104]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	491b      	ldr	r1, [pc, #108]	@ (8006580 <SYSVIEW_AddTask+0xcc>)
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	3308      	adds	r3, #8
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4916      	ldr	r1, [pc, #88]	@ (8006580 <SYSVIEW_AddTask+0xcc>)
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	330c      	adds	r3, #12
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006538:	4b0f      	ldr	r3, [pc, #60]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	4910      	ldr	r1, [pc, #64]	@ (8006580 <SYSVIEW_AddTask+0xcc>)
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3310      	adds	r3, #16
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800654e:	4b0a      	ldr	r3, [pc, #40]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3301      	adds	r3, #1
 8006554:	4a08      	ldr	r2, [pc, #32]	@ (8006578 <SYSVIEW_AddTask+0xc4>)
 8006556:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f80e 	bl	8006584 <SYSVIEW_SendTaskInfo>
 8006568:	e000      	b.n	800656c <SYSVIEW_AddTask+0xb8>
    return;
 800656a:	bf00      	nop

}
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	0800671c 	.word	0x0800671c
 8006578:	200198d0 	.word	0x200198d0
 800657c:	08006724 	.word	0x08006724
 8006580:	20019830 	.word	0x20019830

08006584 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	@ 0x28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006592:	f107 0314 	add.w	r3, r7, #20
 8006596:	2214      	movs	r2, #20
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f823 	bl	80065e6 <memset>
  TaskInfo.TaskID     = TaskID;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff f9ff 	bl	80059bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80065be:	bf00      	nop
 80065c0:	3728      	adds	r7, #40	@ 0x28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <memcmp>:
 80065c6:	b510      	push	{r4, lr}
 80065c8:	3901      	subs	r1, #1
 80065ca:	4402      	add	r2, r0
 80065cc:	4290      	cmp	r0, r2
 80065ce:	d101      	bne.n	80065d4 <memcmp+0xe>
 80065d0:	2000      	movs	r0, #0
 80065d2:	e005      	b.n	80065e0 <memcmp+0x1a>
 80065d4:	7803      	ldrb	r3, [r0, #0]
 80065d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065da:	42a3      	cmp	r3, r4
 80065dc:	d001      	beq.n	80065e2 <memcmp+0x1c>
 80065de:	1b18      	subs	r0, r3, r4
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	3001      	adds	r0, #1
 80065e4:	e7f2      	b.n	80065cc <memcmp+0x6>

080065e6 <memset>:
 80065e6:	4402      	add	r2, r0
 80065e8:	4603      	mov	r3, r0
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d100      	bne.n	80065f0 <memset+0xa>
 80065ee:	4770      	bx	lr
 80065f0:	f803 1b01 	strb.w	r1, [r3], #1
 80065f4:	e7f9      	b.n	80065ea <memset+0x4>
	...

080065f8 <__libc_init_array>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006630 <__libc_init_array+0x38>)
 80065fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006634 <__libc_init_array+0x3c>)
 80065fe:	1b64      	subs	r4, r4, r5
 8006600:	10a4      	asrs	r4, r4, #2
 8006602:	2600      	movs	r6, #0
 8006604:	42a6      	cmp	r6, r4
 8006606:	d109      	bne.n	800661c <__libc_init_array+0x24>
 8006608:	4d0b      	ldr	r5, [pc, #44]	@ (8006638 <__libc_init_array+0x40>)
 800660a:	4c0c      	ldr	r4, [pc, #48]	@ (800663c <__libc_init_array+0x44>)
 800660c:	f000 f826 	bl	800665c <_init>
 8006610:	1b64      	subs	r4, r4, r5
 8006612:	10a4      	asrs	r4, r4, #2
 8006614:	2600      	movs	r6, #0
 8006616:	42a6      	cmp	r6, r4
 8006618:	d105      	bne.n	8006626 <__libc_init_array+0x2e>
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006620:	4798      	blx	r3
 8006622:	3601      	adds	r6, #1
 8006624:	e7ee      	b.n	8006604 <__libc_init_array+0xc>
 8006626:	f855 3b04 	ldr.w	r3, [r5], #4
 800662a:	4798      	blx	r3
 800662c:	3601      	adds	r6, #1
 800662e:	e7f2      	b.n	8006616 <__libc_init_array+0x1e>
 8006630:	080067bc 	.word	0x080067bc
 8006634:	080067bc 	.word	0x080067bc
 8006638:	080067bc 	.word	0x080067bc
 800663c:	080067c0 	.word	0x080067c0

08006640 <memcpy>:
 8006640:	440a      	add	r2, r1
 8006642:	4291      	cmp	r1, r2
 8006644:	f100 33ff 	add.w	r3, r0, #4294967295
 8006648:	d100      	bne.n	800664c <memcpy+0xc>
 800664a:	4770      	bx	lr
 800664c:	b510      	push	{r4, lr}
 800664e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006656:	4291      	cmp	r1, r2
 8006658:	d1f9      	bne.n	800664e <memcpy+0xe>
 800665a:	bd10      	pop	{r4, pc}

0800665c <_init>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr

08006668 <_fini>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	bf00      	nop
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr
