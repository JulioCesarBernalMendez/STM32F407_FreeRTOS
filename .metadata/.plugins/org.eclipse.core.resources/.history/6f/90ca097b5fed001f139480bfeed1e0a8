
App_026_Example_8.2_Alternative_Print_Task_Using_Gatekeeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008468  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080085f8  080085f8  000095f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008898  08008898  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008898  08008898  00009898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a0  080088a0  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088a4  080088a4  000098a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080088a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00019a24  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019aa0  20019aa0  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019242  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003666  00000000  00000000  000232ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  00026958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b1  00000000  00000000  00028038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026024  00000000  00000000  000291e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b09a  00000000  00000000  0004f20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed637  00000000  00000000  0006a2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001578de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068bc  00000000  00000000  00157924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  0015e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085e0 	.word	0x080085e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080085e0 	.word	0x080085e0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012edc 	.word	0x20012edc
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fc13 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f84f 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8e1 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8b5 	bl	8000780 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <main+0x90>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a1d      	ldr	r2, [pc, #116]	@ (8000690 <main+0x90>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000622:	f005 f9cb 	bl	80059bc <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 8000626:	f006 f85f 	bl	80066e8 <SEGGER_SYSVIEW_Start>

  /* Before a queue is used it must be explicitly created.
     The queue is created to hold a maximum of 5 character pointers */
  xPrintQueue = xQueueCreate( 5, sizeof( char * ) );
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	2005      	movs	r0, #5
 8000630:	f002 fba6 	bl	8002d80 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <main+0x94>)
 8000638:	6013      	str	r3, [r2, #0]

  /* check the queue was created successfully */
  if ( xPrintQueue != NULL )
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <main+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d023      	beq.n	800068a <main+0x8a>
       gatekeeper.
       The index to the string the task uses is passed to the task
       via the task parameter (the fourth parameter to xTaskCreate()).
       The tasks are created at different priorities so the higher
       priority task will occasionally preempt the lower priority task */
    xTaskCreate( prvPrintTask, "Print1", 1000, ( void * ) 0, 1, NULL );
 8000642:	2300      	movs	r3, #0
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2301      	movs	r3, #1
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000650:	4911      	ldr	r1, [pc, #68]	@ (8000698 <main+0x98>)
 8000652:	4812      	ldr	r0, [pc, #72]	@ (800069c <main+0x9c>)
 8000654:	f003 f89b 	bl	800378e <xTaskCreate>
    xTaskCreate( prvPrintTask, "Print2", 1000, ( void * ) 1, 2, NULL );
 8000658:	2300      	movs	r3, #0
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2302      	movs	r3, #2
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000666:	490e      	ldr	r1, [pc, #56]	@ (80006a0 <main+0xa0>)
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <main+0x9c>)
 800066a:	f003 f890 	bl	800378e <xTaskCreate>

    /* Create the gatekeeper task.
       This is the only task that is permitted to directly access UART2 */
    xTaskCreate( prvUART2GatekeeperTask, "Gatekeeper", 1000, NULL, 0, NULL );
 800066e:	2300      	movs	r3, #0
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2300      	movs	r3, #0
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800067c:	4909      	ldr	r1, [pc, #36]	@ (80006a4 <main+0xa4>)
 800067e:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <main+0xa8>)
 8000680:	f003 f885 	bl	800378e <xTaskCreate>

    /* start the scheduler so the created tasks start executing */
    vTaskStartScheduler();
 8000684:	f003 fa74 	bl	8003b70 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <main+0x8a>
 800068e:	bf00      	nop
 8000690:	e0001000 	.word	0xe0001000
 8000694:	200000e0 	.word	0x200000e0
 8000698:	08008694 	.word	0x08008694
 800069c:	080009b1 	.word	0x080009b1
 80006a0:	0800869c 	.word	0x0800869c
 80006a4:	080086a4 	.word	0x080086a4
 80006a8:	08000981 	.word	0x08000981

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	@ 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 f8f9 	bl	80078b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000720:	2332      	movs	r3, #50	@ 0x32
 8000722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000724:	2304      	movs	r3, #4
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000728:	2307      	movs	r3, #7
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fe7b 	bl	800142c <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800073c:	f000 f970 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f001 f8dc 	bl	800191c <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076a:	f000 f959 	bl	8000a20 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	@ 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f001 fda4 	bl	8002304 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f92d 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000098 	.word	0x20000098
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b40      	ldr	r3, [pc, #256]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3f      	ldr	r2, [pc, #252]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3d      	ldr	r3, [pc, #244]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b39      	ldr	r3, [pc, #228]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a38      	ldr	r2, [pc, #224]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b36      	ldr	r3, [pc, #216]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b32      	ldr	r3, [pc, #200]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b2b      	ldr	r3, [pc, #172]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a2a      	ldr	r2, [pc, #168]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <MX_GPIO_Init+0x11c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000860:	4824      	ldr	r0, [pc, #144]	@ (80008f4 <MX_GPIO_Init+0x120>)
 8000862:	f000 fda5 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	481f      	ldr	r0, [pc, #124]	@ (80008f8 <MX_GPIO_Init+0x124>)
 800087c:	f000 fbfc 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000880:	2304      	movs	r3, #4
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	481a      	ldr	r0, [pc, #104]	@ (80008fc <MX_GPIO_Init+0x128>)
 8000894:	f000 fbf0 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000898:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4810      	ldr	r0, [pc, #64]	@ (80008f4 <MX_GPIO_Init+0x120>)
 80008b2:	f000 fbe1 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c6:	2306      	movs	r3, #6
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <MX_GPIO_Init+0x12c>)
 80008d2:	f000 fbd1 	bl	8001078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2106      	movs	r1, #6
 80008da:	2006      	movs	r0, #6
 80008dc:	f000 fba2 	bl	8001024 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008e0:	2006      	movs	r0, #6
 80008e2:	f000 fbbb 	bl	800105c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020400 	.word	0x40020400
 8000900:	40020800 	.word	0x40020800

08000904 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e00b      	b.n	800092c <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	18d1      	adds	r1, r2, r3
 800091a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800091e:	2201      	movs	r2, #1
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f001 fd3f 	bl	80023a4 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	3301      	adds	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1ed      	bne.n	8000914 <UART2_Print_Text+0x10>
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  static int iCount = 0;

  /* Print out a message every 200 ticks.
     The message is not written out directly, but sent to the gatekeeper task */
  
  iCount++;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <vApplicationTickHook+0x30>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a09      	ldr	r2, [pc, #36]	@ (8000974 <vApplicationTickHook+0x30>)
 8000950:	6013      	str	r3, [r2, #0]

  if ( iCount >= 150 )
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <vApplicationTickHook+0x30>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b95      	cmp	r3, #149	@ 0x95
 8000958:	dd09      	ble.n	800096e <vApplicationTickHook+0x2a>
  {
    /* As xQueueSendToFrontFromISR() is being called from the tick hook, it is not
       necessary to use the xHigherPriorityTaskWoken parameter (the third parameter),
       and the parameter is set to NULL */
    xQueueSendToFrontFromISR( xPrintQueue, &pcStringsToPrint[ 2 ], NULL );
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <vApplicationTickHook+0x34>)
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	2200      	movs	r2, #0
 8000962:	4906      	ldr	r1, [pc, #24]	@ (800097c <vApplicationTickHook+0x38>)
 8000964:	f002 fb96 	bl	8003094 <xQueueGenericSendFromISR>

    /* reset the count ready to print out the string again in 200 ticks time */
    iCount = 0;
 8000968:	4b02      	ldr	r3, [pc, #8]	@ (8000974 <vApplicationTickHook+0x30>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  }
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000e4 	.word	0x200000e4
 8000978:	200000e0 	.word	0x200000e0
 800097c:	20000008 	.word	0x20000008

08000980 <prvUART2GatekeeperTask>:

static void prvUART2GatekeeperTask( void *pvParameters )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  {
    /* Wait for a message to arrive.
       An indefinite block time is specified so there is no need to check the
       return value - the function will only return when a message has been
       successfully received */
    xQueueReceive( xPrintQueue, &pcMessageToPrint, portMAX_DELAY );
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <prvUART2GatekeeperTask+0x28>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f107 010c 	add.w	r1, r7, #12
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fc39 	bl	800320c <xQueueReceive>

    /* output the received string */
    UART2_Print_Text( &huart2, pcMessageToPrint );
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4619      	mov	r1, r3
 800099e:	4803      	ldr	r0, [pc, #12]	@ (80009ac <prvUART2GatekeeperTask+0x2c>)
 80009a0:	f7ff ffb0 	bl	8000904 <UART2_Print_Text>
    xQueueReceive( xPrintQueue, &pcMessageToPrint, portMAX_DELAY );
 80009a4:	bf00      	nop
 80009a6:	e7ef      	b.n	8000988 <prvUART2GatekeeperTask+0x8>
 80009a8:	200000e0 	.word	0x200000e0
 80009ac:	20000098 	.word	0x20000098

080009b0 <prvPrintTask>:
  }
}

static void prvPrintTask( void *pvParameters )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  int iIndexToString;
  const TickType_t xMaxBlockTimeTicks = 0x20;
 80009b8:	2320      	movs	r3, #32
 80009ba:	60fb      	str	r3, [r7, #12]

  /* two instances of this task are created.
     The task parameter is used to pass an index into an array of strings
     into the task.
     Cast this to the required type */
  iIndexToString = ( int ) pvParameters;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60bb      	str	r3, [r7, #8]
       to the string to the gatekeeper task via a queue.
       The queue is created before the scheduler is started so will already
       exist by the time this task executes for the first time.
       A block time is not specified because there should always be space
       in the queue */
    xQueueSendToBack( xPrintQueue, &pcStringsToPrint[ iIndexToString ], 0 );
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <prvPrintTask+0x44>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <prvPrintTask+0x48>)
 80009ca:	1899      	adds	r1, r3, r2
 80009cc:	2300      	movs	r3, #0
 80009ce:	2200      	movs	r2, #0
 80009d0:	f002 fa52 	bl	8002e78 <xQueueGenericSend>
       Note that rand() is not necessarily reentrant, but in this case it
       does not really matter as the code does not care what value is returned.
       In a more secure application, a version of rand() that is known to be 
       reentrant should be used - or calls to rand() should be protected
       using a critical section */
    vTaskDelay( rand() % xMaxBlockTimeTicks );
 80009d4:	f006 fe1a 	bl	800760c <rand>
 80009d8:	4603      	mov	r3, r0
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80009e0:	68f9      	ldr	r1, [r7, #12]
 80009e2:	fb01 f202 	mul.w	r2, r1, r2
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 f83f 	bl	8003a6c <vTaskDelay>
    xQueueSendToBack( xPrintQueue, &pcStringsToPrint[ iIndexToString ], 0 );
 80009ee:	bf00      	nop
 80009f0:	e7e6      	b.n	80009c0 <prvPrintTask+0x10>
 80009f2:	bf00      	nop
 80009f4:	200000e0 	.word	0x200000e0
 80009f8:	20000000 	.word	0x20000000

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 fa31 	bl	8000e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40001000 	.word	0x40001000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <Error_Handler+0x8>

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 facf 	bl	800100e <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fac1 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b33      	ldr	r3, [pc, #204]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a32      	ldr	r2, [pc, #200]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f90a 	bl	8001d5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f001 f8db 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8000b56:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f001 f8d7 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <HAL_InitTick+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b98:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b9a:	f001 f911 	bl	8001dc0 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000bae:	f001 f961 	bl	8001e74 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc0:	2036      	movs	r0, #54	@ 0x36
 8000bc2:	f000 fa4b 	bl	800105c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d808      	bhi.n	8000bde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2036      	movs	r0, #54	@ 0x36
 8000bd2:	f000 fa27 	bl	8001024 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_InitTick+0xf4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e002      	b.n	8000be4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	@ 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	200000e8 	.word	0x200000e8
 8000bfc:	40001000 	.word	0x40001000
 8000c00:	20000010 	.word	0x20000010

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fbd0 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* callback added manually here since the EXTI0
     interrupt is generated by SW. Otherwise the
     callback won't be called because the GPIO_PIN_0's
     state evaluates to RESET */
  HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 fbe5 	bl	8001414 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c56:	f001 f97d 	bl	8001f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000e8 	.word	0x200000e8

08000c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return 1;
 8000c68:	2301      	movs	r3, #1
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_kill>:

int _kill(int pid, int sig)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c7e:	f006 fe55 	bl	800792c <__errno>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2216      	movs	r2, #22
 8000c86:	601a      	str	r2, [r3, #0]
  return -1;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_exit>:

void _exit (int status)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ffe7 	bl	8000c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ca6:	bf00      	nop
 8000ca8:	e7fd      	b.n	8000ca6 <_exit+0x12>

08000caa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e00a      	b.n	8000cd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	60ba      	str	r2, [r7, #8]
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	dbf0      	blt.n	8000cbc <_read+0x12>
  }

  return len;
 8000cda:	687b      	ldr	r3, [r7, #4]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_isatty>:

int _isatty(int file)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d24:	2301      	movs	r3, #1
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f006 fdd6 	bl	800792c <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	20000130 	.word	0x20000130
 8000db4:	20019aa0 	.word	0x20019aa0

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de0:	f7ff ffea 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f006 fd95 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbf7 	bl	8000600 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e20:	080088a8 	.word	0x080088a8
  ldr r2, =_sbss
 8000e24:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e28:	20019aa0 	.word	0x20019aa0

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f8d8 	bl	800100e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fe54 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fde2 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000014 	.word	0x20000014
 8000e98:	20000134 	.word	0x20000134

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000134 	.word	0x20000134

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff4c 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001036:	f7ff ff61 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800103a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff ffb1 	bl	8000fa8 <NVIC_EncodePriority>
 8001046:	4602      	mov	r2, r0
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <__NVIC_SetPriority>
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff54 	bl	8000f18 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e16b      	b.n	800136c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 815a 	bne.w	8001366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80b4 	beq.w	8001366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b60      	ldr	r3, [pc, #384]	@ (8001384 <HAL_GPIO_Init+0x30c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a5f      	ldr	r2, [pc, #380]	@ (8001384 <HAL_GPIO_Init+0x30c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b5d      	ldr	r3, [pc, #372]	@ (8001384 <HAL_GPIO_Init+0x30c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a5b      	ldr	r2, [pc, #364]	@ (8001388 <HAL_GPIO_Init+0x310>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_GPIO_Init+0x314>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a51      	ldr	r2, [pc, #324]	@ (8001390 <HAL_GPIO_Init+0x318>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a50      	ldr	r2, [pc, #320]	@ (8001394 <HAL_GPIO_Init+0x31c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	@ (8001398 <HAL_GPIO_Init+0x320>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x21a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4e      	ldr	r2, [pc, #312]	@ (800139c <HAL_GPIO_Init+0x324>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x216>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4d      	ldr	r2, [pc, #308]	@ (80013a0 <HAL_GPIO_Init+0x328>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x212>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4c      	ldr	r2, [pc, #304]	@ (80013a4 <HAL_GPIO_Init+0x32c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x20e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4b      	ldr	r2, [pc, #300]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x20a>
 800127e:	2307      	movs	r3, #7
 8001280:	e00e      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001282:	2308      	movs	r3, #8
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001286:	2306      	movs	r3, #6
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4935      	ldr	r1, [pc, #212]	@ (8001388 <HAL_GPIO_Init+0x310>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a32      	ldr	r2, [pc, #200]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001336:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_GPIO_Init+0x334>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae90 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021800 	.word	0x40021800
 80013a8:	40021c00 	.word	0x40021c00
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f806 	bl	8001414 <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e267      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144a:	4b88      	ldr	r3, [pc, #544]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b04      	cmp	r3, #4
 8001454:	d00c      	beq.n	8001470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b85      	ldr	r3, [pc, #532]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4b82      	ldr	r3, [pc, #520]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800146e:	d10b      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4b7e      	ldr	r3, [pc, #504]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d157      	bne.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e242      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x74>
 8001492:	4b76      	ldr	r3, [pc, #472]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a75      	ldr	r2, [pc, #468]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b70      	ldr	r3, [pc, #448]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6f      	ldr	r2, [pc, #444]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b6d      	ldr	r3, [pc, #436]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6c      	ldr	r2, [pc, #432]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014c4:	4b69      	ldr	r3, [pc, #420]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a68      	ldr	r2, [pc, #416]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b66      	ldr	r3, [pc, #408]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a65      	ldr	r2, [pc, #404]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fcda 	bl	8000e9c <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fcd6 	bl	8000e9c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e207      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b5b      	ldr	r3, [pc, #364]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0xc0>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fcc6 	bl	8000e9c <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fcc2 	bl	8000e9c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	@ 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1f3      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	4b51      	ldr	r3, [pc, #324]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d063      	beq.n	800160a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001542:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b47      	ldr	r3, [pc, #284]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	2b08      	cmp	r3, #8
 8001558:	d11c      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b44      	ldr	r3, [pc, #272]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d116      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	4b41      	ldr	r3, [pc, #260]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e1c7      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b3b      	ldr	r3, [pc, #236]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4937      	ldr	r1, [pc, #220]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	e03a      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <HAL_RCC_OscConfig+0x244>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc7b 	bl	8000e9c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fc77 	bl	8000e9c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1a8      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b28      	ldr	r3, [pc, #160]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4925      	ldr	r1, [pc, #148]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_RCC_OscConfig+0x244>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc5a 	bl	8000e9c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc56 	bl	8000e9c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e187      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d036      	beq.n	8001684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d016      	beq.n	800164c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_RCC_OscConfig+0x248>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fc3a 	bl	8000e9c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fc36 	bl	8000e9c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e167      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x200>
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_RCC_OscConfig+0x248>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fc23 	bl	8000e9c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e00e      	b.n	8001678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fc1f 	bl	8000e9c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d907      	bls.n	8001678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e150      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800166c:	40023800 	.word	0x40023800
 8001670:	42470000 	.word	0x42470000
 8001674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b88      	ldr	r3, [pc, #544]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ea      	bne.n	800165a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8097 	beq.w	80017c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b81      	ldr	r3, [pc, #516]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b7d      	ldr	r3, [pc, #500]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4a7c      	ldr	r2, [pc, #496]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b2:	4b7a      	ldr	r3, [pc, #488]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b77      	ldr	r3, [pc, #476]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a73      	ldr	r2, [pc, #460]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbdf 	bl	8000e9c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fbdb 	bl	8000e9c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e10c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b6a      	ldr	r3, [pc, #424]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x2ea>
 8001708:	4b64      	ldr	r3, [pc, #400]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a63      	ldr	r2, [pc, #396]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
 8001714:	e01c      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x30c>
 800171e:	4b5f      	ldr	r3, [pc, #380]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001722:	4a5e      	ldr	r2, [pc, #376]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6713      	str	r3, [r2, #112]	@ 0x70
 800172a:	4b5c      	ldr	r3, [pc, #368]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	4a5b      	ldr	r2, [pc, #364]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	@ 0x70
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001738:	4b58      	ldr	r3, [pc, #352]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173c:	4a57      	ldr	r2, [pc, #348]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	@ 0x70
 8001744:	4b55      	ldr	r3, [pc, #340]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001748:	4a54      	ldr	r2, [pc, #336]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d015      	beq.n	8001784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fba0 	bl	8000e9c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fb9c 	bl	8000e9c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0cb      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	4b49      	ldr	r3, [pc, #292]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ee      	beq.n	8001760 <HAL_RCC_OscConfig+0x334>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb8a 	bl	8000e9c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff fb86 	bl	8000e9c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0b5      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a2:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ee      	bne.n	800178c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4b39      	ldr	r3, [pc, #228]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	4a38      	ldr	r2, [pc, #224]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a1 	beq.w	800190c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ca:	4b34      	ldr	r3, [pc, #208]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d05c      	beq.n	8001890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d141      	bne.n	8001862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <HAL_RCC_OscConfig+0x478>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb5a 	bl	8000e9c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fb56 	bl	8000e9c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e087      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b27      	ldr	r3, [pc, #156]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	491b      	ldr	r1, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fb2f 	bl	8000e9c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fb2b 	bl	8000e9c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e05c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x416>
 8001860:	e054      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fb18 	bl	8000e9c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fb14 	bl	8000e9c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e045      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x444>
 800188e:	e03d      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e038      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000
 80018a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x4ec>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d028      	beq.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d121      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11a      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d111      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	3b01      	subs	r3, #1
 80018f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0cc      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b68      	ldr	r3, [pc, #416]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d90c      	bls.n	8001958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b65      	ldr	r3, [pc, #404]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800197a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d044      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d119      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d003      	beq.n	80019da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e067      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4934      	ldr	r1, [pc, #208]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff fa46 	bl	8000e9c <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff fa42 	bl	8000e9c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d20c      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f821 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	@ (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f822 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08008778 	.word	0x08008778
 8001ae0:	2000000c 	.word	0x2000000c
 8001ae4:	20000010 	.word	0x20000010

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aec:	b094      	sub	sp, #80	@ 0x50
 8001aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001af4:	2300      	movs	r3, #0
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001af8:	2300      	movs	r3, #0
 8001afa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b00:	4b79      	ldr	r3, [pc, #484]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d00d      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	f200 80e1 	bhi.w	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x34>
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1a:	e0db      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b20:	e0db      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b22:	4b73      	ldr	r3, [pc, #460]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b26:	e0d8      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b28:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b30:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b32:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	099b      	lsrs	r3, r3, #6
 8001b44:	2200      	movs	r2, #0
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4621      	mov	r1, r4
 8001b74:	1a51      	subs	r1, r2, r1
 8001b76:	6139      	str	r1, [r7, #16]
 8001b78:	4629      	mov	r1, r5
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	018b      	lsls	r3, r1, #6
 8001b90:	4651      	mov	r1, sl
 8001b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b96:	4651      	mov	r1, sl
 8001b98:	018a      	lsls	r2, r1, #6
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba0:	4659      	mov	r1, fp
 8001ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	eb18 0303 	adds.w	r3, r8, r3
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	eb49 0303 	adc.w	r3, r9, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	024b      	lsls	r3, r1, #9
 8001bde:	4621      	mov	r1, r4
 8001be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be4:	4621      	mov	r1, r4
 8001be6:	024a      	lsls	r2, r1, #9
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bf8:	f7fe fb8a 	bl	8000310 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c04:	e058      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c06:	4b38      	ldr	r3, [pc, #224]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4611      	mov	r1, r2
 8001c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c20:	4642      	mov	r2, r8
 8001c22:	464b      	mov	r3, r9
 8001c24:	f04f 0000 	mov.w	r0, #0
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	0159      	lsls	r1, r3, #5
 8001c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c32:	0150      	lsls	r0, r2, #5
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4641      	mov	r1, r8
 8001c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3e:	4649      	mov	r1, r9
 8001c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c58:	ebb2 040a 	subs.w	r4, r2, sl
 8001c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	00eb      	lsls	r3, r5, #3
 8001c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6e:	00e2      	lsls	r2, r4, #3
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	18e3      	adds	r3, r4, r3
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	eb45 0303 	adc.w	r3, r5, r3
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8e:	4629      	mov	r1, r5
 8001c90:	028b      	lsls	r3, r1, #10
 8001c92:	4621      	mov	r1, r4
 8001c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c98:	4621      	mov	r1, r4
 8001c9a:	028a      	lsls	r2, r1, #10
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	61fa      	str	r2, [r7, #28]
 8001ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cac:	f7fe fb30 	bl	8000310 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001cc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3750      	adds	r7, #80	@ 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	007a1200 	.word	0x007a1200

08001cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	2000000c 	.word	0x2000000c

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d10:	f7ff fff0 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0a9b      	lsrs	r3, r3, #10
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	@ (8001d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08008788 	.word	0x08008788

08001d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d38:	f7ff ffdc 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0b5b      	lsrs	r3, r3, #13
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	@ (8001d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08008788 	.word	0x08008788

08001d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	220f      	movs	r2, #15
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <HAL_RCC_GetClockConfig+0x60>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0207 	and.w	r2, r3, #7
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	601a      	str	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e041      	b.n	8001e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f839 	bl	8001e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f000 f9c0 	bl	8002184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d001      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e04e      	b.n	8001f2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d022      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb6:	d01d      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d018      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	@ (8001f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d111      	bne.n	8001f18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d010      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	e007      	b.n	8001f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40000c00 	.word	0x40000c00
 8001f48:	40010400 	.word	0x40010400
 8001f4c:	40014000 	.word	0x40014000
 8001f50:	40001800 	.word	0x40001800

08001f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d020      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01b      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0202 	mvn.w	r2, #2
 8001f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8d2 	bl	8002148 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8c4 	bl	8002134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8d5 	bl	800215c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d020      	beq.n	8002004 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01b      	beq.n	8002004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0204 	mvn.w	r2, #4
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8ac 	bl	8002148 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f89e 	bl	8002134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f8af 	bl	800215c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d020      	beq.n	8002050 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01b      	beq.n	8002050 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0208 	mvn.w	r2, #8
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2204      	movs	r2, #4
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f886 	bl	8002148 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f878 	bl	8002134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f889 	bl	800215c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d020      	beq.n	800209c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01b      	beq.n	800209c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0210 	mvn.w	r2, #16
 800206c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2208      	movs	r2, #8
 8002072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f860 	bl	8002148 <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f852 	bl	8002134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f863 	bl	800215c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0201 	mvn.w	r2, #1
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fc9e 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f906 	bl	80022f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f834 	bl	8002170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0220 	mvn.w	r2, #32
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8d8 	bl	80022dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a46      	ldr	r2, [pc, #280]	@ (80022b0 <TIM_Base_SetConfig+0x12c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a2:	d00f      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a43      	ldr	r2, [pc, #268]	@ (80022b4 <TIM_Base_SetConfig+0x130>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00b      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a42      	ldr	r2, [pc, #264]	@ (80022b8 <TIM_Base_SetConfig+0x134>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a41      	ldr	r2, [pc, #260]	@ (80022bc <TIM_Base_SetConfig+0x138>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a40      	ldr	r2, [pc, #256]	@ (80022c0 <TIM_Base_SetConfig+0x13c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a35      	ldr	r2, [pc, #212]	@ (80022b0 <TIM_Base_SetConfig+0x12c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02b      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e4:	d027      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a32      	ldr	r2, [pc, #200]	@ (80022b4 <TIM_Base_SetConfig+0x130>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d023      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a31      	ldr	r2, [pc, #196]	@ (80022b8 <TIM_Base_SetConfig+0x134>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a30      	ldr	r2, [pc, #192]	@ (80022bc <TIM_Base_SetConfig+0x138>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01b      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2f      	ldr	r2, [pc, #188]	@ (80022c0 <TIM_Base_SetConfig+0x13c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d017      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2e      	ldr	r2, [pc, #184]	@ (80022c4 <TIM_Base_SetConfig+0x140>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2d      	ldr	r2, [pc, #180]	@ (80022c8 <TIM_Base_SetConfig+0x144>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00f      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2c      	ldr	r2, [pc, #176]	@ (80022cc <TIM_Base_SetConfig+0x148>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00b      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2b      	ldr	r2, [pc, #172]	@ (80022d0 <TIM_Base_SetConfig+0x14c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2a      	ldr	r2, [pc, #168]	@ (80022d4 <TIM_Base_SetConfig+0x150>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a29      	ldr	r2, [pc, #164]	@ (80022d8 <TIM_Base_SetConfig+0x154>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d108      	bne.n	8002248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800223c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <TIM_Base_SetConfig+0x12c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d003      	beq.n	800227c <TIM_Base_SetConfig+0xf8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <TIM_Base_SetConfig+0x13c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d103      	bne.n	8002284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d105      	bne.n	80022a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f023 0201 	bic.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]
  }
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40000c00 	.word	0x40000c00
 80022c0:	40010400 	.word	0x40010400
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800
 80022d0:	40001800 	.word	0x40001800
 80022d4:	40001c00 	.word	0x40001c00
 80022d8:	40002000 	.word	0x40002000

080022dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e042      	b.n	800239c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fba6 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	@ 0x24
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f973 	bl	8002634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800235c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800236c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800237c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d175      	bne.n	80024b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_UART_Transmit+0x2c>
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e06e      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2221      	movs	r2, #33	@ 0x21
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e2:	f7fe fd5b 	bl	8000e9c <HAL_GetTick>
 80023e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fc:	d108      	bne.n	8002410 <HAL_UART_Transmit+0x6c>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002418:	e02e      	b.n	8002478 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	@ 0x80
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f848 	bl	80024ba <UART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e03a      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3302      	adds	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e007      	b.n	800246a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3301      	adds	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1cb      	bne.n	800241a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2140      	movs	r1, #64	@ 0x40
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f814 	bl	80024ba <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ca:	e03b      	b.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d037      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d4:	f7fe fce2 	bl	8000e9c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <UART_WaitOnFlagUntilTimeout+0x30>
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e03a      	b.n	8002564 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d023      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b80      	cmp	r3, #128	@ 0x80
 8002500:	d020      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b40      	cmp	r3, #64	@ 0x40
 8002506:	d01d      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b08      	cmp	r3, #8
 8002514:	d116      	bne.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f81d 	bl	800256c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2208      	movs	r2, #8
 8002536:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e00f      	b.n	8002564 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4013      	ands	r3, r2
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	429a      	cmp	r2, r3
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	429a      	cmp	r2, r3
 8002560:	d0b4      	beq.n	80024cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800256c:	b480      	push	{r7}
 800256e:	b095      	sub	sp, #84	@ 0x54
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800258a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002594:	643a      	str	r2, [r7, #64]	@ 0x40
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800259a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800259c:	e841 2300 	strex	r3, r2, [r1]
 80025a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3314      	adds	r3, #20
 80025ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	e853 3f00 	ldrex	r3, [r3]
 80025b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3314      	adds	r3, #20
 80025c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e5      	bne.n	80025a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d119      	bne.n	8002618 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	e853 3f00 	ldrex	r3, [r3]
 80025f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f023 0310 	bic.w	r3, r3, #16
 80025fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002604:	61ba      	str	r2, [r7, #24]
 8002606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002608:	6979      	ldr	r1, [r7, #20]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	e841 2300 	strex	r3, r2, [r1]
 8002610:	613b      	str	r3, [r7, #16]
   return(result);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1e5      	bne.n	80025e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002626:	bf00      	nop
 8002628:	3754      	adds	r7, #84	@ 0x54
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002638:	b0c0      	sub	sp, #256	@ 0x100
 800263a:	af00      	add	r7, sp, #0
 800263c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800264c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002650:	68d9      	ldr	r1, [r3, #12]
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	ea40 0301 	orr.w	r3, r0, r1
 800265c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	431a      	orrs	r2, r3
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	431a      	orrs	r2, r3
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800268c:	f021 010c 	bic.w	r1, r1, #12
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800269a:	430b      	orrs	r3, r1
 800269c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ae:	6999      	ldr	r1, [r3, #24]
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	ea40 0301 	orr.w	r3, r0, r1
 80026ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002900 <UART_SetConfig+0x2cc>)
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d005      	beq.n	80026d4 <UART_SetConfig+0xa0>
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002904 <UART_SetConfig+0x2d0>)
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d104      	bne.n	80026de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026d4:	f7ff fb2e 	bl	8001d34 <HAL_RCC_GetPCLK2Freq>
 80026d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026dc:	e003      	b.n	80026e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026de:	f7ff fb15 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 80026e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f0:	f040 810c 	bne.w	800290c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026f8:	2200      	movs	r2, #0
 80026fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002706:	4622      	mov	r2, r4
 8002708:	462b      	mov	r3, r5
 800270a:	1891      	adds	r1, r2, r2
 800270c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800270e:	415b      	adcs	r3, r3
 8002710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002716:	4621      	mov	r1, r4
 8002718:	eb12 0801 	adds.w	r8, r2, r1
 800271c:	4629      	mov	r1, r5
 800271e:	eb43 0901 	adc.w	r9, r3, r1
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800272e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002736:	4690      	mov	r8, r2
 8002738:	4699      	mov	r9, r3
 800273a:	4623      	mov	r3, r4
 800273c:	eb18 0303 	adds.w	r3, r8, r3
 8002740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002744:	462b      	mov	r3, r5
 8002746:	eb49 0303 	adc.w	r3, r9, r3
 800274a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800274e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800275a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800275e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002762:	460b      	mov	r3, r1
 8002764:	18db      	adds	r3, r3, r3
 8002766:	653b      	str	r3, [r7, #80]	@ 0x50
 8002768:	4613      	mov	r3, r2
 800276a:	eb42 0303 	adc.w	r3, r2, r3
 800276e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002778:	f7fd fdca 	bl	8000310 <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4b61      	ldr	r3, [pc, #388]	@ (8002908 <UART_SetConfig+0x2d4>)
 8002782:	fba3 2302 	umull	r2, r3, r3, r2
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	011c      	lsls	r4, r3, #4
 800278a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800278e:	2200      	movs	r2, #0
 8002790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002794:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800279c:	4642      	mov	r2, r8
 800279e:	464b      	mov	r3, r9
 80027a0:	1891      	adds	r1, r2, r2
 80027a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80027a4:	415b      	adcs	r3, r3
 80027a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027ac:	4641      	mov	r1, r8
 80027ae:	eb12 0a01 	adds.w	sl, r2, r1
 80027b2:	4649      	mov	r1, r9
 80027b4:	eb43 0b01 	adc.w	fp, r3, r1
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027cc:	4692      	mov	sl, r2
 80027ce:	469b      	mov	fp, r3
 80027d0:	4643      	mov	r3, r8
 80027d2:	eb1a 0303 	adds.w	r3, sl, r3
 80027d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027da:	464b      	mov	r3, r9
 80027dc:	eb4b 0303 	adc.w	r3, fp, r3
 80027e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027f8:	460b      	mov	r3, r1
 80027fa:	18db      	adds	r3, r3, r3
 80027fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80027fe:	4613      	mov	r3, r2
 8002800:	eb42 0303 	adc.w	r3, r2, r3
 8002804:	647b      	str	r3, [r7, #68]	@ 0x44
 8002806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800280a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800280e:	f7fd fd7f 	bl	8000310 <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4611      	mov	r1, r2
 8002818:	4b3b      	ldr	r3, [pc, #236]	@ (8002908 <UART_SetConfig+0x2d4>)
 800281a:	fba3 2301 	umull	r2, r3, r3, r1
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2264      	movs	r2, #100	@ 0x64
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	1acb      	subs	r3, r1, r3
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800282e:	4b36      	ldr	r3, [pc, #216]	@ (8002908 <UART_SetConfig+0x2d4>)
 8002830:	fba3 2302 	umull	r2, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800283c:	441c      	add	r4, r3
 800283e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002848:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800284c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002850:	4642      	mov	r2, r8
 8002852:	464b      	mov	r3, r9
 8002854:	1891      	adds	r1, r2, r2
 8002856:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002858:	415b      	adcs	r3, r3
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800285c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002860:	4641      	mov	r1, r8
 8002862:	1851      	adds	r1, r2, r1
 8002864:	6339      	str	r1, [r7, #48]	@ 0x30
 8002866:	4649      	mov	r1, r9
 8002868:	414b      	adcs	r3, r1
 800286a:	637b      	str	r3, [r7, #52]	@ 0x34
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002878:	4659      	mov	r1, fp
 800287a:	00cb      	lsls	r3, r1, #3
 800287c:	4651      	mov	r1, sl
 800287e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002882:	4651      	mov	r1, sl
 8002884:	00ca      	lsls	r2, r1, #3
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	4603      	mov	r3, r0
 800288c:	4642      	mov	r2, r8
 800288e:	189b      	adds	r3, r3, r2
 8002890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002894:	464b      	mov	r3, r9
 8002896:	460a      	mov	r2, r1
 8002898:	eb42 0303 	adc.w	r3, r2, r3
 800289c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80028ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80028b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80028b4:	460b      	mov	r3, r1
 80028b6:	18db      	adds	r3, r3, r3
 80028b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ba:	4613      	mov	r3, r2
 80028bc:	eb42 0303 	adc.w	r3, r2, r3
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80028ca:	f7fd fd21 	bl	8000310 <__aeabi_uldivmod>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <UART_SetConfig+0x2d4>)
 80028d4:	fba3 1302 	umull	r1, r3, r3, r2
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	2164      	movs	r1, #100	@ 0x64
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	3332      	adds	r3, #50	@ 0x32
 80028e6:	4a08      	ldr	r2, [pc, #32]	@ (8002908 <UART_SetConfig+0x2d4>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	f003 0207 	and.w	r2, r3, #7
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4422      	add	r2, r4
 80028fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028fc:	e106      	b.n	8002b0c <UART_SetConfig+0x4d8>
 80028fe:	bf00      	nop
 8002900:	40011000 	.word	0x40011000
 8002904:	40011400 	.word	0x40011400
 8002908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800290c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002910:	2200      	movs	r2, #0
 8002912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002916:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800291a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800291e:	4642      	mov	r2, r8
 8002920:	464b      	mov	r3, r9
 8002922:	1891      	adds	r1, r2, r2
 8002924:	6239      	str	r1, [r7, #32]
 8002926:	415b      	adcs	r3, r3
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
 800292a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800292e:	4641      	mov	r1, r8
 8002930:	1854      	adds	r4, r2, r1
 8002932:	4649      	mov	r1, r9
 8002934:	eb43 0501 	adc.w	r5, r3, r1
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	00eb      	lsls	r3, r5, #3
 8002942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002946:	00e2      	lsls	r2, r4, #3
 8002948:	4614      	mov	r4, r2
 800294a:	461d      	mov	r5, r3
 800294c:	4643      	mov	r3, r8
 800294e:	18e3      	adds	r3, r4, r3
 8002950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002954:	464b      	mov	r3, r9
 8002956:	eb45 0303 	adc.w	r3, r5, r3
 800295a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800296a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800297a:	4629      	mov	r1, r5
 800297c:	008b      	lsls	r3, r1, #2
 800297e:	4621      	mov	r1, r4
 8002980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002984:	4621      	mov	r1, r4
 8002986:	008a      	lsls	r2, r1, #2
 8002988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800298c:	f7fd fcc0 	bl	8000310 <__aeabi_uldivmod>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4b60      	ldr	r3, [pc, #384]	@ (8002b18 <UART_SetConfig+0x4e4>)
 8002996:	fba3 2302 	umull	r2, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	011c      	lsls	r4, r3, #4
 800299e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	1891      	adds	r1, r2, r2
 80029b6:	61b9      	str	r1, [r7, #24]
 80029b8:	415b      	adcs	r3, r3
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c0:	4641      	mov	r1, r8
 80029c2:	1851      	adds	r1, r2, r1
 80029c4:	6139      	str	r1, [r7, #16]
 80029c6:	4649      	mov	r1, r9
 80029c8:	414b      	adcs	r3, r1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029d8:	4659      	mov	r1, fp
 80029da:	00cb      	lsls	r3, r1, #3
 80029dc:	4651      	mov	r1, sl
 80029de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029e2:	4651      	mov	r1, sl
 80029e4:	00ca      	lsls	r2, r1, #3
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	4642      	mov	r2, r8
 80029ee:	189b      	adds	r3, r3, r2
 80029f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029f4:	464b      	mov	r3, r9
 80029f6:	460a      	mov	r2, r1
 80029f8:	eb42 0303 	adc.w	r3, r2, r3
 80029fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a18:	4649      	mov	r1, r9
 8002a1a:	008b      	lsls	r3, r1, #2
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a22:	4641      	mov	r1, r8
 8002a24:	008a      	lsls	r2, r1, #2
 8002a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a2a:	f7fd fc71 	bl	8000310 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	4b38      	ldr	r3, [pc, #224]	@ (8002b18 <UART_SetConfig+0x4e4>)
 8002a36:	fba3 2301 	umull	r2, r3, r3, r1
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2264      	movs	r2, #100	@ 0x64
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	1acb      	subs	r3, r1, r3
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	3332      	adds	r3, #50	@ 0x32
 8002a48:	4a33      	ldr	r2, [pc, #204]	@ (8002b18 <UART_SetConfig+0x4e4>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a54:	441c      	add	r4, r3
 8002a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	1891      	adds	r1, r2, r2
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	415b      	adcs	r3, r3
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a74:	4641      	mov	r1, r8
 8002a76:	1851      	adds	r1, r2, r1
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	414b      	adcs	r3, r1
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	00cb      	lsls	r3, r1, #3
 8002a90:	4651      	mov	r1, sl
 8002a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a96:	4651      	mov	r1, sl
 8002a98:	00ca      	lsls	r2, r1, #3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	eb42 0303 	adc.w	r3, r2, r3
 8002aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aba:	667a      	str	r2, [r7, #100]	@ 0x64
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ac8:	4649      	mov	r1, r9
 8002aca:	008b      	lsls	r3, r1, #2
 8002acc:	4641      	mov	r1, r8
 8002ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	008a      	lsls	r2, r1, #2
 8002ad6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ada:	f7fd fc19 	bl	8000310 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <UART_SetConfig+0x4e4>)
 8002ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	2164      	movs	r1, #100	@ 0x64
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	3332      	adds	r3, #50	@ 0x32
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <UART_SetConfig+0x4e4>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4422      	add	r2, r4
 8002b0a:	609a      	str	r2, [r3, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b12:	46bd      	mov	sp, r7
 8002b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b18:	51eb851f 	.word	0x51eb851f

08002b1c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f103 0208 	add.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f103 0208 	add.w	r2, r3, #8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f103 0208 	add.w	r2, r3, #8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002b50:	f240 1019 	movw	r0, #281	@ 0x119
 8002b54:	f004 f90a 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002b6e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002b72:	f004 f8fb 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d103      	bne.n	8002b9e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e00c      	b.n	8002bb8 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e002      	b.n	8002bac <vListInsert+0x2e>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d2f6      	bcs.n	8002ba6 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002be4:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002be8:	f004 f8c0 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6852      	ldr	r2, [r2, #4]
 8002c14:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d103      	bne.n	8002c28 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f240 101d 	movw	r0, #285	@ 0x11d
 8002c42:	f004 f8cf 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d05d      	beq.n	8002d46 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d059      	beq.n	8002d46 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d000      	beq.n	8002ca6 <xQueueGenericReset+0x52>
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d14c      	bne.n	8002d46 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002cac:	f002 faca 	bl	8005244 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb8:	6939      	ldr	r1, [r7, #16]
 8002cba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	441a      	add	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	6939      	ldr	r1, [r7, #16]
 8002ce0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	441a      	add	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	22ff      	movs	r2, #255	@ 0xff
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	22ff      	movs	r2, #255	@ 0xff
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d114      	bne.n	8002d2c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01a      	beq.n	8002d40 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3310      	adds	r3, #16
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fae6 	bl	80042e0 <xTaskRemoveFromEventList>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002d1a:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <xQueueGenericReset+0x128>)
 8002d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	e009      	b.n	8002d40 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	3310      	adds	r3, #16
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fef3 	bl	8002b1c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	3324      	adds	r3, #36	@ 0x24
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff feee 	bl	8002b1c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002d40:	f002 fab2 	bl	80052a8 <vPortExitCritical>
 8002d44:	e001      	b.n	8002d4a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <xQueueGenericReset+0x114>
    __asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	60bb      	str	r3, [r7, #8]
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	2096      	movs	r0, #150	@ 0x96
 8002d6e:	f004 f839 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002d72:	697b      	ldr	r3, [r7, #20]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	e000ed04 	.word	0xe000ed04

08002d80 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d02e      	beq.n	8002df6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d98:	2100      	movs	r1, #0
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d000      	beq.n	8002da8 <xQueueGenericCreate+0x28>
 8002da6:	2101      	movs	r1, #1
 8002da8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d123      	bne.n	8002df6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002db6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002dba:	d81c      	bhi.n	8002df6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	3350      	adds	r3, #80	@ 0x50
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fb68 	bl	80054a0 <pvPortMalloc>
 8002dd0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01d      	beq.n	8002e14 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3350      	adds	r3, #80	@ 0x50
 8002de0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002de2:	79fa      	ldrb	r2, [r7, #7]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f81e 	bl	8002e30 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002df4:	e00e      	b.n	8002e14 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <xQueueGenericCreate+0x94>
    __asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	613b      	str	r3, [r7, #16]
}
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 f97e 	bl	8007118 <SEGGER_SYSVIEW_ShrinkId>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4619      	mov	r1, r3
 8002e20:	2098      	movs	r0, #152	@ 0x98
 8002e22:	f003 ffdf 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002e26:	69fb      	ldr	r3, [r7, #28]
    }
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d103      	bne.n	8002e4c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e002      	b.n	8002e52 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e5e:	2101      	movs	r1, #1
 8002e60:	69b8      	ldr	r0, [r7, #24]
 8002e62:	f7ff fef7 	bl	8002c54 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	@ 0x38
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e86:	2300      	movs	r3, #0
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <xQueueGenericSend+0x34>
    __asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <xQueueGenericSend+0x42>
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <xQueueGenericSend+0x46>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <xQueueGenericSend+0x48>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <xQueueGenericSend+0x64>
    __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d103      	bne.n	8002eea <xQueueGenericSend+0x72>
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <xQueueGenericSend+0x76>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueGenericSend+0x78>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <xQueueGenericSend+0x94>
    __asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	623b      	str	r3, [r7, #32]
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f0c:	f001 fc0a 	bl	8004724 <xTaskGetSchedulerState>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <xQueueGenericSend+0xa4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <xQueueGenericSend+0xa8>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <xQueueGenericSend+0xaa>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <xQueueGenericSend+0xc6>
    __asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	61fb      	str	r3, [r7, #28]
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	e7fd      	b.n	8002f3a <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f3e:	f002 f981 	bl	8005244 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <xQueueGenericSend+0xdc>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d12d      	bne.n	8002fb0 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f5a:	f000 fa45 	bl	80033e8 <prvCopyDataToQueue>
 8002f5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	3324      	adds	r3, #36	@ 0x24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 f9b7 	bl	80042e0 <xTaskRemoveFromEventList>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002f78:	4b45      	ldr	r3, [pc, #276]	@ (8003090 <xQueueGenericSend+0x218>)
 8002f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	e00a      	b.n	8002fa0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002f90:	4b3f      	ldr	r3, [pc, #252]	@ (8003090 <xQueueGenericSend+0x218>)
 8002f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002fa0:	f002 f982 	bl	80052a8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	20a1      	movs	r0, #161	@ 0xa1
 8002fa8:	f003 ff1c 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e06b      	b.n	8003088 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002fb6:	f002 f977 	bl	80052a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002fba:	2100      	movs	r1, #0
 8002fbc:	20a1      	movs	r0, #161	@ 0xa1
 8002fbe:	f003 ff11 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e060      	b.n	8003088 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 fa65 	bl	80044a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002fda:	f002 f965 	bl	80052a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002fde:	f000 fe21 	bl	8003c24 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002fe2:	f002 f92f 	bl	8005244 <vPortEnterCritical>
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d103      	bne.n	8002ffc <xQueueGenericSend+0x184>
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003002:	b25b      	sxtb	r3, r3
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d103      	bne.n	8003012 <xQueueGenericSend+0x19a>
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003012:	f002 f949 	bl	80052a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003016:	1d3a      	adds	r2, r7, #4
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f001 fa56 	bl	80044d0 <xTaskCheckForTimeOut>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d124      	bne.n	8003074 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800302a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800302c:	f000 fad4 	bl	80035d8 <prvIsQueueFull>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	3310      	adds	r3, #16
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f8dc 	bl	80041fc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003046:	f000 fa5f 	bl	8003508 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800304a:	f000 fdf9 	bl	8003c40 <xTaskResumeAll>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f af74 	bne.w	8002f3e <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8003056:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <xQueueGenericSend+0x218>)
 8003058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	e76a      	b.n	8002f3e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800306a:	f000 fa4d 	bl	8003508 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800306e:	f000 fde7 	bl	8003c40 <xTaskResumeAll>
 8003072:	e764      	b.n	8002f3e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003076:	f000 fa47 	bl	8003508 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800307a:	f000 fde1 	bl	8003c40 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800307e:	2100      	movs	r1, #0
 8003080:	20a1      	movs	r0, #161	@ 0xa1
 8003082:	f003 feaf 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 8003086:	2300      	movs	r3, #0
        }
    }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3738      	adds	r7, #56	@ 0x38
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b092      	sub	sp, #72	@ 0x48
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 80030a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <xQueueGenericSendFromISR+0x3e>
 80030ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <xQueueGenericSendFromISR+0x42>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <xQueueGenericSendFromISR+0x44>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d103      	bne.n	8003102 <xQueueGenericSendFromISR+0x6e>
 80030fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <xQueueGenericSendFromISR+0x72>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <xQueueGenericSendFromISR+0x74>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003124:	f002 f97a 	bl	800541c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8003128:	f3ef 8211 	mrs	r2, BASEPRI
 800312c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	623a      	str	r2, [r7, #32]
 800313e:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8003140:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8003142:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <xQueueGenericSendFromISR+0xc2>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d147      	bne.n	80031e6 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003158:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800315c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800316c:	f000 f93c 	bl	80033e8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003170:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d112      	bne.n	80031a0 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800317a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02e      	beq.n	80031e0 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003184:	3324      	adds	r3, #36	@ 0x24
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f8aa 	bl	80042e0 <xTaskRemoveFromEventList>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d026      	beq.n	80031e0 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e01f      	b.n	80031e0 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80031a0:	f000 fe88 	bl	8003eb4 <uxTaskGetNumberOfTasks>
 80031a4:	6338      	str	r0, [r7, #48]	@ 0x30
 80031a6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80031aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d917      	bls.n	80031e0 <xQueueGenericSendFromISR+0x14c>
 80031b0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80031b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80031b6:	d10b      	bne.n	80031d0 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	61bb      	str	r3, [r7, #24]
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <xQueueGenericSendFromISR+0x138>
 80031d0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80031d4:	3301      	adds	r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	b25a      	sxtb	r2, r3
 80031da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80031e0:	2301      	movs	r3, #1
 80031e2:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80031e4:	e001      	b.n	80031ea <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80031f4:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );
 80031f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f8:	4619      	mov	r1, r3
 80031fa:	20a2      	movs	r0, #162	@ 0xa2
 80031fc:	f003 fdf2 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003202:	4618      	mov	r0, r3
 8003204:	3748      	adds	r7, #72	@ 0x48
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08c      	sub	sp, #48	@ 0x30
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <xQueueReceive+0x32>
    __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	623b      	str	r3, [r7, #32]
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <xQueueReceive+0x40>
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <xQueueReceive+0x44>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <xQueueReceive+0x46>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <xQueueReceive+0x62>
    __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	61fb      	str	r3, [r7, #28]
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800326e:	f001 fa59 	bl	8004724 <xTaskGetSchedulerState>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <xQueueReceive+0x72>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <xQueueReceive+0x76>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueReceive+0x78>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <xQueueReceive+0x94>
    __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	61bb      	str	r3, [r7, #24]
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80032a0:	f001 ffd0 	bl	8005244 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032b4:	f000 f902 	bl	80034bc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	1e5a      	subs	r2, r3, #1
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00f      	beq.n	80032e8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	3310      	adds	r3, #16
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 f807 	bl	80042e0 <xTaskRemoveFromEventList>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032d8:	4b42      	ldr	r3, [pc, #264]	@ (80033e4 <xQueueReceive+0x1d8>)
 80032da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032e8:	f001 ffde 	bl	80052a8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80032ec:	2101      	movs	r1, #1
 80032ee:	20a4      	movs	r0, #164	@ 0xa4
 80032f0:	f003 fd78 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e071      	b.n	80033dc <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032fe:	f001 ffd3 	bl	80052a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003302:	2100      	movs	r1, #0
 8003304:	20a4      	movs	r0, #164	@ 0xa4
 8003306:	f003 fd6d 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800330a:	2300      	movs	r3, #0
 800330c:	e066      	b.n	80033dc <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800330e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003314:	f107 0310 	add.w	r3, r7, #16
 8003318:	4618      	mov	r0, r3
 800331a:	f001 f8c1 	bl	80044a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800331e:	2301      	movs	r3, #1
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003322:	f001 ffc1 	bl	80052a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003326:	f000 fc7d 	bl	8003c24 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800332a:	f001 ff8b 	bl	8005244 <vPortEnterCritical>
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003334:	b25b      	sxtb	r3, r3
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d103      	bne.n	8003344 <xQueueReceive+0x138>
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800334a:	b25b      	sxtb	r3, r3
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d103      	bne.n	800335a <xQueueReceive+0x14e>
 8003352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800335a:	f001 ffa5 	bl	80052a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800335e:	1d3a      	adds	r2, r7, #4
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f001 f8b2 	bl	80044d0 <xTaskCheckForTimeOut>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d123      	bne.n	80033ba <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003374:	f000 f91a 	bl	80035ac <prvIsQueueEmpty>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800337e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003380:	3324      	adds	r3, #36	@ 0x24
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff38 	bl	80041fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800338c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800338e:	f000 f8bb 	bl	8003508 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003392:	f000 fc55 	bl	8003c40 <xTaskResumeAll>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d181      	bne.n	80032a0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <xQueueReceive+0x1d8>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	e778      	b.n	80032a0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80033ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b0:	f000 f8aa 	bl	8003508 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80033b4:	f000 fc44 	bl	8003c40 <xTaskResumeAll>
 80033b8:	e772      	b.n	80032a0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80033ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033bc:	f000 f8a4 	bl	8003508 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033c0:	f000 fc3e 	bl	8003c40 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033c6:	f000 f8f1 	bl	80035ac <prvIsQueueEmpty>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f43f af67 	beq.w	80032a0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80033d2:	2100      	movs	r1, #0
 80033d4:	20a4      	movs	r0, #164	@ 0xa4
 80033d6:	f003 fd05 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80033da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3730      	adds	r7, #48	@ 0x30
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	e000ed04 	.word	0xe000ed04

080033e8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10d      	bne.n	8003422 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d14d      	bne.n	80034aa <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f001 f9a8 	bl	8004768 <xTaskPriorityDisinherit>
 8003418:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	e043      	b.n	80034aa <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d119      	bne.n	800345c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6858      	ldr	r0, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	461a      	mov	r2, r3
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	f004 faa7 	bl	8007986 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	441a      	add	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d32b      	bcc.n	80034aa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	e026      	b.n	80034aa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68d8      	ldr	r0, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	461a      	mov	r2, r3
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	f004 fa8d 	bl	8007986 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	425b      	negs	r3, r3
 8003476:	441a      	add	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d207      	bcs.n	8003498 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	425b      	negs	r3, r3
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d105      	bne.n	80034aa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80034b2:	697b      	ldr	r3, [r7, #20]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d018      	beq.n	8003500 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	441a      	add	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d303      	bcc.n	80034f0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68d9      	ldr	r1, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	461a      	mov	r2, r3
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f004 fa43 	bl	8007986 <memcpy>
    }
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003510:	f001 fe98 	bl	8005244 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800351a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800351c:	e011      	b.n	8003542 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d012      	beq.n	800354c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3324      	adds	r3, #36	@ 0x24
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fed8 	bl	80042e0 <xTaskRemoveFromEventList>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003536:	f001 f837 	bl	80045a8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	3b01      	subs	r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	dce9      	bgt.n	800351e <prvUnlockQueue+0x16>
 800354a:	e000      	b.n	800354e <prvUnlockQueue+0x46>
                    break;
 800354c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	22ff      	movs	r2, #255	@ 0xff
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003556:	f001 fea7 	bl	80052a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800355a:	f001 fe73 	bl	8005244 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003564:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003566:	e011      	b.n	800358c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d012      	beq.n	8003596 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3310      	adds	r3, #16
 8003574:	4618      	mov	r0, r3
 8003576:	f000 feb3 	bl	80042e0 <xTaskRemoveFromEventList>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003580:	f001 f812 	bl	80045a8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003584:	7bbb      	ldrb	r3, [r7, #14]
 8003586:	3b01      	subs	r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800358c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003590:	2b00      	cmp	r3, #0
 8003592:	dce9      	bgt.n	8003568 <prvUnlockQueue+0x60>
 8003594:	e000      	b.n	8003598 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003596:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	22ff      	movs	r2, #255	@ 0xff
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80035a0:	f001 fe82 	bl	80052a8 <vPortExitCritical>
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035b4:	f001 fe46 	bl	8005244 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e001      	b.n	80035ca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035ca:	f001 fe6d 	bl	80052a8 <vPortExitCritical>

    return xReturn;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035e0:	f001 fe30 	bl	8005244 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d102      	bne.n	80035f6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e001      	b.n	80035fa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035fa:	f001 fe55 	bl	80052a8 <vPortExitCritical>

    return xReturn;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <vQueueAddToRegistry+0x2c>
    __asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	60fb      	str	r3, [r7, #12]
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d024      	beq.n	8003684 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e01e      	b.n	800367e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003640:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <vQueueAddToRegistry+0x9c>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d105      	bne.n	800365c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4a13      	ldr	r2, [pc, #76]	@ (80036a4 <vQueueAddToRegistry+0x9c>)
 8003656:	4413      	add	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
                    break;
 800365a:	e013      	b.n	8003684 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <vQueueAddToRegistry+0x70>
 8003662:	4a10      	ldr	r2, [pc, #64]	@ (80036a4 <vQueueAddToRegistry+0x9c>)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <vQueueAddToRegistry+0x9c>)
 8003674:	4413      	add	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	3301      	adds	r3, #1
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b07      	cmp	r3, #7
 8003682:	d9dd      	bls.n	8003640 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003696:	20b6      	movs	r0, #182	@ 0xb6
 8003698:	f003 fb68 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800369c:	bf00      	nop
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000138 	.word	0x20000138

080036a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80036b8:	f001 fdc4 	bl	8005244 <vPortEnterCritical>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d103      	bne.n	80036d2 <vQueueWaitForMessageRestricted+0x2a>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036d8:	b25b      	sxtb	r3, r3
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d103      	bne.n	80036e8 <vQueueWaitForMessageRestricted+0x40>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036e8:	f001 fdde 	bl	80052a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3324      	adds	r3, #36	@ 0x24
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fda5 	bl	800424c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003702:	6978      	ldr	r0, [r7, #20]
 8003704:	f7ff ff00 	bl	8003508 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003708:	20b9      	movs	r0, #185	@ 0xb9
 800370a:	f003 fb2f 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003716:	b580      	push	{r7, lr}
 8003718:	b08a      	sub	sp, #40	@ 0x28
 800371a:	af04      	add	r7, sp, #16
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f001 feb9 	bl	80054a0 <pvPortMalloc>
 800372e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d013      	beq.n	800375e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003736:	205c      	movs	r0, #92	@ 0x5c
 8003738:	f001 feb2 	bl	80054a0 <pvPortMalloc>
 800373c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003744:	225c      	movs	r2, #92	@ 0x5c
 8003746:	2100      	movs	r1, #0
 8003748:	6978      	ldr	r0, [r7, #20]
 800374a:	f004 f8b2 	bl	80078b2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	631a      	str	r2, [r3, #48]	@ 0x30
 8003754:	e005      	b.n	8003762 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003756:	6938      	ldr	r0, [r7, #16]
 8003758:	f001 ffd4 	bl	8005704 <vPortFree>
 800375c:	e001      	b.n	8003762 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003768:	2300      	movs	r3, #0
 800376a:	9303      	str	r3, [sp, #12]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	9302      	str	r3, [sp, #8]
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f82d 	bl	80037de <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003784:	697b      	ldr	r3, [r7, #20]
    }
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800378e:	b580      	push	{r7, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af02      	add	r7, sp, #8
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff ffb3 	bl	8003716 <prvCreateTask>
 80037b0:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80037b8:	6938      	ldr	r0, [r7, #16]
 80037ba:	f000 f8a1 	bl	8003900 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80037be:	2301      	movs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e002      	b.n	80037ca <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	4619      	mov	r1, r3
 80037ce:	20c2      	movs	r0, #194	@ 0xc2
 80037d0:	f003 fb08 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80037d4:	697b      	ldr	r3, [r7, #20]
    }
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b088      	sub	sp, #32
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	461a      	mov	r2, r3
 80037f6:	21a5      	movs	r1, #165	@ 0xa5
 80037f8:	f004 f85b 	bl	80078b2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003806:	3b01      	subs	r3, #1
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f023 0307 	bic.w	r3, r3, #7
 8003814:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	617b      	str	r3, [r7, #20]
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01e      	beq.n	800387c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e012      	b.n	800386a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	7819      	ldrb	r1, [r3, #0]
 800384c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	3334      	adds	r3, #52	@ 0x34
 8003854:	460a      	mov	r2, r1
 8003856:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	3301      	adds	r3, #1
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	2b0e      	cmp	r3, #14
 800386e:	d9e9      	bls.n	8003844 <prvInitialiseNewTask+0x66>
 8003870:	e000      	b.n	8003874 <prvInitialiseNewTask+0x96>
            {
                break;
 8003872:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	2b04      	cmp	r3, #4
 8003880:	d90b      	bls.n	800389a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	613b      	str	r3, [r7, #16]
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	e7fd      	b.n	8003896 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	2b04      	cmp	r3, #4
 800389e:	d901      	bls.n	80038a4 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038a0:	2304      	movs	r3, #4
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80038a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	3304      	adds	r3, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f953 	bl	8002b60 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	3318      	adds	r3, #24
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f94e 	bl	8002b60 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	f1c3 0205 	rsb	r2, r3, #5
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	68f9      	ldr	r1, [r7, #12]
 80038de:	69b8      	ldr	r0, [r7, #24]
 80038e0:	f001 fb34 	bl	8004f4c <pxPortInitialiseStack>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80038ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038f6:	bf00      	nop
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003900:	b5b0      	push	{r4, r5, r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003908:	f001 fc9c 	bl	8005244 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800390c:	4b50      	ldr	r3, [pc, #320]	@ (8003a50 <prvAddNewTaskToReadyList+0x150>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3301      	adds	r3, #1
 8003912:	4a4f      	ldr	r2, [pc, #316]	@ (8003a50 <prvAddNewTaskToReadyList+0x150>)
 8003914:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003916:	4b4f      	ldr	r3, [pc, #316]	@ (8003a54 <prvAddNewTaskToReadyList+0x154>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800391e:	4a4d      	ldr	r2, [pc, #308]	@ (8003a54 <prvAddNewTaskToReadyList+0x154>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003924:	4b4a      	ldr	r3, [pc, #296]	@ (8003a50 <prvAddNewTaskToReadyList+0x150>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d110      	bne.n	800394e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800392c:	f000 fe60 	bl	80045f0 <prvInitialiseTaskLists>
 8003930:	e00d      	b.n	800394e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003932:	4b49      	ldr	r3, [pc, #292]	@ (8003a58 <prvAddNewTaskToReadyList+0x158>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393a:	4b46      	ldr	r3, [pc, #280]	@ (8003a54 <prvAddNewTaskToReadyList+0x154>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	429a      	cmp	r2, r3
 8003946:	d802      	bhi.n	800394e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003948:	4a42      	ldr	r2, [pc, #264]	@ (8003a54 <prvAddNewTaskToReadyList+0x154>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800394e:	4b43      	ldr	r3, [pc, #268]	@ (8003a5c <prvAddNewTaskToReadyList+0x15c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	4a41      	ldr	r2, [pc, #260]	@ (8003a5c <prvAddNewTaskToReadyList+0x15c>)
 8003956:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003958:	4b40      	ldr	r3, [pc, #256]	@ (8003a5c <prvAddNewTaskToReadyList+0x15c>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <prvAddNewTaskToReadyList+0x94>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	f003 faaf 	bl	8006ecc <SEGGER_SYSVIEW_OnTaskCreate>
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	461d      	mov	r5, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461c      	mov	r4, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	1ae3      	subs	r3, r4, r3
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	462b      	mov	r3, r5
 8003990:	f003 fdb2 	bl	80074f8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4618      	mov	r0, r3
 8003998:	f003 fb1c 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	2201      	movs	r2, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a60 <prvAddNewTaskToReadyList+0x160>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003a60 <prvAddNewTaskToReadyList+0x160>)
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b2:	492c      	ldr	r1, [pc, #176]	@ (8003a64 <prvAddNewTaskToReadyList+0x164>)
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3304      	adds	r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	3204      	adds	r2, #4
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a64 <prvAddNewTaskToReadyList+0x164>)
 80039f2:	441a      	add	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	615a      	str	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fc:	4919      	ldr	r1, [pc, #100]	@ (8003a64 <prvAddNewTaskToReadyList+0x164>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	4814      	ldr	r0, [pc, #80]	@ (8003a64 <prvAddNewTaskToReadyList+0x164>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4403      	add	r3, r0
 8003a1c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003a1e:	f001 fc43 	bl	80052a8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003a22:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <prvAddNewTaskToReadyList+0x158>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00e      	beq.n	8003a48 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <prvAddNewTaskToReadyList+0x154>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d207      	bcs.n	8003a48 <prvAddNewTaskToReadyList+0x148>
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <prvAddNewTaskToReadyList+0x168>)
 8003a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a50:	20000250 	.word	0x20000250
 8003a54:	20000178 	.word	0x20000178
 8003a58:	2000025c 	.word	0x2000025c
 8003a5c:	2000026c 	.word	0x2000026c
 8003a60:	20000258 	.word	0x20000258
 8003a64:	2000017c 	.word	0x2000017c
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8003a7e:	f000 f8d1 	bl	8003c24 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003a82:	4b14      	ldr	r3, [pc, #80]	@ (8003ad4 <vTaskDelay+0x68>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d00b      	beq.n	8003aa2 <vTaskDelay+0x36>
    __asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60bb      	str	r3, [r7, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 ff0f 	bl	80048c8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003aaa:	f000 f8c9 	bl	8003c40 <xTaskResumeAll>
 8003aae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8003ab6:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <vTaskDelay+0x6c>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003ac6:	20c5      	movs	r0, #197	@ 0xc5
 8003ac8:	f003 f950 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000278 	.word	0x20000278
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	@ 0x28
 8003ae0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e011      	b.n	8003b14 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003af0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b64 <prvCreateIdleTasks+0x88>)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4413      	add	r3, r2
 8003af6:	7819      	ldrb	r1, [r3, #0]
 8003af8:	463a      	mov	r2, r7
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4413      	add	r3, r2
 8003afe:	460a      	mov	r2, r1
 8003b00:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003b02:	463a      	mov	r2, r7
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4413      	add	r3, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3301      	adds	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b0e      	cmp	r3, #14
 8003b18:	ddea      	ble.n	8003af0 <prvCreateIdleTasks+0x14>
 8003b1a:	e000      	b.n	8003b1e <prvCreateIdleTasks+0x42>
        {
            break;
 8003b1c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e015      	b.n	8003b50 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003b24:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <prvCreateIdleTasks+0x8c>)
 8003b26:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b6c <prvCreateIdleTasks+0x90>)
 8003b2e:	4413      	add	r3, r2
 8003b30:	4639      	mov	r1, r7
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	2300      	movs	r3, #0
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2282      	movs	r2, #130	@ 0x82
 8003b3c:	6938      	ldr	r0, [r7, #16]
 8003b3e:	f7ff fe26 	bl	800378e <xTaskCreate>
 8003b42:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dde6      	ble.n	8003b24 <prvCreateIdleTasks+0x48>
 8003b56:	e000      	b.n	8003b5a <prvCreateIdleTasks+0x7e>
        {
            break;
 8003b58:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	080086b0 	.word	0x080086b0
 8003b68:	080045c1 	.word	0x080045c1
 8003b6c:	20000274 	.word	0x20000274

08003b70 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003b76:	f7ff ffb1 	bl	8003adc <prvCreateIdleTasks>
 8003b7a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d102      	bne.n	8003b88 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003b82:	f000 ff2f 	bl	80049e4 <xTimerCreateTimerTask>
 8003b86:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d124      	bne.n	8003bd8 <vTaskStartScheduler+0x68>
    __asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60bb      	str	r3, [r7, #8]
}
 8003ba0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c0c <vTaskStartScheduler+0x9c>)
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003baa:	4b19      	ldr	r3, [pc, #100]	@ (8003c10 <vTaskStartScheduler+0xa0>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bb0:	4b18      	ldr	r3, [pc, #96]	@ (8003c14 <vTaskStartScheduler+0xa4>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003bb6:	4b18      	ldr	r3, [pc, #96]	@ (8003c18 <vTaskStartScheduler+0xa8>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <vTaskStartScheduler+0xac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d102      	bne.n	8003bc8 <vTaskStartScheduler+0x58>
 8003bc2:	f003 f967 	bl	8006e94 <SEGGER_SYSVIEW_OnIdle>
 8003bc6:	e004      	b.n	8003bd2 <vTaskStartScheduler+0x62>
 8003bc8:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <vTaskStartScheduler+0xac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 f9bf 	bl	8006f50 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003bd2:	f001 fa47 	bl	8005064 <xPortStartScheduler>
 8003bd6:	e00f      	b.n	8003bf8 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d10b      	bne.n	8003bf8 <vTaskStartScheduler+0x88>
    __asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	607b      	str	r3, [r7, #4]
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003bf8:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <vTaskStartScheduler+0xb0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003bfc:	20cd      	movs	r0, #205	@ 0xcd
 8003bfe:	f003 f8b5 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000270 	.word	0x20000270
 8003c10:	2000025c 	.word	0x2000025c
 8003c14:	20000254 	.word	0x20000254
 8003c18:	20000274 	.word	0x20000274
 8003c1c:	20000178 	.word	0x20000178
 8003c20:	20000018 	.word	0x20000018

08003c24 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <vTaskSuspendAll+0x18>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a03      	ldr	r2, [pc, #12]	@ (8003c3c <vTaskSuspendAll+0x18>)
 8003c30:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003c32:	20cf      	movs	r0, #207	@ 0xcf
 8003c34:	f003 f89a 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000278 	.word	0x20000278

08003c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003c4e:	f001 faf9 	bl	8005244 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003c56:	4b7a      	ldr	r3, [pc, #488]	@ (8003e40 <xTaskResumeAll+0x200>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <xTaskResumeAll+0x36>
    __asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	603b      	str	r3, [r7, #0]
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	e7fd      	b.n	8003c72 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003c76:	4b72      	ldr	r3, [pc, #456]	@ (8003e40 <xTaskResumeAll+0x200>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	4a70      	ldr	r2, [pc, #448]	@ (8003e40 <xTaskResumeAll+0x200>)
 8003c7e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003c80:	4b6f      	ldr	r3, [pc, #444]	@ (8003e40 <xTaskResumeAll+0x200>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f040 80ce 	bne.w	8003e26 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e44 <xTaskResumeAll+0x204>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80c9 	beq.w	8003e26 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c94:	e092      	b.n	8003dbc <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c96:	4b6c      	ldr	r3, [pc, #432]	@ (8003e48 <xTaskResumeAll+0x208>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	6a12      	ldr	r2, [r2, #32]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	69d2      	ldr	r2, [r2, #28]
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3318      	adds	r3, #24
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d103      	bne.n	8003ccc <xTaskResumeAll+0x8c>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d103      	bne.n	8003d0a <xTaskResumeAll+0xca>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	615a      	str	r2, [r3, #20]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	1e5a      	subs	r2, r3, #1
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f003 f959 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	2201      	movs	r2, #1
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	4b48      	ldr	r3, [pc, #288]	@ (8003e4c <xTaskResumeAll+0x20c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	4a46      	ldr	r2, [pc, #280]	@ (8003e4c <xTaskResumeAll+0x20c>)
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d38:	4945      	ldr	r1, [pc, #276]	@ (8003e50 <xTaskResumeAll+0x210>)
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3304      	adds	r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	60da      	str	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	3204      	adds	r2, #4
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	1d1a      	adds	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4a36      	ldr	r2, [pc, #216]	@ (8003e50 <xTaskResumeAll+0x210>)
 8003d78:	441a      	add	r2, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	615a      	str	r2, [r3, #20]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d82:	4933      	ldr	r1, [pc, #204]	@ (8003e50 <xTaskResumeAll+0x210>)
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d94:	1c59      	adds	r1, r3, #1
 8003d96:	482e      	ldr	r0, [pc, #184]	@ (8003e50 <xTaskResumeAll+0x210>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4403      	add	r3, r0
 8003da2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e54 <xTaskResumeAll+0x214>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d904      	bls.n	8003dbc <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003db2:	4a29      	ldr	r2, [pc, #164]	@ (8003e58 <xTaskResumeAll+0x218>)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2101      	movs	r1, #1
 8003db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dbc:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <xTaskResumeAll+0x208>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f47f af68 	bne.w	8003c96 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003dcc:	f000 fc8e 	bl	80046ec <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dd0:	4b22      	ldr	r3, [pc, #136]	@ (8003e5c <xTaskResumeAll+0x21c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d012      	beq.n	8003e02 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003ddc:	f000 f878 	bl	8003ed0 <xTaskIncrementTick>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003de6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <xTaskResumeAll+0x218>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2101      	movs	r1, #1
 8003dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ef      	bne.n	8003ddc <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003dfc:	4b17      	ldr	r3, [pc, #92]	@ (8003e5c <xTaskResumeAll+0x21c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003e02:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <xTaskResumeAll+0x218>)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003e12:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <xTaskResumeAll+0x214>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <xTaskResumeAll+0x220>)
 8003e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e26:	f001 fa3f 	bl	80052a8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	20d0      	movs	r0, #208	@ 0xd0
 8003e30:	f002 ffd8 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003e34:	69bb      	ldr	r3, [r7, #24]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000278 	.word	0x20000278
 8003e44:	20000250 	.word	0x20000250
 8003e48:	20000210 	.word	0x20000210
 8003e4c:	20000258 	.word	0x20000258
 8003e50:	2000017c 	.word	0x2000017c
 8003e54:	20000178 	.word	0x20000178
 8003e58:	20000264 	.word	0x20000264
 8003e5c:	20000260 	.word	0x20000260
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <xTaskGetTickCount+0x20>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	20d1      	movs	r0, #209	@ 0xd1
 8003e74:	f002 ffb6 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003e78:	687b      	ldr	r3, [r7, #4]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000254 	.word	0x20000254

08003e88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e8e:	f001 fac5 	bl	800541c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <xTaskGetTickCountFromISR+0x28>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	20d2      	movs	r0, #210	@ 0xd2
 8003ea0:	f002 ffa0 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003ea4:	683b      	ldr	r3, [r7, #0]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000254 	.word	0x20000254

08003eb4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003eb8:	4b04      	ldr	r3, [pc, #16]	@ (8003ecc <uxTaskGetNumberOfTasks+0x18>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	20d3      	movs	r0, #211	@ 0xd3
 8003ec0:	f002 ff90 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8003ec4:	4b01      	ldr	r3, [pc, #4]	@ (8003ecc <uxTaskGetNumberOfTasks+0x18>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000250 	.word	0x20000250

08003ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	@ 0x28
 8003ed4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003eda:	4b87      	ldr	r3, [pc, #540]	@ (80040f8 <xTaskIncrementTick+0x228>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 80f9 	bne.w	80040d6 <xTaskIncrementTick+0x206>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ee4:	4b85      	ldr	r3, [pc, #532]	@ (80040fc <xTaskIncrementTick+0x22c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003eec:	4a83      	ldr	r2, [pc, #524]	@ (80040fc <xTaskIncrementTick+0x22c>)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d121      	bne.n	8003f3c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ef8:	4b81      	ldr	r3, [pc, #516]	@ (8004100 <xTaskIncrementTick+0x230>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <xTaskIncrementTick+0x4a>
    __asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	607b      	str	r3, [r7, #4]
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	e7fd      	b.n	8003f16 <xTaskIncrementTick+0x46>
 8003f1a:	4b79      	ldr	r3, [pc, #484]	@ (8004100 <xTaskIncrementTick+0x230>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	4b78      	ldr	r3, [pc, #480]	@ (8004104 <xTaskIncrementTick+0x234>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a76      	ldr	r2, [pc, #472]	@ (8004100 <xTaskIncrementTick+0x230>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4a76      	ldr	r2, [pc, #472]	@ (8004104 <xTaskIncrementTick+0x234>)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b76      	ldr	r3, [pc, #472]	@ (8004108 <xTaskIncrementTick+0x238>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3301      	adds	r3, #1
 8003f34:	4a74      	ldr	r2, [pc, #464]	@ (8004108 <xTaskIncrementTick+0x238>)
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	f000 fbd8 	bl	80046ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003f3c:	4b73      	ldr	r3, [pc, #460]	@ (800410c <xTaskIncrementTick+0x23c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f0c0 80ac 	bcc.w	80040a0 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f48:	4b6d      	ldr	r3, [pc, #436]	@ (8004100 <xTaskIncrementTick+0x230>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003f52:	4b6e      	ldr	r3, [pc, #440]	@ (800410c <xTaskIncrementTick+0x23c>)
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	601a      	str	r2, [r3, #0]
                    break;
 8003f5a:	e0a1      	b.n	80040a0 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f5c:	4b68      	ldr	r3, [pc, #416]	@ (8004100 <xTaskIncrementTick+0x230>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003f6c:	6a3a      	ldr	r2, [r7, #32]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d203      	bcs.n	8003f7c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003f74:	4a65      	ldr	r2, [pc, #404]	@ (800410c <xTaskIncrementTick+0x23c>)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6013      	str	r3, [r2, #0]
                        break;
 8003f7a:	e091      	b.n	80040a0 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	6892      	ldr	r2, [r2, #8]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d103      	bne.n	8003faa <xTaskIncrementTick+0xda>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01e      	beq.n	8004000 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	6a12      	ldr	r2, [r2, #32]
 8003fd0:	609a      	str	r2, [r3, #8]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	69d2      	ldr	r2, [r2, #28]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d103      	bne.n	8003ff0 <xTaskIncrementTick+0x120>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	6a1a      	ldr	r2, [r3, #32]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1e5a      	subs	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4618      	mov	r0, r3
 8004004:	f002 ffe6 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	2201      	movs	r2, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	4b3f      	ldr	r3, [pc, #252]	@ (8004110 <xTaskIncrementTick+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	4a3e      	ldr	r2, [pc, #248]	@ (8004110 <xTaskIncrementTick+0x240>)
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401e:	493d      	ldr	r1, [pc, #244]	@ (8004114 <xTaskIncrementTick+0x244>)
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3304      	adds	r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	3204      	adds	r2, #4
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4a2d      	ldr	r2, [pc, #180]	@ (8004114 <xTaskIncrementTick+0x244>)
 800405e:	441a      	add	r2, r3
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	615a      	str	r2, [r3, #20]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004068:	492a      	ldr	r1, [pc, #168]	@ (8004114 <xTaskIncrementTick+0x244>)
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800407a:	1c59      	adds	r1, r3, #1
 800407c:	4825      	ldr	r0, [pc, #148]	@ (8004114 <xTaskIncrementTick+0x244>)
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4403      	add	r3, r0
 8004088:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408e:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <xTaskIncrementTick+0x248>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	429a      	cmp	r2, r3
 8004096:	f67f af57 	bls.w	8003f48 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800409a:	2301      	movs	r3, #1
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409e:	e753      	b.n	8003f48 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <xTaskIncrementTick+0x248>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a6:	491b      	ldr	r1, [pc, #108]	@ (8004114 <xTaskIncrementTick+0x244>)
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d901      	bls.n	80040bc <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80040b8:	2301      	movs	r3, #1
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
 80040bc:	4b17      	ldr	r3, [pc, #92]	@ (800411c <xTaskIncrementTick+0x24c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xTaskIncrementTick+0x1f8>
            {
                vApplicationTickHook();
 80040c4:	f7fc fc3e 	bl	8000944 <vApplicationTickHook>
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80040c8:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <xTaskIncrementTick+0x250>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d009      	beq.n	80040e4 <xTaskIncrementTick+0x214>
                {
                    xSwitchRequired = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d4:	e006      	b.n	80040e4 <xTaskIncrementTick+0x214>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80040d6:	4b11      	ldr	r3, [pc, #68]	@ (800411c <xTaskIncrementTick+0x24c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a0f      	ldr	r2, [pc, #60]	@ (800411c <xTaskIncrementTick+0x24c>)
 80040de:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
 80040e0:	f7fc fc30 	bl	8000944 <vApplicationTickHook>
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	4619      	mov	r1, r3
 80040e8:	20db      	movs	r0, #219	@ 0xdb
 80040ea:	f002 fe7b 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3728      	adds	r7, #40	@ 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000278 	.word	0x20000278
 80040fc:	20000254 	.word	0x20000254
 8004100:	20000208 	.word	0x20000208
 8004104:	2000020c 	.word	0x2000020c
 8004108:	20000268 	.word	0x20000268
 800410c:	20000270 	.word	0x20000270
 8004110:	20000258 	.word	0x20000258
 8004114:	2000017c 	.word	0x2000017c
 8004118:	20000178 	.word	0x20000178
 800411c:	20000260 	.word	0x20000260
 8004120:	20000264 	.word	0x20000264

08004124 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800412a:	4b2e      	ldr	r3, [pc, #184]	@ (80041e4 <vTaskSwitchContext+0xc0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004132:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <vTaskSwitchContext+0xc4>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004138:	e04f      	b.n	80041da <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 800413a:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <vTaskSwitchContext+0xc4>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004140:	4b2a      	ldr	r3, [pc, #168]	@ (80041ec <vTaskSwitchContext+0xc8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800414e:	7afb      	ldrb	r3, [r7, #11]
 8004150:	f1c3 031f 	rsb	r3, r3, #31
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	4926      	ldr	r1, [pc, #152]	@ (80041f0 <vTaskSwitchContext+0xcc>)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <vTaskSwitchContext+0x5e>
    __asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	607b      	str	r3, [r7, #4]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <vTaskSwitchContext+0x5a>
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4a18      	ldr	r2, [pc, #96]	@ (80041f0 <vTaskSwitchContext+0xcc>)
 800418e:	4413      	add	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	3308      	adds	r3, #8
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d103      	bne.n	80041b0 <vTaskSwitchContext+0x8c>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	4a0f      	ldr	r2, [pc, #60]	@ (80041f4 <vTaskSwitchContext+0xd0>)
 80041b8:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80041ba:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <vTaskSwitchContext+0xd4>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <vTaskSwitchContext+0xd0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d102      	bne.n	80041cc <vTaskSwitchContext+0xa8>
 80041c6:	f002 fe65 	bl	8006e94 <SEGGER_SYSVIEW_OnIdle>
 80041ca:	e004      	b.n	80041d6 <vTaskSwitchContext+0xb2>
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <vTaskSwitchContext+0xd0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f002 febd 	bl	8006f50 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80041d6:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <vTaskSwitchContext+0xd0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
    }
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000278 	.word	0x20000278
 80041e8:	20000264 	.word	0x20000264
 80041ec:	20000258 	.word	0x20000258
 80041f0:	2000017c 	.word	0x2000017c
 80041f4:	20000178 	.word	0x20000178
 80041f8:	20000274 	.word	0x20000274

080041fc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60fb      	str	r3, [r7, #12]
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004224:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <vTaskPlaceOnEventList+0x4c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3318      	adds	r3, #24
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fe fca6 	bl	8002b7e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004232:	2101      	movs	r1, #1
 8004234:	6838      	ldr	r0, [r7, #0]
 8004236:	f000 fb47 	bl	80048c8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800423a:	20e1      	movs	r0, #225	@ 0xe1
 800423c:	f002 fd96 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000178 	.word	0x20000178

0800424c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	613b      	str	r3, [r7, #16]
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	e7fd      	b.n	8004272 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <vTaskPlaceOnEventListRestricted+0x90>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	61da      	str	r2, [r3, #28]
 8004284:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <vTaskPlaceOnEventListRestricted+0x90>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	6892      	ldr	r2, [r2, #8]
 800428c:	621a      	str	r2, [r3, #32]
 800428e:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <vTaskPlaceOnEventListRestricted+0x90>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	3218      	adds	r2, #24
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <vTaskPlaceOnEventListRestricted+0x90>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f103 0218 	add.w	r2, r3, #24
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	609a      	str	r2, [r3, #8]
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <vTaskPlaceOnEventListRestricted+0x90>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f000 fafe 	bl	80048c8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80042cc:	20e3      	movs	r0, #227	@ 0xe3
 80042ce:	f002 fd4d 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
    }
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000178 	.word	0x20000178

080042e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	@ 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60fb      	str	r3, [r7, #12]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	6a12      	ldr	r2, [r2, #32]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	6a3a      	ldr	r2, [r7, #32]
 8004324:	69d2      	ldr	r2, [r2, #28]
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	3318      	adds	r3, #24
 8004330:	429a      	cmp	r2, r3
 8004332:	d103      	bne.n	800433c <xTaskRemoveFromEventList+0x5c>
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2200      	movs	r2, #0
 8004340:	629a      	str	r2, [r3, #40]	@ 0x28
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	1e5a      	subs	r2, r3, #1
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800434c:	4b4e      	ldr	r3, [pc, #312]	@ (8004488 <xTaskRemoveFromEventList+0x1a8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d164      	bne.n	800441e <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	6892      	ldr	r2, [r2, #8]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	3304      	adds	r3, #4
 8004376:	429a      	cmp	r2, r3
 8004378:	d103      	bne.n	8004382 <xTaskRemoveFromEventList+0xa2>
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2200      	movs	r2, #0
 8004386:	615a      	str	r2, [r3, #20]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	4618      	mov	r0, r3
 8004396:	f002 fe1d 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	2201      	movs	r2, #1
 80043a0:	409a      	lsls	r2, r3
 80043a2:	4b3a      	ldr	r3, [pc, #232]	@ (800448c <xTaskRemoveFromEventList+0x1ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	4a38      	ldr	r2, [pc, #224]	@ (800448c <xTaskRemoveFromEventList+0x1ac>)
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b0:	4937      	ldr	r1, [pc, #220]	@ (8004490 <xTaskRemoveFromEventList+0x1b0>)
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3304      	adds	r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	3204      	adds	r2, #4
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	1d1a      	adds	r2, r3, #4
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4a28      	ldr	r2, [pc, #160]	@ (8004490 <xTaskRemoveFromEventList+0x1b0>)
 80043f0:	441a      	add	r2, r3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	615a      	str	r2, [r3, #20]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fa:	4925      	ldr	r1, [pc, #148]	@ (8004490 <xTaskRemoveFromEventList+0x1b0>)
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800440c:	1c59      	adds	r1, r3, #1
 800440e:	4820      	ldr	r0, [pc, #128]	@ (8004490 <xTaskRemoveFromEventList+0x1b0>)
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4403      	add	r3, r0
 800441a:	6019      	str	r1, [r3, #0]
 800441c:	e01b      	b.n	8004456 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800441e:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <xTaskRemoveFromEventList+0x1b4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	61da      	str	r2, [r3, #28]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	621a      	str	r2, [r3, #32]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	6a3a      	ldr	r2, [r7, #32]
 8004438:	3218      	adds	r2, #24
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f103 0218 	add.w	r2, r3, #24
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	609a      	str	r2, [r3, #8]
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <xTaskRemoveFromEventList+0x1b4>)
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28
 800444c:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <xTaskRemoveFromEventList+0x1b4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	4a10      	ldr	r2, [pc, #64]	@ (8004494 <xTaskRemoveFromEventList+0x1b4>)
 8004454:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445a:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <xTaskRemoveFromEventList+0x1b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	429a      	cmp	r2, r3
 8004462:	d905      	bls.n	8004470 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004464:	2301      	movs	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <xTaskRemoveFromEventList+0x1bc>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e001      	b.n	8004474 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	4619      	mov	r1, r3
 8004478:	20e4      	movs	r0, #228	@ 0xe4
 800447a:	f002 fcb3 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004480:	4618      	mov	r0, r3
 8004482:	3728      	adds	r7, #40	@ 0x28
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000278 	.word	0x20000278
 800448c:	20000258 	.word	0x20000258
 8004490:	2000017c 	.word	0x2000017c
 8004494:	20000210 	.word	0x20000210
 8004498:	20000178 	.word	0x20000178
 800449c:	20000264 	.word	0x20000264

080044a0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044a8:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <vTaskInternalSetTimeOutState+0x28>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <vTaskInternalSetTimeOutState+0x2c>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80044b8:	20e7      	movs	r0, #231	@ 0xe7
 80044ba:	f002 fc57 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000268 	.word	0x20000268
 80044cc:	20000254 	.word	0x20000254

080044d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	613b      	str	r3, [r7, #16]
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60fb      	str	r3, [r7, #12]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004516:	f000 fe95 	bl	8005244 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800451a:	4b21      	ldr	r3, [pc, #132]	@ (80045a0 <xTaskCheckForTimeOut+0xd0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d102      	bne.n	800453a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	e026      	b.n	8004588 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <xTaskCheckForTimeOut+0xd4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d00a      	beq.n	800455c <xTaskCheckForTimeOut+0x8c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	429a      	cmp	r2, r3
 800454e:	d305      	bcc.n	800455c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004550:	2301      	movs	r3, #1
 8004552:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e015      	b.n	8004588 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	429a      	cmp	r2, r3
 8004564:	d20b      	bcs.n	800457e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	1ad2      	subs	r2, r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ff94 	bl	80044a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	e004      	b.n	8004588 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004584:	2301      	movs	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004588:	f000 fe8e 	bl	80052a8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4619      	mov	r1, r3
 8004590:	20e8      	movs	r0, #232	@ 0xe8
 8004592:	f002 fc27 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004596:	69fb      	ldr	r3, [r7, #28]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000254 	.word	0x20000254
 80045a4:	20000268 	.word	0x20000268

080045a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80045ac:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <vTaskMissedYield+0x14>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80045b2:	20e9      	movs	r0, #233	@ 0xe9
 80045b4:	f002 fbda 	bl	8006d6c <SEGGER_SYSVIEW_RecordEndCall>
}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000264 	.word	0x20000264

080045c0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045c8:	f000 f852 	bl	8004670 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <prvIdleTask+0x28>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d9f9      	bls.n	80045c8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <prvIdleTask+0x2c>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80045e4:	e7f0      	b.n	80045c8 <prvIdleTask+0x8>
 80045e6:	bf00      	nop
 80045e8:	2000017c 	.word	0x2000017c
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045f6:	2300      	movs	r3, #0
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	e00c      	b.n	8004616 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <prvInitialiseTaskLists+0x60>)
 8004608:	4413      	add	r3, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fa86 	bl	8002b1c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3301      	adds	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d9ef      	bls.n	80045fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800461c:	480d      	ldr	r0, [pc, #52]	@ (8004654 <prvInitialiseTaskLists+0x64>)
 800461e:	f7fe fa7d 	bl	8002b1c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004622:	480d      	ldr	r0, [pc, #52]	@ (8004658 <prvInitialiseTaskLists+0x68>)
 8004624:	f7fe fa7a 	bl	8002b1c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004628:	480c      	ldr	r0, [pc, #48]	@ (800465c <prvInitialiseTaskLists+0x6c>)
 800462a:	f7fe fa77 	bl	8002b1c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800462e:	480c      	ldr	r0, [pc, #48]	@ (8004660 <prvInitialiseTaskLists+0x70>)
 8004630:	f7fe fa74 	bl	8002b1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004634:	480b      	ldr	r0, [pc, #44]	@ (8004664 <prvInitialiseTaskLists+0x74>)
 8004636:	f7fe fa71 	bl	8002b1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800463a:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <prvInitialiseTaskLists+0x78>)
 800463c:	4a05      	ldr	r2, [pc, #20]	@ (8004654 <prvInitialiseTaskLists+0x64>)
 800463e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <prvInitialiseTaskLists+0x7c>)
 8004642:	4a05      	ldr	r2, [pc, #20]	@ (8004658 <prvInitialiseTaskLists+0x68>)
 8004644:	601a      	str	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000017c 	.word	0x2000017c
 8004654:	200001e0 	.word	0x200001e0
 8004658:	200001f4 	.word	0x200001f4
 800465c:	20000210 	.word	0x20000210
 8004660:	20000224 	.word	0x20000224
 8004664:	2000023c 	.word	0x2000023c
 8004668:	20000208 	.word	0x20000208
 800466c:	2000020c 	.word	0x2000020c

08004670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004676:	e019      	b.n	80046ac <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004678:	f000 fde4 	bl	8005244 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800467c:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <prvCheckTasksWaitingTermination+0x50>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fab3 	bl	8002bf4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <prvCheckTasksWaitingTermination+0x54>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3b01      	subs	r3, #1
 8004694:	4a0b      	ldr	r2, [pc, #44]	@ (80046c4 <prvCheckTasksWaitingTermination+0x54>)
 8004696:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <prvCheckTasksWaitingTermination+0x58>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <prvCheckTasksWaitingTermination+0x58>)
 80046a0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80046a2:	f000 fe01 	bl	80052a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f810 	bl	80046cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <prvCheckTasksWaitingTermination+0x58>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e1      	bne.n	8004678 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000224 	.word	0x20000224
 80046c4:	20000250 	.word	0x20000250
 80046c8:	20000238 	.word	0x20000238

080046cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 f813 	bl	8005704 <vPortFree>
            vPortFree( pxTCB );
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f001 f810 	bl	8005704 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <prvResetNextTaskUnblockTime+0x30>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <prvResetNextTaskUnblockTime+0x34>)
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004700:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004702:	e005      	b.n	8004710 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004704:	4b05      	ldr	r3, [pc, #20]	@ (800471c <prvResetNextTaskUnblockTime+0x30>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <prvResetNextTaskUnblockTime+0x34>)
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000208 	.word	0x20000208
 8004720:	20000270 	.word	0x20000270

08004724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800472a:	4b0d      	ldr	r3, [pc, #52]	@ (8004760 <xTaskGetSchedulerState+0x3c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004732:	2301      	movs	r3, #1
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	e008      	b.n	800474a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <xTaskGetSchedulerState+0x40>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004740:	2302      	movs	r3, #2
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	e001      	b.n	800474a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4619      	mov	r1, r3
 800474e:	20f5      	movs	r0, #245	@ 0xf5
 8004750:	f002 fb48 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004754:	687b      	ldr	r3, [r7, #4]
    }
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	2000025c 	.word	0x2000025c
 8004764:	20000278 	.word	0x20000278

08004768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8094 	beq.w	80048a8 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004780:	4b4e      	ldr	r3, [pc, #312]	@ (80048bc <xTaskPriorityDisinherit+0x154>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	429a      	cmp	r2, r3
 8004788:	d00b      	beq.n	80047a2 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	613b      	str	r3, [r7, #16]
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	e7fd      	b.n	800479e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60fb      	str	r3, [r7, #12]
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	e7fd      	b.n	80047be <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c6:	1e5a      	subs	r2, r3, #1
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d067      	beq.n	80048a8 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d163      	bne.n	80048a8 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fa05 	bl	8002bf4 <uxListRemove>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	2201      	movs	r2, #1
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43da      	mvns	r2, r3
 80047fc:	4b30      	ldr	r3, [pc, #192]	@ (80048c0 <xTaskPriorityDisinherit+0x158>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4013      	ands	r3, r2
 8004802:	4a2f      	ldr	r2, [pc, #188]	@ (80048c0 <xTaskPriorityDisinherit+0x158>)
 8004804:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	f1c3 0205 	rsb	r2, r3, #5
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	4618      	mov	r0, r3
 800481e:	f002 fbd9 	bl	8006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	2201      	movs	r2, #1
 8004828:	409a      	lsls	r2, r3
 800482a:	4b25      	ldr	r3, [pc, #148]	@ (80048c0 <xTaskPriorityDisinherit+0x158>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	4a23      	ldr	r2, [pc, #140]	@ (80048c0 <xTaskPriorityDisinherit+0x158>)
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004838:	4922      	ldr	r1, [pc, #136]	@ (80048c4 <xTaskPriorityDisinherit+0x15c>)
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	3304      	adds	r3, #4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	3204      	adds	r2, #4
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	609a      	str	r2, [r3, #8]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4a13      	ldr	r2, [pc, #76]	@ (80048c4 <xTaskPriorityDisinherit+0x15c>)
 8004878:	441a      	add	r2, r3
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	615a      	str	r2, [r3, #20]
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004882:	4910      	ldr	r1, [pc, #64]	@ (80048c4 <xTaskPriorityDisinherit+0x15c>)
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004894:	1c59      	adds	r1, r3, #1
 8004896:	480b      	ldr	r0, [pc, #44]	@ (80048c4 <xTaskPriorityDisinherit+0x15c>)
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4403      	add	r3, r0
 80048a2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4619      	mov	r1, r3
 80048ac:	20f7      	movs	r0, #247	@ 0xf7
 80048ae:	f002 fa99 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80048b2:	69fb      	ldr	r3, [r7, #28]
    }
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000178 	.word	0x20000178
 80048c0:	20000258 	.word	0x20000258
 80048c4:	2000017c 	.word	0x2000017c

080048c8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80048d2:	4b3d      	ldr	r3, [pc, #244]	@ (80049c8 <prvAddCurrentTaskToDelayedList+0x100>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80048d8:	4b3c      	ldr	r3, [pc, #240]	@ (80049cc <prvAddCurrentTaskToDelayedList+0x104>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80048de:	4b3c      	ldr	r3, [pc, #240]	@ (80049d0 <prvAddCurrentTaskToDelayedList+0x108>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048e4:	4b3b      	ldr	r3, [pc, #236]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe f982 	bl	8002bf4 <uxListRemove>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80048f6:	4b37      	ldr	r3, [pc, #220]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fc:	2201      	movs	r2, #1
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43da      	mvns	r2, r3
 8004904:	4b34      	ldr	r3, [pc, #208]	@ (80049d8 <prvAddCurrentTaskToDelayedList+0x110>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4013      	ands	r3, r2
 800490a:	4a33      	ldr	r2, [pc, #204]	@ (80049d8 <prvAddCurrentTaskToDelayedList+0x110>)
 800490c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d124      	bne.n	8004960 <prvAddCurrentTaskToDelayedList+0x98>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d021      	beq.n	8004960 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800491c:	4b2f      	ldr	r3, [pc, #188]	@ (80049dc <prvAddCurrentTaskToDelayedList+0x114>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	4b2c      	ldr	r3, [pc, #176]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	4b2a      	ldr	r3, [pc, #168]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	6892      	ldr	r2, [r2, #8]
 8004932:	60da      	str	r2, [r3, #12]
 8004934:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	3204      	adds	r2, #4
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	1d1a      	adds	r2, r3, #4
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	4b22      	ldr	r3, [pc, #136]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a23      	ldr	r2, [pc, #140]	@ (80049dc <prvAddCurrentTaskToDelayedList+0x114>)
 8004950:	615a      	str	r2, [r3, #20]
 8004952:	4b22      	ldr	r3, [pc, #136]	@ (80049dc <prvAddCurrentTaskToDelayedList+0x114>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a20      	ldr	r2, [pc, #128]	@ (80049dc <prvAddCurrentTaskToDelayedList+0x114>)
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800495e:	e02e      	b.n	80049be <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	429a      	cmp	r2, r3
 8004976:	d20d      	bcs.n	8004994 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004978:	4b16      	ldr	r3, [pc, #88]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2104      	movs	r1, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f002 fb6a 	bl	8007058 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004984:	4b13      	ldr	r3, [pc, #76]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f7fe f8f6 	bl	8002b7e <vListInsert>
}
 8004992:	e014      	b.n	80049be <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004994:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2104      	movs	r1, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f002 fb5c 	bl	8007058 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80049a0:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	69b8      	ldr	r0, [r7, #24]
 80049aa:	f7fe f8e8 	bl	8002b7e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80049ae:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <prvAddCurrentTaskToDelayedList+0x118>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d202      	bcs.n	80049be <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 80049b8:	4a09      	ldr	r2, [pc, #36]	@ (80049e0 <prvAddCurrentTaskToDelayedList+0x118>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000254 	.word	0x20000254
 80049cc:	20000208 	.word	0x20000208
 80049d0:	2000020c 	.word	0x2000020c
 80049d4:	20000178 	.word	0x20000178
 80049d8:	20000258 	.word	0x20000258
 80049dc:	2000023c 	.word	0x2000023c
 80049e0:	20000270 	.word	0x20000270

080049e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80049ee:	f000 fa77 	bl	8004ee0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80049f2:	4b15      	ldr	r3, [pc, #84]	@ (8004a48 <xTimerCreateTimerTask+0x64>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80049fa:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <xTimerCreateTimerTask+0x68>)
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	2302      	movs	r3, #2
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a08:	4911      	ldr	r1, [pc, #68]	@ (8004a50 <xTimerCreateTimerTask+0x6c>)
 8004a0a:	4812      	ldr	r0, [pc, #72]	@ (8004a54 <xTimerCreateTimerTask+0x70>)
 8004a0c:	f7fe febf 	bl	800378e <xTaskCreate>
 8004a10:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	603b      	str	r3, [r7, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4619      	mov	r1, r3
 8004a34:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004a38:	f002 f9d4 	bl	8006de4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004a3c:	687b      	ldr	r3, [r7, #4]
    }
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	200002ac 	.word	0x200002ac
 8004a4c:	200002b0 	.word	0x200002b0
 8004a50:	080086b8 	.word	0x080086b8
 8004a54:	08004afd 	.word	0x08004afd

08004a58 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a64:	e008      	b.n	8004a78 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	18d1      	adds	r1, r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f8df 	bl	8004c48 <prvInsertTimerInActiveList>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ea      	bne.n	8004a66 <prvReloadTimer+0xe>
        }
    }
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa6:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <prvProcessExpiredTimer+0x5c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe f89d 	bl	8002bf4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff ffc3 	bl	8004a58 <prvReloadTimer>
 8004ad2:	e008      	b.n	8004ae6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	4798      	blx	r3
    }
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200002a4 	.word	0x200002a4

08004afc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b04:	f107 0308 	add.w	r3, r7, #8
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f859 	bl	8004bc0 <prvGetNextExpireTime>
 8004b0e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4619      	mov	r1, r3
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f805 	bl	8004b24 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b1a:	f000 f8d7 	bl	8004ccc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b1e:	bf00      	nop
 8004b20:	e7f0      	b.n	8004b04 <prvTimerTask+0x8>
	...

08004b24 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b2e:	f7ff f879 	bl	8003c24 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f866 	bl	8004c08 <prvSampleTimeNow>
 8004b3c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d130      	bne.n	8004ba6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <prvProcessTimerOrBlockTask+0x3c>
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d806      	bhi.n	8004b60 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b52:	f7ff f875 	bl	8003c40 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ff9f 	bl	8004a9c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b5e:	e024      	b.n	8004baa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b66:	4b13      	ldr	r3, [pc, #76]	@ (8004bb4 <prvProcessTimerOrBlockTask+0x90>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <prvProcessTimerOrBlockTask+0x50>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <prvProcessTimerOrBlockTask+0x52>
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b78:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb8 <prvProcessTimerOrBlockTask+0x94>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	4619      	mov	r1, r3
 8004b86:	f7fe fd8f 	bl	80036a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b8a:	f7ff f859 	bl	8003c40 <xTaskResumeAll>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004b94:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <prvProcessTimerOrBlockTask+0x98>)
 8004b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	f3bf 8f6f 	isb	sy
    }
 8004ba4:	e001      	b.n	8004baa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004ba6:	f7ff f84b 	bl	8003c40 <xTaskResumeAll>
    }
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200002a8 	.word	0x200002a8
 8004bb8:	200002ac 	.word	0x200002ac
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <prvGetNextExpireTime+0x44>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <prvGetNextExpireTime+0x16>
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	e000      	b.n	8004bd8 <prvGetNextExpireTime+0x18>
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be4:	4b07      	ldr	r3, [pc, #28]	@ (8004c04 <prvGetNextExpireTime+0x44>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e001      	b.n	8004bf4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
    }
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200002a4 	.word	0x200002a4

08004c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004c10:	f7ff f928 	bl	8003e64 <xTaskGetTickCount>
 8004c14:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c16:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <prvSampleTimeNow+0x3c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d205      	bcs.n	8004c2c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c20:	f000 f938 	bl	8004e94 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c32:	4a04      	ldr	r2, [pc, #16]	@ (8004c44 <prvSampleTimeNow+0x3c>)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c38:	68fb      	ldr	r3, [r7, #12]
    }
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200002b4 	.word	0x200002b4

08004c48 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d812      	bhi.n	8004c94 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e01b      	b.n	8004cba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c82:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <prvInsertTimerInActiveList+0x7c>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fd ff76 	bl	8002b7e <vListInsert>
 8004c92:	e012      	b.n	8004cba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d206      	bcs.n	8004caa <prvInsertTimerInActiveList+0x62>
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e007      	b.n	8004cba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004caa:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <prvInsertTimerInActiveList+0x80>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7fd ff62 	bl	8002b7e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004cba:	697b      	ldr	r3, [r7, #20]
    }
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200002a8 	.word	0x200002a8
 8004cc8:	200002a4 	.word	0x200002a4

08004ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004cde:	e0c7      	b.n	8004e70 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da19      	bge.n	8004d1a <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	3304      	adds	r3, #4
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	61bb      	str	r3, [r7, #24]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d10:	6850      	ldr	r0, [r2, #4]
 8004d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d14:	6892      	ldr	r2, [r2, #8]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f2c0 80a7 	blt.w	8004e70 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd ff5e 	bl	8002bf4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d38:	463b      	mov	r3, r7
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ff64 	bl	8004c08 <prvSampleTimeNow>
 8004d40:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	f200 808f 	bhi.w	8004e6a <prvProcessReceivedCommands+0x19e>
 8004d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <prvProcessReceivedCommands+0x88>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d79 	.word	0x08004d79
 8004d5c:	08004de1 	.word	0x08004de1
 8004d60:	08004df5 	.word	0x08004df5
 8004d64:	08004e41 	.word	0x08004e41
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d79 	.word	0x08004d79
 8004d70:	08004de1 	.word	0x08004de1
 8004d74:	08004df5 	.word	0x08004df5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	18d1      	adds	r1, r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	6a38      	ldr	r0, [r7, #32]
 8004d98:	f7ff ff56 	bl	8004c48 <prvInsertTimerInActiveList>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d065      	beq.n	8004e6e <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4413      	add	r3, r2
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6a38      	ldr	r0, [r7, #32]
 8004dbe:	f7ff fe4b 	bl	8004a58 <prvReloadTimer>
 8004dc2:	e008      	b.n	8004dd6 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	6a38      	ldr	r0, [r7, #32]
 8004ddc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004dde:	e046      	b.n	8004e6e <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004df2:	e03d      	b.n	8004e70 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <prvProcessReceivedCommands+0x160>
    __asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	617b      	str	r3, [r7, #20]
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	18d1      	adds	r1, r2, r3
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	6a38      	ldr	r0, [r7, #32]
 8004e3a:	f7ff ff05 	bl	8004c48 <prvInsertTimerInActiveList>
                        break;
 8004e3e:	e017      	b.n	8004e70 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8004e4e:	6a38      	ldr	r0, [r7, #32]
 8004e50:	f000 fc58 	bl	8005704 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e54:	e00c      	b.n	8004e70 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004e68:	e002      	b.n	8004e70 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <prvProcessReceivedCommands+0x1a4>
                        break;
 8004e6e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004e70:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <prvProcessReceivedCommands+0x1c4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1d39      	adds	r1, r7, #4
 8004e76:	2200      	movs	r2, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe f9c7 	bl	800320c <xQueueReceive>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f af2d 	bne.w	8004ce0 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	3728      	adds	r7, #40	@ 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200002ac 	.word	0x200002ac

08004e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e9a:	e009      	b.n	8004eb0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <prvSwitchTimerLists+0x44>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8004eaa:	6838      	ldr	r0, [r7, #0]
 8004eac:	f7ff fdf6 	bl	8004a9c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eb0:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <prvSwitchTimerLists+0x44>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004eba:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <prvSwitchTimerLists+0x44>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ec0:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <prvSwitchTimerLists+0x48>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <prvSwitchTimerLists+0x44>)
 8004ec6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ec8:	4a04      	ldr	r2, [pc, #16]	@ (8004edc <prvSwitchTimerLists+0x48>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
    }
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200002a4 	.word	0x200002a4
 8004edc:	200002a8 	.word	0x200002a8

08004ee0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ee4:	f000 f9ae 	bl	8005244 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ee8:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <prvCheckForValidListAndQueue+0x54>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d11d      	bne.n	8004f2c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004ef0:	4811      	ldr	r0, [pc, #68]	@ (8004f38 <prvCheckForValidListAndQueue+0x58>)
 8004ef2:	f7fd fe13 	bl	8002b1c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004ef6:	4811      	ldr	r0, [pc, #68]	@ (8004f3c <prvCheckForValidListAndQueue+0x5c>)
 8004ef8:	f7fd fe10 	bl	8002b1c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004efc:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <prvCheckForValidListAndQueue+0x60>)
 8004efe:	4a0e      	ldr	r2, [pc, #56]	@ (8004f38 <prvCheckForValidListAndQueue+0x58>)
 8004f00:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004f02:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <prvCheckForValidListAndQueue+0x64>)
 8004f04:	4a0d      	ldr	r2, [pc, #52]	@ (8004f3c <prvCheckForValidListAndQueue+0x5c>)
 8004f06:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2110      	movs	r1, #16
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f7fd ff37 	bl	8002d80 <xQueueGenericCreate>
 8004f12:	4603      	mov	r3, r0
 8004f14:	4a07      	ldr	r2, [pc, #28]	@ (8004f34 <prvCheckForValidListAndQueue+0x54>)
 8004f16:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004f18:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <prvCheckForValidListAndQueue+0x54>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <prvCheckForValidListAndQueue+0x54>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4908      	ldr	r1, [pc, #32]	@ (8004f48 <prvCheckForValidListAndQueue+0x68>)
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fb6e 	bl	8003608 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f2c:	f000 f9bc 	bl	80052a8 <vPortExitCritical>
    }
 8004f30:	bf00      	nop
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	200002ac 	.word	0x200002ac
 8004f38:	2000027c 	.word	0x2000027c
 8004f3c:	20000290 	.word	0x20000290
 8004f40:	200002a4 	.word	0x200002a4
 8004f44:	200002a8 	.word	0x200002a8
 8004f48:	080086c0 	.word	0x080086c0

08004f4c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb0 <pxPortInitialiseStack+0x64>)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b14      	subs	r3, #20
 8004f86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b04      	subs	r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f06f 0202 	mvn.w	r2, #2
 8004f9a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b20      	subs	r3, #32
 8004fa0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	08004fb5 	.word	0x08004fb5

08004fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004fbe:	4b13      	ldr	r3, [pc, #76]	@ (800500c <prvTaskExitError+0x58>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d00b      	beq.n	8004fe0 <prvTaskExitError+0x2c>
    __asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60fb      	str	r3, [r7, #12]
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <prvTaskExitError+0x28>
    __asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60bb      	str	r3, [r7, #8]
}
 8004ff2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004ff4:	bf00      	nop
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0fc      	beq.n	8004ff6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	2000001c 	.word	0x2000001c

08005010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005010:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <pxCurrentTCBConst2>)
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	6808      	ldr	r0, [r1, #0]
 8005016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	f380 8809 	msr	PSP, r0
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8811 	msr	BASEPRI, r0
 800502a:	4770      	bx	lr
 800502c:	f3af 8000 	nop.w

08005030 <pxCurrentTCBConst2>:
 8005030:	20000178 	.word	0x20000178
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005038:	4808      	ldr	r0, [pc, #32]	@ (800505c <prvPortStartFirstTask+0x24>)
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	6800      	ldr	r0, [r0, #0]
 800503e:	f380 8808 	msr	MSP, r0
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8814 	msr	CONTROL, r0
 800504a:	b662      	cpsie	i
 800504c:	b661      	cpsie	f
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	df00      	svc	0
 8005058:	bf00      	nop
 800505a:	0000      	.short	0x0000
 800505c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop

08005064 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	@ 0x30
 8005068:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800506a:	4b69      	ldr	r3, [pc, #420]	@ (8005210 <xPortStartScheduler+0x1ac>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a69      	ldr	r2, [pc, #420]	@ (8005214 <xPortStartScheduler+0x1b0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10b      	bne.n	800508c <xPortStartScheduler+0x28>
    __asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800508c:	4b60      	ldr	r3, [pc, #384]	@ (8005210 <xPortStartScheduler+0x1ac>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a61      	ldr	r2, [pc, #388]	@ (8005218 <xPortStartScheduler+0x1b4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10b      	bne.n	80050ae <xPortStartScheduler+0x4a>
    __asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	623b      	str	r3, [r7, #32]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80050ae:	4b5b      	ldr	r3, [pc, #364]	@ (800521c <xPortStartScheduler+0x1b8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	332c      	adds	r3, #44	@ 0x2c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a59      	ldr	r2, [pc, #356]	@ (8005220 <xPortStartScheduler+0x1bc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <xPortStartScheduler+0x74>
    __asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61fb      	str	r3, [r7, #28]
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80050d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050da:	3338      	adds	r3, #56	@ 0x38
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a51      	ldr	r2, [pc, #324]	@ (8005224 <xPortStartScheduler+0x1c0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <xPortStartScheduler+0x98>
    __asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	61bb      	str	r3, [r7, #24]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005100:	4b49      	ldr	r3, [pc, #292]	@ (8005228 <xPortStartScheduler+0x1c4>)
 8005102:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	22ff      	movs	r2, #255	@ 0xff
 8005110:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005122:	b2da      	uxtb	r2, r3
 8005124:	4b41      	ldr	r3, [pc, #260]	@ (800522c <xPortStartScheduler+0x1c8>)
 8005126:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005128:	4b40      	ldr	r3, [pc, #256]	@ (800522c <xPortStartScheduler+0x1c8>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <xPortStartScheduler+0xe4>
    __asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	617b      	str	r3, [r7, #20]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005152:	2b00      	cmp	r3, #0
 8005154:	d013      	beq.n	800517e <xPortStartScheduler+0x11a>
    __asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	613b      	str	r3, [r7, #16]
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3301      	adds	r3, #1
 8005172:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	b2db      	uxtb	r3, r3
 800517c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005186:	2b80      	cmp	r3, #128	@ 0x80
 8005188:	d0f1      	beq.n	800516e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d103      	bne.n	8005198 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005190:	4b27      	ldr	r3, [pc, #156]	@ (8005230 <xPortStartScheduler+0x1cc>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e004      	b.n	80051a2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	4a24      	ldr	r2, [pc, #144]	@ (8005230 <xPortStartScheduler+0x1cc>)
 80051a0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051a2:	4b23      	ldr	r3, [pc, #140]	@ (8005230 <xPortStartScheduler+0x1cc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	4a21      	ldr	r2, [pc, #132]	@ (8005230 <xPortStartScheduler+0x1cc>)
 80051aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051ac:	4b20      	ldr	r3, [pc, #128]	@ (8005230 <xPortStartScheduler+0x1cc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005230 <xPortStartScheduler+0x1cc>)
 80051b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80051c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <xPortStartScheduler+0x1d0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005234 <xPortStartScheduler+0x1d0>)
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80051cc:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <xPortStartScheduler+0x1d0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <xPortStartScheduler+0x1d0>)
 80051d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051d6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80051d8:	4b17      	ldr	r3, [pc, #92]	@ (8005238 <xPortStartScheduler+0x1d4>)
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80051de:	f000 f8ed 	bl	80053bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80051e2:	4b16      	ldr	r3, [pc, #88]	@ (800523c <xPortStartScheduler+0x1d8>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80051e8:	f000 f90c 	bl	8005404 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051ec:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <xPortStartScheduler+0x1dc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	@ (8005240 <xPortStartScheduler+0x1dc>)
 80051f2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051f6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80051f8:	f7ff ff1e 	bl	8005038 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80051fc:	f7fe ff92 	bl	8004124 <vTaskSwitchContext>
    prvTaskExitError();
 8005200:	f7ff fed8 	bl	8004fb4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3730      	adds	r7, #48	@ 0x30
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	e000ed00 	.word	0xe000ed00
 8005214:	410fc271 	.word	0x410fc271
 8005218:	410fc270 	.word	0x410fc270
 800521c:	e000ed08 	.word	0xe000ed08
 8005220:	08005011 	.word	0x08005011
 8005224:	08005301 	.word	0x08005301
 8005228:	e000e400 	.word	0xe000e400
 800522c:	200002b8 	.word	0x200002b8
 8005230:	200002bc 	.word	0x200002bc
 8005234:	e000ed20 	.word	0xe000ed20
 8005238:	e000ed1c 	.word	0xe000ed1c
 800523c:	2000001c 	.word	0x2000001c
 8005240:	e000ef34 	.word	0xe000ef34

08005244 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
    __asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	607b      	str	r3, [r7, #4]
}
 800525c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800525e:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <vPortEnterCritical+0x5c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a0e      	ldr	r2, [pc, #56]	@ (80052a0 <vPortEnterCritical+0x5c>)
 8005266:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005268:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <vPortEnterCritical+0x5c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d110      	bne.n	8005292 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005270:	4b0c      	ldr	r3, [pc, #48]	@ (80052a4 <vPortEnterCritical+0x60>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <vPortEnterCritical+0x4e>
    __asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	603b      	str	r3, [r7, #0]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <vPortEnterCritical+0x4a>
    }
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	2000001c 	.word	0x2000001c
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80052ae:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <vPortExitCritical+0x50>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <vPortExitCritical+0x26>
    __asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	607b      	str	r3, [r7, #4]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80052ce:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <vPortExitCritical+0x50>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	4a08      	ldr	r2, [pc, #32]	@ (80052f8 <vPortExitCritical+0x50>)
 80052d6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80052d8:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <vPortExitCritical+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <vPortExitCritical+0x44>
 80052e0:	2300      	movs	r3, #0
 80052e2:	603b      	str	r3, [r7, #0]
    __asm volatile
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f383 8811 	msr	BASEPRI, r3
}
 80052ea:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	2000001c 	.word	0x2000001c
 80052fc:	00000000 	.word	0x00000000

08005300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005300:	f3ef 8009 	mrs	r0, PSP
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4b15      	ldr	r3, [pc, #84]	@ (8005360 <pxCurrentTCBConst>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	f01e 0f10 	tst.w	lr, #16
 8005310:	bf08      	it	eq
 8005312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	6010      	str	r0, [r2, #0]
 800531c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005324:	f380 8811 	msr	BASEPRI, r0
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f7fe fef8 	bl	8004124 <vTaskSwitchContext>
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f380 8811 	msr	BASEPRI, r0
 800533c:	bc09      	pop	{r0, r3}
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	6808      	ldr	r0, [r1, #0]
 8005342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005346:	f01e 0f10 	tst.w	lr, #16
 800534a:	bf08      	it	eq
 800534c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005350:	f380 8809 	msr	PSP, r0
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst>:
 8005360:	20000178 	.word	0x20000178
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
    __asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
}
 8005380:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005382:	f001 fc79 	bl	8006c78 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005386:	f7fe fda3 	bl	8003ed0 <xTaskIncrementTick>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d006      	beq.n	800539e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005390:	f001 fcd0 	bl	8006d34 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005394:	4b08      	ldr	r3, [pc, #32]	@ (80053b8 <SysTick_Handler+0x50>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e001      	b.n	80053a2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800539e:	f001 fcad 	bl	8006cfc <SEGGER_SYSVIEW_RecordExitISR>
 80053a2:	2300      	movs	r3, #0
 80053a4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f383 8811 	msr	BASEPRI, r3
}
 80053ac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c6:	4b0b      	ldr	r3, [pc, #44]	@ (80053f4 <vPortSetupTimerInterrupt+0x38>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <vPortSetupTimerInterrupt+0x3c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0a      	ldr	r2, [pc, #40]	@ (80053fc <vPortSetupTimerInterrupt+0x40>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <vPortSetupTimerInterrupt+0x44>)
 80053da:	3b01      	subs	r3, #1
 80053dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053de:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e010 	.word	0xe000e010
 80053f4:	e000e018 	.word	0xe000e018
 80053f8:	2000000c 	.word	0x2000000c
 80053fc:	10624dd3 	.word	0x10624dd3
 8005400:	e000e014 	.word	0xe000e014

08005404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005414 <vPortEnableVFP+0x10>
 8005408:	6801      	ldr	r1, [r0, #0]
 800540a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800540e:	6001      	str	r1, [r0, #0]
 8005410:	4770      	bx	lr
 8005412:	0000      	.short	0x0000
 8005414:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop

0800541c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005422:	f3ef 8305 	mrs	r3, IPSR
 8005426:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	d915      	bls.n	800545a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800542e:	4a18      	ldr	r2, [pc, #96]	@ (8005490 <vPortValidateInterruptPriority+0x74>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005438:	4b16      	ldr	r3, [pc, #88]	@ (8005494 <vPortValidateInterruptPriority+0x78>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	7afa      	ldrb	r2, [r7, #11]
 800543e:	429a      	cmp	r2, r3
 8005440:	d20b      	bcs.n	800545a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	607b      	str	r3, [r7, #4]
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	e7fd      	b.n	8005456 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800545a:	4b0f      	ldr	r3, [pc, #60]	@ (8005498 <vPortValidateInterruptPriority+0x7c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005462:	4b0e      	ldr	r3, [pc, #56]	@ (800549c <vPortValidateInterruptPriority+0x80>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d90b      	bls.n	8005482 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	603b      	str	r3, [r7, #0]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <vPortValidateInterruptPriority+0x62>
    }
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e3f0 	.word	0xe000e3f0
 8005494:	200002b8 	.word	0x200002b8
 8005498:	e000ed0c 	.word	0xe000ed0c
 800549c:	200002bc 	.word	0x200002bc

080054a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	@ 0x38
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d022      	beq.n	80054f8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80054b2:	2308      	movs	r3, #8
 80054b4:	43db      	mvns	r3, r3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d81b      	bhi.n	80054f4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80054bc:	2208      	movs	r2, #8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d014      	beq.n	80054f8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	f1c3 0308 	rsb	r3, r3, #8
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80054da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054dc:	43db      	mvns	r3, r3
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d804      	bhi.n	80054ee <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	4413      	add	r3, r2
 80054ea:	607b      	str	r3, [r7, #4]
 80054ec:	e004      	b.n	80054f8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	e001      	b.n	80054f8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80054f8:	f7fe fb94 	bl	8003c24 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80054fc:	4b7a      	ldr	r3, [pc, #488]	@ (80056e8 <pvPortMalloc+0x248>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005504:	f000 f978 	bl	80057f8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f2c0 80d3 	blt.w	80056b6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80cf 	beq.w	80056b6 <pvPortMalloc+0x216>
 8005518:	4b74      	ldr	r3, [pc, #464]	@ (80056ec <pvPortMalloc+0x24c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	f200 80c9 	bhi.w	80056b6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005524:	4b72      	ldr	r3, [pc, #456]	@ (80056f0 <pvPortMalloc+0x250>)
 8005526:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005528:	4b71      	ldr	r3, [pc, #452]	@ (80056f0 <pvPortMalloc+0x250>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800552e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005530:	4a70      	ldr	r2, [pc, #448]	@ (80056f4 <pvPortMalloc+0x254>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d305      	bcc.n	8005542 <pvPortMalloc+0xa2>
 8005536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005538:	4a6f      	ldr	r2, [pc, #444]	@ (80056f8 <pvPortMalloc+0x258>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d801      	bhi.n	8005542 <pvPortMalloc+0xa2>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <pvPortMalloc+0xa4>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d129      	bne.n	800559c <pvPortMalloc+0xfc>
    __asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	623b      	str	r3, [r7, #32]
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	e7fd      	b.n	800555c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005562:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800556a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556c:	4a61      	ldr	r2, [pc, #388]	@ (80056f4 <pvPortMalloc+0x254>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d305      	bcc.n	800557e <pvPortMalloc+0xde>
 8005572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005574:	4a60      	ldr	r2, [pc, #384]	@ (80056f8 <pvPortMalloc+0x258>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d801      	bhi.n	800557e <pvPortMalloc+0xde>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <pvPortMalloc+0xe0>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <pvPortMalloc+0xfc>
    __asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	61fb      	str	r3, [r7, #28]
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d903      	bls.n	80055ae <pvPortMalloc+0x10e>
 80055a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1d8      	bne.n	8005560 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80055ae:	4b4e      	ldr	r3, [pc, #312]	@ (80056e8 <pvPortMalloc+0x248>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d07e      	beq.n	80056b6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2208      	movs	r2, #8
 80055be:	4413      	add	r3, r2
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80055c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c4:	4a4b      	ldr	r2, [pc, #300]	@ (80056f4 <pvPortMalloc+0x254>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d305      	bcc.n	80055d6 <pvPortMalloc+0x136>
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	4a4a      	ldr	r2, [pc, #296]	@ (80056f8 <pvPortMalloc+0x258>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d801      	bhi.n	80055d6 <pvPortMalloc+0x136>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <pvPortMalloc+0x138>
 80055d6:	2300      	movs	r3, #0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <pvPortMalloc+0x154>
    __asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61bb      	str	r3, [r7, #24]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80055fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d90b      	bls.n	800561e <pvPortMalloc+0x17e>
    __asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	617b      	str	r3, [r7, #20]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800561e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	2308      	movs	r3, #8
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	429a      	cmp	r2, r3
 800562c:	d924      	bls.n	8005678 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800562e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00b      	beq.n	8005658 <pvPortMalloc+0x1b8>
    __asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	613b      	str	r3, [r7, #16]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005676:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005678:	4b1c      	ldr	r3, [pc, #112]	@ (80056ec <pvPortMalloc+0x24c>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <pvPortMalloc+0x24c>)
 8005684:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005686:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <pvPortMalloc+0x24c>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b1c      	ldr	r3, [pc, #112]	@ (80056fc <pvPortMalloc+0x25c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d203      	bcs.n	800569a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005692:	4b16      	ldr	r3, [pc, #88]	@ (80056ec <pvPortMalloc+0x24c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a19      	ldr	r2, [pc, #100]	@ (80056fc <pvPortMalloc+0x25c>)
 8005698:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800569a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80056ac:	4b14      	ldr	r3, [pc, #80]	@ (8005700 <pvPortMalloc+0x260>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	4a13      	ldr	r2, [pc, #76]	@ (8005700 <pvPortMalloc+0x260>)
 80056b4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80056b6:	f7fe fac3 	bl	8003c40 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <pvPortMalloc+0x23c>
    __asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	60fb      	str	r3, [r7, #12]
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	e7fd      	b.n	80056d8 <pvPortMalloc+0x238>
    return pvReturn;
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3738      	adds	r7, #56	@ 0x38
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20012ec8 	.word	0x20012ec8
 80056ec:	20012ecc 	.word	0x20012ecc
 80056f0:	20012ec0 	.word	0x20012ec0
 80056f4:	200002c0 	.word	0x200002c0
 80056f8:	20012ebf 	.word	0x20012ebf
 80056fc:	20012ed0 	.word	0x20012ed0
 8005700:	20012ed4 	.word	0x20012ed4

08005704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d064      	beq.n	80057e0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005716:	2308      	movs	r3, #8
 8005718:	425b      	negs	r3, r3
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	4a30      	ldr	r2, [pc, #192]	@ (80057e8 <vPortFree+0xe4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d305      	bcc.n	8005738 <vPortFree+0x34>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	4a2f      	ldr	r2, [pc, #188]	@ (80057ec <vPortFree+0xe8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d801      	bhi.n	8005738 <vPortFree+0x34>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <vPortFree+0x36>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <vPortFree+0x52>
    __asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	617b      	str	r3, [r7, #20]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	db0b      	blt.n	8005776 <vPortFree+0x72>
    __asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	613b      	str	r3, [r7, #16]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <vPortFree+0x92>
    __asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	0fdb      	lsrs	r3, r3, #31
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01c      	beq.n	80057e0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d118      	bne.n	80057e0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80057ba:	f7fe fa33 	bl	8003c24 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <vPortFree+0xec>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	4a09      	ldr	r2, [pc, #36]	@ (80057f0 <vPortFree+0xec>)
 80057ca:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057cc:	69b8      	ldr	r0, [r7, #24]
 80057ce:	f000 f86d 	bl	80058ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80057d2:	4b08      	ldr	r3, [pc, #32]	@ (80057f4 <vPortFree+0xf0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a06      	ldr	r2, [pc, #24]	@ (80057f4 <vPortFree+0xf0>)
 80057da:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80057dc:	f7fe fa30 	bl	8003c40 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80057e0:	bf00      	nop
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	200002c0 	.word	0x200002c0
 80057ec:	20012ebf 	.word	0x20012ebf
 80057f0:	20012ecc 	.word	0x20012ecc
 80057f4:	20012ed8 	.word	0x20012ed8

080057f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057fe:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005802:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005804:	4b24      	ldr	r3, [pc, #144]	@ (8005898 <prvHeapInit+0xa0>)
 8005806:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3307      	adds	r3, #7
 8005816:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0307 	bic.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	4a1c      	ldr	r2, [pc, #112]	@ (8005898 <prvHeapInit+0xa0>)
 8005828:	4413      	add	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a1b      	ldr	r2, [pc, #108]	@ (800589c <prvHeapInit+0xa4>)
 8005830:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005832:	4b1a      	ldr	r3, [pc, #104]	@ (800589c <prvHeapInit+0xa4>)
 8005834:	2200      	movs	r2, #0
 8005836:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005840:	2208      	movs	r2, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a13      	ldr	r2, [pc, #76]	@ (80058a0 <prvHeapInit+0xa8>)
 8005854:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005856:	4b12      	ldr	r3, [pc, #72]	@ (80058a0 <prvHeapInit+0xa8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800585e:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <prvHeapInit+0xa8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005874:	4b0a      	ldr	r3, [pc, #40]	@ (80058a0 <prvHeapInit+0xa8>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a08      	ldr	r2, [pc, #32]	@ (80058a4 <prvHeapInit+0xac>)
 8005882:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a07      	ldr	r2, [pc, #28]	@ (80058a8 <prvHeapInit+0xb0>)
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	200002c0 	.word	0x200002c0
 800589c:	20012ec0 	.word	0x20012ec0
 80058a0:	20012ec8 	.word	0x20012ec8
 80058a4:	20012ed0 	.word	0x20012ed0
 80058a8:	20012ecc 	.word	0x20012ecc

080058ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80058b4:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <prvInsertBlockIntoFreeList+0xe4>)
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e002      	b.n	80058c0 <prvInsertBlockIntoFreeList+0x14>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d8f7      	bhi.n	80058ba <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	4a30      	ldr	r2, [pc, #192]	@ (8005990 <prvInsertBlockIntoFreeList+0xe4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d018      	beq.n	8005904 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005994 <prvInsertBlockIntoFreeList+0xe8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d305      	bcc.n	80058e6 <prvInsertBlockIntoFreeList+0x3a>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005998 <prvInsertBlockIntoFreeList+0xec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d801      	bhi.n	80058e6 <prvInsertBlockIntoFreeList+0x3a>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <prvInsertBlockIntoFreeList+0x3c>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60fb      	str	r3, [r7, #12]
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	e7fd      	b.n	8005900 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4413      	add	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d108      	bne.n	8005928 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	441a      	add	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	441a      	add	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d118      	bne.n	800596e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b16      	ldr	r3, [pc, #88]	@ (800599c <prvInsertBlockIntoFreeList+0xf0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d00d      	beq.n	8005964 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e008      	b.n	8005976 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005964:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <prvInsertBlockIntoFreeList+0xf0>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e003      	b.n	8005976 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d002      	beq.n	8005984 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20012ec0 	.word	0x20012ec0
 8005994:	200002c0 	.word	0x200002c0
 8005998:	20012ebf 	.word	0x20012ebf
 800599c:	20012ec8 	.word	0x20012ec8

080059a0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80059a4:	4803      	ldr	r0, [pc, #12]	@ (80059b4 <_cbSendSystemDesc+0x14>)
 80059a6:	f001 f911 	bl	8006bcc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80059aa:	4803      	ldr	r0, [pc, #12]	@ (80059b8 <_cbSendSystemDesc+0x18>)
 80059ac:	f001 f90e 	bl	8006bcc <SEGGER_SYSVIEW_SendSysDesc>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	080086c8 	.word	0x080086c8
 80059b8:	080086f4 	.word	0x080086f4

080059bc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <SEGGER_SYSVIEW_Conf+0x20>)
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <SEGGER_SYSVIEW_Conf+0x20>)
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <SEGGER_SYSVIEW_Conf+0x24>)
 80059ca:	4a06      	ldr	r2, [pc, #24]	@ (80059e4 <SEGGER_SYSVIEW_Conf+0x28>)
 80059cc:	f000 fd84 	bl	80064d8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80059d0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80059d4:	f000 fdc4 	bl	8006560 <SEGGER_SYSVIEW_SetRAMBase>
}
 80059d8:	bf00      	nop
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	2000000c 	.word	0x2000000c
 80059e0:	080059a1 	.word	0x080059a1
 80059e4:	080087b0 	.word	0x080087b0

080059e8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80059ee:	4b26      	ldr	r3, [pc, #152]	@ (8005a88 <_DoInit+0xa0>)
 80059f0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80059f2:	22a8      	movs	r2, #168	@ 0xa8
 80059f4:	2100      	movs	r1, #0
 80059f6:	6838      	ldr	r0, [r7, #0]
 80059f8:	f001 ff5b 	bl	80078b2 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2203      	movs	r2, #3
 8005a00:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2203      	movs	r2, #3
 8005a06:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	4a20      	ldr	r2, [pc, #128]	@ (8005a8c <_DoInit+0xa4>)
 8005a0c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <_DoInit+0xa8>)
 8005a12:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a1a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2200      	movs	r2, #0
 8005a26:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <_DoInit+0xa4>)
 8005a32:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4a17      	ldr	r2, [pc, #92]	@ (8005a94 <_DoInit+0xac>)
 8005a38:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005a52:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005a56:	2300      	movs	r3, #0
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	e00c      	b.n	8005a76 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f1c3 030f 	rsb	r3, r3, #15
 8005a62:	4a0d      	ldr	r2, [pc, #52]	@ (8005a98 <_DoInit+0xb0>)
 8005a64:	5cd1      	ldrb	r1, [r2, r3]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	460a      	mov	r2, r1
 8005a6e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3301      	adds	r3, #1
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b0f      	cmp	r3, #15
 8005a7a:	d9ef      	bls.n	8005a5c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005a7c:	f3bf 8f5f 	dmb	sy
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20012edc 	.word	0x20012edc
 8005a8c:	08008704 	.word	0x08008704
 8005a90:	20012f84 	.word	0x20012f84
 8005a94:	20013384 	.word	0x20013384
 8005a98:	08008790 	.word	0x08008790

08005a9c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d905      	bls.n	8005acc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aca:	e007      	b.n	8005adc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	69b9      	ldr	r1, [r7, #24]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	1acb      	subs	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bf28      	it	cs
 8005aea:	4613      	movcs	r3, r2
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	bf28      	it	cs
 8005af6:	4613      	movcs	r3, r2
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	6978      	ldr	r0, [r7, #20]
 8005b0a:	f001 ff3c 	bl	8007986 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	4413      	add	r3, r2
 8005b14:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	4413      	add	r3, r2
 8005b1c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	4413      	add	r3, r2
 8005b2c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d101      	bne.n	8005b3c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b3c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1b2      	bne.n	8005ab2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3728      	adds	r7, #40	@ 0x28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b088      	sub	sp, #32
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d911      	bls.n	8005b9e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	6938      	ldr	r0, [r7, #16]
 8005b8a:	f001 fefc 	bl	8007986 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b8e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	441a      	add	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005b9c:	e01f      	b.n	8005bde <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	6938      	ldr	r0, [r7, #16]
 8005bb2:	f001 fee8 	bl	8007986 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	4413      	add	r3, r2
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6938      	ldr	r0, [r7, #16]
 8005bd0:	f001 fed9 	bl	8007986 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005bd4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	60da      	str	r2, [r3, #12]
}
 8005bde:	bf00      	nop
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005be6:	b480      	push	{r7}
 8005be8:	b087      	sub	sp, #28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d808      	bhi.n	8005c14 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1ad2      	subs	r2, r2, r3
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e004      	b.n	8005c1e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005c1e:	697b      	ldr	r3, [r7, #20]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08c      	sub	sp, #48	@ 0x30
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005c38:	4b3e      	ldr	r3, [pc, #248]	@ (8005d34 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c3a:	623b      	str	r3, [r7, #32]
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b53      	cmp	r3, #83	@ 0x53
 8005c44:	d001      	beq.n	8005c4a <SEGGER_RTT_ReadNoLock+0x1e>
 8005c46:	f7ff fecf 	bl	80059e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4413      	add	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	3360      	adds	r3, #96	@ 0x60
 8005c56:	4a37      	ldr	r2, [pc, #220]	@ (8005d34 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c58:	4413      	add	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d92b      	bls.n	8005cd0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4293      	cmp	r3, r2
 8005c88:	bf28      	it	cs
 8005c8a:	4613      	movcs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	4413      	add	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	6939      	ldr	r1, [r7, #16]
 8005c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c9e:	f001 fe72 	bl	8007986 <memcpy>
    NumBytesRead += NumBytesRem;
 8005ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d101      	bne.n	8005cd0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	bf28      	it	cs
 8005ce0:	4613      	movcs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d019      	beq.n	8005d1e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	4413      	add	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	6939      	ldr	r1, [r7, #16]
 8005cf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cfa:	f001 fe44 	bl	8007986 <memcpy>
    NumBytesRead += NumBytesRem;
 8005cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	4413      	add	r3, r2
 8005d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3730      	adds	r7, #48	@ 0x30
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20012edc 	.word	0x20012edc

08005d38 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4413      	add	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005d56:	4413      	add	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d029      	beq.n	8005db6 <SEGGER_RTT_WriteNoLock+0x7e>
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d82e      	bhi.n	8005dc4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <SEGGER_RTT_WriteNoLock+0x38>
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d013      	beq.n	8005d96 <SEGGER_RTT_WriteNoLock+0x5e>
 8005d6e:	e029      	b.n	8005dc4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d70:	6978      	ldr	r0, [r7, #20]
 8005d72:	f7ff ff38 	bl	8005be6 <_GetAvailWriteSpace>
 8005d76:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d202      	bcs.n	8005d86 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005d84:	e021      	b.n	8005dca <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	69b9      	ldr	r1, [r7, #24]
 8005d8e:	6978      	ldr	r0, [r7, #20]
 8005d90:	f7ff fee1 	bl	8005b56 <_WriteNoCheck>
    break;
 8005d94:	e019      	b.n	8005dca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f7ff ff25 	bl	8005be6 <_GetAvailWriteSpace>
 8005d9c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4293      	cmp	r3, r2
 8005da4:	bf28      	it	cs
 8005da6:	4613      	movcs	r3, r2
 8005da8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	69b9      	ldr	r1, [r7, #24]
 8005dae:	6978      	ldr	r0, [r7, #20]
 8005db0:	f7ff fed1 	bl	8005b56 <_WriteNoCheck>
    break;
 8005db4:	e009      	b.n	8005dca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	69b9      	ldr	r1, [r7, #24]
 8005dba:	6978      	ldr	r0, [r7, #20]
 8005dbc:	f7ff fe6e 	bl	8005a9c <_WriteBlocking>
 8005dc0:	61f8      	str	r0, [r7, #28]
    break;
 8005dc2:	e002      	b.n	8005dca <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
    break;
 8005dc8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005dca:	69fb      	ldr	r3, [r7, #28]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3720      	adds	r7, #32
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20012edc 	.word	0x20012edc

08005dd8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005de4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e20 <SEGGER_RTT_Write+0x48>)
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b53      	cmp	r3, #83	@ 0x53
 8005df0:	d001      	beq.n	8005df6 <SEGGER_RTT_Write+0x1e>
 8005df2:	f7ff fdf9 	bl	80059e8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005df6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfa:	f04f 0120 	mov.w	r1, #32
 8005dfe:	f381 8811 	msr	BASEPRI, r1
 8005e02:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff ff95 	bl	8005d38 <SEGGER_RTT_WriteNoLock>
 8005e0e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005e16:	697b      	ldr	r3, [r7, #20]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20012edc 	.word	0x20012edc

08005e24 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e32:	4b3d      	ldr	r3, [pc, #244]	@ (8005f28 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b53      	cmp	r3, #83	@ 0x53
 8005e3e:	d001      	beq.n	8005e44 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005e40:	f7ff fdd2 	bl	80059e8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e44:	f3ef 8311 	mrs	r3, BASEPRI
 8005e48:	f04f 0120 	mov.w	r1, #32
 8005e4c:	f381 8811 	msr	BASEPRI, r1
 8005e50:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e52:	4b35      	ldr	r3, [pc, #212]	@ (8005f28 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e54:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005e5a:	6939      	ldr	r1, [r7, #16]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	440b      	add	r3, r1
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	3301      	adds	r3, #1
 8005e76:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	dbeb      	blt.n	8005e5a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e82:	e000      	b.n	8005e86 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e84:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	da3f      	bge.n	8005f10 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e90:	6939      	ldr	r1, [r7, #16]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	4613      	mov	r3, r2
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005ea4:	6939      	ldr	r1, [r7, #16]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005eba:	6939      	ldr	r1, [r7, #16]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3320      	adds	r3, #32
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ece:	6939      	ldr	r1, [r7, #16]
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	3328      	adds	r3, #40	@ 0x28
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005ee2:	6939      	ldr	r1, [r7, #16]
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	440b      	add	r3, r1
 8005ef0:	3324      	adds	r3, #36	@ 0x24
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ef6:	6939      	ldr	r1, [r7, #16]
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	4613      	mov	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	440b      	add	r3, r1
 8005f04:	332c      	adds	r3, #44	@ 0x2c
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f0a:	f3bf 8f5f 	dmb	sy
 8005f0e:	e002      	b.n	8005f16 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005f10:	f04f 33ff 	mov.w	r3, #4294967295
 8005f14:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20012edc 	.word	0x20012edc

08005f2c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	@ 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005f3a:	4b21      	ldr	r3, [pc, #132]	@ (8005fc0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b53      	cmp	r3, #83	@ 0x53
 8005f46:	d001      	beq.n	8005f4c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005f48:	f7ff fd4e 	bl	80059e8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f4e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d82c      	bhi.n	8005fb0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005f56:	f3ef 8311 	mrs	r3, BASEPRI
 8005f5a:	f04f 0120 	mov.w	r1, #32
 8005f5e:	f381 8811 	msr	BASEPRI, r1
 8005f62:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	3360      	adds	r3, #96	@ 0x60
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00e      	beq.n	8005f9a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f9e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fa0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fae:	e002      	b.n	8005fb6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3728      	adds	r7, #40	@ 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20012edc 	.word	0x20012edc

08005fc4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	60fa      	str	r2, [r7, #12]
 8005fda:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b80      	cmp	r3, #128	@ 0x80
 8005fe0:	d90a      	bls.n	8005ff8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005fe2:	2380      	movs	r3, #128	@ 0x80
 8005fe4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005fe6:	e007      	b.n	8005ff8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	1c53      	adds	r3, r2, #1
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	60f9      	str	r1, [r7, #12]
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <_EncodeStr+0x46>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ee      	bne.n	8005fe8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	b2da      	uxtb	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	4618      	mov	r0, r3
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3307      	adds	r3, #7
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006042:	4b34      	ldr	r3, [pc, #208]	@ (8006114 <_HandleIncomingPacket+0xd8>)
 8006044:	7e1b      	ldrb	r3, [r3, #24]
 8006046:	4618      	mov	r0, r3
 8006048:	1cfb      	adds	r3, r7, #3
 800604a:	2201      	movs	r2, #1
 800604c:	4619      	mov	r1, r3
 800604e:	f7ff fded 	bl	8005c2c <SEGGER_RTT_ReadNoLock>
 8006052:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d057      	beq.n	800610a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d031      	beq.n	80060c4 <_HandleIncomingPacket+0x88>
 8006060:	2b80      	cmp	r3, #128	@ 0x80
 8006062:	dc40      	bgt.n	80060e6 <_HandleIncomingPacket+0xaa>
 8006064:	2b07      	cmp	r3, #7
 8006066:	dc15      	bgt.n	8006094 <_HandleIncomingPacket+0x58>
 8006068:	2b00      	cmp	r3, #0
 800606a:	dd3c      	ble.n	80060e6 <_HandleIncomingPacket+0xaa>
 800606c:	3b01      	subs	r3, #1
 800606e:	2b06      	cmp	r3, #6
 8006070:	d839      	bhi.n	80060e6 <_HandleIncomingPacket+0xaa>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <_HandleIncomingPacket+0x3c>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	0800609b 	.word	0x0800609b
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a7 	.word	0x080060a7
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060b3 	.word	0x080060b3
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060bf 	.word	0x080060bf
 8006094:	2b7f      	cmp	r3, #127	@ 0x7f
 8006096:	d033      	beq.n	8006100 <_HandleIncomingPacket+0xc4>
 8006098:	e025      	b.n	80060e6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800609a:	f000 fb25 	bl	80066e8 <SEGGER_SYSVIEW_Start>
      break;
 800609e:	e034      	b.n	800610a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80060a0:	f000 fbdc 	bl	800685c <SEGGER_SYSVIEW_Stop>
      break;
 80060a4:	e031      	b.n	800610a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80060a6:	f000 fdb5 	bl	8006c14 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80060aa:	e02e      	b.n	800610a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80060ac:	f000 fd7a 	bl	8006ba4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80060b0:	e02b      	b.n	800610a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80060b2:	f000 fbf9 	bl	80068a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80060b6:	e028      	b.n	800610a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80060b8:	f001 f8e6 	bl	8007288 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060bc:	e025      	b.n	800610a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060be:	f001 f8c5 	bl	800724c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060c2:	e022      	b.n	800610a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060c4:	4b13      	ldr	r3, [pc, #76]	@ (8006114 <_HandleIncomingPacket+0xd8>)
 80060c6:	7e1b      	ldrb	r3, [r3, #24]
 80060c8:	4618      	mov	r0, r3
 80060ca:	1cfb      	adds	r3, r7, #3
 80060cc:	2201      	movs	r2, #1
 80060ce:	4619      	mov	r1, r3
 80060d0:	f7ff fdac 	bl	8005c2c <SEGGER_RTT_ReadNoLock>
 80060d4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d013      	beq.n	8006104 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 f82a 	bl	8007138 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80060e4:	e00e      	b.n	8006104 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da0c      	bge.n	8006108 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060ee:	4b09      	ldr	r3, [pc, #36]	@ (8006114 <_HandleIncomingPacket+0xd8>)
 80060f0:	7e1b      	ldrb	r3, [r3, #24]
 80060f2:	4618      	mov	r0, r3
 80060f4:	1cfb      	adds	r3, r7, #3
 80060f6:	2201      	movs	r2, #1
 80060f8:	4619      	mov	r1, r3
 80060fa:	f7ff fd97 	bl	8005c2c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80060fe:	e003      	b.n	8006108 <_HandleIncomingPacket+0xcc>
      break;
 8006100:	bf00      	nop
 8006102:	e002      	b.n	800610a <_HandleIncomingPacket+0xce>
      break;
 8006104:	bf00      	nop
 8006106:	e000      	b.n	800610a <_HandleIncomingPacket+0xce>
      break;
 8006108:	bf00      	nop
    }
  }
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2001979c 	.word	0x2001979c

08006118 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b08c      	sub	sp, #48	@ 0x30
 800611c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800611e:	2301      	movs	r3, #1
 8006120:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006122:	1d3b      	adds	r3, r7, #4
 8006124:	3301      	adds	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800612c:	4b31      	ldr	r3, [pc, #196]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006132:	e00b      	b.n	800614c <_TrySendOverflowPacket+0x34>
 8006134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800613e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006148:	09db      	lsrs	r3, r3, #7
 800614a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800614c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006150:	d8f0      	bhi.n	8006134 <_TrySendOverflowPacket+0x1c>
 8006152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006160:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006162:	4b25      	ldr	r3, [pc, #148]	@ (80061f8 <_TrySendOverflowPacket+0xe0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006168:	4b22      	ldr	r3, [pc, #136]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	e00b      	b.n	8006194 <_TrySendOverflowPacket+0x7c>
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	6279      	str	r1, [r7, #36]	@ 0x24
 8006186:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	09db      	lsrs	r3, r3, #7
 8006192:	623b      	str	r3, [r7, #32]
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b7f      	cmp	r3, #127	@ 0x7f
 8006198:	d8f0      	bhi.n	800617c <_TrySendOverflowPacket+0x64>
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	627a      	str	r2, [r7, #36]	@ 0x24
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80061aa:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	4618      	mov	r0, r3
 80061b0:	1d3b      	adds	r3, r7, #4
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7fa f808 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061c0:	4603      	mov	r3, r0
 80061c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061ca:	4a0a      	ldr	r2, [pc, #40]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061d0:	4b08      	ldr	r3, [pc, #32]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	4b06      	ldr	r3, [pc, #24]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e004      	b.n	80061e8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061de:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	3301      	adds	r3, #1
 80061e4:	4a03      	ldr	r2, [pc, #12]	@ (80061f4 <_TrySendOverflowPacket+0xdc>)
 80061e6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061e8:	693b      	ldr	r3, [r7, #16]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3730      	adds	r7, #48	@ 0x30
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2001979c 	.word	0x2001979c
 80061f8:	e0001004 	.word	0xe0001004

080061fc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006208:	4b98      	ldr	r3, [pc, #608]	@ (800646c <_SendPacket+0x270>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d010      	beq.n	8006232 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006210:	4b96      	ldr	r3, [pc, #600]	@ (800646c <_SendPacket+0x270>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 812d 	beq.w	8006474 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800621a:	4b94      	ldr	r3, [pc, #592]	@ (800646c <_SendPacket+0x270>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d109      	bne.n	8006236 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006222:	f7ff ff79 	bl	8006118 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006226:	4b91      	ldr	r3, [pc, #580]	@ (800646c <_SendPacket+0x270>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	f040 8124 	bne.w	8006478 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8006230:	e001      	b.n	8006236 <_SendPacket+0x3a>
    goto Send;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <_SendPacket+0x3c>
Send:
 8006236:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b1f      	cmp	r3, #31
 800623c:	d809      	bhi.n	8006252 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800623e:	4b8b      	ldr	r3, [pc, #556]	@ (800646c <_SendPacket+0x270>)
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 8115 	bne.w	800647c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b17      	cmp	r3, #23
 8006256:	d807      	bhi.n	8006268 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3b01      	subs	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e0c4      	b.n	80063f2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	2b7f      	cmp	r3, #127	@ 0x7f
 8006274:	d912      	bls.n	800629c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	09da      	lsrs	r2, r3, #7
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3b01      	subs	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	3a01      	subs	r2, #1
 800628e:	60fa      	str	r2, [r7, #12]
 8006290:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e006      	b.n	80062aa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80062ae:	d807      	bhi.n	80062c0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e098      	b.n	80063f2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c6:	d212      	bcs.n	80062ee <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	09da      	lsrs	r2, r3, #7
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	3a01      	subs	r2, #1
 80062e0:	60fa      	str	r2, [r7, #12]
 80062e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e081      	b.n	80063f2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062f4:	d21d      	bcs.n	8006332 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	0b9a      	lsrs	r2, r3, #14
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	09db      	lsrs	r3, r3, #7
 800630a:	b2db      	uxtb	r3, r3
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	3a01      	subs	r2, #1
 8006310:	60fa      	str	r2, [r7, #12]
 8006312:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006316:	b2da      	uxtb	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	3a01      	subs	r2, #1
 8006324:	60fa      	str	r2, [r7, #12]
 8006326:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e05f      	b.n	80063f2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006338:	d228      	bcs.n	800638c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0d5a      	lsrs	r2, r3, #21
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3b01      	subs	r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	0b9b      	lsrs	r3, r3, #14
 800634e:	b2db      	uxtb	r3, r3
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	3a01      	subs	r2, #1
 8006354:	60fa      	str	r2, [r7, #12]
 8006356:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800635a:	b2da      	uxtb	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	09db      	lsrs	r3, r3, #7
 8006364:	b2db      	uxtb	r3, r3
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	3a01      	subs	r2, #1
 800636a:	60fa      	str	r2, [r7, #12]
 800636c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	3a01      	subs	r2, #1
 800637e:	60fa      	str	r2, [r7, #12]
 8006380:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e032      	b.n	80063f2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	0f1a      	lsrs	r2, r3, #28
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3b01      	subs	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	0d5b      	lsrs	r3, r3, #21
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	3a01      	subs	r2, #1
 80063a6:	60fa      	str	r2, [r7, #12]
 80063a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0b9b      	lsrs	r3, r3, #14
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	3a01      	subs	r2, #1
 80063bc:	60fa      	str	r2, [r7, #12]
 80063be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	3a01      	subs	r2, #1
 80063d2:	60fa      	str	r2, [r7, #12]
 80063d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	3a01      	subs	r2, #1
 80063e6:	60fa      	str	r2, [r7, #12]
 80063e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006470 <_SendPacket+0x274>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80063f8:	4b1c      	ldr	r3, [pc, #112]	@ (800646c <_SendPacket+0x270>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	e00b      	b.n	8006424 <_SendPacket+0x228>
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	b2da      	uxtb	r2, r3
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	1c59      	adds	r1, r3, #1
 8006414:	6279      	str	r1, [r7, #36]	@ 0x24
 8006416:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	09db      	lsrs	r3, r3, #7
 8006422:	623b      	str	r3, [r7, #32]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	2b7f      	cmp	r3, #127	@ 0x7f
 8006428:	d8f0      	bhi.n	800640c <_SendPacket+0x210>
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800643a:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <_SendPacket+0x270>)
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	4618      	mov	r0, r3
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	461a      	mov	r2, r3
 8006448:	68f9      	ldr	r1, [r7, #12]
 800644a:	f7f9 fec1 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800644e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006456:	4a05      	ldr	r2, [pc, #20]	@ (800646c <_SendPacket+0x270>)
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	60d3      	str	r3, [r2, #12]
 800645c:	e00f      	b.n	800647e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800645e:	4b03      	ldr	r3, [pc, #12]	@ (800646c <_SendPacket+0x270>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4b01      	ldr	r3, [pc, #4]	@ (800646c <_SendPacket+0x270>)
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e008      	b.n	800647e <_SendPacket+0x282>
 800646c:	2001979c 	.word	0x2001979c
 8006470:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <_SendPacket+0x282>
      goto SendDone;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <_SendPacket+0x282>
      goto SendDone;
 800647c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800647e:	4b14      	ldr	r3, [pc, #80]	@ (80064d0 <_SendPacket+0x2d4>)
 8006480:	7e1b      	ldrb	r3, [r3, #24]
 8006482:	4619      	mov	r1, r3
 8006484:	4a13      	ldr	r2, [pc, #76]	@ (80064d4 <_SendPacket+0x2d8>)
 8006486:	460b      	mov	r3, r1
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	440b      	add	r3, r1
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4413      	add	r3, r2
 8006490:	336c      	adds	r3, #108	@ 0x6c
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <_SendPacket+0x2d4>)
 8006496:	7e1b      	ldrb	r3, [r3, #24]
 8006498:	4618      	mov	r0, r3
 800649a:	490e      	ldr	r1, [pc, #56]	@ (80064d4 <_SendPacket+0x2d8>)
 800649c:	4603      	mov	r3, r0
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4403      	add	r3, r0
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	440b      	add	r3, r1
 80064a6:	3370      	adds	r3, #112	@ 0x70
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d00b      	beq.n	80064c6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064ae:	4b08      	ldr	r3, [pc, #32]	@ (80064d0 <_SendPacket+0x2d4>)
 80064b0:	789b      	ldrb	r3, [r3, #2]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064b6:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <_SendPacket+0x2d4>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064bc:	f7ff fdbe 	bl	800603c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80064c0:	4b03      	ldr	r3, [pc, #12]	@ (80064d0 <_SendPacket+0x2d4>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80064c6:	bf00      	nop
 80064c8:	3728      	adds	r7, #40	@ 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	2001979c 	.word	0x2001979c
 80064d4:	20012edc 	.word	0x20012edc

080064d8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064e6:	2300      	movs	r3, #0
 80064e8:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80064ec:	4917      	ldr	r1, [pc, #92]	@ (800654c <SEGGER_SYSVIEW_Init+0x74>)
 80064ee:	4818      	ldr	r0, [pc, #96]	@ (8006550 <SEGGER_SYSVIEW_Init+0x78>)
 80064f0:	f7ff fc98 	bl	8005e24 <SEGGER_RTT_AllocUpBuffer>
 80064f4:	4603      	mov	r3, r0
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	4b16      	ldr	r3, [pc, #88]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 80064fa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80064fc:	4b15      	ldr	r3, [pc, #84]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 80064fe:	785a      	ldrb	r2, [r3, #1]
 8006500:	4b14      	ldr	r3, [pc, #80]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 8006502:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006504:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 8006506:	7e1b      	ldrb	r3, [r3, #24]
 8006508:	4618      	mov	r0, r3
 800650a:	2300      	movs	r3, #0
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	2308      	movs	r3, #8
 8006510:	4a11      	ldr	r2, [pc, #68]	@ (8006558 <SEGGER_SYSVIEW_Init+0x80>)
 8006512:	490f      	ldr	r1, [pc, #60]	@ (8006550 <SEGGER_SYSVIEW_Init+0x78>)
 8006514:	f7ff fd0a 	bl	8005f2c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006518:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800651e:	4b0f      	ldr	r3, [pc, #60]	@ (800655c <SEGGER_SYSVIEW_Init+0x84>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a0c      	ldr	r2, [pc, #48]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 8006524:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006526:	4a0b      	ldr	r2, [pc, #44]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800652c:	4a09      	ldr	r2, [pc, #36]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006532:	4a08      	ldr	r2, [pc, #32]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006538:	4a06      	ldr	r2, [pc, #24]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800653e:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <SEGGER_SYSVIEW_Init+0x7c>)
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20013394 	.word	0x20013394
 8006550:	08008718 	.word	0x08008718
 8006554:	2001979c 	.word	0x2001979c
 8006558:	20019794 	.word	0x20019794
 800655c:	e0001004 	.word	0xe0001004

08006560 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006568:	4a04      	ldr	r2, [pc, #16]	@ (800657c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6113      	str	r3, [r2, #16]
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	2001979c 	.word	0x2001979c

08006580 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006588:	f3ef 8311 	mrs	r3, BASEPRI
 800658c:	f04f 0120 	mov.w	r1, #32
 8006590:	f381 8811 	msr	BASEPRI, r1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	4808      	ldr	r0, [pc, #32]	@ (80065b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006598:	f7ff fd44 	bl	8006024 <_PreparePacket>
 800659c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	68b8      	ldr	r0, [r7, #8]
 80065a4:	f7ff fe2a 	bl	80061fc <_SendPacket>
  RECORD_END();
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	200197cc 	.word	0x200197cc

080065bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065c6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ca:	f04f 0120 	mov.w	r1, #32
 80065ce:	f381 8811 	msr	BASEPRI, r1
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	4816      	ldr	r0, [pc, #88]	@ (8006630 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80065d6:	f7ff fd25 	bl	8006024 <_PreparePacket>
 80065da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e00b      	b.n	8006602 <SEGGER_SYSVIEW_RecordU32+0x46>
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	61f9      	str	r1, [r7, #28]
 80065f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	09db      	lsrs	r3, r3, #7
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b7f      	cmp	r3, #127	@ 0x7f
 8006606:	d8f0      	bhi.n	80065ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	61fa      	str	r2, [r7, #28]
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	6938      	ldr	r0, [r7, #16]
 800661e:	f7ff fded 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f383 8811 	msr	BASEPRI, r3
}
 8006628:	bf00      	nop
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	200197cc 	.word	0x200197cc

08006634 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	@ 0x30
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006640:	f3ef 8311 	mrs	r3, BASEPRI
 8006644:	f04f 0120 	mov.w	r1, #32
 8006648:	f381 8811 	msr	BASEPRI, r1
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	4825      	ldr	r0, [pc, #148]	@ (80066e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006650:	f7ff fce8 	bl	8006024 <_PreparePacket>
 8006654:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006662:	e00b      	b.n	800667c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	b2da      	uxtb	r2, r3
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800666e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	09db      	lsrs	r3, r3, #7
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006680:	d8f0      	bhi.n	8006664 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006690:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	e00b      	b.n	80066b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80066a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80066b8:	d8f0      	bhi.n	800669c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	627a      	str	r2, [r7, #36]	@ 0x24
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	6979      	ldr	r1, [r7, #20]
 80066ce:	69b8      	ldr	r0, [r7, #24]
 80066d0:	f7ff fd94 	bl	80061fc <_SendPacket>
  RECORD_END();
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f383 8811 	msr	BASEPRI, r3
}
 80066da:	bf00      	nop
 80066dc:	3730      	adds	r7, #48	@ 0x30
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200197cc 	.word	0x200197cc

080066e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	@ 0x30
 80066ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80066ee:	4b58      	ldr	r3, [pc, #352]	@ (8006850 <SEGGER_SYSVIEW_Start+0x168>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80066f4:	f3ef 8311 	mrs	r3, BASEPRI
 80066f8:	f04f 0120 	mov.w	r1, #32
 80066fc:	f381 8811 	msr	BASEPRI, r1
 8006700:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006702:	4b53      	ldr	r3, [pc, #332]	@ (8006850 <SEGGER_SYSVIEW_Start+0x168>)
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	220a      	movs	r2, #10
 8006708:	4952      	ldr	r1, [pc, #328]	@ (8006854 <SEGGER_SYSVIEW_Start+0x16c>)
 800670a:	4618      	mov	r0, r3
 800670c:	f7f9 fd60 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006716:	200a      	movs	r0, #10
 8006718:	f7ff ff32 	bl	8006580 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800671c:	f3ef 8311 	mrs	r3, BASEPRI
 8006720:	f04f 0120 	mov.w	r1, #32
 8006724:	f381 8811 	msr	BASEPRI, r1
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	484b      	ldr	r0, [pc, #300]	@ (8006858 <SEGGER_SYSVIEW_Start+0x170>)
 800672c:	f7ff fc7a 	bl	8006024 <_PreparePacket>
 8006730:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673a:	4b45      	ldr	r3, [pc, #276]	@ (8006850 <SEGGER_SYSVIEW_Start+0x168>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006740:	e00b      	b.n	800675a <SEGGER_SYSVIEW_Start+0x72>
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	b2da      	uxtb	r2, r3
 8006746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800674c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	09db      	lsrs	r3, r3, #7
 8006758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	2b7f      	cmp	r3, #127	@ 0x7f
 800675e:	d8f0      	bhi.n	8006742 <SEGGER_SYSVIEW_Start+0x5a>
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
 8006774:	4b36      	ldr	r3, [pc, #216]	@ (8006850 <SEGGER_SYSVIEW_Start+0x168>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	623b      	str	r3, [r7, #32]
 800677a:	e00b      	b.n	8006794 <SEGGER_SYSVIEW_Start+0xac>
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	6279      	str	r1, [r7, #36]	@ 0x24
 8006786:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	09db      	lsrs	r3, r3, #7
 8006792:	623b      	str	r3, [r7, #32]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	2b7f      	cmp	r3, #127	@ 0x7f
 8006798:	d8f0      	bhi.n	800677c <SEGGER_SYSVIEW_Start+0x94>
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	627a      	str	r2, [r7, #36]	@ 0x24
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	4b28      	ldr	r3, [pc, #160]	@ (8006850 <SEGGER_SYSVIEW_Start+0x168>)
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	e00b      	b.n	80067ce <SEGGER_SYSVIEW_Start+0xe6>
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	61f9      	str	r1, [r7, #28]
 80067c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	09db      	lsrs	r3, r3, #7
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80067d2:	d8f0      	bhi.n	80067b6 <SEGGER_SYSVIEW_Start+0xce>
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	61fa      	str	r2, [r7, #28]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	e00b      	b.n	8006806 <SEGGER_SYSVIEW_Start+0x11e>
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	1c59      	adds	r1, r3, #1
 80067f6:	6179      	str	r1, [r7, #20]
 80067f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	09db      	lsrs	r3, r3, #7
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b7f      	cmp	r3, #127	@ 0x7f
 800680a:	d8f0      	bhi.n	80067ee <SEGGER_SYSVIEW_Start+0x106>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	617a      	str	r2, [r7, #20]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800681c:	2218      	movs	r2, #24
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fceb 	bl	80061fc <_SendPacket>
      RECORD_END();
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800682c:	4b08      	ldr	r3, [pc, #32]	@ (8006850 <SEGGER_SYSVIEW_Start+0x168>)
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006834:	4b06      	ldr	r3, [pc, #24]	@ (8006850 <SEGGER_SYSVIEW_Start+0x168>)
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800683a:	f000 f9eb 	bl	8006c14 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800683e:	f000 f9b1 	bl	8006ba4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006842:	f000 fd21 	bl	8007288 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006846:	bf00      	nop
 8006848:	3730      	adds	r7, #48	@ 0x30
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	2001979c 	.word	0x2001979c
 8006854:	080087a4 	.word	0x080087a4
 8006858:	200197cc 	.word	0x200197cc

0800685c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006862:	f3ef 8311 	mrs	r3, BASEPRI
 8006866:	f04f 0120 	mov.w	r1, #32
 800686a:	f381 8811 	msr	BASEPRI, r1
 800686e:	607b      	str	r3, [r7, #4]
 8006870:	480b      	ldr	r0, [pc, #44]	@ (80068a0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006872:	f7ff fbd7 	bl	8006024 <_PreparePacket>
 8006876:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006878:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006880:	220b      	movs	r2, #11
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6838      	ldr	r0, [r7, #0]
 8006886:	f7ff fcb9 	bl	80061fc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f383 8811 	msr	BASEPRI, r3
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	200197cc 	.word	0x200197cc
 80068a4:	2001979c 	.word	0x2001979c

080068a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	@ 0x30
 80068ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ae:	f3ef 8311 	mrs	r3, BASEPRI
 80068b2:	f04f 0120 	mov.w	r1, #32
 80068b6:	f381 8811 	msr	BASEPRI, r1
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	4845      	ldr	r0, [pc, #276]	@ (80069d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80068be:	f7ff fbb1 	bl	8006024 <_PreparePacket>
 80068c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068cc:	4b42      	ldr	r3, [pc, #264]	@ (80069d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068d2:	e00b      	b.n	80068ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	09db      	lsrs	r3, r3, #7
 80068ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80068f0:	d8f0      	bhi.n	80068d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006900:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
 8006906:	4b34      	ldr	r3, [pc, #208]	@ (80069d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	623b      	str	r3, [r7, #32]
 800690c:	e00b      	b.n	8006926 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	1c59      	adds	r1, r3, #1
 8006916:	6279      	str	r1, [r7, #36]	@ 0x24
 8006918:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	09db      	lsrs	r3, r3, #7
 8006924:	623b      	str	r3, [r7, #32]
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	2b7f      	cmp	r3, #127	@ 0x7f
 800692a:	d8f0      	bhi.n	800690e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	627a      	str	r2, [r7, #36]	@ 0x24
 8006932:	6a3a      	ldr	r2, [r7, #32]
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	4b25      	ldr	r3, [pc, #148]	@ (80069d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e00b      	b.n	8006960 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	61f9      	str	r1, [r7, #28]
 8006952:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	09db      	lsrs	r3, r3, #7
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b7f      	cmp	r3, #127	@ 0x7f
 8006964:	d8f0      	bhi.n	8006948 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	61fa      	str	r2, [r7, #28]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e00b      	b.n	8006998 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	1c59      	adds	r1, r3, #1
 8006988:	6179      	str	r1, [r7, #20]
 800698a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	09db      	lsrs	r3, r3, #7
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b7f      	cmp	r3, #127	@ 0x7f
 800699c:	d8f0      	bhi.n	8006980 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	617a      	str	r2, [r7, #20]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80069ae:	2218      	movs	r2, #24
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	68b8      	ldr	r0, [r7, #8]
 80069b4:	f7ff fc22 	bl	80061fc <_SendPacket>
  RECORD_END();
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069be:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80069c6:	4b04      	ldr	r3, [pc, #16]	@ (80069d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	4798      	blx	r3
  }
}
 80069cc:	bf00      	nop
 80069ce:	3730      	adds	r7, #48	@ 0x30
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	200197cc 	.word	0x200197cc
 80069d8:	2001979c 	.word	0x2001979c

080069dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b092      	sub	sp, #72	@ 0x48
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069e4:	f3ef 8311 	mrs	r3, BASEPRI
 80069e8:	f04f 0120 	mov.w	r1, #32
 80069ec:	f381 8811 	msr	BASEPRI, r1
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	486a      	ldr	r0, [pc, #424]	@ (8006b9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80069f4:	f7ff fb16 	bl	8006024 <_PreparePacket>
 80069f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b66      	ldr	r3, [pc, #408]	@ (8006ba0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a0e:	e00b      	b.n	8006a28 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a16:	1c59      	adds	r1, r3, #1
 8006a18:	6479      	str	r1, [r7, #68]	@ 0x44
 8006a1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a24:	09db      	lsrs	r3, r3, #7
 8006a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a2c:	d8f0      	bhi.n	8006a10 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a48:	e00b      	b.n	8006a62 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a50:	1c59      	adds	r1, r3, #1
 8006a52:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a66:	d8f0      	bhi.n	8006a4a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a76:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f7ff fa9f 	bl	8005fc4 <_EncodeStr>
 8006a86:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a88:	2209      	movs	r2, #9
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	6938      	ldr	r0, [r7, #16]
 8006a8e:	f7ff fbb5 	bl	80061fc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4b40      	ldr	r3, [pc, #256]	@ (8006ba0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aa6:	e00b      	b.n	8006ac0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ab2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	09db      	lsrs	r3, r3, #7
 8006abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac4:	d8f0      	bhi.n	8006aa8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	637a      	str	r2, [r7, #52]	@ 0x34
 8006acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ae0:	e00b      	b.n	8006afa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	1c59      	adds	r1, r3, #1
 8006aea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006aec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006afe:	d8f0      	bhi.n	8006ae2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	e00b      	b.n	8006b34 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	09db      	lsrs	r3, r3, #7
 8006b32:	623b      	str	r3, [r7, #32]
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b38:	d8f0      	bhi.n	8006b1c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b40:	6a3a      	ldr	r2, [r7, #32]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	e00b      	b.n	8006b6c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	1c59      	adds	r1, r3, #1
 8006b5c:	61f9      	str	r1, [r7, #28]
 8006b5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	09db      	lsrs	r3, r3, #7
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b70:	d8f0      	bhi.n	8006b54 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	61fa      	str	r2, [r7, #28]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b82:	2215      	movs	r2, #21
 8006b84:	68f9      	ldr	r1, [r7, #12]
 8006b86:	6938      	ldr	r0, [r7, #16]
 8006b88:	f7ff fb38 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f383 8811 	msr	BASEPRI, r3
}
 8006b92:	bf00      	nop
 8006b94:	3748      	adds	r7, #72	@ 0x48
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200197cc 	.word	0x200197cc
 8006ba0:	2001979c 	.word	0x2001979c

08006ba4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ba8:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006bb0:	4b05      	ldr	r3, [pc, #20]	@ (8006bc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006bba:	4b03      	ldr	r3, [pc, #12]	@ (8006bc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4798      	blx	r3
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	2001979c 	.word	0x2001979c

08006bcc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd8:	f04f 0120 	mov.w	r1, #32
 8006bdc:	f381 8811 	msr	BASEPRI, r1
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	480b      	ldr	r0, [pc, #44]	@ (8006c10 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006be4:	f7ff fa1e 	bl	8006024 <_PreparePacket>
 8006be8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bea:	2280      	movs	r2, #128	@ 0x80
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f7ff f9e8 	bl	8005fc4 <_EncodeStr>
 8006bf4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006bf6:	220e      	movs	r2, #14
 8006bf8:	68f9      	ldr	r1, [r7, #12]
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f7ff fafe 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f383 8811 	msr	BASEPRI, r3
}
 8006c06:	bf00      	nop
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	200197cc 	.word	0x200197cc

08006c14 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006c1a:	4b15      	ldr	r3, [pc, #84]	@ (8006c70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01a      	beq.n	8006c58 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006c22:	4b13      	ldr	r3, [pc, #76]	@ (8006c70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d015      	beq.n	8006c58 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006c2c:	4b10      	ldr	r3, [pc, #64]	@ (8006c70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4798      	blx	r3
 8006c34:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c38:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	000a      	movs	r2, r1
 8006c48:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4621      	mov	r1, r4
 8006c50:	200d      	movs	r0, #13
 8006c52:	f7ff fcef 	bl	8006634 <SEGGER_SYSVIEW_RecordU32x2>
 8006c56:	e006      	b.n	8006c66 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c58:	4b06      	ldr	r3, [pc, #24]	@ (8006c74 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	200c      	movs	r0, #12
 8006c60:	f7ff fcac 	bl	80065bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd90      	pop	{r4, r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	2001979c 	.word	0x2001979c
 8006c74:	e0001004 	.word	0xe0001004

08006c78 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c82:	f04f 0120 	mov.w	r1, #32
 8006c86:	f381 8811 	msr	BASEPRI, r1
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	4819      	ldr	r0, [pc, #100]	@ (8006cf4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c8e:	f7ff f9c9 	bl	8006024 <_PreparePacket>
 8006c92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c98:	4b17      	ldr	r3, [pc, #92]	@ (8006cf8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	e00b      	b.n	8006cc4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	1c59      	adds	r1, r3, #1
 8006cb4:	6179      	str	r1, [r7, #20]
 8006cb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	09db      	lsrs	r3, r3, #7
 8006cc2:	613b      	str	r3, [r7, #16]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cc8:	d8f0      	bhi.n	8006cac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	617a      	str	r2, [r7, #20]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006cda:	2202      	movs	r2, #2
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	68b8      	ldr	r0, [r7, #8]
 8006ce0:	f7ff fa8c 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f383 8811 	msr	BASEPRI, r3
}
 8006cea:	bf00      	nop
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200197cc 	.word	0x200197cc
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d02:	f3ef 8311 	mrs	r3, BASEPRI
 8006d06:	f04f 0120 	mov.w	r1, #32
 8006d0a:	f381 8811 	msr	BASEPRI, r1
 8006d0e:	607b      	str	r3, [r7, #4]
 8006d10:	4807      	ldr	r0, [pc, #28]	@ (8006d30 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006d12:	f7ff f987 	bl	8006024 <_PreparePacket>
 8006d16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006d18:	2203      	movs	r2, #3
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6838      	ldr	r0, [r7, #0]
 8006d1e:	f7ff fa6d 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f383 8811 	msr	BASEPRI, r3
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	200197cc 	.word	0x200197cc

08006d34 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d3e:	f04f 0120 	mov.w	r1, #32
 8006d42:	f381 8811 	msr	BASEPRI, r1
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	4807      	ldr	r0, [pc, #28]	@ (8006d68 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d4a:	f7ff f96b 	bl	8006024 <_PreparePacket>
 8006d4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d50:	2212      	movs	r2, #18
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6838      	ldr	r0, [r7, #0]
 8006d56:	f7ff fa51 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f383 8811 	msr	BASEPRI, r3
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200197cc 	.word	0x200197cc

08006d6c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d74:	f3ef 8311 	mrs	r3, BASEPRI
 8006d78:	f04f 0120 	mov.w	r1, #32
 8006d7c:	f381 8811 	msr	BASEPRI, r1
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	4817      	ldr	r0, [pc, #92]	@ (8006de0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006d84:	f7ff f94e 	bl	8006024 <_PreparePacket>
 8006d88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e00b      	b.n	8006db0 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	1c59      	adds	r1, r3, #1
 8006da0:	61f9      	str	r1, [r7, #28]
 8006da2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	09db      	lsrs	r3, r3, #7
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006db4:	d8f0      	bhi.n	8006d98 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	61fa      	str	r2, [r7, #28]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006dc6:	221c      	movs	r2, #28
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f7ff fa16 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f383 8811 	msr	BASEPRI, r3
}
 8006dd6:	bf00      	nop
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200197cc 	.word	0x200197cc

08006de4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	@ 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006dee:	f3ef 8311 	mrs	r3, BASEPRI
 8006df2:	f04f 0120 	mov.w	r1, #32
 8006df6:	f381 8811 	msr	BASEPRI, r1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	4824      	ldr	r0, [pc, #144]	@ (8006e90 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006dfe:	f7ff f911 	bl	8006024 <_PreparePacket>
 8006e02:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	623b      	str	r3, [r7, #32]
 8006e10:	e00b      	b.n	8006e2a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	1c59      	adds	r1, r3, #1
 8006e1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	09db      	lsrs	r3, r3, #7
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e2e:	d8f0      	bhi.n	8006e12 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e00b      	b.n	8006e62 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	1c59      	adds	r1, r3, #1
 8006e52:	61f9      	str	r1, [r7, #28]
 8006e54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	09db      	lsrs	r3, r3, #7
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e66:	d8f0      	bhi.n	8006e4a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	61fa      	str	r2, [r7, #28]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006e78:	221c      	movs	r2, #28
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6938      	ldr	r0, [r7, #16]
 8006e7e:	f7ff f9bd 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f383 8811 	msr	BASEPRI, r3
}
 8006e88:	bf00      	nop
 8006e8a:	3728      	adds	r7, #40	@ 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	200197cc 	.word	0x200197cc

08006e94 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9e:	f04f 0120 	mov.w	r1, #32
 8006ea2:	f381 8811 	msr	BASEPRI, r1
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	4807      	ldr	r0, [pc, #28]	@ (8006ec8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006eaa:	f7ff f8bb 	bl	8006024 <_PreparePacket>
 8006eae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006eb0:	2211      	movs	r2, #17
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6838      	ldr	r0, [r7, #0]
 8006eb6:	f7ff f9a1 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f383 8811 	msr	BASEPRI, r3
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	200197cc 	.word	0x200197cc

08006ecc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed8:	f04f 0120 	mov.w	r1, #32
 8006edc:	f381 8811 	msr	BASEPRI, r1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	4819      	ldr	r0, [pc, #100]	@ (8006f48 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ee4:	f7ff f89e 	bl	8006024 <_PreparePacket>
 8006ee8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eee:	4b17      	ldr	r3, [pc, #92]	@ (8006f4c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e00b      	b.n	8006f1a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	61f9      	str	r1, [r7, #28]
 8006f0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	09db      	lsrs	r3, r3, #7
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f1e:	d8f0      	bhi.n	8006f02 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	61fa      	str	r2, [r7, #28]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f30:	2208      	movs	r2, #8
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6938      	ldr	r0, [r7, #16]
 8006f36:	f7ff f961 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f383 8811 	msr	BASEPRI, r3
}
 8006f40:	bf00      	nop
 8006f42:	3720      	adds	r7, #32
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	200197cc 	.word	0x200197cc
 8006f4c:	2001979c 	.word	0x2001979c

08006f50 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f58:	f3ef 8311 	mrs	r3, BASEPRI
 8006f5c:	f04f 0120 	mov.w	r1, #32
 8006f60:	f381 8811 	msr	BASEPRI, r1
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	4819      	ldr	r0, [pc, #100]	@ (8006fcc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f68:	f7ff f85c 	bl	8006024 <_PreparePacket>
 8006f6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f72:	4b17      	ldr	r3, [pc, #92]	@ (8006fd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	e00b      	b.n	8006f9e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	1c59      	adds	r1, r3, #1
 8006f8e:	61f9      	str	r1, [r7, #28]
 8006f90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	09db      	lsrs	r3, r3, #7
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fa2:	d8f0      	bhi.n	8006f86 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	61fa      	str	r2, [r7, #28]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	6938      	ldr	r0, [r7, #16]
 8006fba:	f7ff f91f 	bl	80061fc <_SendPacket>
  RECORD_END();
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f383 8811 	msr	BASEPRI, r3
}
 8006fc4:	bf00      	nop
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200197cc 	.word	0x200197cc
 8006fd0:	2001979c 	.word	0x2001979c

08006fd4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe0:	f04f 0120 	mov.w	r1, #32
 8006fe4:	f381 8811 	msr	BASEPRI, r1
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	4819      	ldr	r0, [pc, #100]	@ (8007050 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fec:	f7ff f81a 	bl	8006024 <_PreparePacket>
 8006ff0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ff6:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e00b      	b.n	8007022 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	1c59      	adds	r1, r3, #1
 8007012:	61f9      	str	r1, [r7, #28]
 8007014:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	09db      	lsrs	r3, r3, #7
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b7f      	cmp	r3, #127	@ 0x7f
 8007026:	d8f0      	bhi.n	800700a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	61fa      	str	r2, [r7, #28]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007038:	2206      	movs	r2, #6
 800703a:	68f9      	ldr	r1, [r7, #12]
 800703c:	6938      	ldr	r0, [r7, #16]
 800703e:	f7ff f8dd 	bl	80061fc <_SendPacket>
  RECORD_END();
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f383 8811 	msr	BASEPRI, r3
}
 8007048:	bf00      	nop
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	200197cc 	.word	0x200197cc
 8007054:	2001979c 	.word	0x2001979c

08007058 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	@ 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007062:	f3ef 8311 	mrs	r3, BASEPRI
 8007066:	f04f 0120 	mov.w	r1, #32
 800706a:	f381 8811 	msr	BASEPRI, r1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	4827      	ldr	r0, [pc, #156]	@ (8007110 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007072:	f7fe ffd7 	bl	8006024 <_PreparePacket>
 8007076:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800707c:	4b25      	ldr	r3, [pc, #148]	@ (8007114 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	e00b      	b.n	80070a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	6279      	str	r1, [r7, #36]	@ 0x24
 800709a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	09db      	lsrs	r3, r3, #7
 80070a6:	623b      	str	r3, [r7, #32]
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ac:	d8f0      	bhi.n	8007090 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80070b4:	6a3a      	ldr	r2, [r7, #32]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	e00b      	b.n	80070e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	1c59      	adds	r1, r3, #1
 80070d0:	61f9      	str	r1, [r7, #28]
 80070d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	09db      	lsrs	r3, r3, #7
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070e4:	d8f0      	bhi.n	80070c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	61fa      	str	r2, [r7, #28]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070f6:	2207      	movs	r2, #7
 80070f8:	68f9      	ldr	r1, [r7, #12]
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f7ff f87e 	bl	80061fc <_SendPacket>
  RECORD_END();
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f383 8811 	msr	BASEPRI, r3
}
 8007106:	bf00      	nop
 8007108:	3728      	adds	r7, #40	@ 0x28
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	200197cc 	.word	0x200197cc
 8007114:	2001979c 	.word	0x2001979c

08007118 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007120:	4b04      	ldr	r3, [pc, #16]	@ (8007134 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	1ad3      	subs	r3, r2, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	2001979c 	.word	0x2001979c

08007138 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b08c      	sub	sp, #48	@ 0x30
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007142:	4b40      	ldr	r3, [pc, #256]	@ (8007244 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d077      	beq.n	800723a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800714a:	4b3e      	ldr	r3, [pc, #248]	@ (8007244 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007150:	2300      	movs	r3, #0
 8007152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007154:	e008      	b.n	8007168 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	3301      	adds	r3, #1
 8007166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800716c:	429a      	cmp	r2, r3
 800716e:	d3f2      	bcc.n	8007156 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007170:	e000      	b.n	8007174 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007172:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d055      	beq.n	8007226 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800717a:	f3ef 8311 	mrs	r3, BASEPRI
 800717e:	f04f 0120 	mov.w	r1, #32
 8007182:	f381 8811 	msr	BASEPRI, r1
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	482f      	ldr	r0, [pc, #188]	@ (8007248 <SEGGER_SYSVIEW_SendModule+0x110>)
 800718a:	f7fe ff4b 	bl	8006024 <_PreparePacket>
 800718e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	e00b      	b.n	80071b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	1c59      	adds	r1, r3, #1
 80071a6:	6279      	str	r1, [r7, #36]	@ 0x24
 80071a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	09db      	lsrs	r3, r3, #7
 80071b4:	623b      	str	r3, [r7, #32]
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ba:	d8f0      	bhi.n	800719e <SEGGER_SYSVIEW_SendModule+0x66>
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80071c2:	6a3a      	ldr	r2, [r7, #32]
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	e00b      	b.n	80071f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	61f9      	str	r1, [r7, #28]
 80071e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	09db      	lsrs	r3, r3, #7
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071f4:	d8f0      	bhi.n	80071d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	61fa      	str	r2, [r7, #28]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2280      	movs	r2, #128	@ 0x80
 800720c:	4619      	mov	r1, r3
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7fe fed8 	bl	8005fc4 <_EncodeStr>
 8007214:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007216:	2216      	movs	r2, #22
 8007218:	68f9      	ldr	r1, [r7, #12]
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f7fe ffee 	bl	80061fc <_SendPacket>
      RECORD_END();
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d006      	beq.n	800723a <SEGGER_SYSVIEW_SendModule+0x102>
 800722c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4798      	blx	r3
    }
  }
}
 800723a:	bf00      	nop
 800723c:	3730      	adds	r7, #48	@ 0x30
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200197c4 	.word	0x200197c4
 8007248:	200197cc 	.word	0x200197cc

0800724c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007252:	4b0c      	ldr	r3, [pc, #48]	@ (8007284 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00f      	beq.n	800727a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800725a:	4b0a      	ldr	r3, [pc, #40]	@ (8007284 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f2      	bne.n	8007260 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	200197c4 	.word	0x200197c4

08007288 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800728e:	f3ef 8311 	mrs	r3, BASEPRI
 8007292:	f04f 0120 	mov.w	r1, #32
 8007296:	f381 8811 	msr	BASEPRI, r1
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	4817      	ldr	r0, [pc, #92]	@ (80072fc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800729e:	f7fe fec1 	bl	8006024 <_PreparePacket>
 80072a2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	4b14      	ldr	r3, [pc, #80]	@ (8007300 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	e00b      	b.n	80072cc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	6179      	str	r1, [r7, #20]
 80072be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	09db      	lsrs	r3, r3, #7
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80072d0:	d8f0      	bhi.n	80072b4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	617a      	str	r2, [r7, #20]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072e2:	221b      	movs	r2, #27
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	68b8      	ldr	r0, [r7, #8]
 80072e8:	f7fe ff88 	bl	80061fc <_SendPacket>
  RECORD_END();
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f383 8811 	msr	BASEPRI, r3
}
 80072f2:	bf00      	nop
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	200197cc 	.word	0x200197cc
 8007300:	200197c8 	.word	0x200197c8

08007304 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	@ 0x28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800730c:	f3ef 8311 	mrs	r3, BASEPRI
 8007310:	f04f 0120 	mov.w	r1, #32
 8007314:	f381 8811 	msr	BASEPRI, r1
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	4827      	ldr	r0, [pc, #156]	@ (80073b8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800731c:	f7fe fe82 	bl	8006024 <_PreparePacket>
 8007320:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007322:	2280      	movs	r2, #128	@ 0x80
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	6938      	ldr	r0, [r7, #16]
 8007328:	f7fe fe4c 	bl	8005fc4 <_EncodeStr>
 800732c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
 8007332:	2301      	movs	r3, #1
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	e00b      	b.n	8007350 <SEGGER_SYSVIEW_Warn+0x4c>
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	b2da      	uxtb	r2, r3
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	1c59      	adds	r1, r3, #1
 8007340:	6279      	str	r1, [r7, #36]	@ 0x24
 8007342:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	09db      	lsrs	r3, r3, #7
 800734e:	623b      	str	r3, [r7, #32]
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	2b7f      	cmp	r3, #127	@ 0x7f
 8007354:	d8f0      	bhi.n	8007338 <SEGGER_SYSVIEW_Warn+0x34>
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	627a      	str	r2, [r7, #36]	@ 0x24
 800735c:	6a3a      	ldr	r2, [r7, #32]
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	2300      	movs	r3, #0
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	e00b      	b.n	8007388 <SEGGER_SYSVIEW_Warn+0x84>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	61f9      	str	r1, [r7, #28]
 800737a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	09db      	lsrs	r3, r3, #7
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b7f      	cmp	r3, #127	@ 0x7f
 800738c:	d8f0      	bhi.n	8007370 <SEGGER_SYSVIEW_Warn+0x6c>
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	61fa      	str	r2, [r7, #28]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800739e:	221a      	movs	r2, #26
 80073a0:	68f9      	ldr	r1, [r7, #12]
 80073a2:	6938      	ldr	r0, [r7, #16]
 80073a4:	f7fe ff2a 	bl	80061fc <_SendPacket>
  RECORD_END();
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f383 8811 	msr	BASEPRI, r3
}
 80073ae:	bf00      	nop
 80073b0:	3728      	adds	r7, #40	@ 0x28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200197cc 	.word	0x200197cc

080073bc <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	2000      	movs	r0, #0
 80073d0:	f7fe fd02 	bl	8005dd8 <SEGGER_RTT_Write>
  return len;
 80073d4:	683b      	ldr	r3, [r7, #0]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80073e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80073e6:	2300      	movs	r3, #0
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	e033      	b.n	8007454 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80073ec:	491e      	ldr	r1, [pc, #120]	@ (8007468 <_cbSendTaskList+0x88>)
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	491a      	ldr	r1, [pc, #104]	@ (8007468 <_cbSendTaskList+0x88>)
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3304      	adds	r3, #4
 800740c:	6819      	ldr	r1, [r3, #0]
 800740e:	4c16      	ldr	r4, [pc, #88]	@ (8007468 <_cbSendTaskList+0x88>)
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4423      	add	r3, r4
 800741c:	3308      	adds	r3, #8
 800741e:	681c      	ldr	r4, [r3, #0]
 8007420:	4d11      	ldr	r5, [pc, #68]	@ (8007468 <_cbSendTaskList+0x88>)
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	442b      	add	r3, r5
 800742e:	330c      	adds	r3, #12
 8007430:	681d      	ldr	r5, [r3, #0]
 8007432:	4e0d      	ldr	r6, [pc, #52]	@ (8007468 <_cbSendTaskList+0x88>)
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4433      	add	r3, r6
 8007440:	3310      	adds	r3, #16
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	462b      	mov	r3, r5
 8007448:	4622      	mov	r2, r4
 800744a:	f000 f8bd 	bl	80075c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3301      	adds	r3, #1
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	4b05      	ldr	r3, [pc, #20]	@ (800746c <_cbSendTaskList+0x8c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d3c6      	bcc.n	80073ec <_cbSendTaskList+0xc>
  }
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007468:	200198b0 	.word	0x200198b0
 800746c:	20019950 	.word	0x20019950

08007470 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007478:	f7fc fd06 	bl	8003e88 <xTaskGetTickCountFromISR>
 800747c:	4603      	mov	r3, r0
 800747e:	2200      	movs	r2, #0
 8007480:	469a      	mov	sl, r3
 8007482:	4693      	mov	fp, r2
 8007484:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	f04f 0a00 	mov.w	sl, #0
 8007494:	f04f 0b00 	mov.w	fp, #0
 8007498:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800749c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80074a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80074a4:	4652      	mov	r2, sl
 80074a6:	465b      	mov	r3, fp
 80074a8:	1a14      	subs	r4, r2, r0
 80074aa:	eb63 0501 	sbc.w	r5, r3, r1
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	00ab      	lsls	r3, r5, #2
 80074b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80074bc:	00a2      	lsls	r2, r4, #2
 80074be:	4614      	mov	r4, r2
 80074c0:	461d      	mov	r5, r3
 80074c2:	eb14 0800 	adds.w	r8, r4, r0
 80074c6:	eb45 0901 	adc.w	r9, r5, r1
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074de:	4690      	mov	r8, r2
 80074e0:	4699      	mov	r9, r3
 80074e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80074e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080074f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007506:	2205      	movs	r2, #5
 8007508:	492b      	ldr	r1, [pc, #172]	@ (80075b8 <SYSVIEW_AddTask+0xc0>)
 800750a:	68b8      	ldr	r0, [r7, #8]
 800750c:	f000 f9c1 	bl	8007892 <memcmp>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d04b      	beq.n	80075ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007516:	4b29      	ldr	r3, [pc, #164]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b07      	cmp	r3, #7
 800751c:	d903      	bls.n	8007526 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800751e:	4828      	ldr	r0, [pc, #160]	@ (80075c0 <SYSVIEW_AddTask+0xc8>)
 8007520:	f7ff fef0 	bl	8007304 <SEGGER_SYSVIEW_Warn>
    return;
 8007524:	e044      	b.n	80075b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007526:	4b25      	ldr	r3, [pc, #148]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4926      	ldr	r1, [pc, #152]	@ (80075c4 <SYSVIEW_AddTask+0xcc>)
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800753a:	4b20      	ldr	r3, [pc, #128]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4921      	ldr	r1, [pc, #132]	@ (80075c4 <SYSVIEW_AddTask+0xcc>)
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	3304      	adds	r3, #4
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007550:	4b1a      	ldr	r3, [pc, #104]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	491b      	ldr	r1, [pc, #108]	@ (80075c4 <SYSVIEW_AddTask+0xcc>)
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	3308      	adds	r3, #8
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007566:	4b15      	ldr	r3, [pc, #84]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4916      	ldr	r1, [pc, #88]	@ (80075c4 <SYSVIEW_AddTask+0xcc>)
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	330c      	adds	r3, #12
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800757c:	4b0f      	ldr	r3, [pc, #60]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4910      	ldr	r1, [pc, #64]	@ (80075c4 <SYSVIEW_AddTask+0xcc>)
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	3310      	adds	r3, #16
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	4a08      	ldr	r2, [pc, #32]	@ (80075bc <SYSVIEW_AddTask+0xc4>)
 800759a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f80e 	bl	80075c8 <SYSVIEW_SendTaskInfo>
 80075ac:	e000      	b.n	80075b0 <SYSVIEW_AddTask+0xb8>
    return;
 80075ae:	bf00      	nop

}
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	08008720 	.word	0x08008720
 80075bc:	20019950 	.word	0x20019950
 80075c0:	08008728 	.word	0x08008728
 80075c4:	200198b0 	.word	0x200198b0

080075c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	@ 0x28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80075d6:	f107 0314 	add.w	r3, r7, #20
 80075da:	2214      	movs	r2, #20
 80075dc:	2100      	movs	r1, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f967 	bl	80078b2 <memset>
  TaskInfo.TaskID     = TaskID;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80075f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80075f8:	f107 0314 	add.w	r3, r7, #20
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff f9ed 	bl	80069dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007602:	bf00      	nop
 8007604:	3728      	adds	r7, #40	@ 0x28
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <rand>:
 800760c:	4b16      	ldr	r3, [pc, #88]	@ (8007668 <rand+0x5c>)
 800760e:	b510      	push	{r4, lr}
 8007610:	681c      	ldr	r4, [r3, #0]
 8007612:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007614:	b9b3      	cbnz	r3, 8007644 <rand+0x38>
 8007616:	2018      	movs	r0, #24
 8007618:	f000 fa2c 	bl	8007a74 <malloc>
 800761c:	4602      	mov	r2, r0
 800761e:	6320      	str	r0, [r4, #48]	@ 0x30
 8007620:	b920      	cbnz	r0, 800762c <rand+0x20>
 8007622:	4b12      	ldr	r3, [pc, #72]	@ (800766c <rand+0x60>)
 8007624:	4812      	ldr	r0, [pc, #72]	@ (8007670 <rand+0x64>)
 8007626:	2152      	movs	r1, #82	@ 0x52
 8007628:	f000 f9bc 	bl	80079a4 <__assert_func>
 800762c:	4911      	ldr	r1, [pc, #68]	@ (8007674 <rand+0x68>)
 800762e:	4b12      	ldr	r3, [pc, #72]	@ (8007678 <rand+0x6c>)
 8007630:	e9c0 1300 	strd	r1, r3, [r0]
 8007634:	4b11      	ldr	r3, [pc, #68]	@ (800767c <rand+0x70>)
 8007636:	6083      	str	r3, [r0, #8]
 8007638:	230b      	movs	r3, #11
 800763a:	8183      	strh	r3, [r0, #12]
 800763c:	2100      	movs	r1, #0
 800763e:	2001      	movs	r0, #1
 8007640:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007644:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007646:	480e      	ldr	r0, [pc, #56]	@ (8007680 <rand+0x74>)
 8007648:	690b      	ldr	r3, [r1, #16]
 800764a:	694c      	ldr	r4, [r1, #20]
 800764c:	4a0d      	ldr	r2, [pc, #52]	@ (8007684 <rand+0x78>)
 800764e:	4358      	muls	r0, r3
 8007650:	fb02 0004 	mla	r0, r2, r4, r0
 8007654:	fba3 3202 	umull	r3, r2, r3, r2
 8007658:	3301      	adds	r3, #1
 800765a:	eb40 0002 	adc.w	r0, r0, r2
 800765e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007662:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007666:	bd10      	pop	{r4, pc}
 8007668:	2000002c 	.word	0x2000002c
 800766c:	080087b8 	.word	0x080087b8
 8007670:	080087cf 	.word	0x080087cf
 8007674:	abcd330e 	.word	0xabcd330e
 8007678:	e66d1234 	.word	0xe66d1234
 800767c:	0005deec 	.word	0x0005deec
 8007680:	5851f42d 	.word	0x5851f42d
 8007684:	4c957f2d 	.word	0x4c957f2d

08007688 <std>:
 8007688:	2300      	movs	r3, #0
 800768a:	b510      	push	{r4, lr}
 800768c:	4604      	mov	r4, r0
 800768e:	e9c0 3300 	strd	r3, r3, [r0]
 8007692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007696:	6083      	str	r3, [r0, #8]
 8007698:	8181      	strh	r1, [r0, #12]
 800769a:	6643      	str	r3, [r0, #100]	@ 0x64
 800769c:	81c2      	strh	r2, [r0, #14]
 800769e:	6183      	str	r3, [r0, #24]
 80076a0:	4619      	mov	r1, r3
 80076a2:	2208      	movs	r2, #8
 80076a4:	305c      	adds	r0, #92	@ 0x5c
 80076a6:	f000 f904 	bl	80078b2 <memset>
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <std+0x58>)
 80076ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80076ae:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <std+0x5c>)
 80076b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <std+0x60>)
 80076b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <std+0x64>)
 80076b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x68>)
 80076bc:	6224      	str	r4, [r4, #32]
 80076be:	429c      	cmp	r4, r3
 80076c0:	d006      	beq.n	80076d0 <std+0x48>
 80076c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076c6:	4294      	cmp	r4, r2
 80076c8:	d002      	beq.n	80076d0 <std+0x48>
 80076ca:	33d0      	adds	r3, #208	@ 0xd0
 80076cc:	429c      	cmp	r4, r3
 80076ce:	d105      	bne.n	80076dc <std+0x54>
 80076d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d8:	f000 b952 	b.w	8007980 <__retarget_lock_init_recursive>
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	bf00      	nop
 80076e0:	0800780d 	.word	0x0800780d
 80076e4:	0800782f 	.word	0x0800782f
 80076e8:	08007867 	.word	0x08007867
 80076ec:	0800788b 	.word	0x0800788b
 80076f0:	20019954 	.word	0x20019954

080076f4 <stdio_exit_handler>:
 80076f4:	4a02      	ldr	r2, [pc, #8]	@ (8007700 <stdio_exit_handler+0xc>)
 80076f6:	4903      	ldr	r1, [pc, #12]	@ (8007704 <stdio_exit_handler+0x10>)
 80076f8:	4803      	ldr	r0, [pc, #12]	@ (8007708 <stdio_exit_handler+0x14>)
 80076fa:	f000 b869 	b.w	80077d0 <_fwalk_sglue>
 80076fe:	bf00      	nop
 8007700:	20000020 	.word	0x20000020
 8007704:	08007ce9 	.word	0x08007ce9
 8007708:	20000030 	.word	0x20000030

0800770c <cleanup_stdio>:
 800770c:	6841      	ldr	r1, [r0, #4]
 800770e:	4b0c      	ldr	r3, [pc, #48]	@ (8007740 <cleanup_stdio+0x34>)
 8007710:	4299      	cmp	r1, r3
 8007712:	b510      	push	{r4, lr}
 8007714:	4604      	mov	r4, r0
 8007716:	d001      	beq.n	800771c <cleanup_stdio+0x10>
 8007718:	f000 fae6 	bl	8007ce8 <_fflush_r>
 800771c:	68a1      	ldr	r1, [r4, #8]
 800771e:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <cleanup_stdio+0x38>)
 8007720:	4299      	cmp	r1, r3
 8007722:	d002      	beq.n	800772a <cleanup_stdio+0x1e>
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fadf 	bl	8007ce8 <_fflush_r>
 800772a:	68e1      	ldr	r1, [r4, #12]
 800772c:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <cleanup_stdio+0x3c>)
 800772e:	4299      	cmp	r1, r3
 8007730:	d004      	beq.n	800773c <cleanup_stdio+0x30>
 8007732:	4620      	mov	r0, r4
 8007734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007738:	f000 bad6 	b.w	8007ce8 <_fflush_r>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	bf00      	nop
 8007740:	20019954 	.word	0x20019954
 8007744:	200199bc 	.word	0x200199bc
 8007748:	20019a24 	.word	0x20019a24

0800774c <global_stdio_init.part.0>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4b0b      	ldr	r3, [pc, #44]	@ (800777c <global_stdio_init.part.0+0x30>)
 8007750:	4c0b      	ldr	r4, [pc, #44]	@ (8007780 <global_stdio_init.part.0+0x34>)
 8007752:	4a0c      	ldr	r2, [pc, #48]	@ (8007784 <global_stdio_init.part.0+0x38>)
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	4620      	mov	r0, r4
 8007758:	2200      	movs	r2, #0
 800775a:	2104      	movs	r1, #4
 800775c:	f7ff ff94 	bl	8007688 <std>
 8007760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007764:	2201      	movs	r2, #1
 8007766:	2109      	movs	r1, #9
 8007768:	f7ff ff8e 	bl	8007688 <std>
 800776c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007770:	2202      	movs	r2, #2
 8007772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007776:	2112      	movs	r1, #18
 8007778:	f7ff bf86 	b.w	8007688 <std>
 800777c:	20019a8c 	.word	0x20019a8c
 8007780:	20019954 	.word	0x20019954
 8007784:	080076f5 	.word	0x080076f5

08007788 <__sfp_lock_acquire>:
 8007788:	4801      	ldr	r0, [pc, #4]	@ (8007790 <__sfp_lock_acquire+0x8>)
 800778a:	f000 b8fa 	b.w	8007982 <__retarget_lock_acquire_recursive>
 800778e:	bf00      	nop
 8007790:	20019a95 	.word	0x20019a95

08007794 <__sfp_lock_release>:
 8007794:	4801      	ldr	r0, [pc, #4]	@ (800779c <__sfp_lock_release+0x8>)
 8007796:	f000 b8f5 	b.w	8007984 <__retarget_lock_release_recursive>
 800779a:	bf00      	nop
 800779c:	20019a95 	.word	0x20019a95

080077a0 <__sinit>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4604      	mov	r4, r0
 80077a4:	f7ff fff0 	bl	8007788 <__sfp_lock_acquire>
 80077a8:	6a23      	ldr	r3, [r4, #32]
 80077aa:	b11b      	cbz	r3, 80077b4 <__sinit+0x14>
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	f7ff bff0 	b.w	8007794 <__sfp_lock_release>
 80077b4:	4b04      	ldr	r3, [pc, #16]	@ (80077c8 <__sinit+0x28>)
 80077b6:	6223      	str	r3, [r4, #32]
 80077b8:	4b04      	ldr	r3, [pc, #16]	@ (80077cc <__sinit+0x2c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1f5      	bne.n	80077ac <__sinit+0xc>
 80077c0:	f7ff ffc4 	bl	800774c <global_stdio_init.part.0>
 80077c4:	e7f2      	b.n	80077ac <__sinit+0xc>
 80077c6:	bf00      	nop
 80077c8:	0800770d 	.word	0x0800770d
 80077cc:	20019a8c 	.word	0x20019a8c

080077d0 <_fwalk_sglue>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	4607      	mov	r7, r0
 80077d6:	4688      	mov	r8, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	2600      	movs	r6, #0
 80077dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e0:	f1b9 0901 	subs.w	r9, r9, #1
 80077e4:	d505      	bpl.n	80077f2 <_fwalk_sglue+0x22>
 80077e6:	6824      	ldr	r4, [r4, #0]
 80077e8:	2c00      	cmp	r4, #0
 80077ea:	d1f7      	bne.n	80077dc <_fwalk_sglue+0xc>
 80077ec:	4630      	mov	r0, r6
 80077ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d907      	bls.n	8007808 <_fwalk_sglue+0x38>
 80077f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077fc:	3301      	adds	r3, #1
 80077fe:	d003      	beq.n	8007808 <_fwalk_sglue+0x38>
 8007800:	4629      	mov	r1, r5
 8007802:	4638      	mov	r0, r7
 8007804:	47c0      	blx	r8
 8007806:	4306      	orrs	r6, r0
 8007808:	3568      	adds	r5, #104	@ 0x68
 800780a:	e7e9      	b.n	80077e0 <_fwalk_sglue+0x10>

0800780c <__sread>:
 800780c:	b510      	push	{r4, lr}
 800780e:	460c      	mov	r4, r1
 8007810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007814:	f000 f878 	bl	8007908 <_read_r>
 8007818:	2800      	cmp	r0, #0
 800781a:	bfab      	itete	ge
 800781c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800781e:	89a3      	ldrhlt	r3, [r4, #12]
 8007820:	181b      	addge	r3, r3, r0
 8007822:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007826:	bfac      	ite	ge
 8007828:	6563      	strge	r3, [r4, #84]	@ 0x54
 800782a:	81a3      	strhlt	r3, [r4, #12]
 800782c:	bd10      	pop	{r4, pc}

0800782e <__swrite>:
 800782e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007832:	461f      	mov	r7, r3
 8007834:	898b      	ldrh	r3, [r1, #12]
 8007836:	05db      	lsls	r3, r3, #23
 8007838:	4605      	mov	r5, r0
 800783a:	460c      	mov	r4, r1
 800783c:	4616      	mov	r6, r2
 800783e:	d505      	bpl.n	800784c <__swrite+0x1e>
 8007840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007844:	2302      	movs	r3, #2
 8007846:	2200      	movs	r2, #0
 8007848:	f000 f84c 	bl	80078e4 <_lseek_r>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007852:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007856:	81a3      	strh	r3, [r4, #12]
 8007858:	4632      	mov	r2, r6
 800785a:	463b      	mov	r3, r7
 800785c:	4628      	mov	r0, r5
 800785e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	f7ff bdab 	b.w	80073bc <_write_r>

08007866 <__sseek>:
 8007866:	b510      	push	{r4, lr}
 8007868:	460c      	mov	r4, r1
 800786a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786e:	f000 f839 	bl	80078e4 <_lseek_r>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	bf15      	itete	ne
 8007878:	6560      	strne	r0, [r4, #84]	@ 0x54
 800787a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800787e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007882:	81a3      	strheq	r3, [r4, #12]
 8007884:	bf18      	it	ne
 8007886:	81a3      	strhne	r3, [r4, #12]
 8007888:	bd10      	pop	{r4, pc}

0800788a <__sclose>:
 800788a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788e:	f000 b819 	b.w	80078c4 <_close_r>

08007892 <memcmp>:
 8007892:	b510      	push	{r4, lr}
 8007894:	3901      	subs	r1, #1
 8007896:	4402      	add	r2, r0
 8007898:	4290      	cmp	r0, r2
 800789a:	d101      	bne.n	80078a0 <memcmp+0xe>
 800789c:	2000      	movs	r0, #0
 800789e:	e005      	b.n	80078ac <memcmp+0x1a>
 80078a0:	7803      	ldrb	r3, [r0, #0]
 80078a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	d001      	beq.n	80078ae <memcmp+0x1c>
 80078aa:	1b18      	subs	r0, r3, r4
 80078ac:	bd10      	pop	{r4, pc}
 80078ae:	3001      	adds	r0, #1
 80078b0:	e7f2      	b.n	8007898 <memcmp+0x6>

080078b2 <memset>:
 80078b2:	4402      	add	r2, r0
 80078b4:	4603      	mov	r3, r0
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d100      	bne.n	80078bc <memset+0xa>
 80078ba:	4770      	bx	lr
 80078bc:	f803 1b01 	strb.w	r1, [r3], #1
 80078c0:	e7f9      	b.n	80078b6 <memset+0x4>
	...

080078c4 <_close_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d06      	ldr	r5, [pc, #24]	@ (80078e0 <_close_r+0x1c>)
 80078c8:	2300      	movs	r3, #0
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	f7f9 fa08 	bl	8000ce4 <_close>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_close_r+0x1a>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_close_r+0x1a>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20019a90 	.word	0x20019a90

080078e4 <_lseek_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d07      	ldr	r5, [pc, #28]	@ (8007904 <_lseek_r+0x20>)
 80078e8:	4604      	mov	r4, r0
 80078ea:	4608      	mov	r0, r1
 80078ec:	4611      	mov	r1, r2
 80078ee:	2200      	movs	r2, #0
 80078f0:	602a      	str	r2, [r5, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	f7f9 fa1d 	bl	8000d32 <_lseek>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_lseek_r+0x1e>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_lseek_r+0x1e>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20019a90 	.word	0x20019a90

08007908 <_read_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d07      	ldr	r5, [pc, #28]	@ (8007928 <_read_r+0x20>)
 800790c:	4604      	mov	r4, r0
 800790e:	4608      	mov	r0, r1
 8007910:	4611      	mov	r1, r2
 8007912:	2200      	movs	r2, #0
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	f7f9 f9c7 	bl	8000caa <_read>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_read_r+0x1e>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_read_r+0x1e>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	20019a90 	.word	0x20019a90

0800792c <__errno>:
 800792c:	4b01      	ldr	r3, [pc, #4]	@ (8007934 <__errno+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	2000002c 	.word	0x2000002c

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4d0d      	ldr	r5, [pc, #52]	@ (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	@ (8007974 <__libc_init_array+0x3c>)
 800793e:	1b64      	subs	r4, r4, r5
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2600      	movs	r6, #0
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4d0b      	ldr	r5, [pc, #44]	@ (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	@ (800797c <__libc_init_array+0x44>)
 800794c:	f000 fe48 	bl	80085e0 <_init>
 8007950:	1b64      	subs	r4, r4, r5
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2600      	movs	r6, #0
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f855 3b04 	ldr.w	r3, [r5], #4
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	080088a0 	.word	0x080088a0
 8007974:	080088a0 	.word	0x080088a0
 8007978:	080088a0 	.word	0x080088a0
 800797c:	080088a4 	.word	0x080088a4

08007980 <__retarget_lock_init_recursive>:
 8007980:	4770      	bx	lr

08007982 <__retarget_lock_acquire_recursive>:
 8007982:	4770      	bx	lr

08007984 <__retarget_lock_release_recursive>:
 8007984:	4770      	bx	lr

08007986 <memcpy>:
 8007986:	440a      	add	r2, r1
 8007988:	4291      	cmp	r1, r2
 800798a:	f100 33ff 	add.w	r3, r0, #4294967295
 800798e:	d100      	bne.n	8007992 <memcpy+0xc>
 8007990:	4770      	bx	lr
 8007992:	b510      	push	{r4, lr}
 8007994:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799c:	4291      	cmp	r1, r2
 800799e:	d1f9      	bne.n	8007994 <memcpy+0xe>
 80079a0:	bd10      	pop	{r4, pc}
	...

080079a4 <__assert_func>:
 80079a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079a6:	4614      	mov	r4, r2
 80079a8:	461a      	mov	r2, r3
 80079aa:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <__assert_func+0x2c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4605      	mov	r5, r0
 80079b0:	68d8      	ldr	r0, [r3, #12]
 80079b2:	b954      	cbnz	r4, 80079ca <__assert_func+0x26>
 80079b4:	4b07      	ldr	r3, [pc, #28]	@ (80079d4 <__assert_func+0x30>)
 80079b6:	461c      	mov	r4, r3
 80079b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079bc:	9100      	str	r1, [sp, #0]
 80079be:	462b      	mov	r3, r5
 80079c0:	4905      	ldr	r1, [pc, #20]	@ (80079d8 <__assert_func+0x34>)
 80079c2:	f000 f9b9 	bl	8007d38 <fiprintf>
 80079c6:	f000 f9d9 	bl	8007d7c <abort>
 80079ca:	4b04      	ldr	r3, [pc, #16]	@ (80079dc <__assert_func+0x38>)
 80079cc:	e7f4      	b.n	80079b8 <__assert_func+0x14>
 80079ce:	bf00      	nop
 80079d0:	2000002c 	.word	0x2000002c
 80079d4:	08008862 	.word	0x08008862
 80079d8:	08008834 	.word	0x08008834
 80079dc:	08008827 	.word	0x08008827

080079e0 <_free_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4605      	mov	r5, r0
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d041      	beq.n	8007a6c <_free_r+0x8c>
 80079e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ec:	1f0c      	subs	r4, r1, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfb8      	it	lt
 80079f2:	18e4      	addlt	r4, r4, r3
 80079f4:	f000 f8e8 	bl	8007bc8 <__malloc_lock>
 80079f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a70 <_free_r+0x90>)
 80079fa:	6813      	ldr	r3, [r2, #0]
 80079fc:	b933      	cbnz	r3, 8007a0c <_free_r+0x2c>
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	6014      	str	r4, [r2, #0]
 8007a02:	4628      	mov	r0, r5
 8007a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a08:	f000 b8e4 	b.w	8007bd4 <__malloc_unlock>
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d908      	bls.n	8007a22 <_free_r+0x42>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	1821      	adds	r1, r4, r0
 8007a14:	428b      	cmp	r3, r1
 8007a16:	bf01      	itttt	eq
 8007a18:	6819      	ldreq	r1, [r3, #0]
 8007a1a:	685b      	ldreq	r3, [r3, #4]
 8007a1c:	1809      	addeq	r1, r1, r0
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	e7ed      	b.n	80079fe <_free_r+0x1e>
 8007a22:	461a      	mov	r2, r3
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	b10b      	cbz	r3, 8007a2c <_free_r+0x4c>
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	d9fa      	bls.n	8007a22 <_free_r+0x42>
 8007a2c:	6811      	ldr	r1, [r2, #0]
 8007a2e:	1850      	adds	r0, r2, r1
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d10b      	bne.n	8007a4c <_free_r+0x6c>
 8007a34:	6820      	ldr	r0, [r4, #0]
 8007a36:	4401      	add	r1, r0
 8007a38:	1850      	adds	r0, r2, r1
 8007a3a:	4283      	cmp	r3, r0
 8007a3c:	6011      	str	r1, [r2, #0]
 8007a3e:	d1e0      	bne.n	8007a02 <_free_r+0x22>
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	6053      	str	r3, [r2, #4]
 8007a46:	4408      	add	r0, r1
 8007a48:	6010      	str	r0, [r2, #0]
 8007a4a:	e7da      	b.n	8007a02 <_free_r+0x22>
 8007a4c:	d902      	bls.n	8007a54 <_free_r+0x74>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	e7d6      	b.n	8007a02 <_free_r+0x22>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	1821      	adds	r1, r4, r0
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	bf04      	itt	eq
 8007a5c:	6819      	ldreq	r1, [r3, #0]
 8007a5e:	685b      	ldreq	r3, [r3, #4]
 8007a60:	6063      	str	r3, [r4, #4]
 8007a62:	bf04      	itt	eq
 8007a64:	1809      	addeq	r1, r1, r0
 8007a66:	6021      	streq	r1, [r4, #0]
 8007a68:	6054      	str	r4, [r2, #4]
 8007a6a:	e7ca      	b.n	8007a02 <_free_r+0x22>
 8007a6c:	bd38      	pop	{r3, r4, r5, pc}
 8007a6e:	bf00      	nop
 8007a70:	20019a9c 	.word	0x20019a9c

08007a74 <malloc>:
 8007a74:	4b02      	ldr	r3, [pc, #8]	@ (8007a80 <malloc+0xc>)
 8007a76:	4601      	mov	r1, r0
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f000 b825 	b.w	8007ac8 <_malloc_r>
 8007a7e:	bf00      	nop
 8007a80:	2000002c 	.word	0x2000002c

08007a84 <sbrk_aligned>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4e0f      	ldr	r6, [pc, #60]	@ (8007ac4 <sbrk_aligned+0x40>)
 8007a88:	460c      	mov	r4, r1
 8007a8a:	6831      	ldr	r1, [r6, #0]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	b911      	cbnz	r1, 8007a96 <sbrk_aligned+0x12>
 8007a90:	f000 f964 	bl	8007d5c <_sbrk_r>
 8007a94:	6030      	str	r0, [r6, #0]
 8007a96:	4621      	mov	r1, r4
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 f95f 	bl	8007d5c <_sbrk_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	d103      	bne.n	8007aaa <sbrk_aligned+0x26>
 8007aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}
 8007aaa:	1cc4      	adds	r4, r0, #3
 8007aac:	f024 0403 	bic.w	r4, r4, #3
 8007ab0:	42a0      	cmp	r0, r4
 8007ab2:	d0f8      	beq.n	8007aa6 <sbrk_aligned+0x22>
 8007ab4:	1a21      	subs	r1, r4, r0
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 f950 	bl	8007d5c <_sbrk_r>
 8007abc:	3001      	adds	r0, #1
 8007abe:	d1f2      	bne.n	8007aa6 <sbrk_aligned+0x22>
 8007ac0:	e7ef      	b.n	8007aa2 <sbrk_aligned+0x1e>
 8007ac2:	bf00      	nop
 8007ac4:	20019a98 	.word	0x20019a98

08007ac8 <_malloc_r>:
 8007ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	1ccd      	adds	r5, r1, #3
 8007ace:	f025 0503 	bic.w	r5, r5, #3
 8007ad2:	3508      	adds	r5, #8
 8007ad4:	2d0c      	cmp	r5, #12
 8007ad6:	bf38      	it	cc
 8007ad8:	250c      	movcc	r5, #12
 8007ada:	2d00      	cmp	r5, #0
 8007adc:	4606      	mov	r6, r0
 8007ade:	db01      	blt.n	8007ae4 <_malloc_r+0x1c>
 8007ae0:	42a9      	cmp	r1, r5
 8007ae2:	d904      	bls.n	8007aee <_malloc_r+0x26>
 8007ae4:	230c      	movs	r3, #12
 8007ae6:	6033      	str	r3, [r6, #0]
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bc4 <_malloc_r+0xfc>
 8007af2:	f000 f869 	bl	8007bc8 <__malloc_lock>
 8007af6:	f8d8 3000 	ldr.w	r3, [r8]
 8007afa:	461c      	mov	r4, r3
 8007afc:	bb44      	cbnz	r4, 8007b50 <_malloc_r+0x88>
 8007afe:	4629      	mov	r1, r5
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7ff ffbf 	bl	8007a84 <sbrk_aligned>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	4604      	mov	r4, r0
 8007b0a:	d158      	bne.n	8007bbe <_malloc_r+0xf6>
 8007b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b10:	4627      	mov	r7, r4
 8007b12:	2f00      	cmp	r7, #0
 8007b14:	d143      	bne.n	8007b9e <_malloc_r+0xd6>
 8007b16:	2c00      	cmp	r4, #0
 8007b18:	d04b      	beq.n	8007bb2 <_malloc_r+0xea>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	4630      	mov	r0, r6
 8007b20:	eb04 0903 	add.w	r9, r4, r3
 8007b24:	f000 f91a 	bl	8007d5c <_sbrk_r>
 8007b28:	4581      	cmp	r9, r0
 8007b2a:	d142      	bne.n	8007bb2 <_malloc_r+0xea>
 8007b2c:	6821      	ldr	r1, [r4, #0]
 8007b2e:	1a6d      	subs	r5, r5, r1
 8007b30:	4629      	mov	r1, r5
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7ff ffa6 	bl	8007a84 <sbrk_aligned>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d03a      	beq.n	8007bb2 <_malloc_r+0xea>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	442b      	add	r3, r5
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	f8d8 3000 	ldr.w	r3, [r8]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	bb62      	cbnz	r2, 8007ba4 <_malloc_r+0xdc>
 8007b4a:	f8c8 7000 	str.w	r7, [r8]
 8007b4e:	e00f      	b.n	8007b70 <_malloc_r+0xa8>
 8007b50:	6822      	ldr	r2, [r4, #0]
 8007b52:	1b52      	subs	r2, r2, r5
 8007b54:	d420      	bmi.n	8007b98 <_malloc_r+0xd0>
 8007b56:	2a0b      	cmp	r2, #11
 8007b58:	d917      	bls.n	8007b8a <_malloc_r+0xc2>
 8007b5a:	1961      	adds	r1, r4, r5
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	6025      	str	r5, [r4, #0]
 8007b60:	bf18      	it	ne
 8007b62:	6059      	strne	r1, [r3, #4]
 8007b64:	6863      	ldr	r3, [r4, #4]
 8007b66:	bf08      	it	eq
 8007b68:	f8c8 1000 	streq.w	r1, [r8]
 8007b6c:	5162      	str	r2, [r4, r5]
 8007b6e:	604b      	str	r3, [r1, #4]
 8007b70:	4630      	mov	r0, r6
 8007b72:	f000 f82f 	bl	8007bd4 <__malloc_unlock>
 8007b76:	f104 000b 	add.w	r0, r4, #11
 8007b7a:	1d23      	adds	r3, r4, #4
 8007b7c:	f020 0007 	bic.w	r0, r0, #7
 8007b80:	1ac2      	subs	r2, r0, r3
 8007b82:	bf1c      	itt	ne
 8007b84:	1a1b      	subne	r3, r3, r0
 8007b86:	50a3      	strne	r3, [r4, r2]
 8007b88:	e7af      	b.n	8007aea <_malloc_r+0x22>
 8007b8a:	6862      	ldr	r2, [r4, #4]
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	bf0c      	ite	eq
 8007b90:	f8c8 2000 	streq.w	r2, [r8]
 8007b94:	605a      	strne	r2, [r3, #4]
 8007b96:	e7eb      	b.n	8007b70 <_malloc_r+0xa8>
 8007b98:	4623      	mov	r3, r4
 8007b9a:	6864      	ldr	r4, [r4, #4]
 8007b9c:	e7ae      	b.n	8007afc <_malloc_r+0x34>
 8007b9e:	463c      	mov	r4, r7
 8007ba0:	687f      	ldr	r7, [r7, #4]
 8007ba2:	e7b6      	b.n	8007b12 <_malloc_r+0x4a>
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d1fb      	bne.n	8007ba4 <_malloc_r+0xdc>
 8007bac:	2300      	movs	r3, #0
 8007bae:	6053      	str	r3, [r2, #4]
 8007bb0:	e7de      	b.n	8007b70 <_malloc_r+0xa8>
 8007bb2:	230c      	movs	r3, #12
 8007bb4:	6033      	str	r3, [r6, #0]
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f000 f80c 	bl	8007bd4 <__malloc_unlock>
 8007bbc:	e794      	b.n	8007ae8 <_malloc_r+0x20>
 8007bbe:	6005      	str	r5, [r0, #0]
 8007bc0:	e7d6      	b.n	8007b70 <_malloc_r+0xa8>
 8007bc2:	bf00      	nop
 8007bc4:	20019a9c 	.word	0x20019a9c

08007bc8 <__malloc_lock>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	@ (8007bd0 <__malloc_lock+0x8>)
 8007bca:	f7ff beda 	b.w	8007982 <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20019a94 	.word	0x20019a94

08007bd4 <__malloc_unlock>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	@ (8007bdc <__malloc_unlock+0x8>)
 8007bd6:	f7ff bed5 	b.w	8007984 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20019a94 	.word	0x20019a94

08007be0 <__sflush_r>:
 8007be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	0716      	lsls	r6, r2, #28
 8007bea:	4605      	mov	r5, r0
 8007bec:	460c      	mov	r4, r1
 8007bee:	d454      	bmi.n	8007c9a <__sflush_r+0xba>
 8007bf0:	684b      	ldr	r3, [r1, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dc02      	bgt.n	8007bfc <__sflush_r+0x1c>
 8007bf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dd48      	ble.n	8007c8e <__sflush_r+0xae>
 8007bfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bfe:	2e00      	cmp	r6, #0
 8007c00:	d045      	beq.n	8007c8e <__sflush_r+0xae>
 8007c02:	2300      	movs	r3, #0
 8007c04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c08:	682f      	ldr	r7, [r5, #0]
 8007c0a:	6a21      	ldr	r1, [r4, #32]
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	d030      	beq.n	8007c72 <__sflush_r+0x92>
 8007c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	0759      	lsls	r1, r3, #29
 8007c16:	d505      	bpl.n	8007c24 <__sflush_r+0x44>
 8007c18:	6863      	ldr	r3, [r4, #4]
 8007c1a:	1ad2      	subs	r2, r2, r3
 8007c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c1e:	b10b      	cbz	r3, 8007c24 <__sflush_r+0x44>
 8007c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	2300      	movs	r3, #0
 8007c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c28:	6a21      	ldr	r1, [r4, #32]
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b0      	blx	r6
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	d106      	bne.n	8007c42 <__sflush_r+0x62>
 8007c34:	6829      	ldr	r1, [r5, #0]
 8007c36:	291d      	cmp	r1, #29
 8007c38:	d82b      	bhi.n	8007c92 <__sflush_r+0xb2>
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce4 <__sflush_r+0x104>)
 8007c3c:	410a      	asrs	r2, r1
 8007c3e:	07d6      	lsls	r6, r2, #31
 8007c40:	d427      	bmi.n	8007c92 <__sflush_r+0xb2>
 8007c42:	2200      	movs	r2, #0
 8007c44:	6062      	str	r2, [r4, #4]
 8007c46:	04d9      	lsls	r1, r3, #19
 8007c48:	6922      	ldr	r2, [r4, #16]
 8007c4a:	6022      	str	r2, [r4, #0]
 8007c4c:	d504      	bpl.n	8007c58 <__sflush_r+0x78>
 8007c4e:	1c42      	adds	r2, r0, #1
 8007c50:	d101      	bne.n	8007c56 <__sflush_r+0x76>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	b903      	cbnz	r3, 8007c58 <__sflush_r+0x78>
 8007c56:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c5a:	602f      	str	r7, [r5, #0]
 8007c5c:	b1b9      	cbz	r1, 8007c8e <__sflush_r+0xae>
 8007c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c62:	4299      	cmp	r1, r3
 8007c64:	d002      	beq.n	8007c6c <__sflush_r+0x8c>
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7ff feba 	bl	80079e0 <_free_r>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c70:	e00d      	b.n	8007c8e <__sflush_r+0xae>
 8007c72:	2301      	movs	r3, #1
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b0      	blx	r6
 8007c78:	4602      	mov	r2, r0
 8007c7a:	1c50      	adds	r0, r2, #1
 8007c7c:	d1c9      	bne.n	8007c12 <__sflush_r+0x32>
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0c6      	beq.n	8007c12 <__sflush_r+0x32>
 8007c84:	2b1d      	cmp	r3, #29
 8007c86:	d001      	beq.n	8007c8c <__sflush_r+0xac>
 8007c88:	2b16      	cmp	r3, #22
 8007c8a:	d11e      	bne.n	8007cca <__sflush_r+0xea>
 8007c8c:	602f      	str	r7, [r5, #0]
 8007c8e:	2000      	movs	r0, #0
 8007c90:	e022      	b.n	8007cd8 <__sflush_r+0xf8>
 8007c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c96:	b21b      	sxth	r3, r3
 8007c98:	e01b      	b.n	8007cd2 <__sflush_r+0xf2>
 8007c9a:	690f      	ldr	r7, [r1, #16]
 8007c9c:	2f00      	cmp	r7, #0
 8007c9e:	d0f6      	beq.n	8007c8e <__sflush_r+0xae>
 8007ca0:	0793      	lsls	r3, r2, #30
 8007ca2:	680e      	ldr	r6, [r1, #0]
 8007ca4:	bf08      	it	eq
 8007ca6:	694b      	ldreq	r3, [r1, #20]
 8007ca8:	600f      	str	r7, [r1, #0]
 8007caa:	bf18      	it	ne
 8007cac:	2300      	movne	r3, #0
 8007cae:	eba6 0807 	sub.w	r8, r6, r7
 8007cb2:	608b      	str	r3, [r1, #8]
 8007cb4:	f1b8 0f00 	cmp.w	r8, #0
 8007cb8:	dde9      	ble.n	8007c8e <__sflush_r+0xae>
 8007cba:	6a21      	ldr	r1, [r4, #32]
 8007cbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cbe:	4643      	mov	r3, r8
 8007cc0:	463a      	mov	r2, r7
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b0      	blx	r6
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	dc08      	bgt.n	8007cdc <__sflush_r+0xfc>
 8007cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cdc:	4407      	add	r7, r0
 8007cde:	eba8 0800 	sub.w	r8, r8, r0
 8007ce2:	e7e7      	b.n	8007cb4 <__sflush_r+0xd4>
 8007ce4:	dfbffffe 	.word	0xdfbffffe

08007ce8 <_fflush_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	690b      	ldr	r3, [r1, #16]
 8007cec:	4605      	mov	r5, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	b913      	cbnz	r3, 8007cf8 <_fflush_r+0x10>
 8007cf2:	2500      	movs	r5, #0
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	b118      	cbz	r0, 8007d02 <_fflush_r+0x1a>
 8007cfa:	6a03      	ldr	r3, [r0, #32]
 8007cfc:	b90b      	cbnz	r3, 8007d02 <_fflush_r+0x1a>
 8007cfe:	f7ff fd4f 	bl	80077a0 <__sinit>
 8007d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f3      	beq.n	8007cf2 <_fflush_r+0xa>
 8007d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d0c:	07d0      	lsls	r0, r2, #31
 8007d0e:	d404      	bmi.n	8007d1a <_fflush_r+0x32>
 8007d10:	0599      	lsls	r1, r3, #22
 8007d12:	d402      	bmi.n	8007d1a <_fflush_r+0x32>
 8007d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d16:	f7ff fe34 	bl	8007982 <__retarget_lock_acquire_recursive>
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	f7ff ff5f 	bl	8007be0 <__sflush_r>
 8007d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d24:	07da      	lsls	r2, r3, #31
 8007d26:	4605      	mov	r5, r0
 8007d28:	d4e4      	bmi.n	8007cf4 <_fflush_r+0xc>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	059b      	lsls	r3, r3, #22
 8007d2e:	d4e1      	bmi.n	8007cf4 <_fflush_r+0xc>
 8007d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d32:	f7ff fe27 	bl	8007984 <__retarget_lock_release_recursive>
 8007d36:	e7dd      	b.n	8007cf4 <_fflush_r+0xc>

08007d38 <fiprintf>:
 8007d38:	b40e      	push	{r1, r2, r3}
 8007d3a:	b503      	push	{r0, r1, lr}
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	ab03      	add	r3, sp, #12
 8007d40:	4805      	ldr	r0, [pc, #20]	@ (8007d58 <fiprintf+0x20>)
 8007d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d46:	6800      	ldr	r0, [r0, #0]
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	f000 f847 	bl	8007ddc <_vfiprintf_r>
 8007d4e:	b002      	add	sp, #8
 8007d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d54:	b003      	add	sp, #12
 8007d56:	4770      	bx	lr
 8007d58:	2000002c 	.word	0x2000002c

08007d5c <_sbrk_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	@ (8007d78 <_sbrk_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f8 fff0 	bl	8000d4c <_sbrk>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_sbrk_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_sbrk_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20019a90 	.word	0x20019a90

08007d7c <abort>:
 8007d7c:	b508      	push	{r3, lr}
 8007d7e:	2006      	movs	r0, #6
 8007d80:	f000 fb8e 	bl	80084a0 <raise>
 8007d84:	2001      	movs	r0, #1
 8007d86:	f7f8 ff85 	bl	8000c94 <_exit>

08007d8a <__sfputc_r>:
 8007d8a:	6893      	ldr	r3, [r2, #8]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	b410      	push	{r4}
 8007d92:	6093      	str	r3, [r2, #8]
 8007d94:	da08      	bge.n	8007da8 <__sfputc_r+0x1e>
 8007d96:	6994      	ldr	r4, [r2, #24]
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	db01      	blt.n	8007da0 <__sfputc_r+0x16>
 8007d9c:	290a      	cmp	r1, #10
 8007d9e:	d103      	bne.n	8007da8 <__sfputc_r+0x1e>
 8007da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da4:	f000 bac0 	b.w	8008328 <__swbuf_r>
 8007da8:	6813      	ldr	r3, [r2, #0]
 8007daa:	1c58      	adds	r0, r3, #1
 8007dac:	6010      	str	r0, [r2, #0]
 8007dae:	7019      	strb	r1, [r3, #0]
 8007db0:	4608      	mov	r0, r1
 8007db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <__sfputs_r>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	18d5      	adds	r5, r2, r3
 8007dc2:	42ac      	cmp	r4, r5
 8007dc4:	d101      	bne.n	8007dca <__sfputs_r+0x12>
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	e007      	b.n	8007dda <__sfputs_r+0x22>
 8007dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dce:	463a      	mov	r2, r7
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff ffda 	bl	8007d8a <__sfputc_r>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	d1f3      	bne.n	8007dc2 <__sfputs_r+0xa>
 8007dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ddc <_vfiprintf_r>:
 8007ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	460d      	mov	r5, r1
 8007de2:	b09d      	sub	sp, #116	@ 0x74
 8007de4:	4614      	mov	r4, r2
 8007de6:	4698      	mov	r8, r3
 8007de8:	4606      	mov	r6, r0
 8007dea:	b118      	cbz	r0, 8007df4 <_vfiprintf_r+0x18>
 8007dec:	6a03      	ldr	r3, [r0, #32]
 8007dee:	b90b      	cbnz	r3, 8007df4 <_vfiprintf_r+0x18>
 8007df0:	f7ff fcd6 	bl	80077a0 <__sinit>
 8007df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007df6:	07d9      	lsls	r1, r3, #31
 8007df8:	d405      	bmi.n	8007e06 <_vfiprintf_r+0x2a>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	059a      	lsls	r2, r3, #22
 8007dfe:	d402      	bmi.n	8007e06 <_vfiprintf_r+0x2a>
 8007e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e02:	f7ff fdbe 	bl	8007982 <__retarget_lock_acquire_recursive>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	071b      	lsls	r3, r3, #28
 8007e0a:	d501      	bpl.n	8007e10 <_vfiprintf_r+0x34>
 8007e0c:	692b      	ldr	r3, [r5, #16]
 8007e0e:	b99b      	cbnz	r3, 8007e38 <_vfiprintf_r+0x5c>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f000 fac6 	bl	80083a4 <__swsetup_r>
 8007e18:	b170      	cbz	r0, 8007e38 <_vfiprintf_r+0x5c>
 8007e1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e1c:	07dc      	lsls	r4, r3, #31
 8007e1e:	d504      	bpl.n	8007e2a <_vfiprintf_r+0x4e>
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	b01d      	add	sp, #116	@ 0x74
 8007e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2a:	89ab      	ldrh	r3, [r5, #12]
 8007e2c:	0598      	lsls	r0, r3, #22
 8007e2e:	d4f7      	bmi.n	8007e20 <_vfiprintf_r+0x44>
 8007e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e32:	f7ff fda7 	bl	8007984 <__retarget_lock_release_recursive>
 8007e36:	e7f3      	b.n	8007e20 <_vfiprintf_r+0x44>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e46:	2330      	movs	r3, #48	@ 0x30
 8007e48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ff8 <_vfiprintf_r+0x21c>
 8007e4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e50:	f04f 0901 	mov.w	r9, #1
 8007e54:	4623      	mov	r3, r4
 8007e56:	469a      	mov	sl, r3
 8007e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e5c:	b10a      	cbz	r2, 8007e62 <_vfiprintf_r+0x86>
 8007e5e:	2a25      	cmp	r2, #37	@ 0x25
 8007e60:	d1f9      	bne.n	8007e56 <_vfiprintf_r+0x7a>
 8007e62:	ebba 0b04 	subs.w	fp, sl, r4
 8007e66:	d00b      	beq.n	8007e80 <_vfiprintf_r+0xa4>
 8007e68:	465b      	mov	r3, fp
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ffa2 	bl	8007db8 <__sfputs_r>
 8007e74:	3001      	adds	r0, #1
 8007e76:	f000 80a7 	beq.w	8007fc8 <_vfiprintf_r+0x1ec>
 8007e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e7c:	445a      	add	r2, fp
 8007e7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e80:	f89a 3000 	ldrb.w	r3, [sl]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 809f 	beq.w	8007fc8 <_vfiprintf_r+0x1ec>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e94:	f10a 0a01 	add.w	sl, sl, #1
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	9307      	str	r3, [sp, #28]
 8007e9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ea0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ea2:	4654      	mov	r4, sl
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eaa:	4853      	ldr	r0, [pc, #332]	@ (8007ff8 <_vfiprintf_r+0x21c>)
 8007eac:	f7f8 f9e0 	bl	8000270 <memchr>
 8007eb0:	9a04      	ldr	r2, [sp, #16]
 8007eb2:	b9d8      	cbnz	r0, 8007eec <_vfiprintf_r+0x110>
 8007eb4:	06d1      	lsls	r1, r2, #27
 8007eb6:	bf44      	itt	mi
 8007eb8:	2320      	movmi	r3, #32
 8007eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ebe:	0713      	lsls	r3, r2, #28
 8007ec0:	bf44      	itt	mi
 8007ec2:	232b      	movmi	r3, #43	@ 0x2b
 8007ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ece:	d015      	beq.n	8007efc <_vfiprintf_r+0x120>
 8007ed0:	9a07      	ldr	r2, [sp, #28]
 8007ed2:	4654      	mov	r4, sl
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f04f 0c0a 	mov.w	ip, #10
 8007eda:	4621      	mov	r1, r4
 8007edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee0:	3b30      	subs	r3, #48	@ 0x30
 8007ee2:	2b09      	cmp	r3, #9
 8007ee4:	d94b      	bls.n	8007f7e <_vfiprintf_r+0x1a2>
 8007ee6:	b1b0      	cbz	r0, 8007f16 <_vfiprintf_r+0x13a>
 8007ee8:	9207      	str	r2, [sp, #28]
 8007eea:	e014      	b.n	8007f16 <_vfiprintf_r+0x13a>
 8007eec:	eba0 0308 	sub.w	r3, r0, r8
 8007ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	46a2      	mov	sl, r4
 8007efa:	e7d2      	b.n	8007ea2 <_vfiprintf_r+0xc6>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	1d19      	adds	r1, r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	9103      	str	r1, [sp, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	bfbb      	ittet	lt
 8007f08:	425b      	neglt	r3, r3
 8007f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f0e:	9307      	strge	r3, [sp, #28]
 8007f10:	9307      	strlt	r3, [sp, #28]
 8007f12:	bfb8      	it	lt
 8007f14:	9204      	strlt	r2, [sp, #16]
 8007f16:	7823      	ldrb	r3, [r4, #0]
 8007f18:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f1a:	d10a      	bne.n	8007f32 <_vfiprintf_r+0x156>
 8007f1c:	7863      	ldrb	r3, [r4, #1]
 8007f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f20:	d132      	bne.n	8007f88 <_vfiprintf_r+0x1ac>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	1d1a      	adds	r2, r3, #4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	9203      	str	r2, [sp, #12]
 8007f2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f2e:	3402      	adds	r4, #2
 8007f30:	9305      	str	r3, [sp, #20]
 8007f32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008008 <_vfiprintf_r+0x22c>
 8007f36:	7821      	ldrb	r1, [r4, #0]
 8007f38:	2203      	movs	r2, #3
 8007f3a:	4650      	mov	r0, sl
 8007f3c:	f7f8 f998 	bl	8000270 <memchr>
 8007f40:	b138      	cbz	r0, 8007f52 <_vfiprintf_r+0x176>
 8007f42:	9b04      	ldr	r3, [sp, #16]
 8007f44:	eba0 000a 	sub.w	r0, r0, sl
 8007f48:	2240      	movs	r2, #64	@ 0x40
 8007f4a:	4082      	lsls	r2, r0
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	3401      	adds	r4, #1
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f56:	4829      	ldr	r0, [pc, #164]	@ (8007ffc <_vfiprintf_r+0x220>)
 8007f58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f5c:	2206      	movs	r2, #6
 8007f5e:	f7f8 f987 	bl	8000270 <memchr>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d03f      	beq.n	8007fe6 <_vfiprintf_r+0x20a>
 8007f66:	4b26      	ldr	r3, [pc, #152]	@ (8008000 <_vfiprintf_r+0x224>)
 8007f68:	bb1b      	cbnz	r3, 8007fb2 <_vfiprintf_r+0x1d6>
 8007f6a:	9b03      	ldr	r3, [sp, #12]
 8007f6c:	3307      	adds	r3, #7
 8007f6e:	f023 0307 	bic.w	r3, r3, #7
 8007f72:	3308      	adds	r3, #8
 8007f74:	9303      	str	r3, [sp, #12]
 8007f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f78:	443b      	add	r3, r7
 8007f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f7c:	e76a      	b.n	8007e54 <_vfiprintf_r+0x78>
 8007f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f82:	460c      	mov	r4, r1
 8007f84:	2001      	movs	r0, #1
 8007f86:	e7a8      	b.n	8007eda <_vfiprintf_r+0xfe>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	3401      	adds	r4, #1
 8007f8c:	9305      	str	r3, [sp, #20]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	f04f 0c0a 	mov.w	ip, #10
 8007f94:	4620      	mov	r0, r4
 8007f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f9a:	3a30      	subs	r2, #48	@ 0x30
 8007f9c:	2a09      	cmp	r2, #9
 8007f9e:	d903      	bls.n	8007fa8 <_vfiprintf_r+0x1cc>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0c6      	beq.n	8007f32 <_vfiprintf_r+0x156>
 8007fa4:	9105      	str	r1, [sp, #20]
 8007fa6:	e7c4      	b.n	8007f32 <_vfiprintf_r+0x156>
 8007fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fac:	4604      	mov	r4, r0
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7f0      	b.n	8007f94 <_vfiprintf_r+0x1b8>
 8007fb2:	ab03      	add	r3, sp, #12
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	462a      	mov	r2, r5
 8007fb8:	4b12      	ldr	r3, [pc, #72]	@ (8008004 <_vfiprintf_r+0x228>)
 8007fba:	a904      	add	r1, sp, #16
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f3af 8000 	nop.w
 8007fc2:	4607      	mov	r7, r0
 8007fc4:	1c78      	adds	r0, r7, #1
 8007fc6:	d1d6      	bne.n	8007f76 <_vfiprintf_r+0x19a>
 8007fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fca:	07d9      	lsls	r1, r3, #31
 8007fcc:	d405      	bmi.n	8007fda <_vfiprintf_r+0x1fe>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	059a      	lsls	r2, r3, #22
 8007fd2:	d402      	bmi.n	8007fda <_vfiprintf_r+0x1fe>
 8007fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fd6:	f7ff fcd5 	bl	8007984 <__retarget_lock_release_recursive>
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	065b      	lsls	r3, r3, #25
 8007fde:	f53f af1f 	bmi.w	8007e20 <_vfiprintf_r+0x44>
 8007fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fe4:	e71e      	b.n	8007e24 <_vfiprintf_r+0x48>
 8007fe6:	ab03      	add	r3, sp, #12
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	462a      	mov	r2, r5
 8007fec:	4b05      	ldr	r3, [pc, #20]	@ (8008004 <_vfiprintf_r+0x228>)
 8007fee:	a904      	add	r1, sp, #16
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f879 	bl	80080e8 <_printf_i>
 8007ff6:	e7e4      	b.n	8007fc2 <_vfiprintf_r+0x1e6>
 8007ff8:	08008863 	.word	0x08008863
 8007ffc:	0800886d 	.word	0x0800886d
 8008000:	00000000 	.word	0x00000000
 8008004:	08007db9 	.word	0x08007db9
 8008008:	08008869 	.word	0x08008869

0800800c <_printf_common>:
 800800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	4616      	mov	r6, r2
 8008012:	4698      	mov	r8, r3
 8008014:	688a      	ldr	r2, [r1, #8]
 8008016:	690b      	ldr	r3, [r1, #16]
 8008018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800801c:	4293      	cmp	r3, r2
 800801e:	bfb8      	it	lt
 8008020:	4613      	movlt	r3, r2
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008028:	4607      	mov	r7, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b10a      	cbz	r2, 8008032 <_printf_common+0x26>
 800802e:	3301      	adds	r3, #1
 8008030:	6033      	str	r3, [r6, #0]
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	0699      	lsls	r1, r3, #26
 8008036:	bf42      	ittt	mi
 8008038:	6833      	ldrmi	r3, [r6, #0]
 800803a:	3302      	addmi	r3, #2
 800803c:	6033      	strmi	r3, [r6, #0]
 800803e:	6825      	ldr	r5, [r4, #0]
 8008040:	f015 0506 	ands.w	r5, r5, #6
 8008044:	d106      	bne.n	8008054 <_printf_common+0x48>
 8008046:	f104 0a19 	add.w	sl, r4, #25
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	6832      	ldr	r2, [r6, #0]
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	42ab      	cmp	r3, r5
 8008052:	dc26      	bgt.n	80080a2 <_printf_common+0x96>
 8008054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008058:	6822      	ldr	r2, [r4, #0]
 800805a:	3b00      	subs	r3, #0
 800805c:	bf18      	it	ne
 800805e:	2301      	movne	r3, #1
 8008060:	0692      	lsls	r2, r2, #26
 8008062:	d42b      	bmi.n	80080bc <_printf_common+0xb0>
 8008064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008068:	4641      	mov	r1, r8
 800806a:	4638      	mov	r0, r7
 800806c:	47c8      	blx	r9
 800806e:	3001      	adds	r0, #1
 8008070:	d01e      	beq.n	80080b0 <_printf_common+0xa4>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	6922      	ldr	r2, [r4, #16]
 8008076:	f003 0306 	and.w	r3, r3, #6
 800807a:	2b04      	cmp	r3, #4
 800807c:	bf02      	ittt	eq
 800807e:	68e5      	ldreq	r5, [r4, #12]
 8008080:	6833      	ldreq	r3, [r6, #0]
 8008082:	1aed      	subeq	r5, r5, r3
 8008084:	68a3      	ldr	r3, [r4, #8]
 8008086:	bf0c      	ite	eq
 8008088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800808c:	2500      	movne	r5, #0
 800808e:	4293      	cmp	r3, r2
 8008090:	bfc4      	itt	gt
 8008092:	1a9b      	subgt	r3, r3, r2
 8008094:	18ed      	addgt	r5, r5, r3
 8008096:	2600      	movs	r6, #0
 8008098:	341a      	adds	r4, #26
 800809a:	42b5      	cmp	r5, r6
 800809c:	d11a      	bne.n	80080d4 <_printf_common+0xc8>
 800809e:	2000      	movs	r0, #0
 80080a0:	e008      	b.n	80080b4 <_printf_common+0xa8>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4652      	mov	r2, sl
 80080a6:	4641      	mov	r1, r8
 80080a8:	4638      	mov	r0, r7
 80080aa:	47c8      	blx	r9
 80080ac:	3001      	adds	r0, #1
 80080ae:	d103      	bne.n	80080b8 <_printf_common+0xac>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b8:	3501      	adds	r5, #1
 80080ba:	e7c6      	b.n	800804a <_printf_common+0x3e>
 80080bc:	18e1      	adds	r1, r4, r3
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	2030      	movs	r0, #48	@ 0x30
 80080c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080c6:	4422      	add	r2, r4
 80080c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080d0:	3302      	adds	r3, #2
 80080d2:	e7c7      	b.n	8008064 <_printf_common+0x58>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4622      	mov	r2, r4
 80080d8:	4641      	mov	r1, r8
 80080da:	4638      	mov	r0, r7
 80080dc:	47c8      	blx	r9
 80080de:	3001      	adds	r0, #1
 80080e0:	d0e6      	beq.n	80080b0 <_printf_common+0xa4>
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7d9      	b.n	800809a <_printf_common+0x8e>
	...

080080e8 <_printf_i>:
 80080e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	7e0f      	ldrb	r7, [r1, #24]
 80080ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080f0:	2f78      	cmp	r7, #120	@ 0x78
 80080f2:	4691      	mov	r9, r2
 80080f4:	4680      	mov	r8, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	469a      	mov	sl, r3
 80080fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080fe:	d807      	bhi.n	8008110 <_printf_i+0x28>
 8008100:	2f62      	cmp	r7, #98	@ 0x62
 8008102:	d80a      	bhi.n	800811a <_printf_i+0x32>
 8008104:	2f00      	cmp	r7, #0
 8008106:	f000 80d2 	beq.w	80082ae <_printf_i+0x1c6>
 800810a:	2f58      	cmp	r7, #88	@ 0x58
 800810c:	f000 80b9 	beq.w	8008282 <_printf_i+0x19a>
 8008110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008118:	e03a      	b.n	8008190 <_printf_i+0xa8>
 800811a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800811e:	2b15      	cmp	r3, #21
 8008120:	d8f6      	bhi.n	8008110 <_printf_i+0x28>
 8008122:	a101      	add	r1, pc, #4	@ (adr r1, 8008128 <_printf_i+0x40>)
 8008124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008128:	08008181 	.word	0x08008181
 800812c:	08008195 	.word	0x08008195
 8008130:	08008111 	.word	0x08008111
 8008134:	08008111 	.word	0x08008111
 8008138:	08008111 	.word	0x08008111
 800813c:	08008111 	.word	0x08008111
 8008140:	08008195 	.word	0x08008195
 8008144:	08008111 	.word	0x08008111
 8008148:	08008111 	.word	0x08008111
 800814c:	08008111 	.word	0x08008111
 8008150:	08008111 	.word	0x08008111
 8008154:	08008295 	.word	0x08008295
 8008158:	080081bf 	.word	0x080081bf
 800815c:	0800824f 	.word	0x0800824f
 8008160:	08008111 	.word	0x08008111
 8008164:	08008111 	.word	0x08008111
 8008168:	080082b7 	.word	0x080082b7
 800816c:	08008111 	.word	0x08008111
 8008170:	080081bf 	.word	0x080081bf
 8008174:	08008111 	.word	0x08008111
 8008178:	08008111 	.word	0x08008111
 800817c:	08008257 	.word	0x08008257
 8008180:	6833      	ldr	r3, [r6, #0]
 8008182:	1d1a      	adds	r2, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6032      	str	r2, [r6, #0]
 8008188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800818c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008190:	2301      	movs	r3, #1
 8008192:	e09d      	b.n	80082d0 <_printf_i+0x1e8>
 8008194:	6833      	ldr	r3, [r6, #0]
 8008196:	6820      	ldr	r0, [r4, #0]
 8008198:	1d19      	adds	r1, r3, #4
 800819a:	6031      	str	r1, [r6, #0]
 800819c:	0606      	lsls	r6, r0, #24
 800819e:	d501      	bpl.n	80081a4 <_printf_i+0xbc>
 80081a0:	681d      	ldr	r5, [r3, #0]
 80081a2:	e003      	b.n	80081ac <_printf_i+0xc4>
 80081a4:	0645      	lsls	r5, r0, #25
 80081a6:	d5fb      	bpl.n	80081a0 <_printf_i+0xb8>
 80081a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	da03      	bge.n	80081b8 <_printf_i+0xd0>
 80081b0:	232d      	movs	r3, #45	@ 0x2d
 80081b2:	426d      	negs	r5, r5
 80081b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081b8:	4859      	ldr	r0, [pc, #356]	@ (8008320 <_printf_i+0x238>)
 80081ba:	230a      	movs	r3, #10
 80081bc:	e011      	b.n	80081e2 <_printf_i+0xfa>
 80081be:	6821      	ldr	r1, [r4, #0]
 80081c0:	6833      	ldr	r3, [r6, #0]
 80081c2:	0608      	lsls	r0, r1, #24
 80081c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80081c8:	d402      	bmi.n	80081d0 <_printf_i+0xe8>
 80081ca:	0649      	lsls	r1, r1, #25
 80081cc:	bf48      	it	mi
 80081ce:	b2ad      	uxthmi	r5, r5
 80081d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80081d2:	4853      	ldr	r0, [pc, #332]	@ (8008320 <_printf_i+0x238>)
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	bf14      	ite	ne
 80081d8:	230a      	movne	r3, #10
 80081da:	2308      	moveq	r3, #8
 80081dc:	2100      	movs	r1, #0
 80081de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081e2:	6866      	ldr	r6, [r4, #4]
 80081e4:	60a6      	str	r6, [r4, #8]
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	bfa2      	ittt	ge
 80081ea:	6821      	ldrge	r1, [r4, #0]
 80081ec:	f021 0104 	bicge.w	r1, r1, #4
 80081f0:	6021      	strge	r1, [r4, #0]
 80081f2:	b90d      	cbnz	r5, 80081f8 <_printf_i+0x110>
 80081f4:	2e00      	cmp	r6, #0
 80081f6:	d04b      	beq.n	8008290 <_printf_i+0x1a8>
 80081f8:	4616      	mov	r6, r2
 80081fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80081fe:	fb03 5711 	mls	r7, r3, r1, r5
 8008202:	5dc7      	ldrb	r7, [r0, r7]
 8008204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008208:	462f      	mov	r7, r5
 800820a:	42bb      	cmp	r3, r7
 800820c:	460d      	mov	r5, r1
 800820e:	d9f4      	bls.n	80081fa <_printf_i+0x112>
 8008210:	2b08      	cmp	r3, #8
 8008212:	d10b      	bne.n	800822c <_printf_i+0x144>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	07df      	lsls	r7, r3, #31
 8008218:	d508      	bpl.n	800822c <_printf_i+0x144>
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	6861      	ldr	r1, [r4, #4]
 800821e:	4299      	cmp	r1, r3
 8008220:	bfde      	ittt	le
 8008222:	2330      	movle	r3, #48	@ 0x30
 8008224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008228:	f106 36ff 	addle.w	r6, r6, #4294967295
 800822c:	1b92      	subs	r2, r2, r6
 800822e:	6122      	str	r2, [r4, #16]
 8008230:	f8cd a000 	str.w	sl, [sp]
 8008234:	464b      	mov	r3, r9
 8008236:	aa03      	add	r2, sp, #12
 8008238:	4621      	mov	r1, r4
 800823a:	4640      	mov	r0, r8
 800823c:	f7ff fee6 	bl	800800c <_printf_common>
 8008240:	3001      	adds	r0, #1
 8008242:	d14a      	bne.n	80082da <_printf_i+0x1f2>
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	b004      	add	sp, #16
 800824a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	f043 0320 	orr.w	r3, r3, #32
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	4833      	ldr	r0, [pc, #204]	@ (8008324 <_printf_i+0x23c>)
 8008258:	2778      	movs	r7, #120	@ 0x78
 800825a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	6831      	ldr	r1, [r6, #0]
 8008262:	061f      	lsls	r7, r3, #24
 8008264:	f851 5b04 	ldr.w	r5, [r1], #4
 8008268:	d402      	bmi.n	8008270 <_printf_i+0x188>
 800826a:	065f      	lsls	r7, r3, #25
 800826c:	bf48      	it	mi
 800826e:	b2ad      	uxthmi	r5, r5
 8008270:	6031      	str	r1, [r6, #0]
 8008272:	07d9      	lsls	r1, r3, #31
 8008274:	bf44      	itt	mi
 8008276:	f043 0320 	orrmi.w	r3, r3, #32
 800827a:	6023      	strmi	r3, [r4, #0]
 800827c:	b11d      	cbz	r5, 8008286 <_printf_i+0x19e>
 800827e:	2310      	movs	r3, #16
 8008280:	e7ac      	b.n	80081dc <_printf_i+0xf4>
 8008282:	4827      	ldr	r0, [pc, #156]	@ (8008320 <_printf_i+0x238>)
 8008284:	e7e9      	b.n	800825a <_printf_i+0x172>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	f023 0320 	bic.w	r3, r3, #32
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	e7f6      	b.n	800827e <_printf_i+0x196>
 8008290:	4616      	mov	r6, r2
 8008292:	e7bd      	b.n	8008210 <_printf_i+0x128>
 8008294:	6833      	ldr	r3, [r6, #0]
 8008296:	6825      	ldr	r5, [r4, #0]
 8008298:	6961      	ldr	r1, [r4, #20]
 800829a:	1d18      	adds	r0, r3, #4
 800829c:	6030      	str	r0, [r6, #0]
 800829e:	062e      	lsls	r6, r5, #24
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	d501      	bpl.n	80082a8 <_printf_i+0x1c0>
 80082a4:	6019      	str	r1, [r3, #0]
 80082a6:	e002      	b.n	80082ae <_printf_i+0x1c6>
 80082a8:	0668      	lsls	r0, r5, #25
 80082aa:	d5fb      	bpl.n	80082a4 <_printf_i+0x1bc>
 80082ac:	8019      	strh	r1, [r3, #0]
 80082ae:	2300      	movs	r3, #0
 80082b0:	6123      	str	r3, [r4, #16]
 80082b2:	4616      	mov	r6, r2
 80082b4:	e7bc      	b.n	8008230 <_printf_i+0x148>
 80082b6:	6833      	ldr	r3, [r6, #0]
 80082b8:	1d1a      	adds	r2, r3, #4
 80082ba:	6032      	str	r2, [r6, #0]
 80082bc:	681e      	ldr	r6, [r3, #0]
 80082be:	6862      	ldr	r2, [r4, #4]
 80082c0:	2100      	movs	r1, #0
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7f7 ffd4 	bl	8000270 <memchr>
 80082c8:	b108      	cbz	r0, 80082ce <_printf_i+0x1e6>
 80082ca:	1b80      	subs	r0, r0, r6
 80082cc:	6060      	str	r0, [r4, #4]
 80082ce:	6863      	ldr	r3, [r4, #4]
 80082d0:	6123      	str	r3, [r4, #16]
 80082d2:	2300      	movs	r3, #0
 80082d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082d8:	e7aa      	b.n	8008230 <_printf_i+0x148>
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	4632      	mov	r2, r6
 80082de:	4649      	mov	r1, r9
 80082e0:	4640      	mov	r0, r8
 80082e2:	47d0      	blx	sl
 80082e4:	3001      	adds	r0, #1
 80082e6:	d0ad      	beq.n	8008244 <_printf_i+0x15c>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	079b      	lsls	r3, r3, #30
 80082ec:	d413      	bmi.n	8008316 <_printf_i+0x22e>
 80082ee:	68e0      	ldr	r0, [r4, #12]
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	4298      	cmp	r0, r3
 80082f4:	bfb8      	it	lt
 80082f6:	4618      	movlt	r0, r3
 80082f8:	e7a6      	b.n	8008248 <_printf_i+0x160>
 80082fa:	2301      	movs	r3, #1
 80082fc:	4632      	mov	r2, r6
 80082fe:	4649      	mov	r1, r9
 8008300:	4640      	mov	r0, r8
 8008302:	47d0      	blx	sl
 8008304:	3001      	adds	r0, #1
 8008306:	d09d      	beq.n	8008244 <_printf_i+0x15c>
 8008308:	3501      	adds	r5, #1
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	9903      	ldr	r1, [sp, #12]
 800830e:	1a5b      	subs	r3, r3, r1
 8008310:	42ab      	cmp	r3, r5
 8008312:	dcf2      	bgt.n	80082fa <_printf_i+0x212>
 8008314:	e7eb      	b.n	80082ee <_printf_i+0x206>
 8008316:	2500      	movs	r5, #0
 8008318:	f104 0619 	add.w	r6, r4, #25
 800831c:	e7f5      	b.n	800830a <_printf_i+0x222>
 800831e:	bf00      	nop
 8008320:	08008874 	.word	0x08008874
 8008324:	08008885 	.word	0x08008885

08008328 <__swbuf_r>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	460e      	mov	r6, r1
 800832c:	4614      	mov	r4, r2
 800832e:	4605      	mov	r5, r0
 8008330:	b118      	cbz	r0, 800833a <__swbuf_r+0x12>
 8008332:	6a03      	ldr	r3, [r0, #32]
 8008334:	b90b      	cbnz	r3, 800833a <__swbuf_r+0x12>
 8008336:	f7ff fa33 	bl	80077a0 <__sinit>
 800833a:	69a3      	ldr	r3, [r4, #24]
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	071a      	lsls	r2, r3, #28
 8008342:	d501      	bpl.n	8008348 <__swbuf_r+0x20>
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	b943      	cbnz	r3, 800835a <__swbuf_r+0x32>
 8008348:	4621      	mov	r1, r4
 800834a:	4628      	mov	r0, r5
 800834c:	f000 f82a 	bl	80083a4 <__swsetup_r>
 8008350:	b118      	cbz	r0, 800835a <__swbuf_r+0x32>
 8008352:	f04f 37ff 	mov.w	r7, #4294967295
 8008356:	4638      	mov	r0, r7
 8008358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	6922      	ldr	r2, [r4, #16]
 800835e:	1a98      	subs	r0, r3, r2
 8008360:	6963      	ldr	r3, [r4, #20]
 8008362:	b2f6      	uxtb	r6, r6
 8008364:	4283      	cmp	r3, r0
 8008366:	4637      	mov	r7, r6
 8008368:	dc05      	bgt.n	8008376 <__swbuf_r+0x4e>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f7ff fcbb 	bl	8007ce8 <_fflush_r>
 8008372:	2800      	cmp	r0, #0
 8008374:	d1ed      	bne.n	8008352 <__swbuf_r+0x2a>
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	3b01      	subs	r3, #1
 800837a:	60a3      	str	r3, [r4, #8]
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	6022      	str	r2, [r4, #0]
 8008382:	701e      	strb	r6, [r3, #0]
 8008384:	6962      	ldr	r2, [r4, #20]
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	429a      	cmp	r2, r3
 800838a:	d004      	beq.n	8008396 <__swbuf_r+0x6e>
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	07db      	lsls	r3, r3, #31
 8008390:	d5e1      	bpl.n	8008356 <__swbuf_r+0x2e>
 8008392:	2e0a      	cmp	r6, #10
 8008394:	d1df      	bne.n	8008356 <__swbuf_r+0x2e>
 8008396:	4621      	mov	r1, r4
 8008398:	4628      	mov	r0, r5
 800839a:	f7ff fca5 	bl	8007ce8 <_fflush_r>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d0d9      	beq.n	8008356 <__swbuf_r+0x2e>
 80083a2:	e7d6      	b.n	8008352 <__swbuf_r+0x2a>

080083a4 <__swsetup_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4b29      	ldr	r3, [pc, #164]	@ (800844c <__swsetup_r+0xa8>)
 80083a8:	4605      	mov	r5, r0
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	460c      	mov	r4, r1
 80083ae:	b118      	cbz	r0, 80083b8 <__swsetup_r+0x14>
 80083b0:	6a03      	ldr	r3, [r0, #32]
 80083b2:	b90b      	cbnz	r3, 80083b8 <__swsetup_r+0x14>
 80083b4:	f7ff f9f4 	bl	80077a0 <__sinit>
 80083b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083bc:	0719      	lsls	r1, r3, #28
 80083be:	d422      	bmi.n	8008406 <__swsetup_r+0x62>
 80083c0:	06da      	lsls	r2, r3, #27
 80083c2:	d407      	bmi.n	80083d4 <__swsetup_r+0x30>
 80083c4:	2209      	movs	r2, #9
 80083c6:	602a      	str	r2, [r5, #0]
 80083c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	f04f 30ff 	mov.w	r0, #4294967295
 80083d2:	e033      	b.n	800843c <__swsetup_r+0x98>
 80083d4:	0758      	lsls	r0, r3, #29
 80083d6:	d512      	bpl.n	80083fe <__swsetup_r+0x5a>
 80083d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083da:	b141      	cbz	r1, 80083ee <__swsetup_r+0x4a>
 80083dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e0:	4299      	cmp	r1, r3
 80083e2:	d002      	beq.n	80083ea <__swsetup_r+0x46>
 80083e4:	4628      	mov	r0, r5
 80083e6:	f7ff fafb 	bl	80079e0 <_free_r>
 80083ea:	2300      	movs	r3, #0
 80083ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	2300      	movs	r3, #0
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f043 0308 	orr.w	r3, r3, #8
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	b94b      	cbnz	r3, 800841e <__swsetup_r+0x7a>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008414:	d003      	beq.n	800841e <__swsetup_r+0x7a>
 8008416:	4621      	mov	r1, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f000 f883 	bl	8008524 <__smakebuf_r>
 800841e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008422:	f013 0201 	ands.w	r2, r3, #1
 8008426:	d00a      	beq.n	800843e <__swsetup_r+0x9a>
 8008428:	2200      	movs	r2, #0
 800842a:	60a2      	str	r2, [r4, #8]
 800842c:	6962      	ldr	r2, [r4, #20]
 800842e:	4252      	negs	r2, r2
 8008430:	61a2      	str	r2, [r4, #24]
 8008432:	6922      	ldr	r2, [r4, #16]
 8008434:	b942      	cbnz	r2, 8008448 <__swsetup_r+0xa4>
 8008436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800843a:	d1c5      	bne.n	80083c8 <__swsetup_r+0x24>
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	0799      	lsls	r1, r3, #30
 8008440:	bf58      	it	pl
 8008442:	6962      	ldrpl	r2, [r4, #20]
 8008444:	60a2      	str	r2, [r4, #8]
 8008446:	e7f4      	b.n	8008432 <__swsetup_r+0x8e>
 8008448:	2000      	movs	r0, #0
 800844a:	e7f7      	b.n	800843c <__swsetup_r+0x98>
 800844c:	2000002c 	.word	0x2000002c

08008450 <_raise_r>:
 8008450:	291f      	cmp	r1, #31
 8008452:	b538      	push	{r3, r4, r5, lr}
 8008454:	4605      	mov	r5, r0
 8008456:	460c      	mov	r4, r1
 8008458:	d904      	bls.n	8008464 <_raise_r+0x14>
 800845a:	2316      	movs	r3, #22
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	f04f 30ff 	mov.w	r0, #4294967295
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008466:	b112      	cbz	r2, 800846e <_raise_r+0x1e>
 8008468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800846c:	b94b      	cbnz	r3, 8008482 <_raise_r+0x32>
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f830 	bl	80084d4 <_getpid_r>
 8008474:	4622      	mov	r2, r4
 8008476:	4601      	mov	r1, r0
 8008478:	4628      	mov	r0, r5
 800847a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800847e:	f000 b817 	b.w	80084b0 <_kill_r>
 8008482:	2b01      	cmp	r3, #1
 8008484:	d00a      	beq.n	800849c <_raise_r+0x4c>
 8008486:	1c59      	adds	r1, r3, #1
 8008488:	d103      	bne.n	8008492 <_raise_r+0x42>
 800848a:	2316      	movs	r3, #22
 800848c:	6003      	str	r3, [r0, #0]
 800848e:	2001      	movs	r0, #1
 8008490:	e7e7      	b.n	8008462 <_raise_r+0x12>
 8008492:	2100      	movs	r1, #0
 8008494:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008498:	4620      	mov	r0, r4
 800849a:	4798      	blx	r3
 800849c:	2000      	movs	r0, #0
 800849e:	e7e0      	b.n	8008462 <_raise_r+0x12>

080084a0 <raise>:
 80084a0:	4b02      	ldr	r3, [pc, #8]	@ (80084ac <raise+0xc>)
 80084a2:	4601      	mov	r1, r0
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	f7ff bfd3 	b.w	8008450 <_raise_r>
 80084aa:	bf00      	nop
 80084ac:	2000002c 	.word	0x2000002c

080084b0 <_kill_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	@ (80084d0 <_kill_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f8 fbd9 	bl	8000c74 <_kill>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_kill_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_kill_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20019a90 	.word	0x20019a90

080084d4 <_getpid_r>:
 80084d4:	f7f8 bbc6 	b.w	8000c64 <_getpid>

080084d8 <__swhatbuf_r>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	460c      	mov	r4, r1
 80084dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e0:	2900      	cmp	r1, #0
 80084e2:	b096      	sub	sp, #88	@ 0x58
 80084e4:	4615      	mov	r5, r2
 80084e6:	461e      	mov	r6, r3
 80084e8:	da0d      	bge.n	8008506 <__swhatbuf_r+0x2e>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084f0:	f04f 0100 	mov.w	r1, #0
 80084f4:	bf14      	ite	ne
 80084f6:	2340      	movne	r3, #64	@ 0x40
 80084f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084fc:	2000      	movs	r0, #0
 80084fe:	6031      	str	r1, [r6, #0]
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	b016      	add	sp, #88	@ 0x58
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	466a      	mov	r2, sp
 8008508:	f000 f848 	bl	800859c <_fstat_r>
 800850c:	2800      	cmp	r0, #0
 800850e:	dbec      	blt.n	80084ea <__swhatbuf_r+0x12>
 8008510:	9901      	ldr	r1, [sp, #4]
 8008512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800851a:	4259      	negs	r1, r3
 800851c:	4159      	adcs	r1, r3
 800851e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008522:	e7eb      	b.n	80084fc <__swhatbuf_r+0x24>

08008524 <__smakebuf_r>:
 8008524:	898b      	ldrh	r3, [r1, #12]
 8008526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008528:	079d      	lsls	r5, r3, #30
 800852a:	4606      	mov	r6, r0
 800852c:	460c      	mov	r4, r1
 800852e:	d507      	bpl.n	8008540 <__smakebuf_r+0x1c>
 8008530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	6123      	str	r3, [r4, #16]
 8008538:	2301      	movs	r3, #1
 800853a:	6163      	str	r3, [r4, #20]
 800853c:	b003      	add	sp, #12
 800853e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008540:	ab01      	add	r3, sp, #4
 8008542:	466a      	mov	r2, sp
 8008544:	f7ff ffc8 	bl	80084d8 <__swhatbuf_r>
 8008548:	9f00      	ldr	r7, [sp, #0]
 800854a:	4605      	mov	r5, r0
 800854c:	4639      	mov	r1, r7
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff faba 	bl	8007ac8 <_malloc_r>
 8008554:	b948      	cbnz	r0, 800856a <__smakebuf_r+0x46>
 8008556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855a:	059a      	lsls	r2, r3, #22
 800855c:	d4ee      	bmi.n	800853c <__smakebuf_r+0x18>
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	f043 0302 	orr.w	r3, r3, #2
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	e7e2      	b.n	8008530 <__smakebuf_r+0xc>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	6020      	str	r0, [r4, #0]
 800856e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008572:	81a3      	strh	r3, [r4, #12]
 8008574:	9b01      	ldr	r3, [sp, #4]
 8008576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800857a:	b15b      	cbz	r3, 8008594 <__smakebuf_r+0x70>
 800857c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f81d 	bl	80085c0 <_isatty_r>
 8008586:	b128      	cbz	r0, 8008594 <__smakebuf_r+0x70>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	431d      	orrs	r5, r3
 8008598:	81a5      	strh	r5, [r4, #12]
 800859a:	e7cf      	b.n	800853c <__smakebuf_r+0x18>

0800859c <_fstat_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	@ (80085bc <_fstat_r+0x20>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7f8 fba7 	bl	8000cfc <_fstat>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_fstat_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_fstat_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	20019a90 	.word	0x20019a90

080085c0 <_isatty_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	4d06      	ldr	r5, [pc, #24]	@ (80085dc <_isatty_r+0x1c>)
 80085c4:	2300      	movs	r3, #0
 80085c6:	4604      	mov	r4, r0
 80085c8:	4608      	mov	r0, r1
 80085ca:	602b      	str	r3, [r5, #0]
 80085cc:	f7f8 fba6 	bl	8000d1c <_isatty>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d102      	bne.n	80085da <_isatty_r+0x1a>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	b103      	cbz	r3, 80085da <_isatty_r+0x1a>
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	20019a90 	.word	0x20019a90

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
