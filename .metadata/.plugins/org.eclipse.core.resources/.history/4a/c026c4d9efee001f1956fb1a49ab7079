
App_028_Example_9.2_Synchronizing_Tasks_with_Event_Group.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008700  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008890  08008890  00009890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ae0  08008ae0  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008ae0  08008ae0  00009ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae8  08008ae8  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae8  08008ae8  00009ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008aec  08008aec  00009aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008af0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          0001f654  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001f6c4  2001f6c4  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a0a  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f2  00000000  00000000  00023aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  000273a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001205  00000000  00000000  00028af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264f3  00000000  00000000  00029cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be77  00000000  00000000  000501e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eda7d  00000000  00000000  0006c05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159adc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c00  00000000  00000000  00159b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d4  00000000  00000000  00160720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008878 	.word	0x08008878

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008878 	.word	0x08008878

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f00 	.word	0x20012f00
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fbe1 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f845 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8d7 	bl	80007c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8ab 	bl	800076c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <main+0x80>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <main+0x80>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000622:	f005 f93b 	bl	800589c <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 8000626:	f005 ffcf 	bl	80065c8 <SEGGER_SYSVIEW_Start>

  /* before an event group can be used, it must first be created */
  xEventGroup = xEventGroupCreate();
 800062a:	f002 fa21 	bl	8002a70 <xEventGroupCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <main+0x84>)
 8000632:	6013      	str	r3, [r2, #0]
  /* Create three instances of the task.
     Each task is given a different name, which is later printed out to give
     a visual indication of which task is executing.
     The event bit to use when the task reaches its synchronization point is
     passed into the task using the task parameter */
  xTaskCreate( vSyncingTask, "Task 1", 1000, ( void * const ) mainFIRST_TASK_BIT, 1, NULL );
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2301      	movs	r3, #1
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000642:	4911      	ldr	r1, [pc, #68]	@ (8000688 <main+0x88>)
 8000644:	4811      	ldr	r0, [pc, #68]	@ (800068c <main+0x8c>)
 8000646:	f002 ff6a 	bl	800351e <xTaskCreate>
  xTaskCreate( vSyncingTask, "Task 2", 1000, ( void * const ) mainSECOND_TASK_BIT, 2, NULL );
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2302      	movs	r3, #2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2302      	movs	r3, #2
 8000654:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000658:	490d      	ldr	r1, [pc, #52]	@ (8000690 <main+0x90>)
 800065a:	480c      	ldr	r0, [pc, #48]	@ (800068c <main+0x8c>)
 800065c:	f002 ff5f 	bl	800351e <xTaskCreate>
  xTaskCreate( vSyncingTask, "Task 3", 1000, ( void * const ) mainTHIRD_TASK_BIT, 3, NULL );
 8000660:	2300      	movs	r3, #0
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2303      	movs	r3, #3
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2304      	movs	r3, #4
 800066a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800066e:	4909      	ldr	r1, [pc, #36]	@ (8000694 <main+0x94>)
 8000670:	4806      	ldr	r0, [pc, #24]	@ (800068c <main+0x8c>)
 8000672:	f002 ff54 	bl	800351e <xTaskCreate>

  /* start the scheduler */
  vTaskStartScheduler();
 8000676:	f003 f943 	bl	8003900 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 800067a:	bf00      	nop
 800067c:	e7fd      	b.n	800067a <main+0x7a>
 800067e:	bf00      	nop
 8000680:	e0001000 	.word	0xe0001000
 8000684:	200000d4 	.word	0x200000d4
 8000688:	08008890 	.word	0x08008890
 800068c:	08000901 	.word	0x08000901
 8000690:	08008898 	.word	0x08008898
 8000694:	080088a0 	.word	0x080088a0

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 f8a7 	bl	80077fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800070c:	2332      	movs	r3, #50	@ 0x32
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000710:	2304      	movs	r3, #4
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fe2f 	bl	8001380 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f952 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f890 	bl	8001870 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f93b 	bl	80009d0 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <MX_USART2_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f001 fd58 	bl	8002258 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f90f 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	@ 0x28
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b35      	ldr	r3, [pc, #212]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a34      	ldr	r2, [pc, #208]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b32      	ldr	r3, [pc, #200]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a2d      	ldr	r2, [pc, #180]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a26      	ldr	r2, [pc, #152]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a1f      	ldr	r2, [pc, #124]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800084c:	4819      	ldr	r0, [pc, #100]	@ (80008b4 <MX_GPIO_Init+0xf4>)
 800084e:	f000 fd7d 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000852:	2304      	movs	r3, #4
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <MX_GPIO_Init+0xf8>)
 8000866:	f000 fbd5 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800086a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <MX_GPIO_Init+0xf4>)
 8000884:	f000 fbc6 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000898:	2306      	movs	r3, #6
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <MX_GPIO_Init+0xfc>)
 80008a4:	f000 fbb6 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020800 	.word	0x40020800

080008c0 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e00b      	b.n	80008e8 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	18d1      	adds	r1, r2, r3
 80008d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008da:	2201      	movs	r2, #1
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f001 fd0b 	bl	80022f8 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	3301      	adds	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1ed      	bne.n	80008d0 <UART2_Print_Text+0x10>
  }
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <vSyncingTask>:

static void vSyncingTask( void *pvParameters )
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	@ 0x2c
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
  TickType_t       xDelayTime; /* used to get a pseudo random delay (200ms to 699ms) */
  const TickType_t xMaxDelay = pdMS_TO_TICKS( 500UL );
 8000908:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800090c:	61fb      	str	r3, [r7, #28]
  const TickType_t xMinDelay = pdMS_TO_TICKS( 200UL );
 800090e:	23c8      	movs	r3, #200	@ 0xc8
 8000910:	61bb      	str	r3, [r7, #24]
  
  EventBits_t       uxThisTaskSyncBit; /* event bit to set by this task */
  const EventBits_t uxAllSyncBits = ( mainTHIRD_TASK_BIT | mainSECOND_TASK_BIT | mainFIRST_TASK_BIT ); /* event bits to sync */
 8000912:	2307      	movs	r3, #7
 8000914:	617b      	str	r3, [r7, #20]
  /* Three instances of this task are created - each task uses a different event bit
     in the synchronization.
     The event bit to use is passed into each task instance by using the task
     parameter.
     Store it in the uxThisTaskSyncBit variable */
  uxThisTaskSyncBit = ( EventBits_t ) pvParameters;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	613b      	str	r3, [r7, #16]
    /* Simulate this task taking some time to perform an action by delaying for
       a pseudo random time (200ms to 699ms).
       This prevents all three instances of this task reaching the synchronization
       point at the same time, and so allows the example's behavior to be
       observed more easily */
    xDelayTime = ( rand() % xMaxDelay ) + xMinDelay;
 800091a:	f006 fde7 	bl	80074ec <rand>
 800091e:	4603      	mov	r3, r0
 8000920:	69fa      	ldr	r2, [r7, #28]
 8000922:	fbb3 f2f2 	udiv	r2, r3, r2
 8000926:	69f9      	ldr	r1, [r7, #28]
 8000928:	fb01 f202 	mul.w	r2, r1, r2
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4413      	add	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
    vTaskDelay( xDelayTime );
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f002 ff61 	bl	80037fc <vTaskDelay>

    /* Print out a message to show this task has reached its synchronization point.
       pcTaskGetTaskName() is an API function that returns the name assigned
       to the task when the task was created */
    ( void ) snprintf( cOutputString, STRING_SIZE, "At time %10lu: %s reached sync point\n\r",
 800093a:	f003 f95b 	bl	8003bf4 <xTaskGetTickCount>
 800093e:	4604      	mov	r4, r0
 8000940:	2000      	movs	r0, #0
 8000942:	f003 f97f 	bl	8003c44 <pcTaskGetName>
 8000946:	4603      	mov	r3, r0
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	4623      	mov	r3, r4
 800094c:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <vSyncingTask+0x98>)
 800094e:	2132      	movs	r1, #50	@ 0x32
 8000950:	4812      	ldr	r0, [pc, #72]	@ (800099c <vSyncingTask+0x9c>)
 8000952:	f006 fecb 	bl	80076ec <sniprintf>
                       xTaskGetTickCount(), pcTaskGetName( NULL ) );
    UART2_Print_Text( &huart2, ( const char * ) cOutputString );
 8000956:	4911      	ldr	r1, [pc, #68]	@ (800099c <vSyncingTask+0x9c>)
 8000958:	4811      	ldr	r0, [pc, #68]	@ (80009a0 <vSyncingTask+0xa0>)
 800095a:	f7ff ffb1 	bl	80008c0 <UART2_Print_Text>

    /* wait for all the task to reach their respective synchronization points */
    xEventGroupSync( xEventGroup,       /* event group used to synchronize    */
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <vSyncingTask+0xa4>)
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	6939      	ldr	r1, [r7, #16]
 800096a:	f002 f8a3 	bl	8002ab4 <xEventGroupSync>

    /* Print out a message to show this task has passed its synchronization point.
       As an indefinite delay (200ms to 699ms) was used, the following line
       will only be executed after all the three tasks reached their respective
       synchronization point */
    ( void ) snprintf( cOutputString, STRING_SIZE, "At time %10lu: %s  exited sync point\n\r",
 800096e:	f003 f941 	bl	8003bf4 <xTaskGetTickCount>
 8000972:	4604      	mov	r4, r0
 8000974:	2000      	movs	r0, #0
 8000976:	f003 f965 	bl	8003c44 <pcTaskGetName>
 800097a:	4603      	mov	r3, r0
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4623      	mov	r3, r4
 8000980:	4a09      	ldr	r2, [pc, #36]	@ (80009a8 <vSyncingTask+0xa8>)
 8000982:	2132      	movs	r1, #50	@ 0x32
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <vSyncingTask+0x9c>)
 8000986:	f006 feb1 	bl	80076ec <sniprintf>
                       xTaskGetTickCount(), pcTaskGetName( NULL ) );
    UART2_Print_Text( &huart2, ( const char * ) cOutputString );
 800098a:	4904      	ldr	r1, [pc, #16]	@ (800099c <vSyncingTask+0x9c>)
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <vSyncingTask+0xa0>)
 800098e:	f7ff ff97 	bl	80008c0 <UART2_Print_Text>
    xDelayTime = ( rand() % xMaxDelay ) + xMinDelay;
 8000992:	bf00      	nop
 8000994:	e7c1      	b.n	800091a <vSyncingTask+0x1a>
 8000996:	bf00      	nop
 8000998:	080088a8 	.word	0x080088a8
 800099c:	200000d8 	.word	0x200000d8
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	200000d4 	.word	0x200000d4
 80009a8:	080088d0 	.word	0x080088d0

080009ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009be:	f000 fa27 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40001000 	.word	0x40001000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 fac5 	bl	8000faa <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12b      	bne.n	8000aa6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa2:	f000 fab7 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	@ 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	4a32      	ldr	r2, [pc, #200]	@ (8000ba0 <HAL_InitTick+0xe4>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8000adc:	4b30      	ldr	r3, [pc, #192]	@ (8000ba0 <HAL_InitTick+0xe4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f8dc 	bl	8001cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b02:	f001 f8ad 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000b06:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b08:	e004      	b.n	8000b14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b0a:	f001 f8a9 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b16:	4a23      	ldr	r2, [pc, #140]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	0c9b      	lsrs	r3, r3, #18
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b24:	4a21      	ldr	r2, [pc, #132]	@ (8000bac <HAL_InitTick+0xf0>)
 8000b26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b48:	4817      	ldr	r0, [pc, #92]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b4a:	f001 f8e3 	bl	8001d14 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11b      	bne.n	8000b94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b5c:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b5e:	f001 f933 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b70:	2036      	movs	r0, #54	@ 0x36
 8000b72:	f000 fa41 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d808      	bhi.n	8000b8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2036      	movs	r0, #54	@ 0x36
 8000b82:	f000 fa1d 	bl	8000fc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_InitTick+0xf4>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3738      	adds	r7, #56	@ 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	2000010c 	.word	0x2000010c
 8000bac:	40001000 	.word	0x40001000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <TIM6_DAC_IRQHandler+0x10>)
 8000bf2:	f001 f959 	bl	8001ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000010c 	.word	0x2000010c

08000c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return 1;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_kill>:

int _kill(int pid, int sig)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c1a:	f006 fe2b 	bl	8007874 <__errno>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2216      	movs	r2, #22
 8000c22:	601a      	str	r2, [r3, #0]
  return -1;
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_exit>:

void _exit (int status)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ffe7 	bl	8000c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c42:	bf00      	nop
 8000c44:	e7fd      	b.n	8000c42 <_exit+0x12>

08000c46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e00a      	b.n	8000c6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c58:	f3af 8000 	nop.w
 8000c5c:	4601      	mov	r1, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	60ba      	str	r2, [r7, #8]
 8000c64:	b2ca      	uxtb	r2, r1
 8000c66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dbf0      	blt.n	8000c58 <_read+0x12>
  }

  return len;
 8000c76:	687b      	ldr	r3, [r7, #4]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca8:	605a      	str	r2, [r3, #4]
  return 0;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_isatty>:

int _isatty(int file)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f006 fdac 	bl	8007874 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20020000 	.word	0x20020000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	20000154 	.word	0x20000154
 8000d50:	2001f6c8 	.word	0x2001f6c8

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f006 fd6b 	bl	8007880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fc29 	bl	8000600 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dbc:	08008af0 	.word	0x08008af0
  ldr r2, =_sbss
 8000dc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dc4:	2001f6c4 	.word	0x2001f6c4

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f8d8 	bl	8000faa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fe5e 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fdec 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000158 	.word	0x20000158

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000158 	.word	0x20000158

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	@ 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff4c 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd2:	f7ff ff61 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	6978      	ldr	r0, [r7, #20]
 8000fde:	f7ff ffb1 	bl	8000f44 <NVIC_EncodePriority>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff80 	bl	8000ef0 <__NVIC_SetPriority>
}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff54 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b60      	ldr	r3, [pc, #384]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001324 <HAL_GPIO_Init+0x310>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <HAL_GPIO_Init+0x314>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a51      	ldr	r2, [pc, #324]	@ (800132c <HAL_GPIO_Init+0x318>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a50      	ldr	r2, [pc, #320]	@ (8001330 <HAL_GPIO_Init+0x31c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001334 <HAL_GPIO_Init+0x320>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4d      	ldr	r2, [pc, #308]	@ (800133c <HAL_GPIO_Init+0x328>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4c      	ldr	r2, [pc, #304]	@ (8001340 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4b      	ldr	r2, [pc, #300]	@ (8001344 <HAL_GPIO_Init+0x330>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	@ (8001324 <HAL_GPIO_Init+0x310>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <HAL_GPIO_Init+0x334>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127e:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_GPIO_Init+0x334>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40021400 	.word	0x40021400
 8001340:	40021800 	.word	0x40021800
 8001344:	40021c00 	.word	0x40021c00
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e267      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	4b88      	ldr	r3, [pc, #544]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d00c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b85      	ldr	r3, [pc, #532]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b82      	ldr	r3, [pc, #520]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b7e      	ldr	r3, [pc, #504]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e242      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b76      	ldr	r3, [pc, #472]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a75      	ldr	r2, [pc, #468]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b70      	ldr	r3, [pc, #448]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6f      	ldr	r2, [pc, #444]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6d      	ldr	r3, [pc, #436]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6c      	ldr	r2, [pc, #432]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b69      	ldr	r3, [pc, #420]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a68      	ldr	r2, [pc, #416]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b66      	ldr	r3, [pc, #408]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a65      	ldr	r2, [pc, #404]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fcfe 	bl	8000e38 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fcfa 	bl	8000e38 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e207      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b5b      	ldr	r3, [pc, #364]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fcea 	bl	8000e38 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fce6 	bl	8000e38 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1f3      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b51      	ldr	r3, [pc, #324]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	4b4a      	ldr	r3, [pc, #296]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b47      	ldr	r3, [pc, #284]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b44      	ldr	r3, [pc, #272]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b41      	ldr	r3, [pc, #260]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1c7      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b3b      	ldr	r3, [pc, #236]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4937      	ldr	r1, [pc, #220]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b34      	ldr	r3, [pc, #208]	@ (80015c4 <HAL_RCC_OscConfig+0x244>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc9f 	bl	8000e38 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc9b 	bl	8000e38 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1a8      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4925      	ldr	r1, [pc, #148]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <HAL_RCC_OscConfig+0x244>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fc7e 	bl	8000e38 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fc7a 	bl	8000e38 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e187      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d036      	beq.n	80015d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d016      	beq.n	80015a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_RCC_OscConfig+0x248>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fc5e 	bl	8000e38 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fc5a 	bl	8000e38 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e167      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
 800159e:	e01b      	b.n	80015d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_RCC_OscConfig+0x248>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fc47 	bl	8000e38 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	e00e      	b.n	80015cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fc43 	bl	8000e38 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d907      	bls.n	80015cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e150      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470000 	.word	0x42470000
 80015c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b88      	ldr	r3, [pc, #544]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ea      	bne.n	80015ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8097 	beq.w	8001714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b81      	ldr	r3, [pc, #516]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b7d      	ldr	r3, [pc, #500]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a7c      	ldr	r2, [pc, #496]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b7a      	ldr	r3, [pc, #488]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b77      	ldr	r3, [pc, #476]	@ (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b74      	ldr	r3, [pc, #464]	@ (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a73      	ldr	r2, [pc, #460]	@ (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fc03 	bl	8000e38 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fbff 	bl	8000e38 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e10c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <HAL_RCC_OscConfig+0x474>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x2ea>
 800165c:	4b64      	ldr	r3, [pc, #400]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001660:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	@ 0x70
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x30c>
 8001672:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001676:	4a5e      	ldr	r2, [pc, #376]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6713      	str	r3, [r2, #112]	@ 0x70
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	4a5b      	ldr	r2, [pc, #364]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	@ 0x70
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800168c:	4b58      	ldr	r3, [pc, #352]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001690:	4a57      	ldr	r2, [pc, #348]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	@ 0x70
 8001698:	4b55      	ldr	r3, [pc, #340]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169c:	4a54      	ldr	r2, [pc, #336]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fbc4 	bl	8000e38 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fbc0 	bl	8000e38 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e0cb      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ee      	beq.n	80016b4 <HAL_RCC_OscConfig+0x334>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fbae 	bl	8000e38 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fbaa 	bl	8000e38 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0b5      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ee      	bne.n	80016e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	4a38      	ldr	r2, [pc, #224]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a1 	beq.w	8001860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	d05c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d141      	bne.n	80017b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <HAL_RCC_OscConfig+0x478>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fb7e 	bl	8000e38 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fb7a 	bl	8000e38 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e087      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69da      	ldr	r2, [r3, #28]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	3b01      	subs	r3, #1
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	491b      	ldr	r1, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x478>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb53 	bl	8000e38 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fb4f 	bl	8000e38 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e05c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x416>
 80017b4:	e054      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb3c 	bl	8000e38 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fb38 	bl	8000e38 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e045      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
 80017e2:	e03d      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e038      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000
 80017f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_RCC_OscConfig+0x4ec>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d028      	beq.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d121      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	4293      	cmp	r3, r2
 8001836:	d111      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	3b01      	subs	r3, #1
 8001846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b68      	ldr	r3, [pc, #416]	@ (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d90c      	bls.n	80018ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b65      	ldr	r3, [pc, #404]	@ (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	@ (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a58      	ldr	r2, [pc, #352]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a52      	ldr	r2, [pc, #328]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d044      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d119      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e067      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b37      	ldr	r3, [pc, #220]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4934      	ldr	r1, [pc, #208]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fa6a 	bl	8000e38 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fa66 	bl	8000e38 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d20c      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f850 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	080089c0 	.word	0x080089c0
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a40:	b094      	sub	sp, #80	@ 0x50
 8001a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a54:	4b79      	ldr	r3, [pc, #484]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d00d      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	f200 80e1 	bhi.w	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6e:	e0db      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b73      	ldr	r3, [pc, #460]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001a74:	e0db      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b73      	ldr	r3, [pc, #460]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a7a:	e0d8      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a84:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a86:	4b6d      	ldr	r3, [pc, #436]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b6a      	ldr	r3, [pc, #424]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	2200      	movs	r2, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001aae:	4622      	mov	r2, r4
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	0159      	lsls	r1, r3, #5
 8001abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac0:	0150      	lsls	r0, r2, #5
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	1a51      	subs	r1, r2, r1
 8001aca:	6139      	str	r1, [r7, #16]
 8001acc:	4629      	mov	r1, r5
 8001ace:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	018b      	lsls	r3, r1, #6
 8001ae4:	4651      	mov	r1, sl
 8001ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aea:	4651      	mov	r1, sl
 8001aec:	018a      	lsls	r2, r1, #6
 8001aee:	4651      	mov	r1, sl
 8001af0:	ebb2 0801 	subs.w	r8, r2, r1
 8001af4:	4659      	mov	r1, fp
 8001af6:	eb63 0901 	sbc.w	r9, r3, r1
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b0e:	4690      	mov	r8, r2
 8001b10:	4699      	mov	r9, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	eb18 0303 	adds.w	r3, r8, r3
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	eb49 0303 	adc.w	r3, r9, r3
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b2e:	4629      	mov	r1, r5
 8001b30:	024b      	lsls	r3, r1, #9
 8001b32:	4621      	mov	r1, r4
 8001b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b38:	4621      	mov	r1, r4
 8001b3a:	024a      	lsls	r2, r1, #9
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b42:	2200      	movs	r2, #0
 8001b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b4c:	f7fe fbe0 	bl	8000310 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b58:	e058      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	2200      	movs	r2, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	4611      	mov	r1, r2
 8001b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0159      	lsls	r1, r3, #5
 8001b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b86:	0150      	lsls	r0, r2, #5
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b92:	4649      	mov	r1, r9
 8001b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bac:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	00eb      	lsls	r3, r5, #3
 8001bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc2:	00e2      	lsls	r2, r4, #3
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	4643      	mov	r3, r8
 8001bca:	18e3      	adds	r3, r4, r3
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	464b      	mov	r3, r9
 8001bd0:	eb45 0303 	adc.w	r3, r5, r3
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be2:	4629      	mov	r1, r5
 8001be4:	028b      	lsls	r3, r1, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bec:	4621      	mov	r1, r4
 8001bee:	028a      	lsls	r2, r1, #10
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	61fa      	str	r2, [r7, #28]
 8001bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c00:	f7fe fb86 	bl	8000310 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c26:	e002      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3750      	adds	r7, #80	@ 0x50
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	@ (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	080089d0 	.word	0x080089d0

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c8c:	f7ff ffdc 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0b5b      	lsrs	r3, r3, #13
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	@ (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	080089d0 	.word	0x080089d0

08001cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	08db      	lsrs	r3, r3, #3
 8001cea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <HAL_RCC_GetClockConfig+0x60>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0207 	and.w	r2, r3, #7
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	601a      	str	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f839 	bl	8001db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 f9c0 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04e      	b.n	8001e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	@ (8001e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0a:	d01d      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	@ (8001e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40001800 	.word	0x40001800

08001ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d020      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8d2 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8c4 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8d5 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0204 	mvn.w	r2, #4
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8ac 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f89e 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8af 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0208 	mvn.w	r2, #8
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f886 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f878 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f889 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d020      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0210 	mvn.w	r2, #16
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f860 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f852 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f863 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0201 	mvn.w	r2, #1
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fccc 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f906 	bl	8002244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f834 	bl	80020c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0220 	mvn.w	r2, #32
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8d8 	bl	8002230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a46      	ldr	r2, [pc, #280]	@ (8002204 <TIM_Base_SetConfig+0x12c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f6:	d00f      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a43      	ldr	r2, [pc, #268]	@ (8002208 <TIM_Base_SetConfig+0x130>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00b      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a42      	ldr	r2, [pc, #264]	@ (800220c <TIM_Base_SetConfig+0x134>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a41      	ldr	r2, [pc, #260]	@ (8002210 <TIM_Base_SetConfig+0x138>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d003      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	@ (8002214 <TIM_Base_SetConfig+0x13c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d108      	bne.n	800212a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800211e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a35      	ldr	r2, [pc, #212]	@ (8002204 <TIM_Base_SetConfig+0x12c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002138:	d027      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a32      	ldr	r2, [pc, #200]	@ (8002208 <TIM_Base_SetConfig+0x130>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d023      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a31      	ldr	r2, [pc, #196]	@ (800220c <TIM_Base_SetConfig+0x134>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a30      	ldr	r2, [pc, #192]	@ (8002210 <TIM_Base_SetConfig+0x138>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	@ (8002214 <TIM_Base_SetConfig+0x13c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d017      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2e      	ldr	r2, [pc, #184]	@ (8002218 <TIM_Base_SetConfig+0x140>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2d      	ldr	r2, [pc, #180]	@ (800221c <TIM_Base_SetConfig+0x144>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2c      	ldr	r2, [pc, #176]	@ (8002220 <TIM_Base_SetConfig+0x148>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	@ (8002224 <TIM_Base_SetConfig+0x14c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2a      	ldr	r2, [pc, #168]	@ (8002228 <TIM_Base_SetConfig+0x150>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a29      	ldr	r2, [pc, #164]	@ (800222c <TIM_Base_SetConfig+0x154>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d108      	bne.n	800219c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <TIM_Base_SetConfig+0x12c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0xf8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <TIM_Base_SetConfig+0x13c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f023 0201 	bic.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
  }
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40010400 	.word	0x40010400
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800
 8002224:	40001800 	.word	0x40001800
 8002228:	40001c00 	.word	0x40001c00
 800222c:	40002000 	.word	0x40002000

08002230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e042      	b.n	80022f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fbd4 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	@ 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800229a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f973 	bl	8002588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	@ 0x28
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b20      	cmp	r3, #32
 8002316:	d175      	bne.n	8002404 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_UART_Transmit+0x2c>
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e06e      	b.n	8002406 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2221      	movs	r2, #33	@ 0x21
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002336:	f7fe fd7f 	bl	8000e38 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	88fa      	ldrh	r2, [r7, #6]
 8002346:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002350:	d108      	bne.n	8002364 <HAL_UART_Transmit+0x6c>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d104      	bne.n	8002364 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	e003      	b.n	800236c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800236c:	e02e      	b.n	80023cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2200      	movs	r2, #0
 8002376:	2180      	movs	r1, #128	@ 0x80
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f848 	bl	800240e <UART_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e03a      	b.n	8002406 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10b      	bne.n	80023ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	3302      	adds	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e007      	b.n	80023be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	3301      	adds	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1cb      	bne.n	800236e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	2140      	movs	r1, #64	@ 0x40
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f814 	bl	800240e <UART_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e006      	b.n	8002406 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800241e:	e03b      	b.n	8002498 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d037      	beq.n	8002498 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7fe fd06 	bl	8000e38 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	6a3a      	ldr	r2, [r7, #32]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <UART_WaitOnFlagUntilTimeout+0x30>
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e03a      	b.n	80024b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d023      	beq.n	8002498 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b80      	cmp	r3, #128	@ 0x80
 8002454:	d020      	beq.n	8002498 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b40      	cmp	r3, #64	@ 0x40
 800245a:	d01d      	beq.n	8002498 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b08      	cmp	r3, #8
 8002468:	d116      	bne.n	8002498 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f81d 	bl	80024c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2208      	movs	r2, #8
 800248a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e00f      	b.n	80024b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d0b4      	beq.n	8002420 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b095      	sub	sp, #84	@ 0x54
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024f0:	e841 2300 	strex	r3, r2, [r1]
 80024f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e5      	bne.n	80024c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3314      	adds	r3, #20
 8002502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	61fb      	str	r3, [r7, #28]
   return(result);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3314      	adds	r3, #20
 800251a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800251c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002524:	e841 2300 	strex	r3, r2, [r1]
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e5      	bne.n	80024fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	2b01      	cmp	r3, #1
 8002536:	d119      	bne.n	800256c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	e853 3f00 	ldrex	r3, [r3]
 8002546:	60bb      	str	r3, [r7, #8]
   return(result);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f023 0310 	bic.w	r3, r3, #16
 800254e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002558:	61ba      	str	r2, [r7, #24]
 800255a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255c:	6979      	ldr	r1, [r7, #20]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	e841 2300 	strex	r3, r2, [r1]
 8002564:	613b      	str	r3, [r7, #16]
   return(result);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e5      	bne.n	8002538 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800257a:	bf00      	nop
 800257c:	3754      	adds	r7, #84	@ 0x54
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800258c:	b0c0      	sub	sp, #256	@ 0x100
 800258e:	af00      	add	r7, sp, #0
 8002590:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	ea40 0301 	orr.w	r3, r0, r1
 80025b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	431a      	orrs	r2, r3
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025e0:	f021 010c 	bic.w	r1, r1, #12
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025ee:	430b      	orrs	r3, r1
 80025f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002602:	6999      	ldr	r1, [r3, #24]
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	ea40 0301 	orr.w	r3, r0, r1
 800260e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b8f      	ldr	r3, [pc, #572]	@ (8002854 <UART_SetConfig+0x2cc>)
 8002618:	429a      	cmp	r2, r3
 800261a:	d005      	beq.n	8002628 <UART_SetConfig+0xa0>
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b8d      	ldr	r3, [pc, #564]	@ (8002858 <UART_SetConfig+0x2d0>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d104      	bne.n	8002632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002628:	f7ff fb2e 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 800262c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002630:	e003      	b.n	800263a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002632:	f7ff fb15 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002636:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002644:	f040 810c 	bne.w	8002860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800264c:	2200      	movs	r2, #0
 800264e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002652:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800265a:	4622      	mov	r2, r4
 800265c:	462b      	mov	r3, r5
 800265e:	1891      	adds	r1, r2, r2
 8002660:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002662:	415b      	adcs	r3, r3
 8002664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800266a:	4621      	mov	r1, r4
 800266c:	eb12 0801 	adds.w	r8, r2, r1
 8002670:	4629      	mov	r1, r5
 8002672:	eb43 0901 	adc.w	r9, r3, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800268a:	4690      	mov	r8, r2
 800268c:	4699      	mov	r9, r3
 800268e:	4623      	mov	r3, r4
 8002690:	eb18 0303 	adds.w	r3, r8, r3
 8002694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002698:	462b      	mov	r3, r5
 800269a:	eb49 0303 	adc.w	r3, r9, r3
 800269e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026b6:	460b      	mov	r3, r1
 80026b8:	18db      	adds	r3, r3, r3
 80026ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80026bc:	4613      	mov	r3, r2
 80026be:	eb42 0303 	adc.w	r3, r2, r3
 80026c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026cc:	f7fd fe20 	bl	8000310 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4b61      	ldr	r3, [pc, #388]	@ (800285c <UART_SetConfig+0x2d4>)
 80026d6:	fba3 2302 	umull	r2, r3, r3, r2
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	011c      	lsls	r4, r3, #4
 80026de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	1891      	adds	r1, r2, r2
 80026f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026f8:	415b      	adcs	r3, r3
 80026fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002700:	4641      	mov	r1, r8
 8002702:	eb12 0a01 	adds.w	sl, r2, r1
 8002706:	4649      	mov	r1, r9
 8002708:	eb43 0b01 	adc.w	fp, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800271c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002720:	4692      	mov	sl, r2
 8002722:	469b      	mov	fp, r3
 8002724:	4643      	mov	r3, r8
 8002726:	eb1a 0303 	adds.w	r3, sl, r3
 800272a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800272e:	464b      	mov	r3, r9
 8002730:	eb4b 0303 	adc.w	r3, fp, r3
 8002734:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002744:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800274c:	460b      	mov	r3, r1
 800274e:	18db      	adds	r3, r3, r3
 8002750:	643b      	str	r3, [r7, #64]	@ 0x40
 8002752:	4613      	mov	r3, r2
 8002754:	eb42 0303 	adc.w	r3, r2, r3
 8002758:	647b      	str	r3, [r7, #68]	@ 0x44
 800275a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800275e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002762:	f7fd fdd5 	bl	8000310 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4611      	mov	r1, r2
 800276c:	4b3b      	ldr	r3, [pc, #236]	@ (800285c <UART_SetConfig+0x2d4>)
 800276e:	fba3 2301 	umull	r2, r3, r3, r1
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2264      	movs	r2, #100	@ 0x64
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	1acb      	subs	r3, r1, r3
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002782:	4b36      	ldr	r3, [pc, #216]	@ (800285c <UART_SetConfig+0x2d4>)
 8002784:	fba3 2302 	umull	r2, r3, r3, r2
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002790:	441c      	add	r4, r3
 8002792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002796:	2200      	movs	r2, #0
 8002798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800279c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027a4:	4642      	mov	r2, r8
 80027a6:	464b      	mov	r3, r9
 80027a8:	1891      	adds	r1, r2, r2
 80027aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027ac:	415b      	adcs	r3, r3
 80027ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027b4:	4641      	mov	r1, r8
 80027b6:	1851      	adds	r1, r2, r1
 80027b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80027ba:	4649      	mov	r1, r9
 80027bc:	414b      	adcs	r3, r1
 80027be:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027cc:	4659      	mov	r1, fp
 80027ce:	00cb      	lsls	r3, r1, #3
 80027d0:	4651      	mov	r1, sl
 80027d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d6:	4651      	mov	r1, sl
 80027d8:	00ca      	lsls	r2, r1, #3
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	4642      	mov	r2, r8
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027e8:	464b      	mov	r3, r9
 80027ea:	460a      	mov	r2, r1
 80027ec:	eb42 0303 	adc.w	r3, r2, r3
 80027f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002800:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002808:	460b      	mov	r3, r1
 800280a:	18db      	adds	r3, r3, r3
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280e:	4613      	mov	r3, r2
 8002810:	eb42 0303 	adc.w	r3, r2, r3
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800281a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800281e:	f7fd fd77 	bl	8000310 <__aeabi_uldivmod>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <UART_SetConfig+0x2d4>)
 8002828:	fba3 1302 	umull	r1, r3, r3, r2
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	2164      	movs	r1, #100	@ 0x64
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	3332      	adds	r3, #50	@ 0x32
 800283a:	4a08      	ldr	r2, [pc, #32]	@ (800285c <UART_SetConfig+0x2d4>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	f003 0207 	and.w	r2, r3, #7
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4422      	add	r2, r4
 800284e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002850:	e106      	b.n	8002a60 <UART_SetConfig+0x4d8>
 8002852:	bf00      	nop
 8002854:	40011000 	.word	0x40011000
 8002858:	40011400 	.word	0x40011400
 800285c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002864:	2200      	movs	r2, #0
 8002866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800286a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800286e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002872:	4642      	mov	r2, r8
 8002874:	464b      	mov	r3, r9
 8002876:	1891      	adds	r1, r2, r2
 8002878:	6239      	str	r1, [r7, #32]
 800287a:	415b      	adcs	r3, r3
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
 800287e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002882:	4641      	mov	r1, r8
 8002884:	1854      	adds	r4, r2, r1
 8002886:	4649      	mov	r1, r9
 8002888:	eb43 0501 	adc.w	r5, r3, r1
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	00eb      	lsls	r3, r5, #3
 8002896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800289a:	00e2      	lsls	r2, r4, #3
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	4643      	mov	r3, r8
 80028a2:	18e3      	adds	r3, r4, r3
 80028a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028a8:	464b      	mov	r3, r9
 80028aa:	eb45 0303 	adc.w	r3, r5, r3
 80028ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ce:	4629      	mov	r1, r5
 80028d0:	008b      	lsls	r3, r1, #2
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d8:	4621      	mov	r1, r4
 80028da:	008a      	lsls	r2, r1, #2
 80028dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028e0:	f7fd fd16 	bl	8000310 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4b60      	ldr	r3, [pc, #384]	@ (8002a6c <UART_SetConfig+0x4e4>)
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	011c      	lsls	r4, r3, #4
 80028f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	61b9      	str	r1, [r7, #24]
 800290c:	415b      	adcs	r3, r3
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002914:	4641      	mov	r1, r8
 8002916:	1851      	adds	r1, r2, r1
 8002918:	6139      	str	r1, [r7, #16]
 800291a:	4649      	mov	r1, r9
 800291c:	414b      	adcs	r3, r1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292c:	4659      	mov	r1, fp
 800292e:	00cb      	lsls	r3, r1, #3
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002936:	4651      	mov	r1, sl
 8002938:	00ca      	lsls	r2, r1, #3
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	4603      	mov	r3, r0
 8002940:	4642      	mov	r2, r8
 8002942:	189b      	adds	r3, r3, r2
 8002944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002948:	464b      	mov	r3, r9
 800294a:	460a      	mov	r2, r1
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800295e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800296c:	4649      	mov	r1, r9
 800296e:	008b      	lsls	r3, r1, #2
 8002970:	4641      	mov	r1, r8
 8002972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002976:	4641      	mov	r1, r8
 8002978:	008a      	lsls	r2, r1, #2
 800297a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800297e:	f7fd fcc7 	bl	8000310 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4611      	mov	r1, r2
 8002988:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <UART_SetConfig+0x4e4>)
 800298a:	fba3 2301 	umull	r2, r3, r3, r1
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2264      	movs	r2, #100	@ 0x64
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	1acb      	subs	r3, r1, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	@ 0x32
 800299c:	4a33      	ldr	r2, [pc, #204]	@ (8002a6c <UART_SetConfig+0x4e4>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a8:	441c      	add	r4, r3
 80029aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ae:	2200      	movs	r2, #0
 80029b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80029b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029b8:	4642      	mov	r2, r8
 80029ba:	464b      	mov	r3, r9
 80029bc:	1891      	adds	r1, r2, r2
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	415b      	adcs	r3, r3
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c8:	4641      	mov	r1, r8
 80029ca:	1851      	adds	r1, r2, r1
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	4649      	mov	r1, r9
 80029d0:	414b      	adcs	r3, r1
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029e0:	4659      	mov	r1, fp
 80029e2:	00cb      	lsls	r3, r1, #3
 80029e4:	4651      	mov	r1, sl
 80029e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ea:	4651      	mov	r1, sl
 80029ec:	00ca      	lsls	r2, r1, #3
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	4642      	mov	r2, r8
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029fa:	464b      	mov	r3, r9
 80029fc:	460a      	mov	r2, r1
 80029fe:	eb42 0303 	adc.w	r3, r2, r3
 8002a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	008b      	lsls	r3, r1, #2
 8002a20:	4641      	mov	r1, r8
 8002a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a26:	4641      	mov	r1, r8
 8002a28:	008a      	lsls	r2, r1, #2
 8002a2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a2e:	f7fd fc6f 	bl	8000310 <__aeabi_uldivmod>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <UART_SetConfig+0x4e4>)
 8002a38:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	2164      	movs	r1, #100	@ 0x64
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	3332      	adds	r3, #50	@ 0x32
 8002a4a:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <UART_SetConfig+0x4e4>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4422      	add	r2, r4
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a66:	46bd      	mov	sp, r7
 8002a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6c:	51eb851f 	.word	0x51eb851f

08002a70 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002a76:	201c      	movs	r0, #28
 8002a78:	f002 fc82 	bl	8005380 <pvPortMalloc>
 8002a7c:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f959 	bl	8002d46 <vListInitialise>
            else
            {
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 faae 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f240 1023 	movw	r0, #291	@ 0x123
 8002aa4:	f004 f90e 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

            return pxEventBits;
 8002aa8:	687b      	ldr	r3, [r7, #4]
        }
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <xEventGroupSync>:

    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	@ 0x30
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
        EventBits_t uxOriginalBitValue, uxReturn;
        EventGroup_t * pxEventBits = xEventGroup;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );

        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad0:	d30b      	bcc.n	8002aea <xEventGroupSync+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <xEventGroupSync+0x32>
        configASSERT( uxBitsToWaitFor != 0 );
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <xEventGroupSync+0x54>
    __asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	617b      	str	r3, [r7, #20]
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <xEventGroupSync+0x50>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b08:	f001 fe12 	bl	8004730 <xTaskGetSchedulerState>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <xEventGroupSync+0x64>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <xEventGroupSync+0x68>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <xEventGroupSync+0x6a>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <xEventGroupSync+0x86>
    __asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	613b      	str	r3, [r7, #16]
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	e7fd      	b.n	8002b36 <xEventGroupSync+0x82>
        }
        #endif

        vTaskSuspendAll();
 8002b3a:	f000 ff3b 	bl	80039b4 <vTaskSuspendAll>
        {
            uxOriginalBitValue = pxEventBits->uxEventBits;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	623b      	str	r3, [r7, #32]

            ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f86a 	bl	8002c20 <xEventGroupSetBits>

            if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d10d      	bne.n	8002b78 <xEventGroupSync+0xc4>
            {
                /* All the rendezvous bits are now set - no need to block. */
                uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Rendezvous always clear the bits.  They will have been cleared
                 * already unless this is the only task in the rendezvous. */
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b70:	601a      	str	r2, [r3, #0]

                xTicksToWait = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	e013      	b.n	8002ba0 <xEventGroupSync+0xec>
            }
            else
            {
                if( xTicksToWait != ( TickType_t ) 0 )
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <xEventGroupSync+0xe2>
                    traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                    /* Store the bits that the calling task is waiting for in the
                     * task's event list item so the kernel knows when a match is
                     * found.  Then enter the blocked state. */
                    vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8002b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b80:	1d18      	adds	r0, r3, #4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f001 fa3e 	bl	800400c <vTaskPlaceOnUnorderedEventList>

                    /* This assignment is obsolete as uxReturn will get set after
                     * the task unblocks, but some compilers mistakenly generate a
                     * warning about uxReturn being returned without being set if the
                     * assignment is omitted. */
                    uxReturn = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b94:	e004      	b.n	8002ba0 <xEventGroupSync+0xec>
                }
                else
                {
                    /* The rendezvous bits were not set, but no block time was
                     * specified - just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xTimeoutOccurred = pdTRUE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002ba0:	f000 ff16 	bl	80039d0 <xTaskResumeAll>
 8002ba4:	61f8      	str	r0, [r7, #28]

        if( xTicksToWait != ( TickType_t ) 0 )
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02c      	beq.n	8002c06 <xEventGroupSync+0x152>
        {
            if( xAlreadyYielded == pdFALSE )
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d107      	bne.n	8002bc2 <xEventGroupSync+0x10e>
            {
                taskYIELD_WITHIN_API();
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <xEventGroupSync+0x168>)
 8002bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 8002bc2:	f001 fdd7 	bl	8004774 <uxTaskResetEventItemValue>
 8002bc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <xEventGroupSync+0x14a>
            {
                /* The task timed out, just return the current event bit value. */
                taskENTER_CRITICAL();
 8002bd2:	f002 faa7 	bl	8005124 <vPortEnterCritical>
                {
                    uxReturn = pxEventBits->uxEventBits;
 8002bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Although the task got here because it timed out before the
                     * bits it was waiting for were set, it is possible that since it
                     * unblocked another task has set the bits.  If this is the case
                     * then it needs to clear the bits before exiting. */
                    if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d106      	bne.n	8002bf6 <xEventGroupSync+0x142>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
 8002bf6:	f002 fac7 	bl	8005188 <vPortExitCritical>

                xTimeoutOccurred = pdTRUE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
                /* The task unblocked because the bits were set. */
            }

            /* Control bits might be set as the task had blocked should not be
             * returned. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupSync( uxReturn );
 8002c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c08:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8002c0c:	f004 f85a 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8002c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8002c12:	4618      	mov	r0, r3
 8002c14:	3730      	adds	r7, #48	@ 0x30
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08e      	sub	sp, #56	@ 0x38
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
        EventGroup_t * pxEventBits = xEventGroup;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xMatchFound = pdFALSE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <xEventGroupSetBits+0x34>
    __asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	613b      	str	r3, [r7, #16]
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <xEventGroupSetBits+0x30>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c5a:	d30b      	bcc.n	8002c74 <xEventGroupSetBits+0x54>
    __asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	60fb      	str	r3, [r7, #12]
}
 8002c6e:	bf00      	nop
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <xEventGroupSetBits+0x50>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	3304      	adds	r3, #4
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
        pxListEnd = listGET_END_MARKER( pxList );
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	623b      	str	r3, [r7, #32]
        vTaskSuspendAll();
 8002c80:	f000 fe98 	bl	80039b4 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8002c96:	e03c      	b.n	8002d12 <xEventGroupSetBits+0xf2>
            {
                pxNext = listGET_NEXT( pxListItem );
 8002c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	61fb      	str	r3, [r7, #28]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	61bb      	str	r3, [r7, #24]
                xMatchFound = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002cae:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cb6:	61bb      	str	r3, [r7, #24]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <xEventGroupSetBits+0xb4>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <xEventGroupSetBits+0xc6>
                    {
                        xMatchFound = pdTRUE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd2:	e008      	b.n	8002ce6 <xEventGroupSetBits+0xc6>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d101      	bne.n	8002ce6 <xEventGroupSetBits+0xc6>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <xEventGroupSetBits+0xee>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <xEventGroupSetBits+0xde>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8002cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	633b      	str	r3, [r7, #48]	@ 0x30
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d06:	4619      	mov	r1, r3
 8002d08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d0a:	f001 fb05 	bl	8004318 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
            while( pxListItem != pxListEnd )
 8002d12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d1be      	bne.n	8002c98 <xEventGroupSetBits+0x78>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8002d28:	f000 fe52 	bl	80039d0 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f240 1029 	movw	r0, #297	@ 0x129
 8002d36:	f003 ffc5 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxEventBits->uxEventBits;
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	681b      	ldr	r3, [r3, #0]
    }
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3738      	adds	r7, #56	@ 0x38
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f103 0208 	add.w	r2, r3, #8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f103 0208 	add.w	r2, r3, #8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f103 0208 	add.w	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002d7a:	f240 1019 	movw	r0, #281	@ 0x119
 8002d7e:	f003 ff65 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002d98:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002d9c:	f003 ff56 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d103      	bne.n	8002dc8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e00c      	b.n	8002de2 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e002      	b.n	8002dd6 <vListInsert+0x2e>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d2f6      	bcs.n	8002dd0 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002e0e:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002e12:	f003 ff1b 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6852      	ldr	r2, [r2, #4]
 8002e3e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d103      	bne.n	8002e52 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	1e5a      	subs	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	f240 101d 	movw	r0, #285	@ 0x11d
 8002e6c:	f003 ff2a 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002e86:	2301      	movs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <xQueueGenericReset+0x30>
    __asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d05d      	beq.n	8002f6e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d059      	beq.n	8002f6e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d000      	beq.n	8002ece <xQueueGenericReset+0x52>
 8002ecc:	2101      	movs	r1, #1
 8002ece:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d14c      	bne.n	8002f6e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002ed4:	f002 f926 	bl	8005124 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	6939      	ldr	r1, [r7, #16]
 8002ee2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	441a      	add	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	3b01      	subs	r3, #1
 8002f06:	6939      	ldr	r1, [r7, #16]
 8002f08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	441a      	add	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	22ff      	movs	r2, #255	@ 0xff
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	22ff      	movs	r2, #255	@ 0xff
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d114      	bne.n	8002f54 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01a      	beq.n	8002f68 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3310      	adds	r3, #16
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 f90e 	bl	8004158 <xTaskRemoveFromEventList>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <xQueueGenericReset+0x128>)
 8002f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	e009      	b.n	8002f68 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3310      	adds	r3, #16
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fef4 	bl	8002d46 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3324      	adds	r3, #36	@ 0x24
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff feef 	bl	8002d46 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002f68:	f002 f90e 	bl	8005188 <vPortExitCritical>
 8002f6c:	e001      	b.n	8002f72 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <xQueueGenericReset+0x114>
    __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60bb      	str	r3, [r7, #8]
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	4619      	mov	r1, r3
 8002f94:	2096      	movs	r0, #150	@ 0x96
 8002f96:	f003 fe95 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002f9a:	697b      	ldr	r3, [r7, #20]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02e      	beq.n	800301e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d000      	beq.n	8002fd0 <xQueueGenericCreate+0x28>
 8002fce:	2101      	movs	r1, #1
 8002fd0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d123      	bne.n	800301e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fde:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002fe2:	d81c      	bhi.n	800301e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	3350      	adds	r3, #80	@ 0x50
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 f9c4 	bl	8005380 <pvPortMalloc>
 8002ff8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01d      	beq.n	800303c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3350      	adds	r3, #80	@ 0x50
 8003008:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f81e 	bl	8003058 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800301c:	e00e      	b.n	800303c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <xQueueGenericCreate+0x94>
    __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4618      	mov	r0, r3
 8003040:	f003 ffda 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8003044:	4603      	mov	r3, r0
 8003046:	4619      	mov	r1, r3
 8003048:	2098      	movs	r0, #152	@ 0x98
 800304a:	f003 fe3b 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800304e:	69fb      	ldr	r3, [r7, #28]
    }
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e002      	b.n	800307a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003086:	2101      	movs	r1, #1
 8003088:	69b8      	ldr	r0, [r7, #24]
 800308a:	f7ff fef7 	bl	8002e7c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	@ 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <xQueueReceive+0x32>
    __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	623b      	str	r3, [r7, #32]
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <xQueueReceive+0x40>
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <xQueueReceive+0x44>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <xQueueReceive+0x46>
 80030e4:	2300      	movs	r3, #0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <xQueueReceive+0x62>
    __asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	61fb      	str	r3, [r7, #28]
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	e7fd      	b.n	80030fe <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003102:	f001 fb15 	bl	8004730 <xTaskGetSchedulerState>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <xQueueReceive+0x72>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <xQueueReceive+0x76>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <xQueueReceive+0x78>
 8003116:	2300      	movs	r3, #0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <xQueueReceive+0x94>
    __asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	61bb      	str	r3, [r7, #24]
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003134:	f001 fff6 	bl	8005124 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d023      	beq.n	800318c <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003148:	f000 f898 	bl	800327c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003152:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00f      	beq.n	800317c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	3310      	adds	r3, #16
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fff9 	bl	8004158 <xTaskRemoveFromEventList>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800316c:	4b42      	ldr	r3, [pc, #264]	@ (8003278 <xQueueReceive+0x1d8>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800317c:	f002 f804 	bl	8005188 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8003180:	2101      	movs	r1, #1
 8003182:	20a4      	movs	r0, #164	@ 0xa4
 8003184:	f003 fd9e 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8003188:	2301      	movs	r3, #1
 800318a:	e071      	b.n	8003270 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d107      	bne.n	80031a2 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003192:	f001 fff9 	bl	8005188 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003196:	2100      	movs	r1, #0
 8003198:	20a4      	movs	r0, #164	@ 0xa4
 800319a:	f003 fd93 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800319e:	2300      	movs	r3, #0
 80031a0:	e066      	b.n	8003270 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80031a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f97d 	bl	80044ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031b6:	f001 ffe7 	bl	8005188 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031ba:	f000 fbfb 	bl	80039b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031be:	f001 ffb1 	bl	8005124 <vPortEnterCritical>
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d103      	bne.n	80031d8 <xQueueReceive+0x138>
 80031d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d103      	bne.n	80031ee <xQueueReceive+0x14e>
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ee:	f001 ffcb 	bl	8005188 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031f2:	1d3a      	adds	r2, r7, #4
 80031f4:	f107 0310 	add.w	r3, r7, #16
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 f96e 	bl	80044dc <xTaskCheckForTimeOut>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d123      	bne.n	800324e <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003208:	f000 f8b0 	bl	800336c <prvIsQueueEmpty>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d017      	beq.n	8003242 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003214:	3324      	adds	r3, #36	@ 0x24
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fece 	bl	8003fbc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003222:	f000 f851 	bl	80032c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003226:	f000 fbd3 	bl	80039d0 <xTaskResumeAll>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d181      	bne.n	8003134 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <xQueueReceive+0x1d8>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	e778      	b.n	8003134 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003244:	f000 f840 	bl	80032c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003248:	f000 fbc2 	bl	80039d0 <xTaskResumeAll>
 800324c:	e772      	b.n	8003134 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800324e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003250:	f000 f83a 	bl	80032c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003254:	f000 fbbc 	bl	80039d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800325a:	f000 f887 	bl	800336c <prvIsQueueEmpty>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	f43f af67 	beq.w	8003134 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003266:	2100      	movs	r1, #0
 8003268:	20a4      	movs	r0, #164	@ 0xa4
 800326a:	f003 fd2b 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800326e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3730      	adds	r7, #48	@ 0x30
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	441a      	add	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d303      	bcc.n	80032b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68d9      	ldr	r1, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	461a      	mov	r2, r3
 80032ba:	6838      	ldr	r0, [r7, #0]
 80032bc:	f004 fb07 	bl	80078ce <memcpy>
    }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80032d0:	f001 ff28 	bl	8005124 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032dc:	e011      	b.n	8003302 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3324      	adds	r3, #36	@ 0x24
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff34 	bl	8004158 <xTaskRemoveFromEventList>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80032f6:	f001 f95d 	bl	80045b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	dce9      	bgt.n	80032de <prvUnlockQueue+0x16>
 800330a:	e000      	b.n	800330e <prvUnlockQueue+0x46>
                    break;
 800330c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	22ff      	movs	r2, #255	@ 0xff
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003316:	f001 ff37 	bl	8005188 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800331a:	f001 ff03 	bl	8005124 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003324:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003326:	e011      	b.n	800334c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3310      	adds	r3, #16
 8003334:	4618      	mov	r0, r3
 8003336:	f000 ff0f 	bl	8004158 <xTaskRemoveFromEventList>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003340:	f001 f938 	bl	80045b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	3b01      	subs	r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800334c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003350:	2b00      	cmp	r3, #0
 8003352:	dce9      	bgt.n	8003328 <prvUnlockQueue+0x60>
 8003354:	e000      	b.n	8003358 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003356:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	22ff      	movs	r2, #255	@ 0xff
 800335c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003360:	f001 ff12 	bl	8005188 <vPortExitCritical>
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003374:	f001 fed6 	bl	8005124 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e001      	b.n	800338a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800338a:	f001 fefd 	bl	8005188 <vPortExitCritical>

    return xReturn;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	60fb      	str	r3, [r7, #12]
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d024      	beq.n	8003414 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e01e      	b.n	800340e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80033d0:	4a18      	ldr	r2, [pc, #96]	@ (8003434 <vQueueAddToRegistry+0x9c>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d105      	bne.n	80033ec <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <vQueueAddToRegistry+0x9c>)
 80033e6:	4413      	add	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
                    break;
 80033ea:	e013      	b.n	8003414 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <vQueueAddToRegistry+0x70>
 80033f2:	4a10      	ldr	r2, [pc, #64]	@ (8003434 <vQueueAddToRegistry+0x9c>)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <vQueueAddToRegistry+0x9c>)
 8003404:	4413      	add	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3301      	adds	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b07      	cmp	r3, #7
 8003412:	d9dd      	bls.n	80033d0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003426:	20b6      	movs	r0, #182	@ 0xb6
 8003428:	f003 fc10 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2000015c 	.word	0x2000015c

08003438 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003448:	f001 fe6c 	bl	8005124 <vPortEnterCritical>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003452:	b25b      	sxtb	r3, r3
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <vQueueWaitForMessageRestricted+0x2a>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003468:	b25b      	sxtb	r3, r3
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d103      	bne.n	8003478 <vQueueWaitForMessageRestricted+0x40>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003478:	f001 fe86 	bl	8005188 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3324      	adds	r3, #36	@ 0x24
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fe19 	bl	80040c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff18 	bl	80032c8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003498:	20b9      	movs	r0, #185	@ 0xb9
 800349a:	f003 fbd7 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	@ 0x28
 80034aa:	af04      	add	r7, sp, #16
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 ff61 	bl	8005380 <pvPortMalloc>
 80034be:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80034c6:	205c      	movs	r0, #92	@ 0x5c
 80034c8:	f001 ff5a 	bl	8005380 <pvPortMalloc>
 80034cc:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80034d4:	225c      	movs	r2, #92	@ 0x5c
 80034d6:	2100      	movs	r1, #0
 80034d8:	6978      	ldr	r0, [r7, #20]
 80034da:	f004 f98e 	bl	80077fa <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034e4:	e005      	b.n	80034f2 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80034e6:	6938      	ldr	r0, [r7, #16]
 80034e8:	f002 f87c 	bl	80055e4 <vPortFree>
 80034ec:	e001      	b.n	80034f2 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034f8:	2300      	movs	r3, #0
 80034fa:	9303      	str	r3, [sp, #12]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f82d 	bl	800356e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003514:	697b      	ldr	r3, [r7, #20]
    }
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800351e:	b580      	push	{r7, lr}
 8003520:	b088      	sub	sp, #32
 8003522:	af02      	add	r7, sp, #8
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff ffb3 	bl	80034a6 <prvCreateTask>
 8003540:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003548:	6938      	ldr	r0, [r7, #16]
 800354a:	f000 f8a1 	bl	8003690 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800354e:	2301      	movs	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e002      	b.n	800355a <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	4619      	mov	r1, r3
 800355e:	20c2      	movs	r0, #194	@ 0xc2
 8003560:	f003 fbb0 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003564:	697b      	ldr	r3, [r7, #20]
    }
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b088      	sub	sp, #32
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	461a      	mov	r2, r3
 8003586:	21a5      	movs	r1, #165	@ 0xa5
 8003588:	f004 f937 	bl	80077fa <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003596:	3b01      	subs	r3, #1
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f023 0307 	bic.w	r3, r3, #7
 80035a4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	617b      	str	r3, [r7, #20]
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01e      	beq.n	800360c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	e012      	b.n	80035fa <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	7819      	ldrb	r1, [r3, #0]
 80035dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	3334      	adds	r3, #52	@ 0x34
 80035e4:	460a      	mov	r2, r1
 80035e6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3301      	adds	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	2b0e      	cmp	r3, #14
 80035fe:	d9e9      	bls.n	80035d4 <prvInitialiseNewTask+0x66>
 8003600:	e000      	b.n	8003604 <prvInitialiseNewTask+0x96>
            {
                break;
 8003602:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	2b04      	cmp	r3, #4
 8003610:	d90b      	bls.n	800362a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	613b      	str	r3, [r7, #16]
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	e7fd      	b.n	8003626 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362c:	2b04      	cmp	r3, #4
 800362e:	d901      	bls.n	8003634 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003630:	2304      	movs	r3, #4
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003638:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800363e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	3304      	adds	r3, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fba0 	bl	8002d8a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	3318      	adds	r3, #24
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fb9b 	bl	8002d8a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003658:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365c:	f1c3 0205 	rsb	r2, r3, #5
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003668:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	69b8      	ldr	r0, [r7, #24]
 8003670:	f001 fbdc 	bl	8004e2c <pxPortInitialiseStack>
 8003674:	4602      	mov	r2, r0
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003684:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003686:	bf00      	nop
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003690:	b5b0      	push	{r4, r5, r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003698:	f001 fd44 	bl	8005124 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800369c:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <prvAddNewTaskToReadyList+0x150>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a4f      	ldr	r2, [pc, #316]	@ (80037e0 <prvAddNewTaskToReadyList+0x150>)
 80036a4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80036a6:	4b4f      	ldr	r3, [pc, #316]	@ (80037e4 <prvAddNewTaskToReadyList+0x154>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80036ae:	4a4d      	ldr	r2, [pc, #308]	@ (80037e4 <prvAddNewTaskToReadyList+0x154>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036b4:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <prvAddNewTaskToReadyList+0x150>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d110      	bne.n	80036de <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80036bc:	f000 ff9e 	bl	80045fc <prvInitialiseTaskLists>
 80036c0:	e00d      	b.n	80036de <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80036c2:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <prvAddNewTaskToReadyList+0x158>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036ca:	4b46      	ldr	r3, [pc, #280]	@ (80037e4 <prvAddNewTaskToReadyList+0x154>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d802      	bhi.n	80036de <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80036d8:	4a42      	ldr	r2, [pc, #264]	@ (80037e4 <prvAddNewTaskToReadyList+0x154>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80036de:	4b43      	ldr	r3, [pc, #268]	@ (80037ec <prvAddNewTaskToReadyList+0x15c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	4a41      	ldr	r2, [pc, #260]	@ (80037ec <prvAddNewTaskToReadyList+0x15c>)
 80036e6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036e8:	4b40      	ldr	r3, [pc, #256]	@ (80037ec <prvAddNewTaskToReadyList+0x15c>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <prvAddNewTaskToReadyList+0x94>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 fb57 	bl	8006dac <SEGGER_SYSVIEW_OnTaskCreate>
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	461d      	mov	r5, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461c      	mov	r4, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	1ae3      	subs	r3, r4, r3
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	462b      	mov	r3, r5
 8003720:	f003 fe5a 	bl	80073d8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	f003 fbc4 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	2201      	movs	r2, #1
 8003732:	409a      	lsls	r2, r3
 8003734:	4b2e      	ldr	r3, [pc, #184]	@ (80037f0 <prvAddNewTaskToReadyList+0x160>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	4a2d      	ldr	r2, [pc, #180]	@ (80037f0 <prvAddNewTaskToReadyList+0x160>)
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003742:	492c      	ldr	r1, [pc, #176]	@ (80037f4 <prvAddNewTaskToReadyList+0x164>)
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3304      	adds	r3, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	3204      	adds	r2, #4
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1d1a      	adds	r2, r3, #4
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a1c      	ldr	r2, [pc, #112]	@ (80037f4 <prvAddNewTaskToReadyList+0x164>)
 8003782:	441a      	add	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	615a      	str	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378c:	4919      	ldr	r1, [pc, #100]	@ (80037f4 <prvAddNewTaskToReadyList+0x164>)
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	4814      	ldr	r0, [pc, #80]	@ (80037f4 <prvAddNewTaskToReadyList+0x164>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4403      	add	r3, r0
 80037ac:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80037ae:	f001 fceb 	bl	8005188 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <prvAddNewTaskToReadyList+0x158>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00e      	beq.n	80037d8 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <prvAddNewTaskToReadyList+0x154>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d207      	bcs.n	80037d8 <prvAddNewTaskToReadyList+0x148>
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <prvAddNewTaskToReadyList+0x168>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bdb0      	pop	{r4, r5, r7, pc}
 80037e0:	20000274 	.word	0x20000274
 80037e4:	2000019c 	.word	0x2000019c
 80037e8:	20000280 	.word	0x20000280
 80037ec:	20000290 	.word	0x20000290
 80037f0:	2000027c 	.word	0x2000027c
 80037f4:	200001a0 	.word	0x200001a0
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800380e:	f000 f8d1 	bl	80039b4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003812:	4b14      	ldr	r3, [pc, #80]	@ (8003864 <vTaskDelay+0x68>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d00b      	beq.n	8003832 <vTaskDelay+0x36>
    __asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	60bb      	str	r3, [r7, #8]
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003832:	2100      	movs	r1, #0
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 ffb7 	bl	80047a8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800383a:	f000 f8c9 	bl	80039d0 <xTaskResumeAll>
 800383e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d107      	bne.n	8003856 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8003846:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <vTaskDelay+0x6c>)
 8003848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003856:	20c5      	movs	r0, #197	@ 0xc5
 8003858:	f003 f9f8 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	2000029c 	.word	0x2000029c
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003872:	2301      	movs	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e011      	b.n	80038a4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003880:	4a1c      	ldr	r2, [pc, #112]	@ (80038f4 <prvCreateIdleTasks+0x88>)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4413      	add	r3, r2
 8003886:	7819      	ldrb	r1, [r3, #0]
 8003888:	463a      	mov	r2, r7
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4413      	add	r3, r2
 800388e:	460a      	mov	r2, r1
 8003890:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003892:	463a      	mov	r2, r7
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4413      	add	r3, r2
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	3301      	adds	r3, #1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b0e      	cmp	r3, #14
 80038a8:	ddea      	ble.n	8003880 <prvCreateIdleTasks+0x14>
 80038aa:	e000      	b.n	80038ae <prvCreateIdleTasks+0x42>
        {
            break;
 80038ac:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e015      	b.n	80038e0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80038b4:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <prvCreateIdleTasks+0x8c>)
 80038b6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4a0f      	ldr	r2, [pc, #60]	@ (80038fc <prvCreateIdleTasks+0x90>)
 80038be:	4413      	add	r3, r2
 80038c0:	4639      	mov	r1, r7
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2300      	movs	r3, #0
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	2282      	movs	r2, #130	@ 0x82
 80038cc:	6938      	ldr	r0, [r7, #16]
 80038ce:	f7ff fe26 	bl	800351e <xTaskCreate>
 80038d2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	3301      	adds	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	dde6      	ble.n	80038b4 <prvCreateIdleTasks+0x48>
 80038e6:	e000      	b.n	80038ea <prvCreateIdleTasks+0x7e>
        {
            break;
 80038e8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80038ea:	69fb      	ldr	r3, [r7, #28]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	080088f8 	.word	0x080088f8
 80038f8:	080045cd 	.word	0x080045cd
 80038fc:	20000298 	.word	0x20000298

08003900 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003906:	f7ff ffb1 	bl	800386c <prvCreateIdleTasks>
 800390a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d102      	bne.n	8003918 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003912:	f000 ffd7 	bl	80048c4 <xTimerCreateTimerTask>
 8003916:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d124      	bne.n	8003968 <vTaskStartScheduler+0x68>
    __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60bb      	str	r3, [r7, #8]
}
 8003930:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003932:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <vTaskStartScheduler+0x9c>)
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800393a:	4b19      	ldr	r3, [pc, #100]	@ (80039a0 <vTaskStartScheduler+0xa0>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003940:	4b18      	ldr	r3, [pc, #96]	@ (80039a4 <vTaskStartScheduler+0xa4>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003946:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <vTaskStartScheduler+0xa8>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <vTaskStartScheduler+0xac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d102      	bne.n	8003958 <vTaskStartScheduler+0x58>
 8003952:	f003 fa0f 	bl	8006d74 <SEGGER_SYSVIEW_OnIdle>
 8003956:	e004      	b.n	8003962 <vTaskStartScheduler+0x62>
 8003958:	4b14      	ldr	r3, [pc, #80]	@ (80039ac <vTaskStartScheduler+0xac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f003 fa67 	bl	8006e30 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003962:	f001 faef 	bl	8004f44 <xPortStartScheduler>
 8003966:	e00f      	b.n	8003988 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d10b      	bne.n	8003988 <vTaskStartScheduler+0x88>
    __asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	607b      	str	r3, [r7, #4]
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003988:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <vTaskStartScheduler+0xb0>)
 800398a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800398c:	20cd      	movs	r0, #205	@ 0xcd
 800398e:	f003 f95d 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000294 	.word	0x20000294
 80039a0:	20000280 	.word	0x20000280
 80039a4:	20000278 	.word	0x20000278
 80039a8:	20000298 	.word	0x20000298
 80039ac:	2000019c 	.word	0x2000019c
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80039b8:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <vTaskSuspendAll+0x18>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	4a03      	ldr	r2, [pc, #12]	@ (80039cc <vTaskSuspendAll+0x18>)
 80039c0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80039c2:	20cf      	movs	r0, #207	@ 0xcf
 80039c4:	f003 f942 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000029c 	.word	0x2000029c

080039d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80039de:	f001 fba1 	bl	8005124 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80039e6:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd0 <xTaskResumeAll+0x200>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <xTaskResumeAll+0x36>
    __asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	603b      	str	r3, [r7, #0]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003a06:	4b72      	ldr	r3, [pc, #456]	@ (8003bd0 <xTaskResumeAll+0x200>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	4a70      	ldr	r2, [pc, #448]	@ (8003bd0 <xTaskResumeAll+0x200>)
 8003a0e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003a10:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd0 <xTaskResumeAll+0x200>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 80ce 	bne.w	8003bb6 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8003bd4 <xTaskResumeAll+0x204>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80c9 	beq.w	8003bb6 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a24:	e092      	b.n	8003b4c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a26:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd8 <xTaskResumeAll+0x208>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	6a12      	ldr	r2, [r2, #32]
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	69d2      	ldr	r2, [r2, #28]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3318      	adds	r3, #24
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d103      	bne.n	8003a5c <xTaskResumeAll+0x8c>
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	68d2      	ldr	r2, [r2, #12]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d103      	bne.n	8003a9a <xTaskResumeAll+0xca>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	615a      	str	r2, [r3, #20]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f003 fa01 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	4b48      	ldr	r3, [pc, #288]	@ (8003bdc <xTaskResumeAll+0x20c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	4a46      	ldr	r2, [pc, #280]	@ (8003bdc <xTaskResumeAll+0x20c>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac8:	4945      	ldr	r1, [pc, #276]	@ (8003be0 <xTaskResumeAll+0x210>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	3204      	adds	r2, #4
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a36      	ldr	r2, [pc, #216]	@ (8003be0 <xTaskResumeAll+0x210>)
 8003b08:	441a      	add	r2, r3
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	615a      	str	r2, [r3, #20]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b12:	4933      	ldr	r1, [pc, #204]	@ (8003be0 <xTaskResumeAll+0x210>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b24:	1c59      	adds	r1, r3, #1
 8003b26:	482e      	ldr	r0, [pc, #184]	@ (8003be0 <xTaskResumeAll+0x210>)
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4403      	add	r3, r0
 8003b32:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b38:	4b2a      	ldr	r3, [pc, #168]	@ (8003be4 <xTaskResumeAll+0x214>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d904      	bls.n	8003b4c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003b42:	4a29      	ldr	r2, [pc, #164]	@ (8003be8 <xTaskResumeAll+0x218>)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2101      	movs	r1, #1
 8003b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b4c:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <xTaskResumeAll+0x208>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f47f af68 	bne.w	8003a26 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003b5c:	f000 fdcc 	bl	80046f8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b60:	4b22      	ldr	r3, [pc, #136]	@ (8003bec <xTaskResumeAll+0x21c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d012      	beq.n	8003b92 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003b6c:	f000 f898 	bl	8003ca0 <xTaskIncrementTick>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003b76:	4a1c      	ldr	r2, [pc, #112]	@ (8003be8 <xTaskResumeAll+0x218>)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ef      	bne.n	8003b6c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <xTaskResumeAll+0x21c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003b92:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <xTaskResumeAll+0x218>)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <xTaskResumeAll+0x214>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <xTaskResumeAll+0x220>)
 8003ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bb6:	f001 fae7 	bl	8005188 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	20d0      	movs	r0, #208	@ 0xd0
 8003bc0:	f003 f880 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000029c 	.word	0x2000029c
 8003bd4:	20000274 	.word	0x20000274
 8003bd8:	20000234 	.word	0x20000234
 8003bdc:	2000027c 	.word	0x2000027c
 8003be0:	200001a0 	.word	0x200001a0
 8003be4:	2000019c 	.word	0x2000019c
 8003be8:	20000288 	.word	0x20000288
 8003bec:	20000284 	.word	0x20000284
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <xTaskGetTickCount+0x20>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	20d1      	movs	r0, #209	@ 0xd1
 8003c04:	f003 f85e 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003c08:	687b      	ldr	r3, [r7, #4]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000278 	.word	0x20000278

08003c18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c1e:	f001 fb6d 	bl	80052fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <xTaskGetTickCountFromISR+0x28>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	20d2      	movs	r0, #210	@ 0xd2
 8003c30:	f003 f848 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003c34:	683b      	ldr	r3, [r7, #0]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000278 	.word	0x20000278

08003c44 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <pcTaskGetName+0x14>
 8003c52:	4b12      	ldr	r3, [pc, #72]	@ (8003c9c <pcTaskGetName+0x58>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e000      	b.n	8003c5a <pcTaskGetName+0x16>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <pcTaskGetName+0x36>
    __asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60bb      	str	r3, [r7, #8]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <pcTaskGetName+0x32>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3334      	adds	r3, #52	@ 0x34
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f003 f9ba 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4619      	mov	r1, r3
 8003c88:	20d4      	movs	r0, #212	@ 0xd4
 8003c8a:	f003 f81b 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return &( pxTCB->pcTaskName[ 0 ] );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3334      	adds	r3, #52	@ 0x34
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000019c 	.word	0x2000019c

08003ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	@ 0x28
 8003ca4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003caa:	4b83      	ldr	r3, [pc, #524]	@ (8003eb8 <xTaskIncrementTick+0x218>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f040 80f3 	bne.w	8003e9a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cb4:	4b81      	ldr	r3, [pc, #516]	@ (8003ebc <xTaskIncrementTick+0x21c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003cbc:	4a7f      	ldr	r2, [pc, #508]	@ (8003ebc <xTaskIncrementTick+0x21c>)
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d121      	bne.n	8003d0c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec0 <xTaskIncrementTick+0x220>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <xTaskIncrementTick+0x4a>
    __asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <xTaskIncrementTick+0x46>
 8003cea:	4b75      	ldr	r3, [pc, #468]	@ (8003ec0 <xTaskIncrementTick+0x220>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	4b74      	ldr	r3, [pc, #464]	@ (8003ec4 <xTaskIncrementTick+0x224>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a72      	ldr	r2, [pc, #456]	@ (8003ec0 <xTaskIncrementTick+0x220>)
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4a72      	ldr	r2, [pc, #456]	@ (8003ec4 <xTaskIncrementTick+0x224>)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b72      	ldr	r3, [pc, #456]	@ (8003ec8 <xTaskIncrementTick+0x228>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	4a70      	ldr	r2, [pc, #448]	@ (8003ec8 <xTaskIncrementTick+0x228>)
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	f000 fcf6 	bl	80046f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ecc <xTaskIncrementTick+0x22c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	f0c0 80ac 	bcc.w	8003e70 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d18:	4b69      	ldr	r3, [pc, #420]	@ (8003ec0 <xTaskIncrementTick+0x220>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <xTaskIncrementTick+0x22c>)
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295
 8003d28:	601a      	str	r2, [r3, #0]
                    break;
 8003d2a:	e0a1      	b.n	8003e70 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d2c:	4b64      	ldr	r3, [pc, #400]	@ (8003ec0 <xTaskIncrementTick+0x220>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d203      	bcs.n	8003d4c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003d44:	4a61      	ldr	r2, [pc, #388]	@ (8003ecc <xTaskIncrementTick+0x22c>)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6013      	str	r3, [r2, #0]
                        break;
 8003d4a:	e091      	b.n	8003e70 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	68d2      	ldr	r2, [r2, #12]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d103      	bne.n	8003d7a <xTaskIncrementTick+0xda>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01e      	beq.n	8003dd0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	6a12      	ldr	r2, [r2, #32]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	69d2      	ldr	r2, [r2, #28]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	3318      	adds	r3, #24
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d103      	bne.n	8003dc0 <xTaskIncrementTick+0x120>
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1e5a      	subs	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 f86e 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <xTaskIncrementTick+0x230>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ed0 <xTaskIncrementTick+0x230>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dee:	4939      	ldr	r1, [pc, #228]	@ (8003ed4 <xTaskIncrementTick+0x234>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	3204      	adds	r2, #4
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1d1a      	adds	r2, r3, #4
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4a29      	ldr	r2, [pc, #164]	@ (8003ed4 <xTaskIncrementTick+0x234>)
 8003e2e:	441a      	add	r2, r3
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	615a      	str	r2, [r3, #20]
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e38:	4926      	ldr	r1, [pc, #152]	@ (8003ed4 <xTaskIncrementTick+0x234>)
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	4821      	ldr	r0, [pc, #132]	@ (8003ed4 <xTaskIncrementTick+0x234>)
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4403      	add	r3, r0
 8003e58:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed8 <xTaskIncrementTick+0x238>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	f67f af57 	bls.w	8003d18 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6e:	e753      	b.n	8003d18 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003e70:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <xTaskIncrementTick+0x238>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e76:	4917      	ldr	r1, [pc, #92]	@ (8003ed4 <xTaskIncrementTick+0x234>)
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d901      	bls.n	8003e8c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003e8c:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <xTaskIncrementTick+0x23c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e98:	e004      	b.n	8003ea4 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003e9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <xTaskIncrementTick+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee0 <xTaskIncrementTick+0x240>)
 8003ea2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	20db      	movs	r0, #219	@ 0xdb
 8003eaa:	f002 ff0b 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3728      	adds	r7, #40	@ 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	2000029c 	.word	0x2000029c
 8003ebc:	20000278 	.word	0x20000278
 8003ec0:	2000022c 	.word	0x2000022c
 8003ec4:	20000230 	.word	0x20000230
 8003ec8:	2000028c 	.word	0x2000028c
 8003ecc:	20000294 	.word	0x20000294
 8003ed0:	2000027c 	.word	0x2000027c
 8003ed4:	200001a0 	.word	0x200001a0
 8003ed8:	2000019c 	.word	0x2000019c
 8003edc:	20000288 	.word	0x20000288
 8003ee0:	20000284 	.word	0x20000284

08003ee4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003eea:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa4 <vTaskSwitchContext+0xc0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <vTaskSwitchContext+0xc4>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003ef8:	e04f      	b.n	8003f9a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003efa:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <vTaskSwitchContext+0xc4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f00:	4b2a      	ldr	r3, [pc, #168]	@ (8003fac <vTaskSwitchContext+0xc8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	f1c3 031f 	rsb	r3, r3, #31
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	4926      	ldr	r1, [pc, #152]	@ (8003fb0 <vTaskSwitchContext+0xcc>)
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <vTaskSwitchContext+0x5e>
    __asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	607b      	str	r3, [r7, #4]
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <vTaskSwitchContext+0x5a>
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <vTaskSwitchContext+0xcc>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3308      	adds	r3, #8
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d103      	bne.n	8003f70 <vTaskSwitchContext+0x8c>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4a0f      	ldr	r2, [pc, #60]	@ (8003fb4 <vTaskSwitchContext+0xd0>)
 8003f78:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb8 <vTaskSwitchContext+0xd4>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <vTaskSwitchContext+0xd0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d102      	bne.n	8003f8c <vTaskSwitchContext+0xa8>
 8003f86:	f002 fef5 	bl	8006d74 <SEGGER_SYSVIEW_OnIdle>
 8003f8a:	e004      	b.n	8003f96 <vTaskSwitchContext+0xb2>
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <vTaskSwitchContext+0xd0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 ff4d 	bl	8006e30 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003f96:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <vTaskSwitchContext+0xd0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
    }
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000029c 	.word	0x2000029c
 8003fa8:	20000288 	.word	0x20000288
 8003fac:	2000027c 	.word	0x2000027c
 8003fb0:	200001a0 	.word	0x200001a0
 8003fb4:	2000019c 	.word	0x2000019c
 8003fb8:	20000298 	.word	0x20000298

08003fbc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
}
 8003fde:	bf00      	nop
 8003fe0:	bf00      	nop
 8003fe2:	e7fd      	b.n	8003fe0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fe4:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <vTaskPlaceOnEventList+0x4c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3318      	adds	r3, #24
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fe fedb 	bl	8002da8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	6838      	ldr	r0, [r7, #0]
 8003ff6:	f000 fbd7 	bl	80047a8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003ffa:	20e1      	movs	r0, #225	@ 0xe1
 8003ffc:	f002 fe26 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	2000019c 	.word	0x2000019c

0800400c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <vTaskPlaceOnUnorderedEventList+0x2a>
    __asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	61bb      	str	r3, [r7, #24]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004036:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <vTaskPlaceOnUnorderedEventList+0xb0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <vTaskPlaceOnUnorderedEventList+0x4a>
    __asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	617b      	str	r3, [r7, #20]
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	e7fd      	b.n	8004052 <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004056:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <vTaskPlaceOnUnorderedEventList+0xb4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004060:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	4b15      	ldr	r3, [pc, #84]	@ (80040c0 <vTaskPlaceOnUnorderedEventList+0xb4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	61da      	str	r2, [r3, #28]
 8004070:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <vTaskPlaceOnUnorderedEventList+0xb4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	621a      	str	r2, [r3, #32]
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <vTaskPlaceOnUnorderedEventList+0xb4>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	3218      	adds	r2, #24
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <vTaskPlaceOnUnorderedEventList+0xb4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f103 0218 	add.w	r2, r3, #24
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	4b0b      	ldr	r3, [pc, #44]	@ (80040c0 <vTaskPlaceOnUnorderedEventList+0xb4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	629a      	str	r2, [r3, #40]	@ 0x28
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a4:	2101      	movs	r1, #1
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fb7e 	bl	80047a8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
 80040ac:	20e2      	movs	r0, #226	@ 0xe2
 80040ae:	f002 fdcd 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 80040b2:	bf00      	nop
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	2000029c 	.word	0x2000029c
 80040c0:	2000019c 	.word	0x2000019c

080040c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	613b      	str	r3, [r7, #16]
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	4b17      	ldr	r3, [pc, #92]	@ (8004154 <vTaskPlaceOnEventListRestricted+0x90>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	61da      	str	r2, [r3, #28]
 80040fc:	4b15      	ldr	r3, [pc, #84]	@ (8004154 <vTaskPlaceOnEventListRestricted+0x90>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	6892      	ldr	r2, [r2, #8]
 8004104:	621a      	str	r2, [r3, #32]
 8004106:	4b13      	ldr	r3, [pc, #76]	@ (8004154 <vTaskPlaceOnEventListRestricted+0x90>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	3218      	adds	r2, #24
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <vTaskPlaceOnEventListRestricted+0x90>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f103 0218 	add.w	r2, r3, #24
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <vTaskPlaceOnEventListRestricted+0x90>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004136:	f04f 33ff 	mov.w	r3, #4294967295
 800413a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68b8      	ldr	r0, [r7, #8]
 8004140:	f000 fb32 	bl	80047a8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8004144:	20e3      	movs	r0, #227	@ 0xe3
 8004146:	f002 fd81 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	2000019c 	.word	0x2000019c

08004158 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	@ 0x28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	60fb      	str	r3, [r7, #12]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	6a3a      	ldr	r2, [r7, #32]
 8004192:	6a12      	ldr	r2, [r2, #32]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	69d2      	ldr	r2, [r2, #28]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	3318      	adds	r3, #24
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d103      	bne.n	80041b4 <xTaskRemoveFromEventList+0x5c>
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	2200      	movs	r2, #0
 80041b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	1e5a      	subs	r2, r3, #1
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80041c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004300 <xTaskRemoveFromEventList+0x1a8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d164      	bne.n	8004296 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	68d2      	ldr	r2, [r2, #12]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	3304      	adds	r3, #4
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d103      	bne.n	80041fa <xTaskRemoveFromEventList+0xa2>
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2200      	movs	r2, #0
 80041fe:	615a      	str	r2, [r3, #20]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	4618      	mov	r0, r3
 800420e:	f002 fe51 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	2201      	movs	r2, #1
 8004218:	409a      	lsls	r2, r3
 800421a:	4b3a      	ldr	r3, [pc, #232]	@ (8004304 <xTaskRemoveFromEventList+0x1ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	4a38      	ldr	r2, [pc, #224]	@ (8004304 <xTaskRemoveFromEventList+0x1ac>)
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004228:	4937      	ldr	r1, [pc, #220]	@ (8004308 <xTaskRemoveFromEventList+0x1b0>)
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	3304      	adds	r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	60da      	str	r2, [r3, #12]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	3204      	adds	r2, #4
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	1d1a      	adds	r2, r3, #4
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a28      	ldr	r2, [pc, #160]	@ (8004308 <xTaskRemoveFromEventList+0x1b0>)
 8004268:	441a      	add	r2, r3
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	615a      	str	r2, [r3, #20]
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004272:	4925      	ldr	r1, [pc, #148]	@ (8004308 <xTaskRemoveFromEventList+0x1b0>)
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a3a      	ldr	r2, [r7, #32]
 8004282:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	4820      	ldr	r0, [pc, #128]	@ (8004308 <xTaskRemoveFromEventList+0x1b0>)
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4403      	add	r3, r0
 8004292:	6019      	str	r1, [r3, #0]
 8004294:	e01b      	b.n	80042ce <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004296:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <xTaskRemoveFromEventList+0x1b4>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	61da      	str	r2, [r3, #28]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	621a      	str	r2, [r3, #32]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	6a3a      	ldr	r2, [r7, #32]
 80042b0:	3218      	adds	r2, #24
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	f103 0218 	add.w	r2, r3, #24
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	4a12      	ldr	r2, [pc, #72]	@ (800430c <xTaskRemoveFromEventList+0x1b4>)
 80042c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <xTaskRemoveFromEventList+0x1b4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	4a10      	ldr	r2, [pc, #64]	@ (800430c <xTaskRemoveFromEventList+0x1b4>)
 80042cc:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004310 <xTaskRemoveFromEventList+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d905      	bls.n	80042e8 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <xTaskRemoveFromEventList+0x1bc>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e001      	b.n	80042ec <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	4619      	mov	r1, r3
 80042f0:	20e4      	movs	r0, #228	@ 0xe4
 80042f2:	f002 fce7 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3728      	adds	r7, #40	@ 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	2000029c 	.word	0x2000029c
 8004304:	2000027c 	.word	0x2000027c
 8004308:	200001a0 	.word	0x200001a0
 800430c:	20000234 	.word	0x20000234
 8004310:	2000019c 	.word	0x2000019c
 8004314:	20000288 	.word	0x20000288

08004318 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004322:	4b5d      	ldr	r3, [pc, #372]	@ (8004498 <vTaskRemoveFromUnorderedEventList+0x180>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <vTaskRemoveFromUnorderedEventList+0x2a>
    __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60fb      	str	r3, [r7, #12]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <vTaskRemoveFromUnorderedEventList+0x58>
    __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60bb      	str	r3, [r7, #8]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <vTaskRemoveFromUnorderedEventList+0x54>
    listREMOVE_ITEM( pxEventListItem );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6892      	ldr	r2, [r2, #8]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6852      	ldr	r2, [r2, #4]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d103      	bne.n	800439c <vTaskRemoveFromUnorderedEventList+0x84>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1e5a      	subs	r2, r3, #1
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	68d2      	ldr	r2, [r2, #12]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	6892      	ldr	r2, [r2, #8]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3304      	adds	r3, #4
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d103      	bne.n	80043da <vTaskRemoveFromUnorderedEventList+0xc2>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	1e5a      	subs	r2, r3, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f002 fd61 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	2201      	movs	r2, #1
 80043f8:	409a      	lsls	r2, r3
 80043fa:	4b28      	ldr	r3, [pc, #160]	@ (800449c <vTaskRemoveFromUnorderedEventList+0x184>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	4a26      	ldr	r2, [pc, #152]	@ (800449c <vTaskRemoveFromUnorderedEventList+0x184>)
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004408:	4925      	ldr	r1, [pc, #148]	@ (80044a0 <vTaskRemoveFromUnorderedEventList+0x188>)
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3304      	adds	r3, #4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	60da      	str	r2, [r3, #12]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	3204      	adds	r2, #4
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	1d1a      	adds	r2, r3, #4
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4a16      	ldr	r2, [pc, #88]	@ (80044a0 <vTaskRemoveFromUnorderedEventList+0x188>)
 8004448:	441a      	add	r2, r3
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	615a      	str	r2, [r3, #20]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004452:	4913      	ldr	r1, [pc, #76]	@ (80044a0 <vTaskRemoveFromUnorderedEventList+0x188>)
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004464:	1c59      	adds	r1, r3, #1
 8004466:	480e      	ldr	r0, [pc, #56]	@ (80044a0 <vTaskRemoveFromUnorderedEventList+0x188>)
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4403      	add	r3, r0
 8004472:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004478:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <vTaskRemoveFromUnorderedEventList+0x18c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	429a      	cmp	r2, r3
 8004480:	d902      	bls.n	8004488 <vTaskRemoveFromUnorderedEventList+0x170>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8004482:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <vTaskRemoveFromUnorderedEventList+0x190>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]
        }
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
 8004488:	20e5      	movs	r0, #229	@ 0xe5
 800448a:	f002 fbdf 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 800448e:	bf00      	nop
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	2000029c 	.word	0x2000029c
 800449c:	2000027c 	.word	0x2000027c
 80044a0:	200001a0 	.word	0x200001a0
 80044a4:	2000019c 	.word	0x2000019c
 80044a8:	20000288 	.word	0x20000288

080044ac <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044b4:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <vTaskInternalSetTimeOutState+0x28>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <vTaskInternalSetTimeOutState+0x2c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80044c4:	20e7      	movs	r0, #231	@ 0xe7
 80044c6:	f002 fbc1 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	2000028c 	.word	0x2000028c
 80044d8:	20000278 	.word	0x20000278

080044dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	613b      	str	r3, [r7, #16]
}
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
 8004502:	e7fd      	b.n	8004500 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60fb      	str	r3, [r7, #12]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004522:	f000 fdff 	bl	8005124 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004526:	4b21      	ldr	r3, [pc, #132]	@ (80045ac <xTaskCheckForTimeOut+0xd0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d102      	bne.n	8004546 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e026      	b.n	8004594 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <xTaskCheckForTimeOut+0xd4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d00a      	beq.n	8004568 <xTaskCheckForTimeOut+0x8c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	429a      	cmp	r2, r3
 800455a:	d305      	bcc.n	8004568 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e015      	b.n	8004594 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20b      	bcs.n	800458a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	1ad2      	subs	r2, r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff94 	bl	80044ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	e004      	b.n	8004594 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004594:	f000 fdf8 	bl	8005188 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4619      	mov	r1, r3
 800459c:	20e8      	movs	r0, #232	@ 0xe8
 800459e:	f002 fb91 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80045a2:	69fb      	ldr	r3, [r7, #28]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000278 	.word	0x20000278
 80045b0:	2000028c 	.word	0x2000028c

080045b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80045b8:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <vTaskMissedYield+0x14>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80045be:	20e9      	movs	r0, #233	@ 0xe9
 80045c0:	f002 fb44 	bl	8006c4c <SEGGER_SYSVIEW_RecordEndCall>
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000288 	.word	0x20000288

080045cc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045d4:	f000 f852 	bl	800467c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80045d8:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <prvIdleTask+0x28>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d9f9      	bls.n	80045d4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80045e0:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <prvIdleTask+0x2c>)
 80045e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80045f0:	e7f0      	b.n	80045d4 <prvIdleTask+0x8>
 80045f2:	bf00      	nop
 80045f4:	200001a0 	.word	0x200001a0
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	e00c      	b.n	8004622 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4a12      	ldr	r2, [pc, #72]	@ (800465c <prvInitialiseTaskLists+0x60>)
 8004614:	4413      	add	r3, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fb95 	bl	8002d46 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3301      	adds	r3, #1
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d9ef      	bls.n	8004608 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004628:	480d      	ldr	r0, [pc, #52]	@ (8004660 <prvInitialiseTaskLists+0x64>)
 800462a:	f7fe fb8c 	bl	8002d46 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800462e:	480d      	ldr	r0, [pc, #52]	@ (8004664 <prvInitialiseTaskLists+0x68>)
 8004630:	f7fe fb89 	bl	8002d46 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004634:	480c      	ldr	r0, [pc, #48]	@ (8004668 <prvInitialiseTaskLists+0x6c>)
 8004636:	f7fe fb86 	bl	8002d46 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800463a:	480c      	ldr	r0, [pc, #48]	@ (800466c <prvInitialiseTaskLists+0x70>)
 800463c:	f7fe fb83 	bl	8002d46 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004640:	480b      	ldr	r0, [pc, #44]	@ (8004670 <prvInitialiseTaskLists+0x74>)
 8004642:	f7fe fb80 	bl	8002d46 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004646:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <prvInitialiseTaskLists+0x78>)
 8004648:	4a05      	ldr	r2, [pc, #20]	@ (8004660 <prvInitialiseTaskLists+0x64>)
 800464a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <prvInitialiseTaskLists+0x7c>)
 800464e:	4a05      	ldr	r2, [pc, #20]	@ (8004664 <prvInitialiseTaskLists+0x68>)
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	200001a0 	.word	0x200001a0
 8004660:	20000204 	.word	0x20000204
 8004664:	20000218 	.word	0x20000218
 8004668:	20000234 	.word	0x20000234
 800466c:	20000248 	.word	0x20000248
 8004670:	20000260 	.word	0x20000260
 8004674:	2000022c 	.word	0x2000022c
 8004678:	20000230 	.word	0x20000230

0800467c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004682:	e019      	b.n	80046b8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004684:	f000 fd4e 	bl	8005124 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004688:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <prvCheckTasksWaitingTermination+0x50>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fbc2 	bl	8002e1e <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <prvCheckTasksWaitingTermination+0x54>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3b01      	subs	r3, #1
 80046a0:	4a0b      	ldr	r2, [pc, #44]	@ (80046d0 <prvCheckTasksWaitingTermination+0x54>)
 80046a2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046ac:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80046ae:	f000 fd6b 	bl	8005188 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f810 	bl	80046d8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e1      	bne.n	8004684 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000248 	.word	0x20000248
 80046d0:	20000274 	.word	0x20000274
 80046d4:	2000025c 	.word	0x2000025c

080046d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 ff7d 	bl	80055e4 <vPortFree>
            vPortFree( pxTCB );
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 ff7a 	bl	80055e4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <prvResetNextTaskUnblockTime+0x30>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <prvResetNextTaskUnblockTime+0x34>)
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800470e:	e005      	b.n	800471c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <prvResetNextTaskUnblockTime+0x30>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a04      	ldr	r2, [pc, #16]	@ (800472c <prvResetNextTaskUnblockTime+0x34>)
 800471a:	6013      	str	r3, [r2, #0]
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	2000022c 	.word	0x2000022c
 800472c:	20000294 	.word	0x20000294

08004730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004736:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <xTaskGetSchedulerState+0x3c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800473e:	2301      	movs	r3, #1
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	e008      	b.n	8004756 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004744:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <xTaskGetSchedulerState+0x40>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800474c:	2302      	movs	r3, #2
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	e001      	b.n	8004756 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4619      	mov	r1, r3
 800475a:	20f5      	movs	r0, #245	@ 0xf5
 800475c:	f002 fab2 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004760:	687b      	ldr	r3, [r7, #4]
    }
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000280 	.word	0x20000280
 8004770:	2000029c 	.word	0x2000029c

08004774 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <uxTaskResetEventItemValue+0x30>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <uxTaskResetEventItemValue+0x30>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <uxTaskResetEventItemValue+0x30>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1c2 0205 	rsb	r2, r2, #5
 8004790:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	20fd      	movs	r0, #253	@ 0xfd
 8004796:	f002 fa95 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxReturn;
 800479a:	687b      	ldr	r3, [r7, #4]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	2000019c 	.word	0x2000019c

080047a8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80047b2:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <prvAddCurrentTaskToDelayedList+0x100>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80047b8:	4b3c      	ldr	r3, [pc, #240]	@ (80048ac <prvAddCurrentTaskToDelayedList+0x104>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80047be:	4b3c      	ldr	r3, [pc, #240]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0x108>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047c4:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fb27 	bl	8002e1e <uxListRemove>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80047d6:	4b37      	ldr	r3, [pc, #220]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	2201      	movs	r2, #1
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43da      	mvns	r2, r3
 80047e4:	4b34      	ldr	r3, [pc, #208]	@ (80048b8 <prvAddCurrentTaskToDelayedList+0x110>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4013      	ands	r3, r2
 80047ea:	4a33      	ldr	r2, [pc, #204]	@ (80048b8 <prvAddCurrentTaskToDelayedList+0x110>)
 80047ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d124      	bne.n	8004840 <prvAddCurrentTaskToDelayedList+0x98>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d021      	beq.n	8004840 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fc:	4b2f      	ldr	r3, [pc, #188]	@ (80048bc <prvAddCurrentTaskToDelayedList+0x114>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	4b2c      	ldr	r3, [pc, #176]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	4b2a      	ldr	r3, [pc, #168]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	3204      	adds	r2, #4
 800481e:	605a      	str	r2, [r3, #4]
 8004820:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	1d1a      	adds	r2, r3, #4
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	609a      	str	r2, [r3, #8]
 800482a:	4b22      	ldr	r3, [pc, #136]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <prvAddCurrentTaskToDelayedList+0x114>)
 8004830:	615a      	str	r2, [r3, #20]
 8004832:	4b22      	ldr	r3, [pc, #136]	@ (80048bc <prvAddCurrentTaskToDelayedList+0x114>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a20      	ldr	r2, [pc, #128]	@ (80048bc <prvAddCurrentTaskToDelayedList+0x114>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800483e:	e02e      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004848:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	429a      	cmp	r2, r3
 8004856:	d20d      	bcs.n	8004874 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2104      	movs	r1, #4
 800485e:	4618      	mov	r0, r3
 8004860:	f002 fb6a 	bl	8006f38 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004864:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f7fe fa9b 	bl	8002da8 <vListInsert>
}
 8004872:	e014      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004874:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2104      	movs	r1, #4
 800487a:	4618      	mov	r0, r3
 800487c:	f002 fb5c 	bl	8006f38 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	69b8      	ldr	r0, [r7, #24]
 800488a:	f7fe fa8d 	bl	8002da8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800488e:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0x118>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	429a      	cmp	r2, r3
 8004896:	d202      	bcs.n	800489e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004898:	4a09      	ldr	r2, [pc, #36]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0x118>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000278 	.word	0x20000278
 80048ac:	2000022c 	.word	0x2000022c
 80048b0:	20000230 	.word	0x20000230
 80048b4:	2000019c 	.word	0x2000019c
 80048b8:	2000027c 	.word	0x2000027c
 80048bc:	20000260 	.word	0x20000260
 80048c0:	20000294 	.word	0x20000294

080048c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80048ce:	f000 fa77 	bl	8004dc0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <xTimerCreateTimerTask+0x64>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80048da:	4b14      	ldr	r3, [pc, #80]	@ (800492c <xTimerCreateTimerTask+0x68>)
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	2302      	movs	r3, #2
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	2300      	movs	r3, #0
 80048e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048e8:	4911      	ldr	r1, [pc, #68]	@ (8004930 <xTimerCreateTimerTask+0x6c>)
 80048ea:	4812      	ldr	r0, [pc, #72]	@ (8004934 <xTimerCreateTimerTask+0x70>)
 80048ec:	f7fe fe17 	bl	800351e <xTaskCreate>
 80048f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	603b      	str	r3, [r7, #0]
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4619      	mov	r1, r3
 8004914:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004918:	f002 f9d4 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800491c:	687b      	ldr	r3, [r7, #4]
    }
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200002d0 	.word	0x200002d0
 800492c:	200002d4 	.word	0x200002d4
 8004930:	08008900 	.word	0x08008900
 8004934:	080049dd 	.word	0x080049dd

08004938 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004944:	e008      	b.n	8004958 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	18d1      	adds	r1, r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f8df 	bl	8004b28 <prvInsertTimerInActiveList>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ea      	bne.n	8004946 <prvReloadTimer+0xe>
        }
    }
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004986:	4b14      	ldr	r3, [pc, #80]	@ (80049d8 <prvProcessExpiredTimer+0x5c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe fa42 	bl	8002e1e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff ffc3 	bl	8004938 <prvReloadTimer>
 80049b2:	e008      	b.n	80049c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	4798      	blx	r3
    }
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200002c8 	.word	0x200002c8

080049dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049e4:	f107 0308 	add.w	r3, r7, #8
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f859 	bl	8004aa0 <prvGetNextExpireTime>
 80049ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4619      	mov	r1, r3
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f805 	bl	8004a04 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80049fa:	f000 f8d7 	bl	8004bac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049fe:	bf00      	nop
 8004a00:	e7f0      	b.n	80049e4 <prvTimerTask+0x8>
	...

08004a04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004a0e:	f7fe ffd1 	bl	80039b4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a12:	f107 0308 	add.w	r3, r7, #8
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f866 	bl	8004ae8 <prvSampleTimeNow>
 8004a1c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d130      	bne.n	8004a86 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <prvProcessTimerOrBlockTask+0x3c>
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d806      	bhi.n	8004a40 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004a32:	f7fe ffcd 	bl	80039d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a36:	68f9      	ldr	r1, [r7, #12]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ff9f 	bl	800497c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004a3e:	e024      	b.n	8004a8a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a46:	4b13      	ldr	r3, [pc, #76]	@ (8004a94 <prvProcessTimerOrBlockTask+0x90>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <prvProcessTimerOrBlockTask+0x50>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <prvProcessTimerOrBlockTask+0x52>
 8004a54:	2300      	movs	r3, #0
 8004a56:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a58:	4b0f      	ldr	r3, [pc, #60]	@ (8004a98 <prvProcessTimerOrBlockTask+0x94>)
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	4619      	mov	r1, r3
 8004a66:	f7fe fce7 	bl	8003438 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a6a:	f7fe ffb1 	bl	80039d0 <xTaskResumeAll>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004a74:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <prvProcessTimerOrBlockTask+0x98>)
 8004a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	f3bf 8f6f 	isb	sy
    }
 8004a84:	e001      	b.n	8004a8a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004a86:	f7fe ffa3 	bl	80039d0 <xTaskResumeAll>
    }
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200002cc 	.word	0x200002cc
 8004a98:	200002d0 	.word	0x200002d0
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <prvGetNextExpireTime+0x44>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <prvGetNextExpireTime+0x16>
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	e000      	b.n	8004ab8 <prvGetNextExpireTime+0x18>
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d105      	bne.n	8004ad0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ac4:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <prvGetNextExpireTime+0x44>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e001      	b.n	8004ad4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    }
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	200002c8 	.word	0x200002c8

08004ae8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004af0:	f7ff f880 	bl	8003bf4 <xTaskGetTickCount>
 8004af4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004af6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <prvSampleTimeNow+0x3c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d205      	bcs.n	8004b0c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004b00:	f000 f938 	bl	8004d74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e002      	b.n	8004b12 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004b12:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <prvSampleTimeNow+0x3c>)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004b18:	68fb      	ldr	r3, [r7, #12]
    }
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200002d8 	.word	0x200002d8

08004b28 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d812      	bhi.n	8004b74 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e01b      	b.n	8004b9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b62:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <prvInsertTimerInActiveList+0x7c>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f7fe f91b 	bl	8002da8 <vListInsert>
 8004b72:	e012      	b.n	8004b9a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d206      	bcs.n	8004b8a <prvInsertTimerInActiveList+0x62>
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e007      	b.n	8004b9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <prvInsertTimerInActiveList+0x80>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	4610      	mov	r0, r2
 8004b96:	f7fe f907 	bl	8002da8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004b9a:	697b      	ldr	r3, [r7, #20]
    }
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	200002cc 	.word	0x200002cc
 8004ba8:	200002c8 	.word	0x200002c8

08004bac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004bbe:	e0c7      	b.n	8004d50 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da19      	bge.n	8004bfa <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	3304      	adds	r3, #4
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61bb      	str	r3, [r7, #24]
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf0:	6850      	ldr	r0, [r2, #4]
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f2c0 80a7 	blt.w	8004d50 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d004      	beq.n	8004c18 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe f903 	bl	8002e1e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c18:	463b      	mov	r3, r7
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff64 	bl	8004ae8 <prvSampleTimeNow>
 8004c20:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	f200 808f 	bhi.w	8004d4a <prvProcessReceivedCommands+0x19e>
 8004c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <prvProcessReceivedCommands+0x88>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c59 	.word	0x08004c59
 8004c3c:	08004cc1 	.word	0x08004cc1
 8004c40:	08004cd5 	.word	0x08004cd5
 8004c44:	08004d21 	.word	0x08004d21
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c59 	.word	0x08004c59
 8004c50:	08004cc1 	.word	0x08004cc1
 8004c54:	08004cd5 	.word	0x08004cd5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	18d1      	adds	r1, r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	6a38      	ldr	r0, [r7, #32]
 8004c78:	f7ff ff56 	bl	8004b28 <prvInsertTimerInActiveList>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d065      	beq.n	8004d4e <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	4413      	add	r3, r2
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6a38      	ldr	r0, [r7, #32]
 8004c9e:	f7ff fe4b 	bl	8004938 <prvReloadTimer>
 8004ca2:	e008      	b.n	8004cb6 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	6a38      	ldr	r0, [r7, #32]
 8004cbc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004cbe:	e046      	b.n	8004d4e <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004cd2:	e03d      	b.n	8004d50 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <prvProcessReceivedCommands+0x160>
    __asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	617b      	str	r3, [r7, #20]
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	18d1      	adds	r1, r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	6a38      	ldr	r0, [r7, #32]
 8004d1a:	f7ff ff05 	bl	8004b28 <prvInsertTimerInActiveList>
                        break;
 8004d1e:	e017      	b.n	8004d50 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8004d2e:	6a38      	ldr	r0, [r7, #32]
 8004d30:	f000 fc58 	bl	80055e4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004d34:	e00c      	b.n	8004d50 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004d48:	e002      	b.n	8004d50 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <prvProcessReceivedCommands+0x1a4>
                        break;
 8004d4e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004d50:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <prvProcessReceivedCommands+0x1c4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	1d39      	adds	r1, r7, #4
 8004d56:	2200      	movs	r2, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe f9a1 	bl	80030a0 <xQueueReceive>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f47f af2d 	bne.w	8004bc0 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	3728      	adds	r7, #40	@ 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	200002d0 	.word	0x200002d0

08004d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d7a:	e009      	b.n	8004d90 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004db8 <prvSwitchTimerLists+0x44>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004d86:	f04f 31ff 	mov.w	r1, #4294967295
 8004d8a:	6838      	ldr	r0, [r7, #0]
 8004d8c:	f7ff fdf6 	bl	800497c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d90:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <prvSwitchTimerLists+0x44>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004d9a:	4b07      	ldr	r3, [pc, #28]	@ (8004db8 <prvSwitchTimerLists+0x44>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <prvSwitchTimerLists+0x48>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a04      	ldr	r2, [pc, #16]	@ (8004db8 <prvSwitchTimerLists+0x44>)
 8004da6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004da8:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <prvSwitchTimerLists+0x48>)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6013      	str	r3, [r2, #0]
    }
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200002c8 	.word	0x200002c8
 8004dbc:	200002cc 	.word	0x200002cc

08004dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004dc4:	f000 f9ae 	bl	8005124 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004dc8:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <prvCheckForValidListAndQueue+0x54>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11d      	bne.n	8004e0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004dd0:	4811      	ldr	r0, [pc, #68]	@ (8004e18 <prvCheckForValidListAndQueue+0x58>)
 8004dd2:	f7fd ffb8 	bl	8002d46 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004dd6:	4811      	ldr	r0, [pc, #68]	@ (8004e1c <prvCheckForValidListAndQueue+0x5c>)
 8004dd8:	f7fd ffb5 	bl	8002d46 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ddc:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <prvCheckForValidListAndQueue+0x60>)
 8004dde:	4a0e      	ldr	r2, [pc, #56]	@ (8004e18 <prvCheckForValidListAndQueue+0x58>)
 8004de0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004de2:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <prvCheckForValidListAndQueue+0x64>)
 8004de4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e1c <prvCheckForValidListAndQueue+0x5c>)
 8004de6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004de8:	2200      	movs	r2, #0
 8004dea:	2110      	movs	r1, #16
 8004dec:	200a      	movs	r0, #10
 8004dee:	f7fe f8db 	bl	8002fa8 <xQueueGenericCreate>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4a07      	ldr	r2, [pc, #28]	@ (8004e14 <prvCheckForValidListAndQueue+0x54>)
 8004df6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004df8:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <prvCheckForValidListAndQueue+0x54>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <prvCheckForValidListAndQueue+0x54>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4908      	ldr	r1, [pc, #32]	@ (8004e28 <prvCheckForValidListAndQueue+0x68>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fac6 	bl	8003398 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e0c:	f000 f9bc 	bl	8005188 <vPortExitCritical>
    }
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200002d0 	.word	0x200002d0
 8004e18:	200002a0 	.word	0x200002a0
 8004e1c:	200002b4 	.word	0x200002b4
 8004e20:	200002c8 	.word	0x200002c8
 8004e24:	200002cc 	.word	0x200002cc
 8004e28:	08008908 	.word	0x08008908

08004e2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3b04      	subs	r3, #4
 8004e5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <pxPortInitialiseStack+0x64>)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3b14      	subs	r3, #20
 8004e66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b04      	subs	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f06f 0202 	mvn.w	r2, #2
 8004e7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3b20      	subs	r3, #32
 8004e80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004e82:	68fb      	ldr	r3, [r7, #12]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	08004e95 	.word	0x08004e95

08004e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004e9e:	4b13      	ldr	r3, [pc, #76]	@ (8004eec <prvTaskExitError+0x58>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d00b      	beq.n	8004ec0 <prvTaskExitError+0x2c>
    __asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <prvTaskExitError+0x28>
    __asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60bb      	str	r3, [r7, #8]
}
 8004ed2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004ed4:	bf00      	nop
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0fc      	beq.n	8004ed6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000010 	.word	0x20000010

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	4770      	bx	lr
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst2>:
 8004f10:	2000019c 	.word	0x2000019c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004f18:	4808      	ldr	r0, [pc, #32]	@ (8004f3c <prvPortStartFirstTask+0x24>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8814 	msr	CONTROL, r0
 8004f2a:	b662      	cpsie	i
 8004f2c:	b661      	cpsie	f
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	df00      	svc	0
 8004f38:	bf00      	nop
 8004f3a:	0000      	.short	0x0000
 8004f3c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop

08004f44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	@ 0x30
 8004f48:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f4a:	4b69      	ldr	r3, [pc, #420]	@ (80050f0 <xPortStartScheduler+0x1ac>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a69      	ldr	r2, [pc, #420]	@ (80050f4 <xPortStartScheduler+0x1b0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10b      	bne.n	8004f6c <xPortStartScheduler+0x28>
    __asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f6c:	4b60      	ldr	r3, [pc, #384]	@ (80050f0 <xPortStartScheduler+0x1ac>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a61      	ldr	r2, [pc, #388]	@ (80050f8 <xPortStartScheduler+0x1b4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10b      	bne.n	8004f8e <xPortStartScheduler+0x4a>
    __asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	623b      	str	r3, [r7, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	e7fd      	b.n	8004f8a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80050fc <xPortStartScheduler+0x1b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	332c      	adds	r3, #44	@ 0x2c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a59      	ldr	r2, [pc, #356]	@ (8005100 <xPortStartScheduler+0x1bc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <xPortStartScheduler+0x74>
    __asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	61fb      	str	r3, [r7, #28]
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fba:	3338      	adds	r3, #56	@ 0x38
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a51      	ldr	r2, [pc, #324]	@ (8005104 <xPortStartScheduler+0x1c0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <xPortStartScheduler+0x98>
    __asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	61bb      	str	r3, [r7, #24]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fe0:	4b49      	ldr	r3, [pc, #292]	@ (8005108 <xPortStartScheduler+0x1c4>)
 8004fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	22ff      	movs	r2, #255	@ 0xff
 8004ff0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005002:	b2da      	uxtb	r2, r3
 8005004:	4b41      	ldr	r3, [pc, #260]	@ (800510c <xPortStartScheduler+0x1c8>)
 8005006:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005008:	4b40      	ldr	r3, [pc, #256]	@ (800510c <xPortStartScheduler+0x1c8>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <xPortStartScheduler+0xe4>
    __asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	617b      	str	r3, [r7, #20]
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d013      	beq.n	800505e <xPortStartScheduler+0x11a>
    __asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	613b      	str	r3, [r7, #16]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3301      	adds	r3, #1
 8005052:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005066:	2b80      	cmp	r3, #128	@ 0x80
 8005068:	d0f1      	beq.n	800504e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d103      	bne.n	8005078 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005070:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <xPortStartScheduler+0x1cc>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e004      	b.n	8005082 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f1c3 0307 	rsb	r3, r3, #7
 800507e:	4a24      	ldr	r2, [pc, #144]	@ (8005110 <xPortStartScheduler+0x1cc>)
 8005080:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005082:	4b23      	ldr	r3, [pc, #140]	@ (8005110 <xPortStartScheduler+0x1cc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <xPortStartScheduler+0x1cc>)
 800508a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800508c:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <xPortStartScheduler+0x1cc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005094:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <xPortStartScheduler+0x1cc>)
 8005096:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80050a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005114 <xPortStartScheduler+0x1d0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005114 <xPortStartScheduler+0x1d0>)
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80050ac:	4b19      	ldr	r3, [pc, #100]	@ (8005114 <xPortStartScheduler+0x1d0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <xPortStartScheduler+0x1d0>)
 80050b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80050b8:	4b17      	ldr	r3, [pc, #92]	@ (8005118 <xPortStartScheduler+0x1d4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80050be:	f000 f8ed 	bl	800529c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80050c2:	4b16      	ldr	r3, [pc, #88]	@ (800511c <xPortStartScheduler+0x1d8>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80050c8:	f000 f90c 	bl	80052e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050cc:	4b14      	ldr	r3, [pc, #80]	@ (8005120 <xPortStartScheduler+0x1dc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a13      	ldr	r2, [pc, #76]	@ (8005120 <xPortStartScheduler+0x1dc>)
 80050d2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80050d6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80050d8:	f7ff ff1e 	bl	8004f18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80050dc:	f7fe ff02 	bl	8003ee4 <vTaskSwitchContext>
    prvTaskExitError();
 80050e0:	f7ff fed8 	bl	8004e94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3730      	adds	r7, #48	@ 0x30
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	410fc271 	.word	0x410fc271
 80050f8:	410fc270 	.word	0x410fc270
 80050fc:	e000ed08 	.word	0xe000ed08
 8005100:	08004ef1 	.word	0x08004ef1
 8005104:	080051e1 	.word	0x080051e1
 8005108:	e000e400 	.word	0xe000e400
 800510c:	200002dc 	.word	0x200002dc
 8005110:	200002e0 	.word	0x200002e0
 8005114:	e000ed20 	.word	0xe000ed20
 8005118:	e000ed1c 	.word	0xe000ed1c
 800511c:	20000010 	.word	0x20000010
 8005120:	e000ef34 	.word	0xe000ef34

08005124 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
    __asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	607b      	str	r3, [r7, #4]
}
 800513c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <vPortEnterCritical+0x5c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a0e      	ldr	r2, [pc, #56]	@ (8005180 <vPortEnterCritical+0x5c>)
 8005146:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005148:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <vPortEnterCritical+0x5c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d110      	bne.n	8005172 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <vPortEnterCritical+0x60>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <vPortEnterCritical+0x4e>
    __asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	603b      	str	r3, [r7, #0]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <vPortEnterCritical+0x4a>
    }
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20000010 	.word	0x20000010
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800518e:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <vPortExitCritical+0x50>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10b      	bne.n	80051ae <vPortExitCritical+0x26>
    __asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	607b      	str	r3, [r7, #4]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80051ae:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <vPortExitCritical+0x50>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	4a08      	ldr	r2, [pc, #32]	@ (80051d8 <vPortExitCritical+0x50>)
 80051b6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80051b8:	4b07      	ldr	r3, [pc, #28]	@ (80051d8 <vPortExitCritical+0x50>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <vPortExitCritical+0x44>
 80051c0:	2300      	movs	r3, #0
 80051c2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80051ca:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000010 	.word	0x20000010
 80051dc:	00000000 	.word	0x00000000

080051e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b15      	ldr	r3, [pc, #84]	@ (8005240 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f01e 0f10 	tst.w	lr, #16
 80051f0:	bf08      	it	eq
 80051f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005204:	f380 8811 	msr	BASEPRI, r0
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f7fe fe68 	bl	8003ee4 <vTaskSwitchContext>
 8005214:	f04f 0000 	mov.w	r0, #0
 8005218:	f380 8811 	msr	BASEPRI, r0
 800521c:	bc09      	pop	{r0, r3}
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005226:	f01e 0f10 	tst.w	lr, #16
 800522a:	bf08      	it	eq
 800522c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005230:	f380 8809 	msr	PSP, r0
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst>:
 8005240:	2000019c 	.word	0x2000019c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
    __asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005262:	f001 fc79 	bl	8006b58 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005266:	f7fe fd1b 	bl	8003ca0 <xTaskIncrementTick>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005270:	f001 fcd0 	bl	8006c14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005274:	4b08      	ldr	r3, [pc, #32]	@ (8005298 <SysTick_Handler+0x50>)
 8005276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e001      	b.n	8005282 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800527e:	f001 fcad 	bl	8006bdc <SEGGER_SYSVIEW_RecordExitISR>
 8005282:	2300      	movs	r3, #0
 8005284:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f383 8811 	msr	BASEPRI, r3
}
 800528c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <vPortSetupTimerInterrupt+0x38>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <vPortSetupTimerInterrupt+0x3c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	@ (80052dc <vPortSetupTimerInterrupt+0x40>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <vPortSetupTimerInterrupt+0x44>)
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052be:	4b04      	ldr	r3, [pc, #16]	@ (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e010 	.word	0xe000e010
 80052d4:	e000e018 	.word	0xe000e018
 80052d8:	20000000 	.word	0x20000000
 80052dc:	10624dd3 	.word	0x10624dd3
 80052e0:	e000e014 	.word	0xe000e014

080052e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80052e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052f4 <vPortEnableVFP+0x10>
 80052e8:	6801      	ldr	r1, [r0, #0]
 80052ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80052ee:	6001      	str	r1, [r0, #0]
 80052f0:	4770      	bx	lr
 80052f2:	0000      	.short	0x0000
 80052f4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop

080052fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005302:	f3ef 8305 	mrs	r3, IPSR
 8005306:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d915      	bls.n	800533a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800530e:	4a18      	ldr	r2, [pc, #96]	@ (8005370 <vPortValidateInterruptPriority+0x74>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005318:	4b16      	ldr	r3, [pc, #88]	@ (8005374 <vPortValidateInterruptPriority+0x78>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	7afa      	ldrb	r2, [r7, #11]
 800531e:	429a      	cmp	r2, r3
 8005320:	d20b      	bcs.n	800533a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	607b      	str	r3, [r7, #4]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800533a:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <vPortValidateInterruptPriority+0x7c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005342:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <vPortValidateInterruptPriority+0x80>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d90b      	bls.n	8005362 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	603b      	str	r3, [r7, #0]
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <vPortValidateInterruptPriority+0x62>
    }
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	e000e3f0 	.word	0xe000e3f0
 8005374:	200002dc 	.word	0x200002dc
 8005378:	e000ed0c 	.word	0xe000ed0c
 800537c:	200002e0 	.word	0x200002e0

08005380 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	@ 0x38
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d022      	beq.n	80053d8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005392:	2308      	movs	r3, #8
 8005394:	43db      	mvns	r3, r3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d81b      	bhi.n	80053d4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800539c:	2208      	movs	r2, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d014      	beq.n	80053d8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	f1c3 0308 	rsb	r3, r3, #8
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80053ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053bc:	43db      	mvns	r3, r3
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d804      	bhi.n	80053ce <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	4413      	add	r3, r2
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	e004      	b.n	80053d8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	e001      	b.n	80053d8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80053d8:	f7fe faec 	bl	80039b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80053dc:	4b7a      	ldr	r3, [pc, #488]	@ (80055c8 <pvPortMalloc+0x248>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80053e4:	f000 f978 	bl	80056d8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f2c0 80d3 	blt.w	8005596 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80cf 	beq.w	8005596 <pvPortMalloc+0x216>
 80053f8:	4b74      	ldr	r3, [pc, #464]	@ (80055cc <pvPortMalloc+0x24c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	f200 80c9 	bhi.w	8005596 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005404:	4b72      	ldr	r3, [pc, #456]	@ (80055d0 <pvPortMalloc+0x250>)
 8005406:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005408:	4b71      	ldr	r3, [pc, #452]	@ (80055d0 <pvPortMalloc+0x250>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005410:	4a70      	ldr	r2, [pc, #448]	@ (80055d4 <pvPortMalloc+0x254>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d305      	bcc.n	8005422 <pvPortMalloc+0xa2>
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	4a6f      	ldr	r2, [pc, #444]	@ (80055d8 <pvPortMalloc+0x258>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d801      	bhi.n	8005422 <pvPortMalloc+0xa2>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <pvPortMalloc+0xa4>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d129      	bne.n	800547c <pvPortMalloc+0xfc>
    __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	4a61      	ldr	r2, [pc, #388]	@ (80055d4 <pvPortMalloc+0x254>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d305      	bcc.n	800545e <pvPortMalloc+0xde>
 8005452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005454:	4a60      	ldr	r2, [pc, #384]	@ (80055d8 <pvPortMalloc+0x258>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d801      	bhi.n	800545e <pvPortMalloc+0xde>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <pvPortMalloc+0xe0>
 800545e:	2300      	movs	r3, #0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <pvPortMalloc+0xfc>
    __asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	61fb      	str	r3, [r7, #28]
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800547c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d903      	bls.n	800548e <pvPortMalloc+0x10e>
 8005486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1d8      	bne.n	8005440 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800548e:	4b4e      	ldr	r3, [pc, #312]	@ (80055c8 <pvPortMalloc+0x248>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005494:	429a      	cmp	r2, r3
 8005496:	d07e      	beq.n	8005596 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	4413      	add	r3, r2
 80054a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	4a4b      	ldr	r2, [pc, #300]	@ (80055d4 <pvPortMalloc+0x254>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d305      	bcc.n	80054b6 <pvPortMalloc+0x136>
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	4a4a      	ldr	r2, [pc, #296]	@ (80055d8 <pvPortMalloc+0x258>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d801      	bhi.n	80054b6 <pvPortMalloc+0x136>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <pvPortMalloc+0x138>
 80054b6:	2300      	movs	r3, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <pvPortMalloc+0x154>
    __asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	61bb      	str	r3, [r7, #24]
}
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80054dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d90b      	bls.n	80054fe <pvPortMalloc+0x17e>
    __asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	617b      	str	r3, [r7, #20]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad2      	subs	r2, r2, r3
 8005506:	2308      	movs	r3, #8
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	429a      	cmp	r2, r3
 800550c:	d924      	bls.n	8005558 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800550e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <pvPortMalloc+0x1b8>
    __asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	613b      	str	r3, [r7, #16]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005556:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005558:	4b1c      	ldr	r3, [pc, #112]	@ (80055cc <pvPortMalloc+0x24c>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	4a1a      	ldr	r2, [pc, #104]	@ (80055cc <pvPortMalloc+0x24c>)
 8005564:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005566:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <pvPortMalloc+0x24c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <pvPortMalloc+0x25c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d203      	bcs.n	800557a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005572:	4b16      	ldr	r3, [pc, #88]	@ (80055cc <pvPortMalloc+0x24c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <pvPortMalloc+0x25c>)
 8005578:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800557a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005584:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800558c:	4b14      	ldr	r3, [pc, #80]	@ (80055e0 <pvPortMalloc+0x260>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	4a13      	ldr	r2, [pc, #76]	@ (80055e0 <pvPortMalloc+0x260>)
 8005594:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005596:	f7fe fa1b 	bl	80039d0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800559a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00b      	beq.n	80055bc <pvPortMalloc+0x23c>
    __asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	60fb      	str	r3, [r7, #12]
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	e7fd      	b.n	80055b8 <pvPortMalloc+0x238>
    return pvReturn;
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3738      	adds	r7, #56	@ 0x38
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20012eec 	.word	0x20012eec
 80055cc:	20012ef0 	.word	0x20012ef0
 80055d0:	20012ee4 	.word	0x20012ee4
 80055d4:	200002e4 	.word	0x200002e4
 80055d8:	20012ee3 	.word	0x20012ee3
 80055dc:	20012ef4 	.word	0x20012ef4
 80055e0:	20012ef8 	.word	0x20012ef8

080055e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d064      	beq.n	80056c0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80055f6:	2308      	movs	r3, #8
 80055f8:	425b      	negs	r3, r3
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	4a30      	ldr	r2, [pc, #192]	@ (80056c8 <vPortFree+0xe4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d305      	bcc.n	8005618 <vPortFree+0x34>
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	4a2f      	ldr	r2, [pc, #188]	@ (80056cc <vPortFree+0xe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d801      	bhi.n	8005618 <vPortFree+0x34>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <vPortFree+0x36>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <vPortFree+0x52>
    __asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	617b      	str	r3, [r7, #20]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	db0b      	blt.n	8005656 <vPortFree+0x72>
    __asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	613b      	str	r3, [r7, #16]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <vPortFree+0x92>
    __asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60fb      	str	r3, [r7, #12]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	0fdb      	lsrs	r3, r3, #31
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01c      	beq.n	80056c0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d118      	bne.n	80056c0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800569a:	f7fe f98b 	bl	80039b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	4b0b      	ldr	r3, [pc, #44]	@ (80056d0 <vPortFree+0xec>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	4a09      	ldr	r2, [pc, #36]	@ (80056d0 <vPortFree+0xec>)
 80056aa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ac:	69b8      	ldr	r0, [r7, #24]
 80056ae:	f000 f86d 	bl	800578c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80056b2:	4b08      	ldr	r3, [pc, #32]	@ (80056d4 <vPortFree+0xf0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	4a06      	ldr	r2, [pc, #24]	@ (80056d4 <vPortFree+0xf0>)
 80056ba:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80056bc:	f7fe f988 	bl	80039d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80056c0:	bf00      	nop
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	200002e4 	.word	0x200002e4
 80056cc:	20012ee3 	.word	0x20012ee3
 80056d0:	20012ef0 	.word	0x20012ef0
 80056d4:	20012efc 	.word	0x20012efc

080056d8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056de:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80056e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80056e4:	4b24      	ldr	r3, [pc, #144]	@ (8005778 <prvHeapInit+0xa0>)
 80056e6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00c      	beq.n	800570c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3307      	adds	r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <prvHeapInit+0xa0>)
 8005708:	4413      	add	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <prvHeapInit+0xa4>)
 8005710:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005712:	4b1a      	ldr	r3, [pc, #104]	@ (800577c <prvHeapInit+0xa4>)
 8005714:	2200      	movs	r2, #0
 8005716:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4413      	add	r3, r2
 800571e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005720:	2208      	movs	r2, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a13      	ldr	r2, [pc, #76]	@ (8005780 <prvHeapInit+0xa8>)
 8005734:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <prvHeapInit+0xa8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800573e:	4b10      	ldr	r3, [pc, #64]	@ (8005780 <prvHeapInit+0xa8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005754:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <prvHeapInit+0xa8>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a08      	ldr	r2, [pc, #32]	@ (8005784 <prvHeapInit+0xac>)
 8005762:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a07      	ldr	r2, [pc, #28]	@ (8005788 <prvHeapInit+0xb0>)
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200002e4 	.word	0x200002e4
 800577c:	20012ee4 	.word	0x20012ee4
 8005780:	20012eec 	.word	0x20012eec
 8005784:	20012ef4 	.word	0x20012ef4
 8005788:	20012ef0 	.word	0x20012ef0

0800578c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005794:	4b36      	ldr	r3, [pc, #216]	@ (8005870 <prvInsertBlockIntoFreeList+0xe4>)
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e002      	b.n	80057a0 <prvInsertBlockIntoFreeList+0x14>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d8f7      	bhi.n	800579a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4a30      	ldr	r2, [pc, #192]	@ (8005870 <prvInsertBlockIntoFreeList+0xe4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d018      	beq.n	80057e4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005874 <prvInsertBlockIntoFreeList+0xe8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d305      	bcc.n	80057c6 <prvInsertBlockIntoFreeList+0x3a>
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <prvInsertBlockIntoFreeList+0xec>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d801      	bhi.n	80057c6 <prvInsertBlockIntoFreeList+0x3a>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <prvInsertBlockIntoFreeList+0x3c>
 80057c6:	2300      	movs	r3, #0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	60fb      	str	r3, [r7, #12]
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d108      	bne.n	8005808 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	441a      	add	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	441a      	add	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d118      	bne.n	800584e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b16      	ldr	r3, [pc, #88]	@ (800587c <prvInsertBlockIntoFreeList+0xf0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d00d      	beq.n	8005844 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	441a      	add	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e008      	b.n	8005856 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005844:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <prvInsertBlockIntoFreeList+0xf0>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e003      	b.n	8005856 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d002      	beq.n	8005864 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20012ee4 	.word	0x20012ee4
 8005874:	200002e4 	.word	0x200002e4
 8005878:	20012ee3 	.word	0x20012ee3
 800587c:	20012eec 	.word	0x20012eec

08005880 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005884:	4803      	ldr	r0, [pc, #12]	@ (8005894 <_cbSendSystemDesc+0x14>)
 8005886:	f001 f911 	bl	8006aac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800588a:	4803      	ldr	r0, [pc, #12]	@ (8005898 <_cbSendSystemDesc+0x18>)
 800588c:	f001 f90e 	bl	8006aac <SEGGER_SYSVIEW_SendSysDesc>
}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	08008910 	.word	0x08008910
 8005898:	0800893c 	.word	0x0800893c

0800589c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80058a0:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <SEGGER_SYSVIEW_Conf+0x20>)
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <SEGGER_SYSVIEW_Conf+0x20>)
 80058a6:	6819      	ldr	r1, [r3, #0]
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <SEGGER_SYSVIEW_Conf+0x24>)
 80058aa:	4a06      	ldr	r2, [pc, #24]	@ (80058c4 <SEGGER_SYSVIEW_Conf+0x28>)
 80058ac:	f000 fd84 	bl	80063b8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80058b0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80058b4:	f000 fdc4 	bl	8006440 <SEGGER_SYSVIEW_SetRAMBase>
}
 80058b8:	bf00      	nop
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000000 	.word	0x20000000
 80058c0:	08005881 	.word	0x08005881
 80058c4:	080089f8 	.word	0x080089f8

080058c8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80058ce:	4b26      	ldr	r3, [pc, #152]	@ (8005968 <_DoInit+0xa0>)
 80058d0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80058d2:	22a8      	movs	r2, #168	@ 0xa8
 80058d4:	2100      	movs	r1, #0
 80058d6:	6838      	ldr	r0, [r7, #0]
 80058d8:	f001 ff8f 	bl	80077fa <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2203      	movs	r2, #3
 80058e0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2203      	movs	r2, #3
 80058e6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	4a20      	ldr	r2, [pc, #128]	@ (800596c <_DoInit+0xa4>)
 80058ec:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005970 <_DoInit+0xa8>)
 80058f2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058fa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2200      	movs	r2, #0
 8005900:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2200      	movs	r2, #0
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	4a16      	ldr	r2, [pc, #88]	@ (800596c <_DoInit+0xa4>)
 8005912:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <_DoInit+0xac>)
 8005918:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2210      	movs	r2, #16
 800591e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005932:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
 800593a:	e00c      	b.n	8005956 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1c3 030f 	rsb	r3, r3, #15
 8005942:	4a0d      	ldr	r2, [pc, #52]	@ (8005978 <_DoInit+0xb0>)
 8005944:	5cd1      	ldrb	r1, [r2, r3]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4413      	add	r3, r2
 800594c:	460a      	mov	r2, r1
 800594e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3301      	adds	r3, #1
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b0f      	cmp	r3, #15
 800595a:	d9ef      	bls.n	800593c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800595c:	f3bf 8f5f 	dmb	sy
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20012f00 	.word	0x20012f00
 800596c:	0800894c 	.word	0x0800894c
 8005970:	20012fa8 	.word	0x20012fa8
 8005974:	200133a8 	.word	0x200133a8
 8005978:	080089d8 	.word	0x080089d8

0800597c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	@ 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005988:	2300      	movs	r3, #0
 800598a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	429a      	cmp	r2, r3
 800599e:	d905      	bls.n	80059ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059aa:	e007      	b.n	80059bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	69b9      	ldr	r1, [r7, #24]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	1acb      	subs	r3, r1, r3
 80059b6:	4413      	add	r3, r2
 80059b8:	3b01      	subs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c6:	4293      	cmp	r3, r2
 80059c8:	bf28      	it	cs
 80059ca:	4613      	movcs	r3, r2
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80059ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4293      	cmp	r3, r2
 80059d4:	bf28      	it	cs
 80059d6:	4613      	movcs	r3, r2
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80059e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	6978      	ldr	r0, [r7, #20]
 80059ea:	f001 ff70 	bl	80078ce <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	4413      	add	r3, r2
 80059f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	4413      	add	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	4413      	add	r3, r2
 8005a0c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d101      	bne.n	8005a1c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a1c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1b2      	bne.n	8005992 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	@ 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d911      	bls.n	8005a7e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	6938      	ldr	r0, [r7, #16]
 8005a6a:	f001 ff30 	bl	80078ce <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a6e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	441a      	add	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a7c:	e01f      	b.n	8005abe <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	6938      	ldr	r0, [r7, #16]
 8005a92:	f001 ff1c 	bl	80078ce <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4619      	mov	r1, r3
 8005aae:	6938      	ldr	r0, [r7, #16]
 8005ab0:	f001 ff0d 	bl	80078ce <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ab4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	60da      	str	r2, [r3, #12]
}
 8005abe:	bf00      	nop
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d808      	bhi.n	8005af4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1ad2      	subs	r2, r2, r3
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	3b01      	subs	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e004      	b.n	8005afe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005afe:	697b      	ldr	r3, [r7, #20]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	@ 0x30
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005b18:	4b3e      	ldr	r3, [pc, #248]	@ (8005c14 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b1a:	623b      	str	r3, [r7, #32]
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b53      	cmp	r3, #83	@ 0x53
 8005b24:	d001      	beq.n	8005b2a <SEGGER_RTT_ReadNoLock+0x1e>
 8005b26:	f7ff fecf 	bl	80058c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	3360      	adds	r3, #96	@ 0x60
 8005b36:	4a37      	ldr	r2, [pc, #220]	@ (8005c14 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d92b      	bls.n	8005bb0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4293      	cmp	r3, r2
 8005b68:	bf28      	it	cs
 8005b6a:	4613      	movcs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	4413      	add	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	6939      	ldr	r1, [r7, #16]
 8005b7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b7e:	f001 fea6 	bl	80078ce <memcpy>
    NumBytesRead += NumBytesRem;
 8005b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d101      	bne.n	8005bb0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	bf28      	it	cs
 8005bc0:	4613      	movcs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d019      	beq.n	8005bfe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	4413      	add	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	6939      	ldr	r1, [r7, #16]
 8005bd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bda:	f001 fe78 	bl	80078ce <memcpy>
    NumBytesRead += NumBytesRem;
 8005bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4413      	add	r3, r2
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3730      	adds	r7, #48	@ 0x30
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20012f00 	.word	0x20012f00

08005c18 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4413      	add	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005c36:	4413      	add	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d029      	beq.n	8005c96 <SEGGER_RTT_WriteNoLock+0x7e>
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d82e      	bhi.n	8005ca4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <SEGGER_RTT_WriteNoLock+0x38>
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d013      	beq.n	8005c76 <SEGGER_RTT_WriteNoLock+0x5e>
 8005c4e:	e029      	b.n	8005ca4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005c50:	6978      	ldr	r0, [r7, #20]
 8005c52:	f7ff ff38 	bl	8005ac6 <_GetAvailWriteSpace>
 8005c56:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d202      	bcs.n	8005c66 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005c64:	e021      	b.n	8005caa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	6978      	ldr	r0, [r7, #20]
 8005c70:	f7ff fee1 	bl	8005a36 <_WriteNoCheck>
    break;
 8005c74:	e019      	b.n	8005caa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005c76:	6978      	ldr	r0, [r7, #20]
 8005c78:	f7ff ff25 	bl	8005ac6 <_GetAvailWriteSpace>
 8005c7c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	bf28      	it	cs
 8005c86:	4613      	movcs	r3, r2
 8005c88:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	69b9      	ldr	r1, [r7, #24]
 8005c8e:	6978      	ldr	r0, [r7, #20]
 8005c90:	f7ff fed1 	bl	8005a36 <_WriteNoCheck>
    break;
 8005c94:	e009      	b.n	8005caa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	69b9      	ldr	r1, [r7, #24]
 8005c9a:	6978      	ldr	r0, [r7, #20]
 8005c9c:	f7ff fe6e 	bl	800597c <_WriteBlocking>
 8005ca0:	61f8      	str	r0, [r7, #28]
    break;
 8005ca2:	e002      	b.n	8005caa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
    break;
 8005ca8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005caa:	69fb      	ldr	r3, [r7, #28]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20012f00 	.word	0x20012f00

08005cb8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <SEGGER_RTT_Write+0x48>)
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b53      	cmp	r3, #83	@ 0x53
 8005cd0:	d001      	beq.n	8005cd6 <SEGGER_RTT_Write+0x1e>
 8005cd2:	f7ff fdf9 	bl	80058c8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cda:	f04f 0120 	mov.w	r1, #32
 8005cde:	f381 8811 	msr	BASEPRI, r1
 8005ce2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff ff95 	bl	8005c18 <SEGGER_RTT_WriteNoLock>
 8005cee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20012f00 	.word	0x20012f00

08005d04 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d12:	4b3d      	ldr	r3, [pc, #244]	@ (8005e08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b53      	cmp	r3, #83	@ 0x53
 8005d1e:	d001      	beq.n	8005d24 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005d20:	f7ff fdd2 	bl	80058c8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005d24:	f3ef 8311 	mrs	r3, BASEPRI
 8005d28:	f04f 0120 	mov.w	r1, #32
 8005d2c:	f381 8811 	msr	BASEPRI, r1
 8005d30:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d32:	4b35      	ldr	r3, [pc, #212]	@ (8005e08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d34:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005d3a:	6939      	ldr	r1, [r7, #16]
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	440b      	add	r3, r1
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	dbeb      	blt.n	8005d3a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005d62:	e000      	b.n	8005d66 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005d64:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	da3f      	bge.n	8005df0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005d70:	6939      	ldr	r1, [r7, #16]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	4613      	mov	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	440b      	add	r3, r1
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005d84:	6939      	ldr	r1, [r7, #16]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	440b      	add	r3, r1
 8005d94:	3304      	adds	r3, #4
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005d9a:	6939      	ldr	r1, [r7, #16]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	440b      	add	r3, r1
 8005da8:	3320      	adds	r3, #32
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005dae:	6939      	ldr	r1, [r7, #16]
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	4613      	mov	r3, r2
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	4413      	add	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	440b      	add	r3, r1
 8005dbc:	3328      	adds	r3, #40	@ 0x28
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005dc2:	6939      	ldr	r1, [r7, #16]
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	440b      	add	r3, r1
 8005dd0:	3324      	adds	r3, #36	@ 0x24
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005dd6:	6939      	ldr	r1, [r7, #16]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	4413      	add	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	440b      	add	r3, r1
 8005de4:	332c      	adds	r3, #44	@ 0x2c
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005dea:	f3bf 8f5f 	dmb	sy
 8005dee:	e002      	b.n	8005df6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005df0:	f04f 33ff 	mov.w	r3, #4294967295
 8005df4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3720      	adds	r7, #32
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20012f00 	.word	0x20012f00

08005e0c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	@ 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005e1a:	4b21      	ldr	r3, [pc, #132]	@ (8005ea0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b53      	cmp	r3, #83	@ 0x53
 8005e26:	d001      	beq.n	8005e2c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005e28:	f7ff fd4e 	bl	80058c8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005e2e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d82c      	bhi.n	8005e90 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005e36:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3a:	f04f 0120 	mov.w	r1, #32
 8005e3e:	f381 8811 	msr	BASEPRI, r1
 8005e42:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	3360      	adds	r3, #96	@ 0x60
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00e      	beq.n	8005e7a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e80:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8e:	e002      	b.n	8005e96 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3728      	adds	r7, #40	@ 0x28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20012f00 	.word	0x20012f00

08005ea4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	60fa      	str	r2, [r7, #12]
 8005eba:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b80      	cmp	r3, #128	@ 0x80
 8005ec0:	d90a      	bls.n	8005ed8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005ec2:	2380      	movs	r3, #128	@ 0x80
 8005ec4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005ec6:	e007      	b.n	8005ed8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	1c53      	adds	r3, r2, #1
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	60f9      	str	r1, [r7, #12]
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	1e5a      	subs	r2, r3, #1
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <_EncodeStr+0x46>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1ee      	bne.n	8005ec8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3307      	adds	r3, #7
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f22:	4b34      	ldr	r3, [pc, #208]	@ (8005ff4 <_HandleIncomingPacket+0xd8>)
 8005f24:	7e1b      	ldrb	r3, [r3, #24]
 8005f26:	4618      	mov	r0, r3
 8005f28:	1cfb      	adds	r3, r7, #3
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f7ff fded 	bl	8005b0c <SEGGER_RTT_ReadNoLock>
 8005f32:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d057      	beq.n	8005fea <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	2b80      	cmp	r3, #128	@ 0x80
 8005f3e:	d031      	beq.n	8005fa4 <_HandleIncomingPacket+0x88>
 8005f40:	2b80      	cmp	r3, #128	@ 0x80
 8005f42:	dc40      	bgt.n	8005fc6 <_HandleIncomingPacket+0xaa>
 8005f44:	2b07      	cmp	r3, #7
 8005f46:	dc15      	bgt.n	8005f74 <_HandleIncomingPacket+0x58>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dd3c      	ble.n	8005fc6 <_HandleIncomingPacket+0xaa>
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	2b06      	cmp	r3, #6
 8005f50:	d839      	bhi.n	8005fc6 <_HandleIncomingPacket+0xaa>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <_HandleIncomingPacket+0x3c>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f7b 	.word	0x08005f7b
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f87 	.word	0x08005f87
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f93 	.word	0x08005f93
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	08005f9f 	.word	0x08005f9f
 8005f74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f76:	d033      	beq.n	8005fe0 <_HandleIncomingPacket+0xc4>
 8005f78:	e025      	b.n	8005fc6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005f7a:	f000 fb25 	bl	80065c8 <SEGGER_SYSVIEW_Start>
      break;
 8005f7e:	e034      	b.n	8005fea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005f80:	f000 fbdc 	bl	800673c <SEGGER_SYSVIEW_Stop>
      break;
 8005f84:	e031      	b.n	8005fea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005f86:	f000 fdb5 	bl	8006af4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005f8a:	e02e      	b.n	8005fea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005f8c:	f000 fd7a 	bl	8006a84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005f90:	e02b      	b.n	8005fea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005f92:	f000 fbf9 	bl	8006788 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005f96:	e028      	b.n	8005fea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005f98:	f001 f8e6 	bl	8007168 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005f9c:	e025      	b.n	8005fea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005f9e:	f001 f8c5 	bl	800712c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005fa2:	e022      	b.n	8005fea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fa4:	4b13      	ldr	r3, [pc, #76]	@ (8005ff4 <_HandleIncomingPacket+0xd8>)
 8005fa6:	7e1b      	ldrb	r3, [r3, #24]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	1cfb      	adds	r3, r7, #3
 8005fac:	2201      	movs	r2, #1
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f7ff fdac 	bl	8005b0c <SEGGER_RTT_ReadNoLock>
 8005fb4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f82a 	bl	8007018 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005fc4:	e00e      	b.n	8005fe4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da0c      	bge.n	8005fe8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fce:	4b09      	ldr	r3, [pc, #36]	@ (8005ff4 <_HandleIncomingPacket+0xd8>)
 8005fd0:	7e1b      	ldrb	r3, [r3, #24]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	1cfb      	adds	r3, r7, #3
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4619      	mov	r1, r3
 8005fda:	f7ff fd97 	bl	8005b0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005fde:	e003      	b.n	8005fe8 <_HandleIncomingPacket+0xcc>
      break;
 8005fe0:	bf00      	nop
 8005fe2:	e002      	b.n	8005fea <_HandleIncomingPacket+0xce>
      break;
 8005fe4:	bf00      	nop
 8005fe6:	e000      	b.n	8005fea <_HandleIncomingPacket+0xce>
      break;
 8005fe8:	bf00      	nop
    }
  }
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	2001f3c0 	.word	0x2001f3c0

08005ff8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08c      	sub	sp, #48	@ 0x30
 8005ffc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005ffe:	2301      	movs	r3, #1
 8006000:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	3301      	adds	r3, #1
 8006006:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800600c:	4b31      	ldr	r3, [pc, #196]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006012:	e00b      	b.n	800602c <_TrySendOverflowPacket+0x34>
 8006014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006016:	b2da      	uxtb	r2, r3
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	1c59      	adds	r1, r3, #1
 800601c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800601e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	09db      	lsrs	r3, r3, #7
 800602a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800602c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006030:	d8f0      	bhi.n	8006014 <_TrySendOverflowPacket+0x1c>
 8006032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006042:	4b25      	ldr	r3, [pc, #148]	@ (80060d8 <_TrySendOverflowPacket+0xe0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006048:	4b22      	ldr	r3, [pc, #136]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	e00b      	b.n	8006074 <_TrySendOverflowPacket+0x7c>
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	6279      	str	r1, [r7, #36]	@ 0x24
 8006066:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	623b      	str	r3, [r7, #32]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	2b7f      	cmp	r3, #127	@ 0x7f
 8006078:	d8f0      	bhi.n	800605c <_TrySendOverflowPacket+0x64>
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006080:	6a3a      	ldr	r2, [r7, #32]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800608a:	4b12      	ldr	r3, [pc, #72]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	4618      	mov	r0, r3
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	461a      	mov	r2, r3
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	4619      	mov	r1, r3
 800609c:	f7fa f898 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060a0:	4603      	mov	r3, r0
 80060a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060aa:	4a0a      	ldr	r2, [pc, #40]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80060b0:	4b08      	ldr	r3, [pc, #32]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e004      	b.n	80060c8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80060be:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a03      	ldr	r2, [pc, #12]	@ (80060d4 <_TrySendOverflowPacket+0xdc>)
 80060c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80060c8:	693b      	ldr	r3, [r7, #16]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3730      	adds	r7, #48	@ 0x30
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	2001f3c0 	.word	0x2001f3c0
 80060d8:	e0001004 	.word	0xe0001004

080060dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	@ 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80060e8:	4b98      	ldr	r3, [pc, #608]	@ (800634c <_SendPacket+0x270>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d010      	beq.n	8006112 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80060f0:	4b96      	ldr	r3, [pc, #600]	@ (800634c <_SendPacket+0x270>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 812d 	beq.w	8006354 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80060fa:	4b94      	ldr	r3, [pc, #592]	@ (800634c <_SendPacket+0x270>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d109      	bne.n	8006116 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006102:	f7ff ff79 	bl	8005ff8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006106:	4b91      	ldr	r3, [pc, #580]	@ (800634c <_SendPacket+0x270>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b01      	cmp	r3, #1
 800610c:	f040 8124 	bne.w	8006358 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8006110:	e001      	b.n	8006116 <_SendPacket+0x3a>
    goto Send;
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <_SendPacket+0x3c>
Send:
 8006116:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b1f      	cmp	r3, #31
 800611c:	d809      	bhi.n	8006132 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800611e:	4b8b      	ldr	r3, [pc, #556]	@ (800634c <_SendPacket+0x270>)
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	f040 8115 	bne.w	800635c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b17      	cmp	r3, #23
 8006136:	d807      	bhi.n	8006148 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3b01      	subs	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	b2da      	uxtb	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e0c4      	b.n	80062d2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b7f      	cmp	r3, #127	@ 0x7f
 8006154:	d912      	bls.n	800617c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	09da      	lsrs	r2, r3, #7
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3b01      	subs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	3a01      	subs	r2, #1
 800616e:	60fa      	str	r2, [r7, #12]
 8006170:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006174:	b2da      	uxtb	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	e006      	b.n	800618a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3b01      	subs	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b7e      	cmp	r3, #126	@ 0x7e
 800618e:	d807      	bhi.n	80061a0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3b01      	subs	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e098      	b.n	80062d2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061a6:	d212      	bcs.n	80061ce <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	09da      	lsrs	r2, r3, #7
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	3a01      	subs	r2, #1
 80061c0:	60fa      	str	r2, [r7, #12]
 80061c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e081      	b.n	80062d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061d4:	d21d      	bcs.n	8006212 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	0b9a      	lsrs	r2, r3, #14
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b01      	subs	r3, #1
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	09db      	lsrs	r3, r3, #7
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	3a01      	subs	r2, #1
 80061f0:	60fa      	str	r2, [r7, #12]
 80061f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	3a01      	subs	r2, #1
 8006204:	60fa      	str	r2, [r7, #12]
 8006206:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800620a:	b2da      	uxtb	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e05f      	b.n	80062d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006218:	d228      	bcs.n	800626c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	0d5a      	lsrs	r2, r3, #21
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b01      	subs	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	0b9b      	lsrs	r3, r3, #14
 800622e:	b2db      	uxtb	r3, r3
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	3a01      	subs	r2, #1
 8006234:	60fa      	str	r2, [r7, #12]
 8006236:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	09db      	lsrs	r3, r3, #7
 8006244:	b2db      	uxtb	r3, r3
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	3a01      	subs	r2, #1
 800624a:	60fa      	str	r2, [r7, #12]
 800624c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	3a01      	subs	r2, #1
 800625e:	60fa      	str	r2, [r7, #12]
 8006260:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e032      	b.n	80062d2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	0f1a      	lsrs	r2, r3, #28
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3b01      	subs	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	0d5b      	lsrs	r3, r3, #21
 8006280:	b2db      	uxtb	r3, r3
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	3a01      	subs	r2, #1
 8006286:	60fa      	str	r2, [r7, #12]
 8006288:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0b9b      	lsrs	r3, r3, #14
 8006296:	b2db      	uxtb	r3, r3
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	3a01      	subs	r2, #1
 800629c:	60fa      	str	r2, [r7, #12]
 800629e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	3a01      	subs	r2, #1
 80062b2:	60fa      	str	r2, [r7, #12]
 80062b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	3a01      	subs	r2, #1
 80062c6:	60fa      	str	r2, [r7, #12]
 80062c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006350 <_SendPacket+0x274>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80062d8:	4b1c      	ldr	r3, [pc, #112]	@ (800634c <_SendPacket+0x270>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	e00b      	b.n	8006304 <_SendPacket+0x228>
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	1c59      	adds	r1, r3, #1
 80062f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80062f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	09db      	lsrs	r3, r3, #7
 8006302:	623b      	str	r3, [r7, #32]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	2b7f      	cmp	r3, #127	@ 0x7f
 8006308:	d8f0      	bhi.n	80062ec <_SendPacket+0x210>
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800631a:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <_SendPacket+0x270>)
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	4618      	mov	r0, r3
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	461a      	mov	r2, r3
 8006328:	68f9      	ldr	r1, [r7, #12]
 800632a:	f7f9 ff51 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800632e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006336:	4a05      	ldr	r2, [pc, #20]	@ (800634c <_SendPacket+0x270>)
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	60d3      	str	r3, [r2, #12]
 800633c:	e00f      	b.n	800635e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800633e:	4b03      	ldr	r3, [pc, #12]	@ (800634c <_SendPacket+0x270>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	b2da      	uxtb	r2, r3
 8006346:	4b01      	ldr	r3, [pc, #4]	@ (800634c <_SendPacket+0x270>)
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e008      	b.n	800635e <_SendPacket+0x282>
 800634c:	2001f3c0 	.word	0x2001f3c0
 8006350:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006354:	bf00      	nop
 8006356:	e002      	b.n	800635e <_SendPacket+0x282>
      goto SendDone;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <_SendPacket+0x282>
      goto SendDone;
 800635c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800635e:	4b14      	ldr	r3, [pc, #80]	@ (80063b0 <_SendPacket+0x2d4>)
 8006360:	7e1b      	ldrb	r3, [r3, #24]
 8006362:	4619      	mov	r1, r3
 8006364:	4a13      	ldr	r2, [pc, #76]	@ (80063b4 <_SendPacket+0x2d8>)
 8006366:	460b      	mov	r3, r1
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	440b      	add	r3, r1
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	336c      	adds	r3, #108	@ 0x6c
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b0e      	ldr	r3, [pc, #56]	@ (80063b0 <_SendPacket+0x2d4>)
 8006376:	7e1b      	ldrb	r3, [r3, #24]
 8006378:	4618      	mov	r0, r3
 800637a:	490e      	ldr	r1, [pc, #56]	@ (80063b4 <_SendPacket+0x2d8>)
 800637c:	4603      	mov	r3, r0
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4403      	add	r3, r0
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	440b      	add	r3, r1
 8006386:	3370      	adds	r3, #112	@ 0x70
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d00b      	beq.n	80063a6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800638e:	4b08      	ldr	r3, [pc, #32]	@ (80063b0 <_SendPacket+0x2d4>)
 8006390:	789b      	ldrb	r3, [r3, #2]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d107      	bne.n	80063a6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006396:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <_SendPacket+0x2d4>)
 8006398:	2201      	movs	r2, #1
 800639a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800639c:	f7ff fdbe 	bl	8005f1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80063a0:	4b03      	ldr	r3, [pc, #12]	@ (80063b0 <_SendPacket+0x2d4>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80063a6:	bf00      	nop
 80063a8:	3728      	adds	r7, #40	@ 0x28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	2001f3c0 	.word	0x2001f3c0
 80063b4:	20012f00 	.word	0x20012f00

080063b8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063c6:	2300      	movs	r3, #0
 80063c8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80063cc:	4917      	ldr	r1, [pc, #92]	@ (800642c <SEGGER_SYSVIEW_Init+0x74>)
 80063ce:	4818      	ldr	r0, [pc, #96]	@ (8006430 <SEGGER_SYSVIEW_Init+0x78>)
 80063d0:	f7ff fc98 	bl	8005d04 <SEGGER_RTT_AllocUpBuffer>
 80063d4:	4603      	mov	r3, r0
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	4b16      	ldr	r3, [pc, #88]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 80063da:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80063dc:	4b15      	ldr	r3, [pc, #84]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 80063de:	785a      	ldrb	r2, [r3, #1]
 80063e0:	4b14      	ldr	r3, [pc, #80]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 80063e2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063e4:	4b13      	ldr	r3, [pc, #76]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 80063e6:	7e1b      	ldrb	r3, [r3, #24]
 80063e8:	4618      	mov	r0, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	2308      	movs	r3, #8
 80063f0:	4a11      	ldr	r2, [pc, #68]	@ (8006438 <SEGGER_SYSVIEW_Init+0x80>)
 80063f2:	490f      	ldr	r1, [pc, #60]	@ (8006430 <SEGGER_SYSVIEW_Init+0x78>)
 80063f4:	f7ff fd0a 	bl	8005e0c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80063f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063fe:	4b0f      	ldr	r3, [pc, #60]	@ (800643c <SEGGER_SYSVIEW_Init+0x84>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 8006404:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006406:	4a0b      	ldr	r2, [pc, #44]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800640c:	4a09      	ldr	r2, [pc, #36]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006412:	4a08      	ldr	r2, [pc, #32]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006418:	4a06      	ldr	r2, [pc, #24]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800641e:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <SEGGER_SYSVIEW_Init+0x7c>)
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200133b8 	.word	0x200133b8
 8006430:	08008960 	.word	0x08008960
 8006434:	2001f3c0 	.word	0x2001f3c0
 8006438:	2001f3b8 	.word	0x2001f3b8
 800643c:	e0001004 	.word	0xe0001004

08006440 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006448:	4a04      	ldr	r2, [pc, #16]	@ (800645c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6113      	str	r3, [r2, #16]
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	2001f3c0 	.word	0x2001f3c0

08006460 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006468:	f3ef 8311 	mrs	r3, BASEPRI
 800646c:	f04f 0120 	mov.w	r1, #32
 8006470:	f381 8811 	msr	BASEPRI, r1
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	4808      	ldr	r0, [pc, #32]	@ (8006498 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006478:	f7ff fd44 	bl	8005f04 <_PreparePacket>
 800647c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68b8      	ldr	r0, [r7, #8]
 8006484:	f7ff fe2a 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2001f3f0 	.word	0x2001f3f0

0800649c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064a6:	f3ef 8311 	mrs	r3, BASEPRI
 80064aa:	f04f 0120 	mov.w	r1, #32
 80064ae:	f381 8811 	msr	BASEPRI, r1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	4816      	ldr	r0, [pc, #88]	@ (8006510 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064b6:	f7ff fd25 	bl	8005f04 <_PreparePacket>
 80064ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	e00b      	b.n	80064e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	61f9      	str	r1, [r7, #28]
 80064d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e6:	d8f0      	bhi.n	80064ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	61fa      	str	r2, [r7, #28]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68f9      	ldr	r1, [r7, #12]
 80064fc:	6938      	ldr	r0, [r7, #16]
 80064fe:	f7ff fded 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f383 8811 	msr	BASEPRI, r3
}
 8006508:	bf00      	nop
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	2001f3f0 	.word	0x2001f3f0

08006514 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b08c      	sub	sp, #48	@ 0x30
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006520:	f3ef 8311 	mrs	r3, BASEPRI
 8006524:	f04f 0120 	mov.w	r1, #32
 8006528:	f381 8811 	msr	BASEPRI, r1
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	4825      	ldr	r0, [pc, #148]	@ (80065c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006530:	f7ff fce8 	bl	8005f04 <_PreparePacket>
 8006534:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006542:	e00b      	b.n	800655c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800654e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	09db      	lsrs	r3, r3, #7
 800655a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800655c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006560:	d8f0      	bhi.n	8006544 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006570:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	627b      	str	r3, [r7, #36]	@ 0x24
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	e00b      	b.n	8006594 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	6279      	str	r1, [r7, #36]	@ 0x24
 8006586:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2b7f      	cmp	r3, #127	@ 0x7f
 8006598:	d8f0      	bhi.n	800657c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	627a      	str	r2, [r7, #36]	@ 0x24
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	69b8      	ldr	r0, [r7, #24]
 80065b0:	f7ff fd94 	bl	80060dc <_SendPacket>
  RECORD_END();
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f383 8811 	msr	BASEPRI, r3
}
 80065ba:	bf00      	nop
 80065bc:	3730      	adds	r7, #48	@ 0x30
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	2001f3f0 	.word	0x2001f3f0

080065c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	@ 0x30
 80065cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80065ce:	4b58      	ldr	r3, [pc, #352]	@ (8006730 <SEGGER_SYSVIEW_Start+0x168>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80065d4:	f3ef 8311 	mrs	r3, BASEPRI
 80065d8:	f04f 0120 	mov.w	r1, #32
 80065dc:	f381 8811 	msr	BASEPRI, r1
 80065e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80065e2:	4b53      	ldr	r3, [pc, #332]	@ (8006730 <SEGGER_SYSVIEW_Start+0x168>)
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	220a      	movs	r2, #10
 80065e8:	4952      	ldr	r1, [pc, #328]	@ (8006734 <SEGGER_SYSVIEW_Start+0x16c>)
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7f9 fdf0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80065f6:	200a      	movs	r0, #10
 80065f8:	f7ff ff32 	bl	8006460 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006600:	f04f 0120 	mov.w	r1, #32
 8006604:	f381 8811 	msr	BASEPRI, r1
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	484b      	ldr	r0, [pc, #300]	@ (8006738 <SEGGER_SYSVIEW_Start+0x170>)
 800660c:	f7ff fc7a 	bl	8005f04 <_PreparePacket>
 8006610:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800661a:	4b45      	ldr	r3, [pc, #276]	@ (8006730 <SEGGER_SYSVIEW_Start+0x168>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006620:	e00b      	b.n	800663a <SEGGER_SYSVIEW_Start+0x72>
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	b2da      	uxtb	r2, r3
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800662c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	09db      	lsrs	r3, r3, #7
 8006638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	2b7f      	cmp	r3, #127	@ 0x7f
 800663e:	d8f0      	bhi.n	8006622 <SEGGER_SYSVIEW_Start+0x5a>
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
 8006654:	4b36      	ldr	r3, [pc, #216]	@ (8006730 <SEGGER_SYSVIEW_Start+0x168>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	e00b      	b.n	8006674 <SEGGER_SYSVIEW_Start+0xac>
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	6279      	str	r1, [r7, #36]	@ 0x24
 8006666:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	09db      	lsrs	r3, r3, #7
 8006672:	623b      	str	r3, [r7, #32]
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b7f      	cmp	r3, #127	@ 0x7f
 8006678:	d8f0      	bhi.n	800665c <SEGGER_SYSVIEW_Start+0x94>
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006680:	6a3a      	ldr	r2, [r7, #32]
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	4b28      	ldr	r3, [pc, #160]	@ (8006730 <SEGGER_SYSVIEW_Start+0x168>)
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	e00b      	b.n	80066ae <SEGGER_SYSVIEW_Start+0xe6>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	1c59      	adds	r1, r3, #1
 800669e:	61f9      	str	r1, [r7, #28]
 80066a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	09db      	lsrs	r3, r3, #7
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066b2:	d8f0      	bhi.n	8006696 <SEGGER_SYSVIEW_Start+0xce>
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	61fa      	str	r2, [r7, #28]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	e00b      	b.n	80066e6 <SEGGER_SYSVIEW_Start+0x11e>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	1c59      	adds	r1, r3, #1
 80066d6:	6179      	str	r1, [r7, #20]
 80066d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066dc:	b2d2      	uxtb	r2, r2
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	09db      	lsrs	r3, r3, #7
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ea:	d8f0      	bhi.n	80066ce <SEGGER_SYSVIEW_Start+0x106>
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	617a      	str	r2, [r7, #20]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066fc:	2218      	movs	r2, #24
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fceb 	bl	80060dc <_SendPacket>
      RECORD_END();
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800670c:	4b08      	ldr	r3, [pc, #32]	@ (8006730 <SEGGER_SYSVIEW_Start+0x168>)
 800670e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <SEGGER_SYSVIEW_Start+0x168>)
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800671a:	f000 f9eb 	bl	8006af4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800671e:	f000 f9b1 	bl	8006a84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006722:	f000 fd21 	bl	8007168 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006726:	bf00      	nop
 8006728:	3730      	adds	r7, #48	@ 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2001f3c0 	.word	0x2001f3c0
 8006734:	080089ec 	.word	0x080089ec
 8006738:	2001f3f0 	.word	0x2001f3f0

0800673c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006742:	f3ef 8311 	mrs	r3, BASEPRI
 8006746:	f04f 0120 	mov.w	r1, #32
 800674a:	f381 8811 	msr	BASEPRI, r1
 800674e:	607b      	str	r3, [r7, #4]
 8006750:	480b      	ldr	r0, [pc, #44]	@ (8006780 <SEGGER_SYSVIEW_Stop+0x44>)
 8006752:	f7ff fbd7 	bl	8005f04 <_PreparePacket>
 8006756:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006758:	4b0a      	ldr	r3, [pc, #40]	@ (8006784 <SEGGER_SYSVIEW_Stop+0x48>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006760:	220b      	movs	r2, #11
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6838      	ldr	r0, [r7, #0]
 8006766:	f7ff fcb9 	bl	80060dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800676a:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <SEGGER_SYSVIEW_Stop+0x48>)
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f383 8811 	msr	BASEPRI, r3
}
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	2001f3f0 	.word	0x2001f3f0
 8006784:	2001f3c0 	.word	0x2001f3c0

08006788 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006788:	b580      	push	{r7, lr}
 800678a:	b08c      	sub	sp, #48	@ 0x30
 800678c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800678e:	f3ef 8311 	mrs	r3, BASEPRI
 8006792:	f04f 0120 	mov.w	r1, #32
 8006796:	f381 8811 	msr	BASEPRI, r1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	4845      	ldr	r0, [pc, #276]	@ (80068b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800679e:	f7ff fbb1 	bl	8005f04 <_PreparePacket>
 80067a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ac:	4b42      	ldr	r3, [pc, #264]	@ (80068b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067b2:	e00b      	b.n	80067cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	1c59      	adds	r1, r3, #1
 80067bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80067be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	09db      	lsrs	r3, r3, #7
 80067ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80067d0:	d8f0      	bhi.n	80067b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80067d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e6:	4b34      	ldr	r3, [pc, #208]	@ (80068b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	623b      	str	r3, [r7, #32]
 80067ec:	e00b      	b.n	8006806 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	1c59      	adds	r1, r3, #1
 80067f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80067f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	09db      	lsrs	r3, r3, #7
 8006804:	623b      	str	r3, [r7, #32]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	2b7f      	cmp	r3, #127	@ 0x7f
 800680a:	d8f0      	bhi.n	80067ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	627a      	str	r2, [r7, #36]	@ 0x24
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	4b25      	ldr	r3, [pc, #148]	@ (80068b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	e00b      	b.n	8006840 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	61f9      	str	r1, [r7, #28]
 8006832:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	09db      	lsrs	r3, r3, #7
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b7f      	cmp	r3, #127	@ 0x7f
 8006844:	d8f0      	bhi.n	8006828 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	61fa      	str	r2, [r7, #28]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	e00b      	b.n	8006878 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1c59      	adds	r1, r3, #1
 8006868:	6179      	str	r1, [r7, #20]
 800686a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2b7f      	cmp	r3, #127	@ 0x7f
 800687c:	d8f0      	bhi.n	8006860 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	617a      	str	r2, [r7, #20]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800688e:	2218      	movs	r2, #24
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	68b8      	ldr	r0, [r7, #8]
 8006894:	f7ff fc22 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800689e:	4b06      	ldr	r3, [pc, #24]	@ (80068b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80068a6:	4b04      	ldr	r3, [pc, #16]	@ (80068b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068aa:	4798      	blx	r3
  }
}
 80068ac:	bf00      	nop
 80068ae:	3730      	adds	r7, #48	@ 0x30
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	2001f3f0 	.word	0x2001f3f0
 80068b8:	2001f3c0 	.word	0x2001f3c0

080068bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b092      	sub	sp, #72	@ 0x48
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80068c4:	f3ef 8311 	mrs	r3, BASEPRI
 80068c8:	f04f 0120 	mov.w	r1, #32
 80068cc:	f381 8811 	msr	BASEPRI, r1
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	486a      	ldr	r0, [pc, #424]	@ (8006a7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80068d4:	f7ff fb16 	bl	8005f04 <_PreparePacket>
 80068d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b66      	ldr	r3, [pc, #408]	@ (8006a80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ee:	e00b      	b.n	8006908 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80068f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	6479      	str	r1, [r7, #68]	@ 0x44
 80068fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006904:	09db      	lsrs	r3, r3, #7
 8006906:	643b      	str	r3, [r7, #64]	@ 0x40
 8006908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800690a:	2b7f      	cmp	r3, #127	@ 0x7f
 800690c:	d8f0      	bhi.n	80068f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800690e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	647a      	str	r2, [r7, #68]	@ 0x44
 8006914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006928:	e00b      	b.n	8006942 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692c:	b2da      	uxtb	r2, r3
 800692e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006930:	1c59      	adds	r1, r3, #1
 8006932:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006934:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	09db      	lsrs	r3, r3, #7
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	2b7f      	cmp	r3, #127	@ 0x7f
 8006946:	d8f0      	bhi.n	800692a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800694e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006956:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	4619      	mov	r1, r3
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff fa9f 	bl	8005ea4 <_EncodeStr>
 8006966:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006968:	2209      	movs	r2, #9
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	6938      	ldr	r0, [r7, #16]
 800696e:	f7ff fbb5 	bl	80060dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b40      	ldr	r3, [pc, #256]	@ (8006a80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	633b      	str	r3, [r7, #48]	@ 0x30
 8006986:	e00b      	b.n	80069a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	b2da      	uxtb	r2, r3
 800698c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	6379      	str	r1, [r7, #52]	@ 0x34
 8006992:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	09db      	lsrs	r3, r3, #7
 800699e:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a4:	d8f0      	bhi.n	8006988 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80069a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80069ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069c0:	e00b      	b.n	80069da <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80069cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d6:	09db      	lsrs	r3, r3, #7
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80069de:	d8f0      	bhi.n	80069c2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80069e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	e00b      	b.n	8006a14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	09db      	lsrs	r3, r3, #7
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a18:	d8f0      	bhi.n	80069fc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a20:	6a3a      	ldr	r2, [r7, #32]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	e00b      	b.n	8006a4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	61f9      	str	r1, [r7, #28]
 8006a3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	09db      	lsrs	r3, r3, #7
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a50:	d8f0      	bhi.n	8006a34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	61fa      	str	r2, [r7, #28]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006a62:	2215      	movs	r2, #21
 8006a64:	68f9      	ldr	r1, [r7, #12]
 8006a66:	6938      	ldr	r0, [r7, #16]
 8006a68:	f7ff fb38 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f383 8811 	msr	BASEPRI, r3
}
 8006a72:	bf00      	nop
 8006a74:	3748      	adds	r7, #72	@ 0x48
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	2001f3f0 	.word	0x2001f3f0
 8006a80:	2001f3c0 	.word	0x2001f3c0

08006a84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006a88:	4b07      	ldr	r3, [pc, #28]	@ (8006aa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006a90:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006a9a:	4b03      	ldr	r3, [pc, #12]	@ (8006aa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4798      	blx	r3
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	2001f3c0 	.word	0x2001f3c0

08006aac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab8:	f04f 0120 	mov.w	r1, #32
 8006abc:	f381 8811 	msr	BASEPRI, r1
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	480b      	ldr	r0, [pc, #44]	@ (8006af0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006ac4:	f7ff fa1e 	bl	8005f04 <_PreparePacket>
 8006ac8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aca:	2280      	movs	r2, #128	@ 0x80
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	6938      	ldr	r0, [r7, #16]
 8006ad0:	f7ff f9e8 	bl	8005ea4 <_EncodeStr>
 8006ad4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ad6:	220e      	movs	r2, #14
 8006ad8:	68f9      	ldr	r1, [r7, #12]
 8006ada:	6938      	ldr	r0, [r7, #16]
 8006adc:	f7ff fafe 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f383 8811 	msr	BASEPRI, r3
}
 8006ae6:	bf00      	nop
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2001f3f0 	.word	0x2001f3f0

08006af4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006af4:	b590      	push	{r4, r7, lr}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006afa:	4b15      	ldr	r3, [pc, #84]	@ (8006b50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01a      	beq.n	8006b38 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006b02:	4b13      	ldr	r3, [pc, #76]	@ (8006b50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006b0c:	4b10      	ldr	r3, [pc, #64]	@ (8006b50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4798      	blx	r3
 8006b14:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b18:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	000a      	movs	r2, r1
 8006b28:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4621      	mov	r1, r4
 8006b30:	200d      	movs	r0, #13
 8006b32:	f7ff fcef 	bl	8006514 <SEGGER_SYSVIEW_RecordU32x2>
 8006b36:	e006      	b.n	8006b46 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	200c      	movs	r0, #12
 8006b40:	f7ff fcac 	bl	800649c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd90      	pop	{r4, r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	2001f3c0 	.word	0x2001f3c0
 8006b54:	e0001004 	.word	0xe0001004

08006b58 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b62:	f04f 0120 	mov.w	r1, #32
 8006b66:	f381 8811 	msr	BASEPRI, r1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	4819      	ldr	r0, [pc, #100]	@ (8006bd4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006b6e:	f7ff f9c9 	bl	8005f04 <_PreparePacket>
 8006b72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006b78:	4b17      	ldr	r3, [pc, #92]	@ (8006bd8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b80:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	e00b      	b.n	8006ba4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	1c59      	adds	r1, r3, #1
 8006b94:	6179      	str	r1, [r7, #20]
 8006b96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	09db      	lsrs	r3, r3, #7
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ba8:	d8f0      	bhi.n	8006b8c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	617a      	str	r2, [r7, #20]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006bba:	2202      	movs	r2, #2
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	68b8      	ldr	r0, [r7, #8]
 8006bc0:	f7ff fa8c 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f383 8811 	msr	BASEPRI, r3
}
 8006bca:	bf00      	nop
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	2001f3f0 	.word	0x2001f3f0
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006be2:	f3ef 8311 	mrs	r3, BASEPRI
 8006be6:	f04f 0120 	mov.w	r1, #32
 8006bea:	f381 8811 	msr	BASEPRI, r1
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	4807      	ldr	r0, [pc, #28]	@ (8006c10 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006bf2:	f7ff f987 	bl	8005f04 <_PreparePacket>
 8006bf6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6838      	ldr	r0, [r7, #0]
 8006bfe:	f7ff fa6d 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f383 8811 	msr	BASEPRI, r3
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	2001f3f0 	.word	0x2001f3f0

08006c14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c1e:	f04f 0120 	mov.w	r1, #32
 8006c22:	f381 8811 	msr	BASEPRI, r1
 8006c26:	607b      	str	r3, [r7, #4]
 8006c28:	4807      	ldr	r0, [pc, #28]	@ (8006c48 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c2a:	f7ff f96b 	bl	8005f04 <_PreparePacket>
 8006c2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c30:	2212      	movs	r2, #18
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6838      	ldr	r0, [r7, #0]
 8006c36:	f7ff fa51 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f383 8811 	msr	BASEPRI, r3
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	2001f3f0 	.word	0x2001f3f0

08006c4c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c54:	f3ef 8311 	mrs	r3, BASEPRI
 8006c58:	f04f 0120 	mov.w	r1, #32
 8006c5c:	f381 8811 	msr	BASEPRI, r1
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	4817      	ldr	r0, [pc, #92]	@ (8006cc0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006c64:	f7ff f94e 	bl	8005f04 <_PreparePacket>
 8006c68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	e00b      	b.n	8006c90 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	61f9      	str	r1, [r7, #28]
 8006c82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	09db      	lsrs	r3, r3, #7
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c94:	d8f0      	bhi.n	8006c78 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	61fa      	str	r2, [r7, #28]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006ca6:	221c      	movs	r2, #28
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f7ff fa16 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f383 8811 	msr	BASEPRI, r3
}
 8006cb6:	bf00      	nop
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	2001f3f0 	.word	0x2001f3f0

08006cc4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	@ 0x28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cce:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd2:	f04f 0120 	mov.w	r1, #32
 8006cd6:	f381 8811 	msr	BASEPRI, r1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	4824      	ldr	r0, [pc, #144]	@ (8006d70 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006cde:	f7ff f911 	bl	8005f04 <_PreparePacket>
 8006ce2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	e00b      	b.n	8006d0a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	1c59      	adds	r1, r3, #1
 8006cfa:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	09db      	lsrs	r3, r3, #7
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d0e:	d8f0      	bhi.n	8006cf2 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	e00b      	b.n	8006d42 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	1c59      	adds	r1, r3, #1
 8006d32:	61f9      	str	r1, [r7, #28]
 8006d34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	09db      	lsrs	r3, r3, #7
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d46:	d8f0      	bhi.n	8006d2a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	61fa      	str	r2, [r7, #28]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006d58:	221c      	movs	r2, #28
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	6938      	ldr	r0, [r7, #16]
 8006d5e:	f7ff f9bd 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f383 8811 	msr	BASEPRI, r3
}
 8006d68:	bf00      	nop
 8006d6a:	3728      	adds	r7, #40	@ 0x28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	2001f3f0 	.word	0x2001f3f0

08006d74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7e:	f04f 0120 	mov.w	r1, #32
 8006d82:	f381 8811 	msr	BASEPRI, r1
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	4807      	ldr	r0, [pc, #28]	@ (8006da8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d8a:	f7ff f8bb 	bl	8005f04 <_PreparePacket>
 8006d8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d90:	2211      	movs	r2, #17
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6838      	ldr	r0, [r7, #0]
 8006d96:	f7ff f9a1 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f383 8811 	msr	BASEPRI, r3
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	2001f3f0 	.word	0x2001f3f0

08006dac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006db4:	f3ef 8311 	mrs	r3, BASEPRI
 8006db8:	f04f 0120 	mov.w	r1, #32
 8006dbc:	f381 8811 	msr	BASEPRI, r1
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	4819      	ldr	r0, [pc, #100]	@ (8006e28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006dc4:	f7ff f89e 	bl	8005f04 <_PreparePacket>
 8006dc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006dce:	4b17      	ldr	r3, [pc, #92]	@ (8006e2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e00b      	b.n	8006dfa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	1c59      	adds	r1, r3, #1
 8006dea:	61f9      	str	r1, [r7, #28]
 8006dec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	09db      	lsrs	r3, r3, #7
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dfe:	d8f0      	bhi.n	8006de2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	61fa      	str	r2, [r7, #28]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006e10:	2208      	movs	r2, #8
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	6938      	ldr	r0, [r7, #16]
 8006e16:	f7ff f961 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f383 8811 	msr	BASEPRI, r3
}
 8006e20:	bf00      	nop
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	2001f3f0 	.word	0x2001f3f0
 8006e2c:	2001f3c0 	.word	0x2001f3c0

08006e30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e38:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3c:	f04f 0120 	mov.w	r1, #32
 8006e40:	f381 8811 	msr	BASEPRI, r1
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	4819      	ldr	r0, [pc, #100]	@ (8006eac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e48:	f7ff f85c 	bl	8005f04 <_PreparePacket>
 8006e4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e52:	4b17      	ldr	r3, [pc, #92]	@ (8006eb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	e00b      	b.n	8006e7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	1c59      	adds	r1, r3, #1
 8006e6e:	61f9      	str	r1, [r7, #28]
 8006e70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	09db      	lsrs	r3, r3, #7
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e82:	d8f0      	bhi.n	8006e66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	61fa      	str	r2, [r7, #28]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e94:	2204      	movs	r2, #4
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	6938      	ldr	r0, [r7, #16]
 8006e9a:	f7ff f91f 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f383 8811 	msr	BASEPRI, r3
}
 8006ea4:	bf00      	nop
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	2001f3f0 	.word	0x2001f3f0
 8006eb0:	2001f3c0 	.word	0x2001f3c0

08006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec0:	f04f 0120 	mov.w	r1, #32
 8006ec4:	f381 8811 	msr	BASEPRI, r1
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	4819      	ldr	r0, [pc, #100]	@ (8006f30 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ecc:	f7ff f81a 	bl	8005f04 <_PreparePacket>
 8006ed0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ed6:	4b17      	ldr	r3, [pc, #92]	@ (8006f34 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	e00b      	b.n	8006f02 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	1c59      	adds	r1, r3, #1
 8006ef2:	61f9      	str	r1, [r7, #28]
 8006ef4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	09db      	lsrs	r3, r3, #7
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f06:	d8f0      	bhi.n	8006eea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	61fa      	str	r2, [r7, #28]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006f18:	2206      	movs	r2, #6
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	6938      	ldr	r0, [r7, #16]
 8006f1e:	f7ff f8dd 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f383 8811 	msr	BASEPRI, r3
}
 8006f28:	bf00      	nop
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	2001f3f0 	.word	0x2001f3f0
 8006f34:	2001f3c0 	.word	0x2001f3c0

08006f38 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	@ 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f42:	f3ef 8311 	mrs	r3, BASEPRI
 8006f46:	f04f 0120 	mov.w	r1, #32
 8006f4a:	f381 8811 	msr	BASEPRI, r1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	4827      	ldr	r0, [pc, #156]	@ (8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f52:	f7fe ffd7 	bl	8005f04 <_PreparePacket>
 8006f56:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f5c:	4b25      	ldr	r3, [pc, #148]	@ (8006ff4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	e00b      	b.n	8006f88 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	1c59      	adds	r1, r3, #1
 8006f78:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	09db      	lsrs	r3, r3, #7
 8006f86:	623b      	str	r3, [r7, #32]
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f8c:	d8f0      	bhi.n	8006f70 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	e00b      	b.n	8006fc0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	1c59      	adds	r1, r3, #1
 8006fb0:	61f9      	str	r1, [r7, #28]
 8006fb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	09db      	lsrs	r3, r3, #7
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fc4:	d8f0      	bhi.n	8006fa8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	61fa      	str	r2, [r7, #28]
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006fd6:	2207      	movs	r2, #7
 8006fd8:	68f9      	ldr	r1, [r7, #12]
 8006fda:	6938      	ldr	r0, [r7, #16]
 8006fdc:	f7ff f87e 	bl	80060dc <_SendPacket>
  RECORD_END();
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f383 8811 	msr	BASEPRI, r3
}
 8006fe6:	bf00      	nop
 8006fe8:	3728      	adds	r7, #40	@ 0x28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2001f3f0 	.word	0x2001f3f0
 8006ff4:	2001f3c0 	.word	0x2001f3c0

08006ff8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007000:	4b04      	ldr	r3, [pc, #16]	@ (8007014 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	1ad3      	subs	r3, r2, r3
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	2001f3c0 	.word	0x2001f3c0

08007018 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	@ 0x30
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007022:	4b40      	ldr	r3, [pc, #256]	@ (8007124 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d077      	beq.n	800711a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800702a:	4b3e      	ldr	r3, [pc, #248]	@ (8007124 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007030:	2300      	movs	r3, #0
 8007032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007034:	e008      	b.n	8007048 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007044:	3301      	adds	r3, #1
 8007046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800704c:	429a      	cmp	r2, r3
 800704e:	d3f2      	bcc.n	8007036 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007050:	e000      	b.n	8007054 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007052:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d055      	beq.n	8007106 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800705a:	f3ef 8311 	mrs	r3, BASEPRI
 800705e:	f04f 0120 	mov.w	r1, #32
 8007062:	f381 8811 	msr	BASEPRI, r1
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	482f      	ldr	r0, [pc, #188]	@ (8007128 <SEGGER_SYSVIEW_SendModule+0x110>)
 800706a:	f7fe ff4b 	bl	8005f04 <_PreparePacket>
 800706e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	623b      	str	r3, [r7, #32]
 800707c:	e00b      	b.n	8007096 <SEGGER_SYSVIEW_SendModule+0x7e>
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	1c59      	adds	r1, r3, #1
 8007086:	6279      	str	r1, [r7, #36]	@ 0x24
 8007088:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	09db      	lsrs	r3, r3, #7
 8007094:	623b      	str	r3, [r7, #32]
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	2b7f      	cmp	r3, #127	@ 0x7f
 800709a:	d8f0      	bhi.n	800707e <SEGGER_SYSVIEW_SendModule+0x66>
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80070a2:	6a3a      	ldr	r2, [r7, #32]
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e00b      	b.n	80070d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	61f9      	str	r1, [r7, #28]
 80070c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	09db      	lsrs	r3, r3, #7
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070d4:	d8f0      	bhi.n	80070b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	61fa      	str	r2, [r7, #28]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2280      	movs	r2, #128	@ 0x80
 80070ec:	4619      	mov	r1, r3
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7fe fed8 	bl	8005ea4 <_EncodeStr>
 80070f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070f6:	2216      	movs	r2, #22
 80070f8:	68f9      	ldr	r1, [r7, #12]
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f7fe ffee 	bl	80060dc <_SendPacket>
      RECORD_END();
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d006      	beq.n	800711a <SEGGER_SYSVIEW_SendModule+0x102>
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	4798      	blx	r3
    }
  }
}
 800711a:	bf00      	nop
 800711c:	3730      	adds	r7, #48	@ 0x30
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	2001f3e8 	.word	0x2001f3e8
 8007128:	2001f3f0 	.word	0x2001f3f0

0800712c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00f      	beq.n	800715a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800713a:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f2      	bne.n	8007140 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	2001f3e8 	.word	0x2001f3e8

08007168 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800716e:	f3ef 8311 	mrs	r3, BASEPRI
 8007172:	f04f 0120 	mov.w	r1, #32
 8007176:	f381 8811 	msr	BASEPRI, r1
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	4817      	ldr	r0, [pc, #92]	@ (80071dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800717e:	f7fe fec1 	bl	8005f04 <_PreparePacket>
 8007182:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	4b14      	ldr	r3, [pc, #80]	@ (80071e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e00b      	b.n	80071ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	1c59      	adds	r1, r3, #1
 800719c:	6179      	str	r1, [r7, #20]
 800719e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	09db      	lsrs	r3, r3, #7
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80071b0:	d8f0      	bhi.n	8007194 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	617a      	str	r2, [r7, #20]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80071c2:	221b      	movs	r2, #27
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	68b8      	ldr	r0, [r7, #8]
 80071c8:	f7fe ff88 	bl	80060dc <_SendPacket>
  RECORD_END();
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f383 8811 	msr	BASEPRI, r3
}
 80071d2:	bf00      	nop
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	2001f3f0 	.word	0x2001f3f0
 80071e0:	2001f3ec 	.word	0x2001f3ec

080071e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	@ 0x28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071ec:	f3ef 8311 	mrs	r3, BASEPRI
 80071f0:	f04f 0120 	mov.w	r1, #32
 80071f4:	f381 8811 	msr	BASEPRI, r1
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	4827      	ldr	r0, [pc, #156]	@ (8007298 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071fc:	f7fe fe82 	bl	8005f04 <_PreparePacket>
 8007200:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007202:	2280      	movs	r2, #128	@ 0x80
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	6938      	ldr	r0, [r7, #16]
 8007208:	f7fe fe4c 	bl	8005ea4 <_EncodeStr>
 800720c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
 8007212:	2301      	movs	r3, #1
 8007214:	623b      	str	r3, [r7, #32]
 8007216:	e00b      	b.n	8007230 <SEGGER_SYSVIEW_Warn+0x4c>
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	6279      	str	r1, [r7, #36]	@ 0x24
 8007222:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	09db      	lsrs	r3, r3, #7
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b7f      	cmp	r3, #127	@ 0x7f
 8007234:	d8f0      	bhi.n	8007218 <SEGGER_SYSVIEW_Warn+0x34>
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	627a      	str	r2, [r7, #36]	@ 0x24
 800723c:	6a3a      	ldr	r2, [r7, #32]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	2300      	movs	r3, #0
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e00b      	b.n	8007268 <SEGGER_SYSVIEW_Warn+0x84>
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	b2da      	uxtb	r2, r3
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	61f9      	str	r1, [r7, #28]
 800725a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	09db      	lsrs	r3, r3, #7
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b7f      	cmp	r3, #127	@ 0x7f
 800726c:	d8f0      	bhi.n	8007250 <SEGGER_SYSVIEW_Warn+0x6c>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	61fa      	str	r2, [r7, #28]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800727e:	221a      	movs	r2, #26
 8007280:	68f9      	ldr	r1, [r7, #12]
 8007282:	6938      	ldr	r0, [r7, #16]
 8007284:	f7fe ff2a 	bl	80060dc <_SendPacket>
  RECORD_END();
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f383 8811 	msr	BASEPRI, r3
}
 800728e:	bf00      	nop
 8007290:	3728      	adds	r7, #40	@ 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	2001f3f0 	.word	0x2001f3f0

0800729c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	2000      	movs	r0, #0
 80072b0:	f7fe fd02 	bl	8005cb8 <SEGGER_RTT_Write>
  return len;
 80072b4:	683b      	ldr	r3, [r7, #0]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	e033      	b.n	8007334 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80072cc:	491e      	ldr	r1, [pc, #120]	@ (8007348 <_cbSendTaskList+0x88>)
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	6818      	ldr	r0, [r3, #0]
 80072dc:	491a      	ldr	r1, [pc, #104]	@ (8007348 <_cbSendTaskList+0x88>)
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	3304      	adds	r3, #4
 80072ec:	6819      	ldr	r1, [r3, #0]
 80072ee:	4c16      	ldr	r4, [pc, #88]	@ (8007348 <_cbSendTaskList+0x88>)
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4423      	add	r3, r4
 80072fc:	3308      	adds	r3, #8
 80072fe:	681c      	ldr	r4, [r3, #0]
 8007300:	4d11      	ldr	r5, [pc, #68]	@ (8007348 <_cbSendTaskList+0x88>)
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	442b      	add	r3, r5
 800730e:	330c      	adds	r3, #12
 8007310:	681d      	ldr	r5, [r3, #0]
 8007312:	4e0d      	ldr	r6, [pc, #52]	@ (8007348 <_cbSendTaskList+0x88>)
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4433      	add	r3, r6
 8007320:	3310      	adds	r3, #16
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	462b      	mov	r3, r5
 8007328:	4622      	mov	r2, r4
 800732a:	f000 f8bd 	bl	80074a8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3301      	adds	r3, #1
 8007332:	607b      	str	r3, [r7, #4]
 8007334:	4b05      	ldr	r3, [pc, #20]	@ (800734c <_cbSendTaskList+0x8c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	429a      	cmp	r2, r3
 800733c:	d3c6      	bcc.n	80072cc <_cbSendTaskList+0xc>
  }
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007348:	2001f4d4 	.word	0x2001f4d4
 800734c:	2001f574 	.word	0x2001f574

08007350 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007358:	f7fc fc5e 	bl	8003c18 <xTaskGetTickCountFromISR>
 800735c:	4603      	mov	r3, r0
 800735e:	2200      	movs	r2, #0
 8007360:	469a      	mov	sl, r3
 8007362:	4693      	mov	fp, r2
 8007364:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	f04f 0a00 	mov.w	sl, #0
 8007374:	f04f 0b00 	mov.w	fp, #0
 8007378:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800737c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007380:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007384:	4652      	mov	r2, sl
 8007386:	465b      	mov	r3, fp
 8007388:	1a14      	subs	r4, r2, r0
 800738a:	eb63 0501 	sbc.w	r5, r3, r1
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	00ab      	lsls	r3, r5, #2
 8007398:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800739c:	00a2      	lsls	r2, r4, #2
 800739e:	4614      	mov	r4, r2
 80073a0:	461d      	mov	r5, r3
 80073a2:	eb14 0800 	adds.w	r8, r4, r0
 80073a6:	eb45 0901 	adc.w	r9, r5, r1
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073be:	4690      	mov	r8, r2
 80073c0:	4699      	mov	r9, r3
 80073c2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80073c6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80073ca:	4610      	mov	r0, r2
 80073cc:	4619      	mov	r1, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080073d8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80073e6:	2205      	movs	r2, #5
 80073e8:	492b      	ldr	r1, [pc, #172]	@ (8007498 <SYSVIEW_AddTask+0xc0>)
 80073ea:	68b8      	ldr	r0, [r7, #8]
 80073ec:	f000 f9f5 	bl	80077da <memcmp>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d04b      	beq.n	800748e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80073f6:	4b29      	ldr	r3, [pc, #164]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b07      	cmp	r3, #7
 80073fc:	d903      	bls.n	8007406 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80073fe:	4828      	ldr	r0, [pc, #160]	@ (80074a0 <SYSVIEW_AddTask+0xc8>)
 8007400:	f7ff fef0 	bl	80071e4 <SEGGER_SYSVIEW_Warn>
    return;
 8007404:	e044      	b.n	8007490 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007406:	4b25      	ldr	r3, [pc, #148]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4926      	ldr	r1, [pc, #152]	@ (80074a4 <SYSVIEW_AddTask+0xcc>)
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800741a:	4b20      	ldr	r3, [pc, #128]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4921      	ldr	r1, [pc, #132]	@ (80074a4 <SYSVIEW_AddTask+0xcc>)
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	3304      	adds	r3, #4
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007430:	4b1a      	ldr	r3, [pc, #104]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	491b      	ldr	r1, [pc, #108]	@ (80074a4 <SYSVIEW_AddTask+0xcc>)
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	3308      	adds	r3, #8
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007446:	4b15      	ldr	r3, [pc, #84]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4916      	ldr	r1, [pc, #88]	@ (80074a4 <SYSVIEW_AddTask+0xcc>)
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	330c      	adds	r3, #12
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800745c:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	4910      	ldr	r1, [pc, #64]	@ (80074a4 <SYSVIEW_AddTask+0xcc>)
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	3310      	adds	r3, #16
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007472:	4b0a      	ldr	r3, [pc, #40]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3301      	adds	r3, #1
 8007478:	4a08      	ldr	r2, [pc, #32]	@ (800749c <SYSVIEW_AddTask+0xc4>)
 800747a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f80e 	bl	80074a8 <SYSVIEW_SendTaskInfo>
 800748c:	e000      	b.n	8007490 <SYSVIEW_AddTask+0xb8>
    return;
 800748e:	bf00      	nop

}
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	08008968 	.word	0x08008968
 800749c:	2001f574 	.word	0x2001f574
 80074a0:	08008970 	.word	0x08008970
 80074a4:	2001f4d4 	.word	0x2001f4d4

080074a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	@ 0x28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	2214      	movs	r2, #20
 80074bc:	2100      	movs	r1, #0
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f99b 	bl	80077fa <memset>
  TaskInfo.TaskID     = TaskID;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80074d8:	f107 0314 	add.w	r3, r7, #20
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff f9ed 	bl	80068bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80074e2:	bf00      	nop
 80074e4:	3728      	adds	r7, #40	@ 0x28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <rand>:
 80074ec:	4b16      	ldr	r3, [pc, #88]	@ (8007548 <rand+0x5c>)
 80074ee:	b510      	push	{r4, lr}
 80074f0:	681c      	ldr	r4, [r3, #0]
 80074f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80074f4:	b9b3      	cbnz	r3, 8007524 <rand+0x38>
 80074f6:	2018      	movs	r0, #24
 80074f8:	f000 fa60 	bl	80079bc <malloc>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6320      	str	r0, [r4, #48]	@ 0x30
 8007500:	b920      	cbnz	r0, 800750c <rand+0x20>
 8007502:	4b12      	ldr	r3, [pc, #72]	@ (800754c <rand+0x60>)
 8007504:	4812      	ldr	r0, [pc, #72]	@ (8007550 <rand+0x64>)
 8007506:	2152      	movs	r1, #82	@ 0x52
 8007508:	f000 f9f0 	bl	80078ec <__assert_func>
 800750c:	4911      	ldr	r1, [pc, #68]	@ (8007554 <rand+0x68>)
 800750e:	4b12      	ldr	r3, [pc, #72]	@ (8007558 <rand+0x6c>)
 8007510:	e9c0 1300 	strd	r1, r3, [r0]
 8007514:	4b11      	ldr	r3, [pc, #68]	@ (800755c <rand+0x70>)
 8007516:	6083      	str	r3, [r0, #8]
 8007518:	230b      	movs	r3, #11
 800751a:	8183      	strh	r3, [r0, #12]
 800751c:	2100      	movs	r1, #0
 800751e:	2001      	movs	r0, #1
 8007520:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007524:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007526:	480e      	ldr	r0, [pc, #56]	@ (8007560 <rand+0x74>)
 8007528:	690b      	ldr	r3, [r1, #16]
 800752a:	694c      	ldr	r4, [r1, #20]
 800752c:	4a0d      	ldr	r2, [pc, #52]	@ (8007564 <rand+0x78>)
 800752e:	4358      	muls	r0, r3
 8007530:	fb02 0004 	mla	r0, r2, r4, r0
 8007534:	fba3 3202 	umull	r3, r2, r3, r2
 8007538:	3301      	adds	r3, #1
 800753a:	eb40 0002 	adc.w	r0, r0, r2
 800753e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007542:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007546:	bd10      	pop	{r4, pc}
 8007548:	20000020 	.word	0x20000020
 800754c:	08008a00 	.word	0x08008a00
 8007550:	08008a17 	.word	0x08008a17
 8007554:	abcd330e 	.word	0xabcd330e
 8007558:	e66d1234 	.word	0xe66d1234
 800755c:	0005deec 	.word	0x0005deec
 8007560:	5851f42d 	.word	0x5851f42d
 8007564:	4c957f2d 	.word	0x4c957f2d

08007568 <std>:
 8007568:	2300      	movs	r3, #0
 800756a:	b510      	push	{r4, lr}
 800756c:	4604      	mov	r4, r0
 800756e:	e9c0 3300 	strd	r3, r3, [r0]
 8007572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007576:	6083      	str	r3, [r0, #8]
 8007578:	8181      	strh	r1, [r0, #12]
 800757a:	6643      	str	r3, [r0, #100]	@ 0x64
 800757c:	81c2      	strh	r2, [r0, #14]
 800757e:	6183      	str	r3, [r0, #24]
 8007580:	4619      	mov	r1, r3
 8007582:	2208      	movs	r2, #8
 8007584:	305c      	adds	r0, #92	@ 0x5c
 8007586:	f000 f938 	bl	80077fa <memset>
 800758a:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <std+0x58>)
 800758c:	6263      	str	r3, [r4, #36]	@ 0x24
 800758e:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <std+0x5c>)
 8007590:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007592:	4b0d      	ldr	r3, [pc, #52]	@ (80075c8 <std+0x60>)
 8007594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007596:	4b0d      	ldr	r3, [pc, #52]	@ (80075cc <std+0x64>)
 8007598:	6323      	str	r3, [r4, #48]	@ 0x30
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <std+0x68>)
 800759c:	6224      	str	r4, [r4, #32]
 800759e:	429c      	cmp	r4, r3
 80075a0:	d006      	beq.n	80075b0 <std+0x48>
 80075a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075a6:	4294      	cmp	r4, r2
 80075a8:	d002      	beq.n	80075b0 <std+0x48>
 80075aa:	33d0      	adds	r3, #208	@ 0xd0
 80075ac:	429c      	cmp	r4, r3
 80075ae:	d105      	bne.n	80075bc <std+0x54>
 80075b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f000 b986 	b.w	80078c8 <__retarget_lock_init_recursive>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	08007755 	.word	0x08007755
 80075c4:	08007777 	.word	0x08007777
 80075c8:	080077af 	.word	0x080077af
 80075cc:	080077d3 	.word	0x080077d3
 80075d0:	2001f578 	.word	0x2001f578

080075d4 <stdio_exit_handler>:
 80075d4:	4a02      	ldr	r2, [pc, #8]	@ (80075e0 <stdio_exit_handler+0xc>)
 80075d6:	4903      	ldr	r1, [pc, #12]	@ (80075e4 <stdio_exit_handler+0x10>)
 80075d8:	4803      	ldr	r0, [pc, #12]	@ (80075e8 <stdio_exit_handler+0x14>)
 80075da:	f000 b869 	b.w	80076b0 <_fwalk_sglue>
 80075de:	bf00      	nop
 80075e0:	20000014 	.word	0x20000014
 80075e4:	080081fd 	.word	0x080081fd
 80075e8:	20000024 	.word	0x20000024

080075ec <cleanup_stdio>:
 80075ec:	6841      	ldr	r1, [r0, #4]
 80075ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <cleanup_stdio+0x34>)
 80075f0:	4299      	cmp	r1, r3
 80075f2:	b510      	push	{r4, lr}
 80075f4:	4604      	mov	r4, r0
 80075f6:	d001      	beq.n	80075fc <cleanup_stdio+0x10>
 80075f8:	f000 fe00 	bl	80081fc <_fflush_r>
 80075fc:	68a1      	ldr	r1, [r4, #8]
 80075fe:	4b09      	ldr	r3, [pc, #36]	@ (8007624 <cleanup_stdio+0x38>)
 8007600:	4299      	cmp	r1, r3
 8007602:	d002      	beq.n	800760a <cleanup_stdio+0x1e>
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fdf9 	bl	80081fc <_fflush_r>
 800760a:	68e1      	ldr	r1, [r4, #12]
 800760c:	4b06      	ldr	r3, [pc, #24]	@ (8007628 <cleanup_stdio+0x3c>)
 800760e:	4299      	cmp	r1, r3
 8007610:	d004      	beq.n	800761c <cleanup_stdio+0x30>
 8007612:	4620      	mov	r0, r4
 8007614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007618:	f000 bdf0 	b.w	80081fc <_fflush_r>
 800761c:	bd10      	pop	{r4, pc}
 800761e:	bf00      	nop
 8007620:	2001f578 	.word	0x2001f578
 8007624:	2001f5e0 	.word	0x2001f5e0
 8007628:	2001f648 	.word	0x2001f648

0800762c <global_stdio_init.part.0>:
 800762c:	b510      	push	{r4, lr}
 800762e:	4b0b      	ldr	r3, [pc, #44]	@ (800765c <global_stdio_init.part.0+0x30>)
 8007630:	4c0b      	ldr	r4, [pc, #44]	@ (8007660 <global_stdio_init.part.0+0x34>)
 8007632:	4a0c      	ldr	r2, [pc, #48]	@ (8007664 <global_stdio_init.part.0+0x38>)
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	4620      	mov	r0, r4
 8007638:	2200      	movs	r2, #0
 800763a:	2104      	movs	r1, #4
 800763c:	f7ff ff94 	bl	8007568 <std>
 8007640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007644:	2201      	movs	r2, #1
 8007646:	2109      	movs	r1, #9
 8007648:	f7ff ff8e 	bl	8007568 <std>
 800764c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007650:	2202      	movs	r2, #2
 8007652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007656:	2112      	movs	r1, #18
 8007658:	f7ff bf86 	b.w	8007568 <std>
 800765c:	2001f6b0 	.word	0x2001f6b0
 8007660:	2001f578 	.word	0x2001f578
 8007664:	080075d5 	.word	0x080075d5

08007668 <__sfp_lock_acquire>:
 8007668:	4801      	ldr	r0, [pc, #4]	@ (8007670 <__sfp_lock_acquire+0x8>)
 800766a:	f000 b92e 	b.w	80078ca <__retarget_lock_acquire_recursive>
 800766e:	bf00      	nop
 8007670:	2001f6b9 	.word	0x2001f6b9

08007674 <__sfp_lock_release>:
 8007674:	4801      	ldr	r0, [pc, #4]	@ (800767c <__sfp_lock_release+0x8>)
 8007676:	f000 b929 	b.w	80078cc <__retarget_lock_release_recursive>
 800767a:	bf00      	nop
 800767c:	2001f6b9 	.word	0x2001f6b9

08007680 <__sinit>:
 8007680:	b510      	push	{r4, lr}
 8007682:	4604      	mov	r4, r0
 8007684:	f7ff fff0 	bl	8007668 <__sfp_lock_acquire>
 8007688:	6a23      	ldr	r3, [r4, #32]
 800768a:	b11b      	cbz	r3, 8007694 <__sinit+0x14>
 800768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007690:	f7ff bff0 	b.w	8007674 <__sfp_lock_release>
 8007694:	4b04      	ldr	r3, [pc, #16]	@ (80076a8 <__sinit+0x28>)
 8007696:	6223      	str	r3, [r4, #32]
 8007698:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <__sinit+0x2c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f5      	bne.n	800768c <__sinit+0xc>
 80076a0:	f7ff ffc4 	bl	800762c <global_stdio_init.part.0>
 80076a4:	e7f2      	b.n	800768c <__sinit+0xc>
 80076a6:	bf00      	nop
 80076a8:	080075ed 	.word	0x080075ed
 80076ac:	2001f6b0 	.word	0x2001f6b0

080076b0 <_fwalk_sglue>:
 80076b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	4607      	mov	r7, r0
 80076b6:	4688      	mov	r8, r1
 80076b8:	4614      	mov	r4, r2
 80076ba:	2600      	movs	r6, #0
 80076bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076c0:	f1b9 0901 	subs.w	r9, r9, #1
 80076c4:	d505      	bpl.n	80076d2 <_fwalk_sglue+0x22>
 80076c6:	6824      	ldr	r4, [r4, #0]
 80076c8:	2c00      	cmp	r4, #0
 80076ca:	d1f7      	bne.n	80076bc <_fwalk_sglue+0xc>
 80076cc:	4630      	mov	r0, r6
 80076ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d907      	bls.n	80076e8 <_fwalk_sglue+0x38>
 80076d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076dc:	3301      	adds	r3, #1
 80076de:	d003      	beq.n	80076e8 <_fwalk_sglue+0x38>
 80076e0:	4629      	mov	r1, r5
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c0      	blx	r8
 80076e6:	4306      	orrs	r6, r0
 80076e8:	3568      	adds	r5, #104	@ 0x68
 80076ea:	e7e9      	b.n	80076c0 <_fwalk_sglue+0x10>

080076ec <sniprintf>:
 80076ec:	b40c      	push	{r2, r3}
 80076ee:	b530      	push	{r4, r5, lr}
 80076f0:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <sniprintf+0x64>)
 80076f2:	1e0c      	subs	r4, r1, #0
 80076f4:	681d      	ldr	r5, [r3, #0]
 80076f6:	b09d      	sub	sp, #116	@ 0x74
 80076f8:	da08      	bge.n	800770c <sniprintf+0x20>
 80076fa:	238b      	movs	r3, #139	@ 0x8b
 80076fc:	602b      	str	r3, [r5, #0]
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007702:	b01d      	add	sp, #116	@ 0x74
 8007704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007708:	b002      	add	sp, #8
 800770a:	4770      	bx	lr
 800770c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007710:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007714:	bf14      	ite	ne
 8007716:	f104 33ff 	addne.w	r3, r4, #4294967295
 800771a:	4623      	moveq	r3, r4
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	9307      	str	r3, [sp, #28]
 8007720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007724:	9002      	str	r0, [sp, #8]
 8007726:	9006      	str	r0, [sp, #24]
 8007728:	f8ad 3016 	strh.w	r3, [sp, #22]
 800772c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800772e:	ab21      	add	r3, sp, #132	@ 0x84
 8007730:	a902      	add	r1, sp, #8
 8007732:	4628      	mov	r0, r5
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	f000 fa53 	bl	8007be0 <_svfiprintf_r>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	bfbc      	itt	lt
 800773e:	238b      	movlt	r3, #139	@ 0x8b
 8007740:	602b      	strlt	r3, [r5, #0]
 8007742:	2c00      	cmp	r4, #0
 8007744:	d0dd      	beq.n	8007702 <sniprintf+0x16>
 8007746:	9b02      	ldr	r3, [sp, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	e7d9      	b.n	8007702 <sniprintf+0x16>
 800774e:	bf00      	nop
 8007750:	20000020 	.word	0x20000020

08007754 <__sread>:
 8007754:	b510      	push	{r4, lr}
 8007756:	460c      	mov	r4, r1
 8007758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775c:	f000 f878 	bl	8007850 <_read_r>
 8007760:	2800      	cmp	r0, #0
 8007762:	bfab      	itete	ge
 8007764:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007766:	89a3      	ldrhlt	r3, [r4, #12]
 8007768:	181b      	addge	r3, r3, r0
 800776a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800776e:	bfac      	ite	ge
 8007770:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007772:	81a3      	strhlt	r3, [r4, #12]
 8007774:	bd10      	pop	{r4, pc}

08007776 <__swrite>:
 8007776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	461f      	mov	r7, r3
 800777c:	898b      	ldrh	r3, [r1, #12]
 800777e:	05db      	lsls	r3, r3, #23
 8007780:	4605      	mov	r5, r0
 8007782:	460c      	mov	r4, r1
 8007784:	4616      	mov	r6, r2
 8007786:	d505      	bpl.n	8007794 <__swrite+0x1e>
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	2302      	movs	r3, #2
 800778e:	2200      	movs	r2, #0
 8007790:	f000 f84c 	bl	800782c <_lseek_r>
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	4628      	mov	r0, r5
 80077a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077aa:	f7ff bd77 	b.w	800729c <_write_r>

080077ae <__sseek>:
 80077ae:	b510      	push	{r4, lr}
 80077b0:	460c      	mov	r4, r1
 80077b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b6:	f000 f839 	bl	800782c <_lseek_r>
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	bf15      	itete	ne
 80077c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077ca:	81a3      	strheq	r3, [r4, #12]
 80077cc:	bf18      	it	ne
 80077ce:	81a3      	strhne	r3, [r4, #12]
 80077d0:	bd10      	pop	{r4, pc}

080077d2 <__sclose>:
 80077d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d6:	f000 b819 	b.w	800780c <_close_r>

080077da <memcmp>:
 80077da:	b510      	push	{r4, lr}
 80077dc:	3901      	subs	r1, #1
 80077de:	4402      	add	r2, r0
 80077e0:	4290      	cmp	r0, r2
 80077e2:	d101      	bne.n	80077e8 <memcmp+0xe>
 80077e4:	2000      	movs	r0, #0
 80077e6:	e005      	b.n	80077f4 <memcmp+0x1a>
 80077e8:	7803      	ldrb	r3, [r0, #0]
 80077ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80077ee:	42a3      	cmp	r3, r4
 80077f0:	d001      	beq.n	80077f6 <memcmp+0x1c>
 80077f2:	1b18      	subs	r0, r3, r4
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	3001      	adds	r0, #1
 80077f8:	e7f2      	b.n	80077e0 <memcmp+0x6>

080077fa <memset>:
 80077fa:	4402      	add	r2, r0
 80077fc:	4603      	mov	r3, r0
 80077fe:	4293      	cmp	r3, r2
 8007800:	d100      	bne.n	8007804 <memset+0xa>
 8007802:	4770      	bx	lr
 8007804:	f803 1b01 	strb.w	r1, [r3], #1
 8007808:	e7f9      	b.n	80077fe <memset+0x4>
	...

0800780c <_close_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d06      	ldr	r5, [pc, #24]	@ (8007828 <_close_r+0x1c>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	602b      	str	r3, [r5, #0]
 8007818:	f7f9 fa32 	bl	8000c80 <_close>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_close_r+0x1a>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_close_r+0x1a>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	2001f6b4 	.word	0x2001f6b4

0800782c <_lseek_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	@ (800784c <_lseek_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7f9 fa47 	bl	8000cce <_lseek>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_lseek_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_lseek_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	2001f6b4 	.word	0x2001f6b4

08007850 <_read_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	@ (8007870 <_read_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7f9 f9f1 	bl	8000c46 <_read>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_read_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_read_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	2001f6b4 	.word	0x2001f6b4

08007874 <__errno>:
 8007874:	4b01      	ldr	r3, [pc, #4]	@ (800787c <__errno+0x8>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000020 	.word	0x20000020

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	4d0d      	ldr	r5, [pc, #52]	@ (80078b8 <__libc_init_array+0x38>)
 8007884:	4c0d      	ldr	r4, [pc, #52]	@ (80078bc <__libc_init_array+0x3c>)
 8007886:	1b64      	subs	r4, r4, r5
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	2600      	movs	r6, #0
 800788c:	42a6      	cmp	r6, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	4d0b      	ldr	r5, [pc, #44]	@ (80078c0 <__libc_init_array+0x40>)
 8007892:	4c0c      	ldr	r4, [pc, #48]	@ (80078c4 <__libc_init_array+0x44>)
 8007894:	f000 fff0 	bl	8008878 <_init>
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	2600      	movs	r6, #0
 800789e:	42a6      	cmp	r6, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a8:	4798      	blx	r3
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b2:	4798      	blx	r3
 80078b4:	3601      	adds	r6, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	08008ae8 	.word	0x08008ae8
 80078bc:	08008ae8 	.word	0x08008ae8
 80078c0:	08008ae8 	.word	0x08008ae8
 80078c4:	08008aec 	.word	0x08008aec

080078c8 <__retarget_lock_init_recursive>:
 80078c8:	4770      	bx	lr

080078ca <__retarget_lock_acquire_recursive>:
 80078ca:	4770      	bx	lr

080078cc <__retarget_lock_release_recursive>:
 80078cc:	4770      	bx	lr

080078ce <memcpy>:
 80078ce:	440a      	add	r2, r1
 80078d0:	4291      	cmp	r1, r2
 80078d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80078d6:	d100      	bne.n	80078da <memcpy+0xc>
 80078d8:	4770      	bx	lr
 80078da:	b510      	push	{r4, lr}
 80078dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e4:	4291      	cmp	r1, r2
 80078e6:	d1f9      	bne.n	80078dc <memcpy+0xe>
 80078e8:	bd10      	pop	{r4, pc}
	...

080078ec <__assert_func>:
 80078ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ee:	4614      	mov	r4, r2
 80078f0:	461a      	mov	r2, r3
 80078f2:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <__assert_func+0x2c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4605      	mov	r5, r0
 80078f8:	68d8      	ldr	r0, [r3, #12]
 80078fa:	b954      	cbnz	r4, 8007912 <__assert_func+0x26>
 80078fc:	4b07      	ldr	r3, [pc, #28]	@ (800791c <__assert_func+0x30>)
 80078fe:	461c      	mov	r4, r3
 8007900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007904:	9100      	str	r1, [sp, #0]
 8007906:	462b      	mov	r3, r5
 8007908:	4905      	ldr	r1, [pc, #20]	@ (8007920 <__assert_func+0x34>)
 800790a:	f000 fc9f 	bl	800824c <fiprintf>
 800790e:	f000 fcd9 	bl	80082c4 <abort>
 8007912:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <__assert_func+0x38>)
 8007914:	e7f4      	b.n	8007900 <__assert_func+0x14>
 8007916:	bf00      	nop
 8007918:	20000020 	.word	0x20000020
 800791c:	08008aaa 	.word	0x08008aaa
 8007920:	08008a7c 	.word	0x08008a7c
 8007924:	08008a6f 	.word	0x08008a6f

08007928 <_free_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4605      	mov	r5, r0
 800792c:	2900      	cmp	r1, #0
 800792e:	d041      	beq.n	80079b4 <_free_r+0x8c>
 8007930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007934:	1f0c      	subs	r4, r1, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	bfb8      	it	lt
 800793a:	18e4      	addlt	r4, r4, r3
 800793c:	f000 f8e8 	bl	8007b10 <__malloc_lock>
 8007940:	4a1d      	ldr	r2, [pc, #116]	@ (80079b8 <_free_r+0x90>)
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	b933      	cbnz	r3, 8007954 <_free_r+0x2c>
 8007946:	6063      	str	r3, [r4, #4]
 8007948:	6014      	str	r4, [r2, #0]
 800794a:	4628      	mov	r0, r5
 800794c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007950:	f000 b8e4 	b.w	8007b1c <__malloc_unlock>
 8007954:	42a3      	cmp	r3, r4
 8007956:	d908      	bls.n	800796a <_free_r+0x42>
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	1821      	adds	r1, r4, r0
 800795c:	428b      	cmp	r3, r1
 800795e:	bf01      	itttt	eq
 8007960:	6819      	ldreq	r1, [r3, #0]
 8007962:	685b      	ldreq	r3, [r3, #4]
 8007964:	1809      	addeq	r1, r1, r0
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	e7ed      	b.n	8007946 <_free_r+0x1e>
 800796a:	461a      	mov	r2, r3
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	b10b      	cbz	r3, 8007974 <_free_r+0x4c>
 8007970:	42a3      	cmp	r3, r4
 8007972:	d9fa      	bls.n	800796a <_free_r+0x42>
 8007974:	6811      	ldr	r1, [r2, #0]
 8007976:	1850      	adds	r0, r2, r1
 8007978:	42a0      	cmp	r0, r4
 800797a:	d10b      	bne.n	8007994 <_free_r+0x6c>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	4401      	add	r1, r0
 8007980:	1850      	adds	r0, r2, r1
 8007982:	4283      	cmp	r3, r0
 8007984:	6011      	str	r1, [r2, #0]
 8007986:	d1e0      	bne.n	800794a <_free_r+0x22>
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	6053      	str	r3, [r2, #4]
 800798e:	4408      	add	r0, r1
 8007990:	6010      	str	r0, [r2, #0]
 8007992:	e7da      	b.n	800794a <_free_r+0x22>
 8007994:	d902      	bls.n	800799c <_free_r+0x74>
 8007996:	230c      	movs	r3, #12
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	e7d6      	b.n	800794a <_free_r+0x22>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	1821      	adds	r1, r4, r0
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf04      	itt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	6063      	str	r3, [r4, #4]
 80079aa:	bf04      	itt	eq
 80079ac:	1809      	addeq	r1, r1, r0
 80079ae:	6021      	streq	r1, [r4, #0]
 80079b0:	6054      	str	r4, [r2, #4]
 80079b2:	e7ca      	b.n	800794a <_free_r+0x22>
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	2001f6c0 	.word	0x2001f6c0

080079bc <malloc>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <malloc+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f000 b825 	b.w	8007a10 <_malloc_r>
 80079c6:	bf00      	nop
 80079c8:	20000020 	.word	0x20000020

080079cc <sbrk_aligned>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	4e0f      	ldr	r6, [pc, #60]	@ (8007a0c <sbrk_aligned+0x40>)
 80079d0:	460c      	mov	r4, r1
 80079d2:	6831      	ldr	r1, [r6, #0]
 80079d4:	4605      	mov	r5, r0
 80079d6:	b911      	cbnz	r1, 80079de <sbrk_aligned+0x12>
 80079d8:	f000 fc64 	bl	80082a4 <_sbrk_r>
 80079dc:	6030      	str	r0, [r6, #0]
 80079de:	4621      	mov	r1, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 fc5f 	bl	80082a4 <_sbrk_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d103      	bne.n	80079f2 <sbrk_aligned+0x26>
 80079ea:	f04f 34ff 	mov.w	r4, #4294967295
 80079ee:	4620      	mov	r0, r4
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
 80079f2:	1cc4      	adds	r4, r0, #3
 80079f4:	f024 0403 	bic.w	r4, r4, #3
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d0f8      	beq.n	80079ee <sbrk_aligned+0x22>
 80079fc:	1a21      	subs	r1, r4, r0
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fc50 	bl	80082a4 <_sbrk_r>
 8007a04:	3001      	adds	r0, #1
 8007a06:	d1f2      	bne.n	80079ee <sbrk_aligned+0x22>
 8007a08:	e7ef      	b.n	80079ea <sbrk_aligned+0x1e>
 8007a0a:	bf00      	nop
 8007a0c:	2001f6bc 	.word	0x2001f6bc

08007a10 <_malloc_r>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	1ccd      	adds	r5, r1, #3
 8007a16:	f025 0503 	bic.w	r5, r5, #3
 8007a1a:	3508      	adds	r5, #8
 8007a1c:	2d0c      	cmp	r5, #12
 8007a1e:	bf38      	it	cc
 8007a20:	250c      	movcc	r5, #12
 8007a22:	2d00      	cmp	r5, #0
 8007a24:	4606      	mov	r6, r0
 8007a26:	db01      	blt.n	8007a2c <_malloc_r+0x1c>
 8007a28:	42a9      	cmp	r1, r5
 8007a2a:	d904      	bls.n	8007a36 <_malloc_r+0x26>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	6033      	str	r3, [r6, #0]
 8007a30:	2000      	movs	r0, #0
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b0c <_malloc_r+0xfc>
 8007a3a:	f000 f869 	bl	8007b10 <__malloc_lock>
 8007a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a42:	461c      	mov	r4, r3
 8007a44:	bb44      	cbnz	r4, 8007a98 <_malloc_r+0x88>
 8007a46:	4629      	mov	r1, r5
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff ffbf 	bl	80079cc <sbrk_aligned>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	4604      	mov	r4, r0
 8007a52:	d158      	bne.n	8007b06 <_malloc_r+0xf6>
 8007a54:	f8d8 4000 	ldr.w	r4, [r8]
 8007a58:	4627      	mov	r7, r4
 8007a5a:	2f00      	cmp	r7, #0
 8007a5c:	d143      	bne.n	8007ae6 <_malloc_r+0xd6>
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	d04b      	beq.n	8007afa <_malloc_r+0xea>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	4639      	mov	r1, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	eb04 0903 	add.w	r9, r4, r3
 8007a6c:	f000 fc1a 	bl	80082a4 <_sbrk_r>
 8007a70:	4581      	cmp	r9, r0
 8007a72:	d142      	bne.n	8007afa <_malloc_r+0xea>
 8007a74:	6821      	ldr	r1, [r4, #0]
 8007a76:	1a6d      	subs	r5, r5, r1
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff ffa6 	bl	80079cc <sbrk_aligned>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d03a      	beq.n	8007afa <_malloc_r+0xea>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	442b      	add	r3, r5
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	bb62      	cbnz	r2, 8007aec <_malloc_r+0xdc>
 8007a92:	f8c8 7000 	str.w	r7, [r8]
 8007a96:	e00f      	b.n	8007ab8 <_malloc_r+0xa8>
 8007a98:	6822      	ldr	r2, [r4, #0]
 8007a9a:	1b52      	subs	r2, r2, r5
 8007a9c:	d420      	bmi.n	8007ae0 <_malloc_r+0xd0>
 8007a9e:	2a0b      	cmp	r2, #11
 8007aa0:	d917      	bls.n	8007ad2 <_malloc_r+0xc2>
 8007aa2:	1961      	adds	r1, r4, r5
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	6025      	str	r5, [r4, #0]
 8007aa8:	bf18      	it	ne
 8007aaa:	6059      	strne	r1, [r3, #4]
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	bf08      	it	eq
 8007ab0:	f8c8 1000 	streq.w	r1, [r8]
 8007ab4:	5162      	str	r2, [r4, r5]
 8007ab6:	604b      	str	r3, [r1, #4]
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 f82f 	bl	8007b1c <__malloc_unlock>
 8007abe:	f104 000b 	add.w	r0, r4, #11
 8007ac2:	1d23      	adds	r3, r4, #4
 8007ac4:	f020 0007 	bic.w	r0, r0, #7
 8007ac8:	1ac2      	subs	r2, r0, r3
 8007aca:	bf1c      	itt	ne
 8007acc:	1a1b      	subne	r3, r3, r0
 8007ace:	50a3      	strne	r3, [r4, r2]
 8007ad0:	e7af      	b.n	8007a32 <_malloc_r+0x22>
 8007ad2:	6862      	ldr	r2, [r4, #4]
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	bf0c      	ite	eq
 8007ad8:	f8c8 2000 	streq.w	r2, [r8]
 8007adc:	605a      	strne	r2, [r3, #4]
 8007ade:	e7eb      	b.n	8007ab8 <_malloc_r+0xa8>
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	6864      	ldr	r4, [r4, #4]
 8007ae4:	e7ae      	b.n	8007a44 <_malloc_r+0x34>
 8007ae6:	463c      	mov	r4, r7
 8007ae8:	687f      	ldr	r7, [r7, #4]
 8007aea:	e7b6      	b.n	8007a5a <_malloc_r+0x4a>
 8007aec:	461a      	mov	r2, r3
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	d1fb      	bne.n	8007aec <_malloc_r+0xdc>
 8007af4:	2300      	movs	r3, #0
 8007af6:	6053      	str	r3, [r2, #4]
 8007af8:	e7de      	b.n	8007ab8 <_malloc_r+0xa8>
 8007afa:	230c      	movs	r3, #12
 8007afc:	6033      	str	r3, [r6, #0]
 8007afe:	4630      	mov	r0, r6
 8007b00:	f000 f80c 	bl	8007b1c <__malloc_unlock>
 8007b04:	e794      	b.n	8007a30 <_malloc_r+0x20>
 8007b06:	6005      	str	r5, [r0, #0]
 8007b08:	e7d6      	b.n	8007ab8 <_malloc_r+0xa8>
 8007b0a:	bf00      	nop
 8007b0c:	2001f6c0 	.word	0x2001f6c0

08007b10 <__malloc_lock>:
 8007b10:	4801      	ldr	r0, [pc, #4]	@ (8007b18 <__malloc_lock+0x8>)
 8007b12:	f7ff beda 	b.w	80078ca <__retarget_lock_acquire_recursive>
 8007b16:	bf00      	nop
 8007b18:	2001f6b8 	.word	0x2001f6b8

08007b1c <__malloc_unlock>:
 8007b1c:	4801      	ldr	r0, [pc, #4]	@ (8007b24 <__malloc_unlock+0x8>)
 8007b1e:	f7ff bed5 	b.w	80078cc <__retarget_lock_release_recursive>
 8007b22:	bf00      	nop
 8007b24:	2001f6b8 	.word	0x2001f6b8

08007b28 <__ssputs_r>:
 8007b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b2c:	688e      	ldr	r6, [r1, #8]
 8007b2e:	461f      	mov	r7, r3
 8007b30:	42be      	cmp	r6, r7
 8007b32:	680b      	ldr	r3, [r1, #0]
 8007b34:	4682      	mov	sl, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	4690      	mov	r8, r2
 8007b3a:	d82d      	bhi.n	8007b98 <__ssputs_r+0x70>
 8007b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b44:	d026      	beq.n	8007b94 <__ssputs_r+0x6c>
 8007b46:	6965      	ldr	r5, [r4, #20]
 8007b48:	6909      	ldr	r1, [r1, #16]
 8007b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b4e:	eba3 0901 	sub.w	r9, r3, r1
 8007b52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b56:	1c7b      	adds	r3, r7, #1
 8007b58:	444b      	add	r3, r9
 8007b5a:	106d      	asrs	r5, r5, #1
 8007b5c:	429d      	cmp	r5, r3
 8007b5e:	bf38      	it	cc
 8007b60:	461d      	movcc	r5, r3
 8007b62:	0553      	lsls	r3, r2, #21
 8007b64:	d527      	bpl.n	8007bb6 <__ssputs_r+0x8e>
 8007b66:	4629      	mov	r1, r5
 8007b68:	f7ff ff52 	bl	8007a10 <_malloc_r>
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	b360      	cbz	r0, 8007bca <__ssputs_r+0xa2>
 8007b70:	6921      	ldr	r1, [r4, #16]
 8007b72:	464a      	mov	r2, r9
 8007b74:	f7ff feab 	bl	80078ce <memcpy>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	6126      	str	r6, [r4, #16]
 8007b86:	6165      	str	r5, [r4, #20]
 8007b88:	444e      	add	r6, r9
 8007b8a:	eba5 0509 	sub.w	r5, r5, r9
 8007b8e:	6026      	str	r6, [r4, #0]
 8007b90:	60a5      	str	r5, [r4, #8]
 8007b92:	463e      	mov	r6, r7
 8007b94:	42be      	cmp	r6, r7
 8007b96:	d900      	bls.n	8007b9a <__ssputs_r+0x72>
 8007b98:	463e      	mov	r6, r7
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	4641      	mov	r1, r8
 8007ba0:	f000 fb66 	bl	8008270 <memmove>
 8007ba4:	68a3      	ldr	r3, [r4, #8]
 8007ba6:	1b9b      	subs	r3, r3, r6
 8007ba8:	60a3      	str	r3, [r4, #8]
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	4433      	add	r3, r6
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	f000 fb8b 	bl	80082d2 <_realloc_r>
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d1e0      	bne.n	8007b84 <__ssputs_r+0x5c>
 8007bc2:	6921      	ldr	r1, [r4, #16]
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	f7ff feaf 	bl	8007928 <_free_r>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	f8ca 3000 	str.w	r3, [sl]
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	e7e9      	b.n	8007bb2 <__ssputs_r+0x8a>
	...

08007be0 <_svfiprintf_r>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	4698      	mov	r8, r3
 8007be6:	898b      	ldrh	r3, [r1, #12]
 8007be8:	061b      	lsls	r3, r3, #24
 8007bea:	b09d      	sub	sp, #116	@ 0x74
 8007bec:	4607      	mov	r7, r0
 8007bee:	460d      	mov	r5, r1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	d510      	bpl.n	8007c16 <_svfiprintf_r+0x36>
 8007bf4:	690b      	ldr	r3, [r1, #16]
 8007bf6:	b973      	cbnz	r3, 8007c16 <_svfiprintf_r+0x36>
 8007bf8:	2140      	movs	r1, #64	@ 0x40
 8007bfa:	f7ff ff09 	bl	8007a10 <_malloc_r>
 8007bfe:	6028      	str	r0, [r5, #0]
 8007c00:	6128      	str	r0, [r5, #16]
 8007c02:	b930      	cbnz	r0, 8007c12 <_svfiprintf_r+0x32>
 8007c04:	230c      	movs	r3, #12
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	b01d      	add	sp, #116	@ 0x74
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	2340      	movs	r3, #64	@ 0x40
 8007c14:	616b      	str	r3, [r5, #20]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1a:	2320      	movs	r3, #32
 8007c1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c24:	2330      	movs	r3, #48	@ 0x30
 8007c26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007dc4 <_svfiprintf_r+0x1e4>
 8007c2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c2e:	f04f 0901 	mov.w	r9, #1
 8007c32:	4623      	mov	r3, r4
 8007c34:	469a      	mov	sl, r3
 8007c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c3a:	b10a      	cbz	r2, 8007c40 <_svfiprintf_r+0x60>
 8007c3c:	2a25      	cmp	r2, #37	@ 0x25
 8007c3e:	d1f9      	bne.n	8007c34 <_svfiprintf_r+0x54>
 8007c40:	ebba 0b04 	subs.w	fp, sl, r4
 8007c44:	d00b      	beq.n	8007c5e <_svfiprintf_r+0x7e>
 8007c46:	465b      	mov	r3, fp
 8007c48:	4622      	mov	r2, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f7ff ff6b 	bl	8007b28 <__ssputs_r>
 8007c52:	3001      	adds	r0, #1
 8007c54:	f000 80a7 	beq.w	8007da6 <_svfiprintf_r+0x1c6>
 8007c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c5a:	445a      	add	r2, fp
 8007c5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 809f 	beq.w	8007da6 <_svfiprintf_r+0x1c6>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c72:	f10a 0a01 	add.w	sl, sl, #1
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	9307      	str	r3, [sp, #28]
 8007c7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c80:	4654      	mov	r4, sl
 8007c82:	2205      	movs	r2, #5
 8007c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c88:	484e      	ldr	r0, [pc, #312]	@ (8007dc4 <_svfiprintf_r+0x1e4>)
 8007c8a:	f7f8 faf1 	bl	8000270 <memchr>
 8007c8e:	9a04      	ldr	r2, [sp, #16]
 8007c90:	b9d8      	cbnz	r0, 8007cca <_svfiprintf_r+0xea>
 8007c92:	06d0      	lsls	r0, r2, #27
 8007c94:	bf44      	itt	mi
 8007c96:	2320      	movmi	r3, #32
 8007c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c9c:	0711      	lsls	r1, r2, #28
 8007c9e:	bf44      	itt	mi
 8007ca0:	232b      	movmi	r3, #43	@ 0x2b
 8007ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8007caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cac:	d015      	beq.n	8007cda <_svfiprintf_r+0xfa>
 8007cae:	9a07      	ldr	r2, [sp, #28]
 8007cb0:	4654      	mov	r4, sl
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f04f 0c0a 	mov.w	ip, #10
 8007cb8:	4621      	mov	r1, r4
 8007cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cbe:	3b30      	subs	r3, #48	@ 0x30
 8007cc0:	2b09      	cmp	r3, #9
 8007cc2:	d94b      	bls.n	8007d5c <_svfiprintf_r+0x17c>
 8007cc4:	b1b0      	cbz	r0, 8007cf4 <_svfiprintf_r+0x114>
 8007cc6:	9207      	str	r2, [sp, #28]
 8007cc8:	e014      	b.n	8007cf4 <_svfiprintf_r+0x114>
 8007cca:	eba0 0308 	sub.w	r3, r0, r8
 8007cce:	fa09 f303 	lsl.w	r3, r9, r3
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	46a2      	mov	sl, r4
 8007cd8:	e7d2      	b.n	8007c80 <_svfiprintf_r+0xa0>
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	1d19      	adds	r1, r3, #4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	9103      	str	r1, [sp, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bfbb      	ittet	lt
 8007ce6:	425b      	neglt	r3, r3
 8007ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cec:	9307      	strge	r3, [sp, #28]
 8007cee:	9307      	strlt	r3, [sp, #28]
 8007cf0:	bfb8      	it	lt
 8007cf2:	9204      	strlt	r2, [sp, #16]
 8007cf4:	7823      	ldrb	r3, [r4, #0]
 8007cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cf8:	d10a      	bne.n	8007d10 <_svfiprintf_r+0x130>
 8007cfa:	7863      	ldrb	r3, [r4, #1]
 8007cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cfe:	d132      	bne.n	8007d66 <_svfiprintf_r+0x186>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	1d1a      	adds	r2, r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	9203      	str	r2, [sp, #12]
 8007d08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d0c:	3402      	adds	r4, #2
 8007d0e:	9305      	str	r3, [sp, #20]
 8007d10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007dd4 <_svfiprintf_r+0x1f4>
 8007d14:	7821      	ldrb	r1, [r4, #0]
 8007d16:	2203      	movs	r2, #3
 8007d18:	4650      	mov	r0, sl
 8007d1a:	f7f8 faa9 	bl	8000270 <memchr>
 8007d1e:	b138      	cbz	r0, 8007d30 <_svfiprintf_r+0x150>
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	eba0 000a 	sub.w	r0, r0, sl
 8007d26:	2240      	movs	r2, #64	@ 0x40
 8007d28:	4082      	lsls	r2, r0
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	3401      	adds	r4, #1
 8007d2e:	9304      	str	r3, [sp, #16]
 8007d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d34:	4824      	ldr	r0, [pc, #144]	@ (8007dc8 <_svfiprintf_r+0x1e8>)
 8007d36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d3a:	2206      	movs	r2, #6
 8007d3c:	f7f8 fa98 	bl	8000270 <memchr>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d036      	beq.n	8007db2 <_svfiprintf_r+0x1d2>
 8007d44:	4b21      	ldr	r3, [pc, #132]	@ (8007dcc <_svfiprintf_r+0x1ec>)
 8007d46:	bb1b      	cbnz	r3, 8007d90 <_svfiprintf_r+0x1b0>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	3307      	adds	r3, #7
 8007d4c:	f023 0307 	bic.w	r3, r3, #7
 8007d50:	3308      	adds	r3, #8
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d56:	4433      	add	r3, r6
 8007d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5a:	e76a      	b.n	8007c32 <_svfiprintf_r+0x52>
 8007d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d60:	460c      	mov	r4, r1
 8007d62:	2001      	movs	r0, #1
 8007d64:	e7a8      	b.n	8007cb8 <_svfiprintf_r+0xd8>
 8007d66:	2300      	movs	r3, #0
 8007d68:	3401      	adds	r4, #1
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	f04f 0c0a 	mov.w	ip, #10
 8007d72:	4620      	mov	r0, r4
 8007d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d78:	3a30      	subs	r2, #48	@ 0x30
 8007d7a:	2a09      	cmp	r2, #9
 8007d7c:	d903      	bls.n	8007d86 <_svfiprintf_r+0x1a6>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0c6      	beq.n	8007d10 <_svfiprintf_r+0x130>
 8007d82:	9105      	str	r1, [sp, #20]
 8007d84:	e7c4      	b.n	8007d10 <_svfiprintf_r+0x130>
 8007d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e7f0      	b.n	8007d72 <_svfiprintf_r+0x192>
 8007d90:	ab03      	add	r3, sp, #12
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	462a      	mov	r2, r5
 8007d96:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd0 <_svfiprintf_r+0x1f0>)
 8007d98:	a904      	add	r1, sp, #16
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	f3af 8000 	nop.w
 8007da0:	1c42      	adds	r2, r0, #1
 8007da2:	4606      	mov	r6, r0
 8007da4:	d1d6      	bne.n	8007d54 <_svfiprintf_r+0x174>
 8007da6:	89ab      	ldrh	r3, [r5, #12]
 8007da8:	065b      	lsls	r3, r3, #25
 8007daa:	f53f af2d 	bmi.w	8007c08 <_svfiprintf_r+0x28>
 8007dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007db0:	e72c      	b.n	8007c0c <_svfiprintf_r+0x2c>
 8007db2:	ab03      	add	r3, sp, #12
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	462a      	mov	r2, r5
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <_svfiprintf_r+0x1f0>)
 8007dba:	a904      	add	r1, sp, #16
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f000 f879 	bl	8007eb4 <_printf_i>
 8007dc2:	e7ed      	b.n	8007da0 <_svfiprintf_r+0x1c0>
 8007dc4:	08008aab 	.word	0x08008aab
 8007dc8:	08008ab5 	.word	0x08008ab5
 8007dcc:	00000000 	.word	0x00000000
 8007dd0:	08007b29 	.word	0x08007b29
 8007dd4:	08008ab1 	.word	0x08008ab1

08007dd8 <_printf_common>:
 8007dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	4616      	mov	r6, r2
 8007dde:	4698      	mov	r8, r3
 8007de0:	688a      	ldr	r2, [r1, #8]
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bfb8      	it	lt
 8007dec:	4613      	movlt	r3, r2
 8007dee:	6033      	str	r3, [r6, #0]
 8007df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007df4:	4607      	mov	r7, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	b10a      	cbz	r2, 8007dfe <_printf_common+0x26>
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	0699      	lsls	r1, r3, #26
 8007e02:	bf42      	ittt	mi
 8007e04:	6833      	ldrmi	r3, [r6, #0]
 8007e06:	3302      	addmi	r3, #2
 8007e08:	6033      	strmi	r3, [r6, #0]
 8007e0a:	6825      	ldr	r5, [r4, #0]
 8007e0c:	f015 0506 	ands.w	r5, r5, #6
 8007e10:	d106      	bne.n	8007e20 <_printf_common+0x48>
 8007e12:	f104 0a19 	add.w	sl, r4, #25
 8007e16:	68e3      	ldr	r3, [r4, #12]
 8007e18:	6832      	ldr	r2, [r6, #0]
 8007e1a:	1a9b      	subs	r3, r3, r2
 8007e1c:	42ab      	cmp	r3, r5
 8007e1e:	dc26      	bgt.n	8007e6e <_printf_common+0x96>
 8007e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e24:	6822      	ldr	r2, [r4, #0]
 8007e26:	3b00      	subs	r3, #0
 8007e28:	bf18      	it	ne
 8007e2a:	2301      	movne	r3, #1
 8007e2c:	0692      	lsls	r2, r2, #26
 8007e2e:	d42b      	bmi.n	8007e88 <_printf_common+0xb0>
 8007e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e34:	4641      	mov	r1, r8
 8007e36:	4638      	mov	r0, r7
 8007e38:	47c8      	blx	r9
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	d01e      	beq.n	8007e7c <_printf_common+0xa4>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	6922      	ldr	r2, [r4, #16]
 8007e42:	f003 0306 	and.w	r3, r3, #6
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	bf02      	ittt	eq
 8007e4a:	68e5      	ldreq	r5, [r4, #12]
 8007e4c:	6833      	ldreq	r3, [r6, #0]
 8007e4e:	1aed      	subeq	r5, r5, r3
 8007e50:	68a3      	ldr	r3, [r4, #8]
 8007e52:	bf0c      	ite	eq
 8007e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e58:	2500      	movne	r5, #0
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	bfc4      	itt	gt
 8007e5e:	1a9b      	subgt	r3, r3, r2
 8007e60:	18ed      	addgt	r5, r5, r3
 8007e62:	2600      	movs	r6, #0
 8007e64:	341a      	adds	r4, #26
 8007e66:	42b5      	cmp	r5, r6
 8007e68:	d11a      	bne.n	8007ea0 <_printf_common+0xc8>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e008      	b.n	8007e80 <_printf_common+0xa8>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	4652      	mov	r2, sl
 8007e72:	4641      	mov	r1, r8
 8007e74:	4638      	mov	r0, r7
 8007e76:	47c8      	blx	r9
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d103      	bne.n	8007e84 <_printf_common+0xac>
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e84:	3501      	adds	r5, #1
 8007e86:	e7c6      	b.n	8007e16 <_printf_common+0x3e>
 8007e88:	18e1      	adds	r1, r4, r3
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	2030      	movs	r0, #48	@ 0x30
 8007e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e92:	4422      	add	r2, r4
 8007e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	e7c7      	b.n	8007e30 <_printf_common+0x58>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	47c8      	blx	r9
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d0e6      	beq.n	8007e7c <_printf_common+0xa4>
 8007eae:	3601      	adds	r6, #1
 8007eb0:	e7d9      	b.n	8007e66 <_printf_common+0x8e>
	...

08007eb4 <_printf_i>:
 8007eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	7e0f      	ldrb	r7, [r1, #24]
 8007eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ebc:	2f78      	cmp	r7, #120	@ 0x78
 8007ebe:	4691      	mov	r9, r2
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	469a      	mov	sl, r3
 8007ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007eca:	d807      	bhi.n	8007edc <_printf_i+0x28>
 8007ecc:	2f62      	cmp	r7, #98	@ 0x62
 8007ece:	d80a      	bhi.n	8007ee6 <_printf_i+0x32>
 8007ed0:	2f00      	cmp	r7, #0
 8007ed2:	f000 80d2 	beq.w	800807a <_printf_i+0x1c6>
 8007ed6:	2f58      	cmp	r7, #88	@ 0x58
 8007ed8:	f000 80b9 	beq.w	800804e <_printf_i+0x19a>
 8007edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ee4:	e03a      	b.n	8007f5c <_printf_i+0xa8>
 8007ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007eea:	2b15      	cmp	r3, #21
 8007eec:	d8f6      	bhi.n	8007edc <_printf_i+0x28>
 8007eee:	a101      	add	r1, pc, #4	@ (adr r1, 8007ef4 <_printf_i+0x40>)
 8007ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ef4:	08007f4d 	.word	0x08007f4d
 8007ef8:	08007f61 	.word	0x08007f61
 8007efc:	08007edd 	.word	0x08007edd
 8007f00:	08007edd 	.word	0x08007edd
 8007f04:	08007edd 	.word	0x08007edd
 8007f08:	08007edd 	.word	0x08007edd
 8007f0c:	08007f61 	.word	0x08007f61
 8007f10:	08007edd 	.word	0x08007edd
 8007f14:	08007edd 	.word	0x08007edd
 8007f18:	08007edd 	.word	0x08007edd
 8007f1c:	08007edd 	.word	0x08007edd
 8007f20:	08008061 	.word	0x08008061
 8007f24:	08007f8b 	.word	0x08007f8b
 8007f28:	0800801b 	.word	0x0800801b
 8007f2c:	08007edd 	.word	0x08007edd
 8007f30:	08007edd 	.word	0x08007edd
 8007f34:	08008083 	.word	0x08008083
 8007f38:	08007edd 	.word	0x08007edd
 8007f3c:	08007f8b 	.word	0x08007f8b
 8007f40:	08007edd 	.word	0x08007edd
 8007f44:	08007edd 	.word	0x08007edd
 8007f48:	08008023 	.word	0x08008023
 8007f4c:	6833      	ldr	r3, [r6, #0]
 8007f4e:	1d1a      	adds	r2, r3, #4
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6032      	str	r2, [r6, #0]
 8007f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e09d      	b.n	800809c <_printf_i+0x1e8>
 8007f60:	6833      	ldr	r3, [r6, #0]
 8007f62:	6820      	ldr	r0, [r4, #0]
 8007f64:	1d19      	adds	r1, r3, #4
 8007f66:	6031      	str	r1, [r6, #0]
 8007f68:	0606      	lsls	r6, r0, #24
 8007f6a:	d501      	bpl.n	8007f70 <_printf_i+0xbc>
 8007f6c:	681d      	ldr	r5, [r3, #0]
 8007f6e:	e003      	b.n	8007f78 <_printf_i+0xc4>
 8007f70:	0645      	lsls	r5, r0, #25
 8007f72:	d5fb      	bpl.n	8007f6c <_printf_i+0xb8>
 8007f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f78:	2d00      	cmp	r5, #0
 8007f7a:	da03      	bge.n	8007f84 <_printf_i+0xd0>
 8007f7c:	232d      	movs	r3, #45	@ 0x2d
 8007f7e:	426d      	negs	r5, r5
 8007f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f84:	4859      	ldr	r0, [pc, #356]	@ (80080ec <_printf_i+0x238>)
 8007f86:	230a      	movs	r3, #10
 8007f88:	e011      	b.n	8007fae <_printf_i+0xfa>
 8007f8a:	6821      	ldr	r1, [r4, #0]
 8007f8c:	6833      	ldr	r3, [r6, #0]
 8007f8e:	0608      	lsls	r0, r1, #24
 8007f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f94:	d402      	bmi.n	8007f9c <_printf_i+0xe8>
 8007f96:	0649      	lsls	r1, r1, #25
 8007f98:	bf48      	it	mi
 8007f9a:	b2ad      	uxthmi	r5, r5
 8007f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f9e:	4853      	ldr	r0, [pc, #332]	@ (80080ec <_printf_i+0x238>)
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	bf14      	ite	ne
 8007fa4:	230a      	movne	r3, #10
 8007fa6:	2308      	moveq	r3, #8
 8007fa8:	2100      	movs	r1, #0
 8007faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fae:	6866      	ldr	r6, [r4, #4]
 8007fb0:	60a6      	str	r6, [r4, #8]
 8007fb2:	2e00      	cmp	r6, #0
 8007fb4:	bfa2      	ittt	ge
 8007fb6:	6821      	ldrge	r1, [r4, #0]
 8007fb8:	f021 0104 	bicge.w	r1, r1, #4
 8007fbc:	6021      	strge	r1, [r4, #0]
 8007fbe:	b90d      	cbnz	r5, 8007fc4 <_printf_i+0x110>
 8007fc0:	2e00      	cmp	r6, #0
 8007fc2:	d04b      	beq.n	800805c <_printf_i+0x1a8>
 8007fc4:	4616      	mov	r6, r2
 8007fc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fca:	fb03 5711 	mls	r7, r3, r1, r5
 8007fce:	5dc7      	ldrb	r7, [r0, r7]
 8007fd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fd4:	462f      	mov	r7, r5
 8007fd6:	42bb      	cmp	r3, r7
 8007fd8:	460d      	mov	r5, r1
 8007fda:	d9f4      	bls.n	8007fc6 <_printf_i+0x112>
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d10b      	bne.n	8007ff8 <_printf_i+0x144>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	07df      	lsls	r7, r3, #31
 8007fe4:	d508      	bpl.n	8007ff8 <_printf_i+0x144>
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	6861      	ldr	r1, [r4, #4]
 8007fea:	4299      	cmp	r1, r3
 8007fec:	bfde      	ittt	le
 8007fee:	2330      	movle	r3, #48	@ 0x30
 8007ff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ff4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ff8:	1b92      	subs	r2, r2, r6
 8007ffa:	6122      	str	r2, [r4, #16]
 8007ffc:	f8cd a000 	str.w	sl, [sp]
 8008000:	464b      	mov	r3, r9
 8008002:	aa03      	add	r2, sp, #12
 8008004:	4621      	mov	r1, r4
 8008006:	4640      	mov	r0, r8
 8008008:	f7ff fee6 	bl	8007dd8 <_printf_common>
 800800c:	3001      	adds	r0, #1
 800800e:	d14a      	bne.n	80080a6 <_printf_i+0x1f2>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	b004      	add	sp, #16
 8008016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	f043 0320 	orr.w	r3, r3, #32
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	4833      	ldr	r0, [pc, #204]	@ (80080f0 <_printf_i+0x23c>)
 8008024:	2778      	movs	r7, #120	@ 0x78
 8008026:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	6831      	ldr	r1, [r6, #0]
 800802e:	061f      	lsls	r7, r3, #24
 8008030:	f851 5b04 	ldr.w	r5, [r1], #4
 8008034:	d402      	bmi.n	800803c <_printf_i+0x188>
 8008036:	065f      	lsls	r7, r3, #25
 8008038:	bf48      	it	mi
 800803a:	b2ad      	uxthmi	r5, r5
 800803c:	6031      	str	r1, [r6, #0]
 800803e:	07d9      	lsls	r1, r3, #31
 8008040:	bf44      	itt	mi
 8008042:	f043 0320 	orrmi.w	r3, r3, #32
 8008046:	6023      	strmi	r3, [r4, #0]
 8008048:	b11d      	cbz	r5, 8008052 <_printf_i+0x19e>
 800804a:	2310      	movs	r3, #16
 800804c:	e7ac      	b.n	8007fa8 <_printf_i+0xf4>
 800804e:	4827      	ldr	r0, [pc, #156]	@ (80080ec <_printf_i+0x238>)
 8008050:	e7e9      	b.n	8008026 <_printf_i+0x172>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	f023 0320 	bic.w	r3, r3, #32
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	e7f6      	b.n	800804a <_printf_i+0x196>
 800805c:	4616      	mov	r6, r2
 800805e:	e7bd      	b.n	8007fdc <_printf_i+0x128>
 8008060:	6833      	ldr	r3, [r6, #0]
 8008062:	6825      	ldr	r5, [r4, #0]
 8008064:	6961      	ldr	r1, [r4, #20]
 8008066:	1d18      	adds	r0, r3, #4
 8008068:	6030      	str	r0, [r6, #0]
 800806a:	062e      	lsls	r6, r5, #24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	d501      	bpl.n	8008074 <_printf_i+0x1c0>
 8008070:	6019      	str	r1, [r3, #0]
 8008072:	e002      	b.n	800807a <_printf_i+0x1c6>
 8008074:	0668      	lsls	r0, r5, #25
 8008076:	d5fb      	bpl.n	8008070 <_printf_i+0x1bc>
 8008078:	8019      	strh	r1, [r3, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	4616      	mov	r6, r2
 8008080:	e7bc      	b.n	8007ffc <_printf_i+0x148>
 8008082:	6833      	ldr	r3, [r6, #0]
 8008084:	1d1a      	adds	r2, r3, #4
 8008086:	6032      	str	r2, [r6, #0]
 8008088:	681e      	ldr	r6, [r3, #0]
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	2100      	movs	r1, #0
 800808e:	4630      	mov	r0, r6
 8008090:	f7f8 f8ee 	bl	8000270 <memchr>
 8008094:	b108      	cbz	r0, 800809a <_printf_i+0x1e6>
 8008096:	1b80      	subs	r0, r0, r6
 8008098:	6060      	str	r0, [r4, #4]
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	2300      	movs	r3, #0
 80080a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080a4:	e7aa      	b.n	8007ffc <_printf_i+0x148>
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	4632      	mov	r2, r6
 80080aa:	4649      	mov	r1, r9
 80080ac:	4640      	mov	r0, r8
 80080ae:	47d0      	blx	sl
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0ad      	beq.n	8008010 <_printf_i+0x15c>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	079b      	lsls	r3, r3, #30
 80080b8:	d413      	bmi.n	80080e2 <_printf_i+0x22e>
 80080ba:	68e0      	ldr	r0, [r4, #12]
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	4298      	cmp	r0, r3
 80080c0:	bfb8      	it	lt
 80080c2:	4618      	movlt	r0, r3
 80080c4:	e7a6      	b.n	8008014 <_printf_i+0x160>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4632      	mov	r2, r6
 80080ca:	4649      	mov	r1, r9
 80080cc:	4640      	mov	r0, r8
 80080ce:	47d0      	blx	sl
 80080d0:	3001      	adds	r0, #1
 80080d2:	d09d      	beq.n	8008010 <_printf_i+0x15c>
 80080d4:	3501      	adds	r5, #1
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	1a5b      	subs	r3, r3, r1
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dcf2      	bgt.n	80080c6 <_printf_i+0x212>
 80080e0:	e7eb      	b.n	80080ba <_printf_i+0x206>
 80080e2:	2500      	movs	r5, #0
 80080e4:	f104 0619 	add.w	r6, r4, #25
 80080e8:	e7f5      	b.n	80080d6 <_printf_i+0x222>
 80080ea:	bf00      	nop
 80080ec:	08008abc 	.word	0x08008abc
 80080f0:	08008acd 	.word	0x08008acd

080080f4 <__sflush_r>:
 80080f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fc:	0716      	lsls	r6, r2, #28
 80080fe:	4605      	mov	r5, r0
 8008100:	460c      	mov	r4, r1
 8008102:	d454      	bmi.n	80081ae <__sflush_r+0xba>
 8008104:	684b      	ldr	r3, [r1, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	dc02      	bgt.n	8008110 <__sflush_r+0x1c>
 800810a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd48      	ble.n	80081a2 <__sflush_r+0xae>
 8008110:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008112:	2e00      	cmp	r6, #0
 8008114:	d045      	beq.n	80081a2 <__sflush_r+0xae>
 8008116:	2300      	movs	r3, #0
 8008118:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800811c:	682f      	ldr	r7, [r5, #0]
 800811e:	6a21      	ldr	r1, [r4, #32]
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	d030      	beq.n	8008186 <__sflush_r+0x92>
 8008124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	0759      	lsls	r1, r3, #29
 800812a:	d505      	bpl.n	8008138 <__sflush_r+0x44>
 800812c:	6863      	ldr	r3, [r4, #4]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008132:	b10b      	cbz	r3, 8008138 <__sflush_r+0x44>
 8008134:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	4628      	mov	r0, r5
 8008140:	47b0      	blx	r6
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	d106      	bne.n	8008156 <__sflush_r+0x62>
 8008148:	6829      	ldr	r1, [r5, #0]
 800814a:	291d      	cmp	r1, #29
 800814c:	d82b      	bhi.n	80081a6 <__sflush_r+0xb2>
 800814e:	4a2a      	ldr	r2, [pc, #168]	@ (80081f8 <__sflush_r+0x104>)
 8008150:	410a      	asrs	r2, r1
 8008152:	07d6      	lsls	r6, r2, #31
 8008154:	d427      	bmi.n	80081a6 <__sflush_r+0xb2>
 8008156:	2200      	movs	r2, #0
 8008158:	6062      	str	r2, [r4, #4]
 800815a:	04d9      	lsls	r1, r3, #19
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	6022      	str	r2, [r4, #0]
 8008160:	d504      	bpl.n	800816c <__sflush_r+0x78>
 8008162:	1c42      	adds	r2, r0, #1
 8008164:	d101      	bne.n	800816a <__sflush_r+0x76>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	b903      	cbnz	r3, 800816c <__sflush_r+0x78>
 800816a:	6560      	str	r0, [r4, #84]	@ 0x54
 800816c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800816e:	602f      	str	r7, [r5, #0]
 8008170:	b1b9      	cbz	r1, 80081a2 <__sflush_r+0xae>
 8008172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008176:	4299      	cmp	r1, r3
 8008178:	d002      	beq.n	8008180 <__sflush_r+0x8c>
 800817a:	4628      	mov	r0, r5
 800817c:	f7ff fbd4 	bl	8007928 <_free_r>
 8008180:	2300      	movs	r3, #0
 8008182:	6363      	str	r3, [r4, #52]	@ 0x34
 8008184:	e00d      	b.n	80081a2 <__sflush_r+0xae>
 8008186:	2301      	movs	r3, #1
 8008188:	4628      	mov	r0, r5
 800818a:	47b0      	blx	r6
 800818c:	4602      	mov	r2, r0
 800818e:	1c50      	adds	r0, r2, #1
 8008190:	d1c9      	bne.n	8008126 <__sflush_r+0x32>
 8008192:	682b      	ldr	r3, [r5, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0c6      	beq.n	8008126 <__sflush_r+0x32>
 8008198:	2b1d      	cmp	r3, #29
 800819a:	d001      	beq.n	80081a0 <__sflush_r+0xac>
 800819c:	2b16      	cmp	r3, #22
 800819e:	d11e      	bne.n	80081de <__sflush_r+0xea>
 80081a0:	602f      	str	r7, [r5, #0]
 80081a2:	2000      	movs	r0, #0
 80081a4:	e022      	b.n	80081ec <__sflush_r+0xf8>
 80081a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081aa:	b21b      	sxth	r3, r3
 80081ac:	e01b      	b.n	80081e6 <__sflush_r+0xf2>
 80081ae:	690f      	ldr	r7, [r1, #16]
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	d0f6      	beq.n	80081a2 <__sflush_r+0xae>
 80081b4:	0793      	lsls	r3, r2, #30
 80081b6:	680e      	ldr	r6, [r1, #0]
 80081b8:	bf08      	it	eq
 80081ba:	694b      	ldreq	r3, [r1, #20]
 80081bc:	600f      	str	r7, [r1, #0]
 80081be:	bf18      	it	ne
 80081c0:	2300      	movne	r3, #0
 80081c2:	eba6 0807 	sub.w	r8, r6, r7
 80081c6:	608b      	str	r3, [r1, #8]
 80081c8:	f1b8 0f00 	cmp.w	r8, #0
 80081cc:	dde9      	ble.n	80081a2 <__sflush_r+0xae>
 80081ce:	6a21      	ldr	r1, [r4, #32]
 80081d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081d2:	4643      	mov	r3, r8
 80081d4:	463a      	mov	r2, r7
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b0      	blx	r6
 80081da:	2800      	cmp	r0, #0
 80081dc:	dc08      	bgt.n	80081f0 <__sflush_r+0xfc>
 80081de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e6:	81a3      	strh	r3, [r4, #12]
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f0:	4407      	add	r7, r0
 80081f2:	eba8 0800 	sub.w	r8, r8, r0
 80081f6:	e7e7      	b.n	80081c8 <__sflush_r+0xd4>
 80081f8:	dfbffffe 	.word	0xdfbffffe

080081fc <_fflush_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	690b      	ldr	r3, [r1, #16]
 8008200:	4605      	mov	r5, r0
 8008202:	460c      	mov	r4, r1
 8008204:	b913      	cbnz	r3, 800820c <_fflush_r+0x10>
 8008206:	2500      	movs	r5, #0
 8008208:	4628      	mov	r0, r5
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	b118      	cbz	r0, 8008216 <_fflush_r+0x1a>
 800820e:	6a03      	ldr	r3, [r0, #32]
 8008210:	b90b      	cbnz	r3, 8008216 <_fflush_r+0x1a>
 8008212:	f7ff fa35 	bl	8007680 <__sinit>
 8008216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f3      	beq.n	8008206 <_fflush_r+0xa>
 800821e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008220:	07d0      	lsls	r0, r2, #31
 8008222:	d404      	bmi.n	800822e <_fflush_r+0x32>
 8008224:	0599      	lsls	r1, r3, #22
 8008226:	d402      	bmi.n	800822e <_fflush_r+0x32>
 8008228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800822a:	f7ff fb4e 	bl	80078ca <__retarget_lock_acquire_recursive>
 800822e:	4628      	mov	r0, r5
 8008230:	4621      	mov	r1, r4
 8008232:	f7ff ff5f 	bl	80080f4 <__sflush_r>
 8008236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008238:	07da      	lsls	r2, r3, #31
 800823a:	4605      	mov	r5, r0
 800823c:	d4e4      	bmi.n	8008208 <_fflush_r+0xc>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	059b      	lsls	r3, r3, #22
 8008242:	d4e1      	bmi.n	8008208 <_fflush_r+0xc>
 8008244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008246:	f7ff fb41 	bl	80078cc <__retarget_lock_release_recursive>
 800824a:	e7dd      	b.n	8008208 <_fflush_r+0xc>

0800824c <fiprintf>:
 800824c:	b40e      	push	{r1, r2, r3}
 800824e:	b503      	push	{r0, r1, lr}
 8008250:	4601      	mov	r1, r0
 8008252:	ab03      	add	r3, sp, #12
 8008254:	4805      	ldr	r0, [pc, #20]	@ (800826c <fiprintf+0x20>)
 8008256:	f853 2b04 	ldr.w	r2, [r3], #4
 800825a:	6800      	ldr	r0, [r0, #0]
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	f000 f88f 	bl	8008380 <_vfiprintf_r>
 8008262:	b002      	add	sp, #8
 8008264:	f85d eb04 	ldr.w	lr, [sp], #4
 8008268:	b003      	add	sp, #12
 800826a:	4770      	bx	lr
 800826c:	20000020 	.word	0x20000020

08008270 <memmove>:
 8008270:	4288      	cmp	r0, r1
 8008272:	b510      	push	{r4, lr}
 8008274:	eb01 0402 	add.w	r4, r1, r2
 8008278:	d902      	bls.n	8008280 <memmove+0x10>
 800827a:	4284      	cmp	r4, r0
 800827c:	4623      	mov	r3, r4
 800827e:	d807      	bhi.n	8008290 <memmove+0x20>
 8008280:	1e43      	subs	r3, r0, #1
 8008282:	42a1      	cmp	r1, r4
 8008284:	d008      	beq.n	8008298 <memmove+0x28>
 8008286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800828a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800828e:	e7f8      	b.n	8008282 <memmove+0x12>
 8008290:	4402      	add	r2, r0
 8008292:	4601      	mov	r1, r0
 8008294:	428a      	cmp	r2, r1
 8008296:	d100      	bne.n	800829a <memmove+0x2a>
 8008298:	bd10      	pop	{r4, pc}
 800829a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800829e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082a2:	e7f7      	b.n	8008294 <memmove+0x24>

080082a4 <_sbrk_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d06      	ldr	r5, [pc, #24]	@ (80082c0 <_sbrk_r+0x1c>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	f7f8 fd1a 	bl	8000ce8 <_sbrk>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_sbrk_r+0x1a>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_sbrk_r+0x1a>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	2001f6b4 	.word	0x2001f6b4

080082c4 <abort>:
 80082c4:	b508      	push	{r3, lr}
 80082c6:	2006      	movs	r0, #6
 80082c8:	f000 fa2e 	bl	8008728 <raise>
 80082cc:	2001      	movs	r0, #1
 80082ce:	f7f8 fcaf 	bl	8000c30 <_exit>

080082d2 <_realloc_r>:
 80082d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d6:	4680      	mov	r8, r0
 80082d8:	4615      	mov	r5, r2
 80082da:	460c      	mov	r4, r1
 80082dc:	b921      	cbnz	r1, 80082e8 <_realloc_r+0x16>
 80082de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e2:	4611      	mov	r1, r2
 80082e4:	f7ff bb94 	b.w	8007a10 <_malloc_r>
 80082e8:	b92a      	cbnz	r2, 80082f6 <_realloc_r+0x24>
 80082ea:	f7ff fb1d 	bl	8007928 <_free_r>
 80082ee:	2400      	movs	r4, #0
 80082f0:	4620      	mov	r0, r4
 80082f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f6:	f000 fa33 	bl	8008760 <_malloc_usable_size_r>
 80082fa:	4285      	cmp	r5, r0
 80082fc:	4606      	mov	r6, r0
 80082fe:	d802      	bhi.n	8008306 <_realloc_r+0x34>
 8008300:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008304:	d8f4      	bhi.n	80082f0 <_realloc_r+0x1e>
 8008306:	4629      	mov	r1, r5
 8008308:	4640      	mov	r0, r8
 800830a:	f7ff fb81 	bl	8007a10 <_malloc_r>
 800830e:	4607      	mov	r7, r0
 8008310:	2800      	cmp	r0, #0
 8008312:	d0ec      	beq.n	80082ee <_realloc_r+0x1c>
 8008314:	42b5      	cmp	r5, r6
 8008316:	462a      	mov	r2, r5
 8008318:	4621      	mov	r1, r4
 800831a:	bf28      	it	cs
 800831c:	4632      	movcs	r2, r6
 800831e:	f7ff fad6 	bl	80078ce <memcpy>
 8008322:	4621      	mov	r1, r4
 8008324:	4640      	mov	r0, r8
 8008326:	f7ff faff 	bl	8007928 <_free_r>
 800832a:	463c      	mov	r4, r7
 800832c:	e7e0      	b.n	80082f0 <_realloc_r+0x1e>

0800832e <__sfputc_r>:
 800832e:	6893      	ldr	r3, [r2, #8]
 8008330:	3b01      	subs	r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	b410      	push	{r4}
 8008336:	6093      	str	r3, [r2, #8]
 8008338:	da08      	bge.n	800834c <__sfputc_r+0x1e>
 800833a:	6994      	ldr	r4, [r2, #24]
 800833c:	42a3      	cmp	r3, r4
 800833e:	db01      	blt.n	8008344 <__sfputc_r+0x16>
 8008340:	290a      	cmp	r1, #10
 8008342:	d103      	bne.n	800834c <__sfputc_r+0x1e>
 8008344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008348:	f000 b932 	b.w	80085b0 <__swbuf_r>
 800834c:	6813      	ldr	r3, [r2, #0]
 800834e:	1c58      	adds	r0, r3, #1
 8008350:	6010      	str	r0, [r2, #0]
 8008352:	7019      	strb	r1, [r3, #0]
 8008354:	4608      	mov	r0, r1
 8008356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835a:	4770      	bx	lr

0800835c <__sfputs_r>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	4614      	mov	r4, r2
 8008364:	18d5      	adds	r5, r2, r3
 8008366:	42ac      	cmp	r4, r5
 8008368:	d101      	bne.n	800836e <__sfputs_r+0x12>
 800836a:	2000      	movs	r0, #0
 800836c:	e007      	b.n	800837e <__sfputs_r+0x22>
 800836e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008372:	463a      	mov	r2, r7
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff ffda 	bl	800832e <__sfputc_r>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d1f3      	bne.n	8008366 <__sfputs_r+0xa>
 800837e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008380 <_vfiprintf_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	460d      	mov	r5, r1
 8008386:	b09d      	sub	sp, #116	@ 0x74
 8008388:	4614      	mov	r4, r2
 800838a:	4698      	mov	r8, r3
 800838c:	4606      	mov	r6, r0
 800838e:	b118      	cbz	r0, 8008398 <_vfiprintf_r+0x18>
 8008390:	6a03      	ldr	r3, [r0, #32]
 8008392:	b90b      	cbnz	r3, 8008398 <_vfiprintf_r+0x18>
 8008394:	f7ff f974 	bl	8007680 <__sinit>
 8008398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800839a:	07d9      	lsls	r1, r3, #31
 800839c:	d405      	bmi.n	80083aa <_vfiprintf_r+0x2a>
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	059a      	lsls	r2, r3, #22
 80083a2:	d402      	bmi.n	80083aa <_vfiprintf_r+0x2a>
 80083a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083a6:	f7ff fa90 	bl	80078ca <__retarget_lock_acquire_recursive>
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	071b      	lsls	r3, r3, #28
 80083ae:	d501      	bpl.n	80083b4 <_vfiprintf_r+0x34>
 80083b0:	692b      	ldr	r3, [r5, #16]
 80083b2:	b99b      	cbnz	r3, 80083dc <_vfiprintf_r+0x5c>
 80083b4:	4629      	mov	r1, r5
 80083b6:	4630      	mov	r0, r6
 80083b8:	f000 f938 	bl	800862c <__swsetup_r>
 80083bc:	b170      	cbz	r0, 80083dc <_vfiprintf_r+0x5c>
 80083be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083c0:	07dc      	lsls	r4, r3, #31
 80083c2:	d504      	bpl.n	80083ce <_vfiprintf_r+0x4e>
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	b01d      	add	sp, #116	@ 0x74
 80083ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ce:	89ab      	ldrh	r3, [r5, #12]
 80083d0:	0598      	lsls	r0, r3, #22
 80083d2:	d4f7      	bmi.n	80083c4 <_vfiprintf_r+0x44>
 80083d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083d6:	f7ff fa79 	bl	80078cc <__retarget_lock_release_recursive>
 80083da:	e7f3      	b.n	80083c4 <_vfiprintf_r+0x44>
 80083dc:	2300      	movs	r3, #0
 80083de:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e0:	2320      	movs	r3, #32
 80083e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ea:	2330      	movs	r3, #48	@ 0x30
 80083ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800859c <_vfiprintf_r+0x21c>
 80083f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083f4:	f04f 0901 	mov.w	r9, #1
 80083f8:	4623      	mov	r3, r4
 80083fa:	469a      	mov	sl, r3
 80083fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008400:	b10a      	cbz	r2, 8008406 <_vfiprintf_r+0x86>
 8008402:	2a25      	cmp	r2, #37	@ 0x25
 8008404:	d1f9      	bne.n	80083fa <_vfiprintf_r+0x7a>
 8008406:	ebba 0b04 	subs.w	fp, sl, r4
 800840a:	d00b      	beq.n	8008424 <_vfiprintf_r+0xa4>
 800840c:	465b      	mov	r3, fp
 800840e:	4622      	mov	r2, r4
 8008410:	4629      	mov	r1, r5
 8008412:	4630      	mov	r0, r6
 8008414:	f7ff ffa2 	bl	800835c <__sfputs_r>
 8008418:	3001      	adds	r0, #1
 800841a:	f000 80a7 	beq.w	800856c <_vfiprintf_r+0x1ec>
 800841e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008420:	445a      	add	r2, fp
 8008422:	9209      	str	r2, [sp, #36]	@ 0x24
 8008424:	f89a 3000 	ldrb.w	r3, [sl]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 809f 	beq.w	800856c <_vfiprintf_r+0x1ec>
 800842e:	2300      	movs	r3, #0
 8008430:	f04f 32ff 	mov.w	r2, #4294967295
 8008434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008438:	f10a 0a01 	add.w	sl, sl, #1
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008444:	931a      	str	r3, [sp, #104]	@ 0x68
 8008446:	4654      	mov	r4, sl
 8008448:	2205      	movs	r2, #5
 800844a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844e:	4853      	ldr	r0, [pc, #332]	@ (800859c <_vfiprintf_r+0x21c>)
 8008450:	f7f7 ff0e 	bl	8000270 <memchr>
 8008454:	9a04      	ldr	r2, [sp, #16]
 8008456:	b9d8      	cbnz	r0, 8008490 <_vfiprintf_r+0x110>
 8008458:	06d1      	lsls	r1, r2, #27
 800845a:	bf44      	itt	mi
 800845c:	2320      	movmi	r3, #32
 800845e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008462:	0713      	lsls	r3, r2, #28
 8008464:	bf44      	itt	mi
 8008466:	232b      	movmi	r3, #43	@ 0x2b
 8008468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800846c:	f89a 3000 	ldrb.w	r3, [sl]
 8008470:	2b2a      	cmp	r3, #42	@ 0x2a
 8008472:	d015      	beq.n	80084a0 <_vfiprintf_r+0x120>
 8008474:	9a07      	ldr	r2, [sp, #28]
 8008476:	4654      	mov	r4, sl
 8008478:	2000      	movs	r0, #0
 800847a:	f04f 0c0a 	mov.w	ip, #10
 800847e:	4621      	mov	r1, r4
 8008480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008484:	3b30      	subs	r3, #48	@ 0x30
 8008486:	2b09      	cmp	r3, #9
 8008488:	d94b      	bls.n	8008522 <_vfiprintf_r+0x1a2>
 800848a:	b1b0      	cbz	r0, 80084ba <_vfiprintf_r+0x13a>
 800848c:	9207      	str	r2, [sp, #28]
 800848e:	e014      	b.n	80084ba <_vfiprintf_r+0x13a>
 8008490:	eba0 0308 	sub.w	r3, r0, r8
 8008494:	fa09 f303 	lsl.w	r3, r9, r3
 8008498:	4313      	orrs	r3, r2
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	46a2      	mov	sl, r4
 800849e:	e7d2      	b.n	8008446 <_vfiprintf_r+0xc6>
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	1d19      	adds	r1, r3, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	9103      	str	r1, [sp, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	bfbb      	ittet	lt
 80084ac:	425b      	neglt	r3, r3
 80084ae:	f042 0202 	orrlt.w	r2, r2, #2
 80084b2:	9307      	strge	r3, [sp, #28]
 80084b4:	9307      	strlt	r3, [sp, #28]
 80084b6:	bfb8      	it	lt
 80084b8:	9204      	strlt	r2, [sp, #16]
 80084ba:	7823      	ldrb	r3, [r4, #0]
 80084bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80084be:	d10a      	bne.n	80084d6 <_vfiprintf_r+0x156>
 80084c0:	7863      	ldrb	r3, [r4, #1]
 80084c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c4:	d132      	bne.n	800852c <_vfiprintf_r+0x1ac>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	1d1a      	adds	r2, r3, #4
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	9203      	str	r2, [sp, #12]
 80084ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084d2:	3402      	adds	r4, #2
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085ac <_vfiprintf_r+0x22c>
 80084da:	7821      	ldrb	r1, [r4, #0]
 80084dc:	2203      	movs	r2, #3
 80084de:	4650      	mov	r0, sl
 80084e0:	f7f7 fec6 	bl	8000270 <memchr>
 80084e4:	b138      	cbz	r0, 80084f6 <_vfiprintf_r+0x176>
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	eba0 000a 	sub.w	r0, r0, sl
 80084ec:	2240      	movs	r2, #64	@ 0x40
 80084ee:	4082      	lsls	r2, r0
 80084f0:	4313      	orrs	r3, r2
 80084f2:	3401      	adds	r4, #1
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fa:	4829      	ldr	r0, [pc, #164]	@ (80085a0 <_vfiprintf_r+0x220>)
 80084fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008500:	2206      	movs	r2, #6
 8008502:	f7f7 feb5 	bl	8000270 <memchr>
 8008506:	2800      	cmp	r0, #0
 8008508:	d03f      	beq.n	800858a <_vfiprintf_r+0x20a>
 800850a:	4b26      	ldr	r3, [pc, #152]	@ (80085a4 <_vfiprintf_r+0x224>)
 800850c:	bb1b      	cbnz	r3, 8008556 <_vfiprintf_r+0x1d6>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	3307      	adds	r3, #7
 8008512:	f023 0307 	bic.w	r3, r3, #7
 8008516:	3308      	adds	r3, #8
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800851c:	443b      	add	r3, r7
 800851e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008520:	e76a      	b.n	80083f8 <_vfiprintf_r+0x78>
 8008522:	fb0c 3202 	mla	r2, ip, r2, r3
 8008526:	460c      	mov	r4, r1
 8008528:	2001      	movs	r0, #1
 800852a:	e7a8      	b.n	800847e <_vfiprintf_r+0xfe>
 800852c:	2300      	movs	r3, #0
 800852e:	3401      	adds	r4, #1
 8008530:	9305      	str	r3, [sp, #20]
 8008532:	4619      	mov	r1, r3
 8008534:	f04f 0c0a 	mov.w	ip, #10
 8008538:	4620      	mov	r0, r4
 800853a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800853e:	3a30      	subs	r2, #48	@ 0x30
 8008540:	2a09      	cmp	r2, #9
 8008542:	d903      	bls.n	800854c <_vfiprintf_r+0x1cc>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0c6      	beq.n	80084d6 <_vfiprintf_r+0x156>
 8008548:	9105      	str	r1, [sp, #20]
 800854a:	e7c4      	b.n	80084d6 <_vfiprintf_r+0x156>
 800854c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008550:	4604      	mov	r4, r0
 8008552:	2301      	movs	r3, #1
 8008554:	e7f0      	b.n	8008538 <_vfiprintf_r+0x1b8>
 8008556:	ab03      	add	r3, sp, #12
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	462a      	mov	r2, r5
 800855c:	4b12      	ldr	r3, [pc, #72]	@ (80085a8 <_vfiprintf_r+0x228>)
 800855e:	a904      	add	r1, sp, #16
 8008560:	4630      	mov	r0, r6
 8008562:	f3af 8000 	nop.w
 8008566:	4607      	mov	r7, r0
 8008568:	1c78      	adds	r0, r7, #1
 800856a:	d1d6      	bne.n	800851a <_vfiprintf_r+0x19a>
 800856c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800856e:	07d9      	lsls	r1, r3, #31
 8008570:	d405      	bmi.n	800857e <_vfiprintf_r+0x1fe>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	059a      	lsls	r2, r3, #22
 8008576:	d402      	bmi.n	800857e <_vfiprintf_r+0x1fe>
 8008578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857a:	f7ff f9a7 	bl	80078cc <__retarget_lock_release_recursive>
 800857e:	89ab      	ldrh	r3, [r5, #12]
 8008580:	065b      	lsls	r3, r3, #25
 8008582:	f53f af1f 	bmi.w	80083c4 <_vfiprintf_r+0x44>
 8008586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008588:	e71e      	b.n	80083c8 <_vfiprintf_r+0x48>
 800858a:	ab03      	add	r3, sp, #12
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	462a      	mov	r2, r5
 8008590:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <_vfiprintf_r+0x228>)
 8008592:	a904      	add	r1, sp, #16
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fc8d 	bl	8007eb4 <_printf_i>
 800859a:	e7e4      	b.n	8008566 <_vfiprintf_r+0x1e6>
 800859c:	08008aab 	.word	0x08008aab
 80085a0:	08008ab5 	.word	0x08008ab5
 80085a4:	00000000 	.word	0x00000000
 80085a8:	0800835d 	.word	0x0800835d
 80085ac:	08008ab1 	.word	0x08008ab1

080085b0 <__swbuf_r>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	460e      	mov	r6, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	4605      	mov	r5, r0
 80085b8:	b118      	cbz	r0, 80085c2 <__swbuf_r+0x12>
 80085ba:	6a03      	ldr	r3, [r0, #32]
 80085bc:	b90b      	cbnz	r3, 80085c2 <__swbuf_r+0x12>
 80085be:	f7ff f85f 	bl	8007680 <__sinit>
 80085c2:	69a3      	ldr	r3, [r4, #24]
 80085c4:	60a3      	str	r3, [r4, #8]
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	071a      	lsls	r2, r3, #28
 80085ca:	d501      	bpl.n	80085d0 <__swbuf_r+0x20>
 80085cc:	6923      	ldr	r3, [r4, #16]
 80085ce:	b943      	cbnz	r3, 80085e2 <__swbuf_r+0x32>
 80085d0:	4621      	mov	r1, r4
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 f82a 	bl	800862c <__swsetup_r>
 80085d8:	b118      	cbz	r0, 80085e2 <__swbuf_r+0x32>
 80085da:	f04f 37ff 	mov.w	r7, #4294967295
 80085de:	4638      	mov	r0, r7
 80085e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	6922      	ldr	r2, [r4, #16]
 80085e6:	1a98      	subs	r0, r3, r2
 80085e8:	6963      	ldr	r3, [r4, #20]
 80085ea:	b2f6      	uxtb	r6, r6
 80085ec:	4283      	cmp	r3, r0
 80085ee:	4637      	mov	r7, r6
 80085f0:	dc05      	bgt.n	80085fe <__swbuf_r+0x4e>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f7ff fe01 	bl	80081fc <_fflush_r>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d1ed      	bne.n	80085da <__swbuf_r+0x2a>
 80085fe:	68a3      	ldr	r3, [r4, #8]
 8008600:	3b01      	subs	r3, #1
 8008602:	60a3      	str	r3, [r4, #8]
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	701e      	strb	r6, [r3, #0]
 800860c:	6962      	ldr	r2, [r4, #20]
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	429a      	cmp	r2, r3
 8008612:	d004      	beq.n	800861e <__swbuf_r+0x6e>
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	07db      	lsls	r3, r3, #31
 8008618:	d5e1      	bpl.n	80085de <__swbuf_r+0x2e>
 800861a:	2e0a      	cmp	r6, #10
 800861c:	d1df      	bne.n	80085de <__swbuf_r+0x2e>
 800861e:	4621      	mov	r1, r4
 8008620:	4628      	mov	r0, r5
 8008622:	f7ff fdeb 	bl	80081fc <_fflush_r>
 8008626:	2800      	cmp	r0, #0
 8008628:	d0d9      	beq.n	80085de <__swbuf_r+0x2e>
 800862a:	e7d6      	b.n	80085da <__swbuf_r+0x2a>

0800862c <__swsetup_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4b29      	ldr	r3, [pc, #164]	@ (80086d4 <__swsetup_r+0xa8>)
 8008630:	4605      	mov	r5, r0
 8008632:	6818      	ldr	r0, [r3, #0]
 8008634:	460c      	mov	r4, r1
 8008636:	b118      	cbz	r0, 8008640 <__swsetup_r+0x14>
 8008638:	6a03      	ldr	r3, [r0, #32]
 800863a:	b90b      	cbnz	r3, 8008640 <__swsetup_r+0x14>
 800863c:	f7ff f820 	bl	8007680 <__sinit>
 8008640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008644:	0719      	lsls	r1, r3, #28
 8008646:	d422      	bmi.n	800868e <__swsetup_r+0x62>
 8008648:	06da      	lsls	r2, r3, #27
 800864a:	d407      	bmi.n	800865c <__swsetup_r+0x30>
 800864c:	2209      	movs	r2, #9
 800864e:	602a      	str	r2, [r5, #0]
 8008650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	f04f 30ff 	mov.w	r0, #4294967295
 800865a:	e033      	b.n	80086c4 <__swsetup_r+0x98>
 800865c:	0758      	lsls	r0, r3, #29
 800865e:	d512      	bpl.n	8008686 <__swsetup_r+0x5a>
 8008660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008662:	b141      	cbz	r1, 8008676 <__swsetup_r+0x4a>
 8008664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008668:	4299      	cmp	r1, r3
 800866a:	d002      	beq.n	8008672 <__swsetup_r+0x46>
 800866c:	4628      	mov	r0, r5
 800866e:	f7ff f95b 	bl	8007928 <_free_r>
 8008672:	2300      	movs	r3, #0
 8008674:	6363      	str	r3, [r4, #52]	@ 0x34
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800867c:	81a3      	strh	r3, [r4, #12]
 800867e:	2300      	movs	r3, #0
 8008680:	6063      	str	r3, [r4, #4]
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f043 0308 	orr.w	r3, r3, #8
 800868c:	81a3      	strh	r3, [r4, #12]
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	b94b      	cbnz	r3, 80086a6 <__swsetup_r+0x7a>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800869c:	d003      	beq.n	80086a6 <__swsetup_r+0x7a>
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 f88b 	bl	80087bc <__smakebuf_r>
 80086a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086aa:	f013 0201 	ands.w	r2, r3, #1
 80086ae:	d00a      	beq.n	80086c6 <__swsetup_r+0x9a>
 80086b0:	2200      	movs	r2, #0
 80086b2:	60a2      	str	r2, [r4, #8]
 80086b4:	6962      	ldr	r2, [r4, #20]
 80086b6:	4252      	negs	r2, r2
 80086b8:	61a2      	str	r2, [r4, #24]
 80086ba:	6922      	ldr	r2, [r4, #16]
 80086bc:	b942      	cbnz	r2, 80086d0 <__swsetup_r+0xa4>
 80086be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086c2:	d1c5      	bne.n	8008650 <__swsetup_r+0x24>
 80086c4:	bd38      	pop	{r3, r4, r5, pc}
 80086c6:	0799      	lsls	r1, r3, #30
 80086c8:	bf58      	it	pl
 80086ca:	6962      	ldrpl	r2, [r4, #20]
 80086cc:	60a2      	str	r2, [r4, #8]
 80086ce:	e7f4      	b.n	80086ba <__swsetup_r+0x8e>
 80086d0:	2000      	movs	r0, #0
 80086d2:	e7f7      	b.n	80086c4 <__swsetup_r+0x98>
 80086d4:	20000020 	.word	0x20000020

080086d8 <_raise_r>:
 80086d8:	291f      	cmp	r1, #31
 80086da:	b538      	push	{r3, r4, r5, lr}
 80086dc:	4605      	mov	r5, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	d904      	bls.n	80086ec <_raise_r+0x14>
 80086e2:	2316      	movs	r3, #22
 80086e4:	6003      	str	r3, [r0, #0]
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086ee:	b112      	cbz	r2, 80086f6 <_raise_r+0x1e>
 80086f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086f4:	b94b      	cbnz	r3, 800870a <_raise_r+0x32>
 80086f6:	4628      	mov	r0, r5
 80086f8:	f000 f830 	bl	800875c <_getpid_r>
 80086fc:	4622      	mov	r2, r4
 80086fe:	4601      	mov	r1, r0
 8008700:	4628      	mov	r0, r5
 8008702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008706:	f000 b817 	b.w	8008738 <_kill_r>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d00a      	beq.n	8008724 <_raise_r+0x4c>
 800870e:	1c59      	adds	r1, r3, #1
 8008710:	d103      	bne.n	800871a <_raise_r+0x42>
 8008712:	2316      	movs	r3, #22
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	2001      	movs	r0, #1
 8008718:	e7e7      	b.n	80086ea <_raise_r+0x12>
 800871a:	2100      	movs	r1, #0
 800871c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008720:	4620      	mov	r0, r4
 8008722:	4798      	blx	r3
 8008724:	2000      	movs	r0, #0
 8008726:	e7e0      	b.n	80086ea <_raise_r+0x12>

08008728 <raise>:
 8008728:	4b02      	ldr	r3, [pc, #8]	@ (8008734 <raise+0xc>)
 800872a:	4601      	mov	r1, r0
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	f7ff bfd3 	b.w	80086d8 <_raise_r>
 8008732:	bf00      	nop
 8008734:	20000020 	.word	0x20000020

08008738 <_kill_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4d07      	ldr	r5, [pc, #28]	@ (8008758 <_kill_r+0x20>)
 800873c:	2300      	movs	r3, #0
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	4611      	mov	r1, r2
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	f7f8 fa63 	bl	8000c10 <_kill>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	d102      	bne.n	8008754 <_kill_r+0x1c>
 800874e:	682b      	ldr	r3, [r5, #0]
 8008750:	b103      	cbz	r3, 8008754 <_kill_r+0x1c>
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	bd38      	pop	{r3, r4, r5, pc}
 8008756:	bf00      	nop
 8008758:	2001f6b4 	.word	0x2001f6b4

0800875c <_getpid_r>:
 800875c:	f7f8 ba50 	b.w	8000c00 <_getpid>

08008760 <_malloc_usable_size_r>:
 8008760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008764:	1f18      	subs	r0, r3, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	bfbc      	itt	lt
 800876a:	580b      	ldrlt	r3, [r1, r0]
 800876c:	18c0      	addlt	r0, r0, r3
 800876e:	4770      	bx	lr

08008770 <__swhatbuf_r>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	460c      	mov	r4, r1
 8008774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008778:	2900      	cmp	r1, #0
 800877a:	b096      	sub	sp, #88	@ 0x58
 800877c:	4615      	mov	r5, r2
 800877e:	461e      	mov	r6, r3
 8008780:	da0d      	bge.n	800879e <__swhatbuf_r+0x2e>
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008788:	f04f 0100 	mov.w	r1, #0
 800878c:	bf14      	ite	ne
 800878e:	2340      	movne	r3, #64	@ 0x40
 8008790:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008794:	2000      	movs	r0, #0
 8008796:	6031      	str	r1, [r6, #0]
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	b016      	add	sp, #88	@ 0x58
 800879c:	bd70      	pop	{r4, r5, r6, pc}
 800879e:	466a      	mov	r2, sp
 80087a0:	f000 f848 	bl	8008834 <_fstat_r>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	dbec      	blt.n	8008782 <__swhatbuf_r+0x12>
 80087a8:	9901      	ldr	r1, [sp, #4]
 80087aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087b2:	4259      	negs	r1, r3
 80087b4:	4159      	adcs	r1, r3
 80087b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087ba:	e7eb      	b.n	8008794 <__swhatbuf_r+0x24>

080087bc <__smakebuf_r>:
 80087bc:	898b      	ldrh	r3, [r1, #12]
 80087be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087c0:	079d      	lsls	r5, r3, #30
 80087c2:	4606      	mov	r6, r0
 80087c4:	460c      	mov	r4, r1
 80087c6:	d507      	bpl.n	80087d8 <__smakebuf_r+0x1c>
 80087c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	2301      	movs	r3, #1
 80087d2:	6163      	str	r3, [r4, #20]
 80087d4:	b003      	add	sp, #12
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d8:	ab01      	add	r3, sp, #4
 80087da:	466a      	mov	r2, sp
 80087dc:	f7ff ffc8 	bl	8008770 <__swhatbuf_r>
 80087e0:	9f00      	ldr	r7, [sp, #0]
 80087e2:	4605      	mov	r5, r0
 80087e4:	4639      	mov	r1, r7
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff f912 	bl	8007a10 <_malloc_r>
 80087ec:	b948      	cbnz	r0, 8008802 <__smakebuf_r+0x46>
 80087ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f2:	059a      	lsls	r2, r3, #22
 80087f4:	d4ee      	bmi.n	80087d4 <__smakebuf_r+0x18>
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	f043 0302 	orr.w	r3, r3, #2
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	e7e2      	b.n	80087c8 <__smakebuf_r+0xc>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	6020      	str	r0, [r4, #0]
 8008806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008812:	b15b      	cbz	r3, 800882c <__smakebuf_r+0x70>
 8008814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008818:	4630      	mov	r0, r6
 800881a:	f000 f81d 	bl	8008858 <_isatty_r>
 800881e:	b128      	cbz	r0, 800882c <__smakebuf_r+0x70>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	431d      	orrs	r5, r3
 8008830:	81a5      	strh	r5, [r4, #12]
 8008832:	e7cf      	b.n	80087d4 <__smakebuf_r+0x18>

08008834 <_fstat_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	@ (8008854 <_fstat_r+0x20>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	f7f8 fa29 	bl	8000c98 <_fstat>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d102      	bne.n	8008850 <_fstat_r+0x1c>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b103      	cbz	r3, 8008850 <_fstat_r+0x1c>
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	2001f6b4 	.word	0x2001f6b4

08008858 <_isatty_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d06      	ldr	r5, [pc, #24]	@ (8008874 <_isatty_r+0x1c>)
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	f7f8 fa28 	bl	8000cb8 <_isatty>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_isatty_r+0x1a>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_isatty_r+0x1a>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	2001f6b4 	.word	0x2001f6b4

08008878 <_init>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	bf00      	nop
 800887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887e:	bc08      	pop	{r3}
 8008880:	469e      	mov	lr, r3
 8008882:	4770      	bx	lr

08008884 <_fini>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	bf00      	nop
 8008888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888a:	bc08      	pop	{r3}
 800888c:	469e      	mov	lr, r3
 800888e:	4770      	bx	lr
